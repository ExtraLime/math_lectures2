text,start,stop
"In this lesson, we're going to write code
to delete a node from binary search tree.",00:00:00.659,00:00:04.940
"In most data structures deletion is
tricky.",00:00:04.940,00:00:08.440
"In case of binary search trees too, it's
not so straightforward.",00:00:08.440,00:00:12.339
"So let's first see what all
complications",00:00:12.339,00:00:15.619
"we may have while trying to delete a
node from binary search tree.",00:00:15.619,00:00:18.680
"I have drawn a binary search tree of
integers here.",00:00:18.680,00:00:21.790
"As we know in a binary search tree for
each node",00:00:21.790,00:00:25.330
"value of all nodes in its left subtree
is lesser",00:00:25.330,00:00:28.720
"and value of all nodes right
subtree is greater.",00:00:28.720,00:00:32.399
"For example, in this tree if I'll pick this
node with value 5",00:00:32.399,00:00:37.219
"then we have 3 and 1 in its left
subtree which are lesser",00:00:37.219,00:00:41.140
"and we have 7 and 9 in its right
subtree",00:00:41.140,00:00:44.370
"which are greater, and you can pick any
other node in the tree and this property",00:00:44.370,00:00:48.530
"will be true else the tree is not a BST.
Now when we need to delete",00:00:48.530,00:00:53.420
"a node, this property must be conserved.
Let's try to delete some nodes from this",00:00:53.420,00:00:58.469
example tree and see if we can,00:00:58.469,00:01:00.620
"rearrange these things and conserve the
property of binary search tree or not.",00:01:00.620,00:01:04.809
What if I want to delete this node the,00:01:04.809,00:01:08.280
value 19. To delete a node from tree,00:01:08.280,00:01:11.469
"we need to do two things, we need to
remove to reference of the node",00:01:11.469,00:01:15.759
"from its parent so the node is detached
from the tree.",00:01:15.759,00:01:19.649
"Here we will cut this link we will
set right child of",00:01:19.649,00:01:24.210
"this node with value 17 as null
and the second thing that we need to do",00:01:24.210,00:01:28.960
is,00:01:28.960,00:01:29.430
"reclaim the memory allocated to the
node being deleted.",00:01:29.430,00:01:33.270
that is wipe off the node object from memory.,00:01:33.270,00:01:36.549
"This particular node with value 19 that
you're trying to delete here ",00:01:36.549,00:01:40.640
"is leaf node. It has no children and
even if we take this guy",00:01:40.640,00:01:45.250
out by simply cutting this link that is,00:01:45.250,00:01:48.710
"removing its reference from its parent
and then",00:01:48.710,00:01:51.920
"wiping it off from memory there is no
problem,",00:01:51.920,00:01:55.850
"property of binary search tree that for
each node value of nodes in left",00:01:55.850,00:02:00.060
"should be lesser and value of nodes in
right should be greater",00:02:00.060,00:02:03.369
"is conserved. So deleting a leaf node, a
node",00:02:03.369,00:02:07.020
"with no children is really easy. In this tree,
these four nodes with values",00:02:07.020,00:02:11.120
"1, 9, 13 and 19 are leaf nodes.",00:02:11.120,00:02:14.200
"To delete any of these, we just need to
cut the link",00:02:14.200,00:02:18.140
"and wipe off the node that is clear it
from memory.",00:02:18.140,00:02:21.930
"But what if we want to delete a non leaf
node,",00:02:21.930,00:02:25.180
"what if in this example we want to
delete this node with value 15,",00:02:25.180,00:02:29.590
I can't just cut this link because,00:02:29.590,00:02:32.610
"if I'll cut this link, we will detach not
just",00:02:32.610,00:02:35.890
"the node with value 15 but this
complete subtree.",00:02:35.890,00:02:39.280
"We have two more nodes in the subtree
we could have had",00:02:39.280,00:02:43.230
"a lot more. We need to make sure that all
other nodes",00:02:43.230,00:02:46.690
"except the node with value 15 that's been
deleted",00:02:46.690,00:02:49.970
remain in the tree. So what do we do now.,00:02:49.970,00:02:52.970
"This particular node that we're trying
to delete here has two children",00:02:52.970,00:02:57.290
"on two subtrees. I'll come back to case
of node with two children later",00:02:57.290,00:03:02.189
"because this is not so easy to crack.
What we want to discuss first",00:03:02.189,00:03:05.980
"is the case when node being deleted
would have",00:03:05.980,00:03:09.590
"only one child. If the not being deleted
would have only one child",00:03:09.590,00:03:14.230
like in this example this node with value 7,00:03:14.230,00:03:17.629
"this guy has only one child. This guy has
a right child but does not have left",00:03:17.629,00:03:21.700
child.,00:03:21.700,00:03:22.260
"For such a node what we can do is we can
link its parent",00:03:22.260,00:03:25.879
"to this only child, so the child",00:03:25.879,00:03:29.000
"and everything below the child we could
have some more nodes below 9 as well",00:03:29.000,00:03:33.310
"will remain attached to the tree and
only the node being deleted",00:03:33.310,00:03:37.519
"will be detached. Now we're not losing
any other node",00:03:37.519,00:03:40.970
"than the node with value 7. This is my
tree after the deletion.",00:03:40.970,00:03:45.140
"Is this still a binary search tree. Yes, it
is.",00:03:45.140,00:03:48.409
"Only the right subtree of Node with value
five has changed.",00:03:48.409,00:03:52.150
Earlier we had 7 and 9 in right subtree of 5,00:03:52.150,00:03:56.310
"and now we have 9 which is fine. What
if we were having some more nodes below",00:03:56.310,00:04:01.640
9.,00:04:01.640,00:04:02.340
"Here in this tree, i can have a node in left of
9",00:04:02.340,00:04:06.079
"and the value in this node has to be
lesser so than 12,",00:04:06.079,00:04:09.180
"greater than 5, greater than 7 and lesser than 9.",00:04:09.180,00:04:13.909
"We are left with only 1 choice. We can only
have 8 here,",00:04:13.909,00:04:17.660
"in right we can have something lesser
than 12 and greater than 5, 7 and",00:04:17.660,00:04:22.009
9,00:04:22.009,00:04:22.810
"all in our between 9 and 12. Okay
so if the original tree was this much",00:04:22.810,00:04:27.680
after deletion,00:04:27.680,00:04:29.160
"this is how my tree will look like. Okay
so are we good now.",00:04:29.160,00:04:33.220
"Is the tree in right a BST. Well yes, it is.",00:04:33.220,00:04:37.150
"When we are setting this node with
value 9 as right child of",00:04:37.150,00:04:40.400
"the node with value 5. We are basically
setting",00:04:40.400,00:04:43.710
"this particular subtree as right subtree
of the node with value 5.",00:04:43.710,00:04:49.030
Now this subtree is already in right of 5,00:04:49.030,00:04:52.130
"so value of all nodes in this subtree is
already",00:04:52.130,00:04:55.550
"greater than 5 and the subtree itself
of course is a binary search tree.",00:04:55.550,00:05:00.289
"Any subtree in a binary search tree
will also be a binary search tree,",00:05:00.289,00:05:04.729
"so even after deletion, even after the
re-arrangement",00:05:04.729,00:05:08.020
"property of the tree that for each node,
nodes in left",00:05:08.020,00:05:11.569
"should be lesser and nodes in right should
be greater in value",00:05:11.569,00:05:15.250
"is conserved. So this is what we need to
do to delete",00:05:15.250,00:05:18.830
"a node with just one child or a node
with just",00:05:18.830,00:05:22.100
"one subtree connect its parent to 
its only child",00:05:22.100,00:05:26.289
"and then wipe it off from memory. There are
only two nodes in this tree",00:05:26.289,00:05:30.539
"that have only one child, let's try to
delete this",00:05:30.539,00:05:33.539
"other one with value 3. All we need to do
here is",00:05:33.539,00:05:37.500
set 1 as left child of 5.,00:05:37.500,00:05:41.050
"Once again if there were some more nodes
below 1,",00:05:41.050,00:05:44.220
"then also there was no issue. Okay so now
we're good for two cases, we good for",00:05:44.220,00:05:49.039
leaf nodes,00:05:49.039,00:05:50.419
"and we are good with nodes with just one
child",00:05:50.419,00:05:53.610
"and now we should think about the
third case, what if",00:05:53.610,00:05:56.620
"a node has two children, what should be
do in this case.",00:05:56.620,00:06:00.599
"Let's come back to this node value 15
that we were trying to delete",00:06:00.599,00:06:03.919
"earlier.With two children we can't do
something like",00:06:03.919,00:06:06.949
"connect parent to one of two children.
While trying to delete 15",00:06:06.949,00:06:10.970
if we will connect 12 to 13.,00:06:10.970,00:06:14.180
If we will make 13 to right child of 12,00:06:14.180,00:06:17.190
"then we will include 13 and anything
below 13",00:06:17.190,00:06:21.110
"that is we will include the left subtree
of",00:06:21.110,00:06:24.610
"15 but we will lose the right subtree a
15",00:06:24.610,00:06:28.770
that is 17 and anything below 17.,00:06:28.770,00:06:31.840
"Similarly, if we will make 17 the
right child",00:06:31.840,00:06:35.440
"then we will lose to left subtree of 15
that is 13 and",00:06:35.440,00:06:39.759
"anything below 13. Actually this case is
tricky",00:06:39.759,00:06:43.349
"and before I talk about a possible
solution, I want to insert some more",00:06:43.349,00:06:47.169
nodes here.,00:06:47.169,00:06:48.220
"I want to have some more node in subtrees
of 13 and 17",00:06:48.220,00:06:52.389
"the reason I'm inserting some more nodes
here is because",00:06:52.389,00:06:55.430
"I want to discuss a generic case and
that's why I want",00:06:55.430,00:06:58.940
"these two subtrees to have more than one
node.",00:06:58.940,00:07:02.650
"Okay coming back when I'm trying to
delete this node",00:07:02.650,00:07:05.789
"my intent basically is to remove this 
value 15 from the tree.",00:07:05.789,00:07:10.860
My delete function will have signature,00:07:10.860,00:07:14.180
"something like this. It will take pointer
reference to the root node",00:07:14.180,00:07:18.139
"and value to be deleted as argument. So
here,",00:07:18.139,00:07:21.470
"I am deleting this particular node because
I want to remove 15 from the tree.",00:07:21.470,00:07:26.340
"what I'm going to do now is something
with which I can reduce case 3",00:07:26.340,00:07:30.500
"to either case 1 or case 2. I'll wipe off
15 from this node",00:07:30.500,00:07:35.530
"and I'll fill in some other value in
this node. Ofcourse I can't fill in ",00:07:35.530,00:07:39.580
any random value.,00:07:39.580,00:07:40.940
"What I'll do is, I'll look for the minimum
in right subtree of this node",00:07:40.940,00:07:45.370
"and I'll fill in that value here. Minimum
in right subtree of this node is 17.",00:07:45.370,00:07:50.840
"So I have filled 17 here. We now have
two nodes with",00:07:50.840,00:07:55.210
value 17 but notice that this node,00:07:55.210,00:07:58.729
"has only one child. We can delete this
node",00:07:58.729,00:08:02.360
"because we know how to delete a node with
only one child",00:08:02.360,00:08:05.750
"and once this node is deleted my
tree will be good.",00:08:05.750,00:08:09.370
"The final arrangement will be a valid
arrangement for my BST,",00:08:09.370,00:08:13.530
"but why minimum in right subtree, why not
value in any other leaf node or any",00:08:13.530,00:08:18.650
other node with one child.,00:08:18.650,00:08:20.500
"Well we also need to conserve this
property that for each node,",00:08:20.500,00:08:24.639
"nodes left should have lesser
value nodes in right should have",00:08:24.639,00:08:27.720
greater value.,00:08:27.720,00:08:29.039
"For this node if I'm bringing in the
minimum from its right subtree",00:08:29.039,00:08:34.260
"then because I'm bringing in something
from its right subtree",00:08:34.260,00:08:37.930
"it will be greater and the previous
value 17 is greater than 15.",00:08:37.930,00:08:41.650
"So all the elements in left ofcourse
will be lesser",00:08:41.650,00:08:45.620
"and because it's the minimum in right
subtree,",00:08:45.620,00:08:48.630
"all the elements in right of this guy
would either be greater or",00:08:48.630,00:08:52.480
"equal.We will have a duplicate that
will be equal.",00:08:52.480,00:08:55.950
"Once the duplicate is removed everything
else will be fine.",00:08:55.950,00:08:59.510
"In a tree or subtree if a node has
minimum value",00:08:59.510,00:09:03.020
"it won't have a left child because if
they're is a left child",00:09:03.020,00:09:06.930
"there is something lesser and this is
another property that we're exploiting.",00:09:06.930,00:09:10.990
"Give this some thought. In a tree or
subtree node with minimum value",00:09:10.990,00:09:15.700
"will not happen left child, there may or
may not be a right child.",00:09:15.700,00:09:19.880
"If we would have a right child, like
here we have a right child.",00:09:19.880,00:09:23.680
So here we are reducing case 3 to case 2.,00:09:23.680,00:09:27.100
"If there was no child we would have
reduced case 3 to case 1.",00:09:27.100,00:09:32.100
"Okay so let's get rid of the duplicate.
I'll build a link like this",00:09:32.100,00:09:36.590
"and after deletion this is what my tree
will look like.",00:09:36.590,00:09:40.300
"So this is what we need to do in case
3, we need to find a minimum in right",00:09:40.300,00:09:44.240
subtree,00:09:44.240,00:09:45.160
"of targeted node then copy or fill in
this value",00:09:45.160,00:09:48.860
"and finally we need to delete the
duplicate or the node with",00:09:48.860,00:09:52.300
"minimum value from right subtree. There
was another possible approach here",00:09:52.300,00:09:57.100
"and I must talk about it. Instead of
going for minimum in right,",00:09:57.100,00:10:01.630
"we could also go far maximum any left
subtree.",00:10:01.630,00:10:05.320
Maximum left subtree would ofcourse be,00:10:05.320,00:10:08.620
"greater than our equal to all the values
in left,",00:10:08.620,00:10:13.220
"maximum left subtree of node with value
15 is 14.",00:10:13.220,00:10:17.400
"I'm copying 14 here. Now all the nodes in
left a lesser than equal to 14",00:10:17.400,00:10:22.780
"and because we're picking something from
left subtree it will still be lesser",00:10:22.780,00:10:26.460
than,00:10:26.460,00:10:27.040
"the value being deleted. 14 is less than
15. So all the nodes in this right",00:10:27.040,00:10:31.860
subtree will still be,00:10:31.860,00:10:33.410
"greater and if we're picking maximum
in a tree or subtree then",00:10:33.410,00:10:37.650
"that node will not have right child
because if we have something in right we",00:10:37.650,00:10:42.100
"have something greater,",00:10:42.100,00:10:43.560
"so the value can't be maximum. The node may
have left child.",00:10:43.560,00:10:47.190
"In this case a node with value 14
doesn't have a left child",00:10:47.190,00:10:52.150
"so we are basically reducing case 3 to case
1.",00:10:52.150,00:10:56.240
I'll simply get rid of this node.,00:10:56.240,00:10:58.959
"So we are looking good even after deletion.
In case 3,",00:10:58.959,00:11:02.380
"we can apply any of these
methods and this is all in logic part.",00:11:02.380,00:11:07.410
"Let's now  write called for this logic.
I'll write c++",00:11:07.410,00:11:11.600
"and we will use recursion if you're not
very comfortable applying recursion on trees",00:11:11.600,00:11:16.470
"then make sure you watch earlier lesson
in this series. You can find link to them",00:11:16.470,00:11:20.500
and description of this video.,00:11:20.500,00:11:21.890
In my  Code here i have defined node as,00:11:21.890,00:11:24.910
"a structure with three fields. We have 1
field to store data and we have 2 fields",00:11:24.910,00:11:29.810
that are pointers to node to ,00:11:29.810,00:11:31.490
"store addresses of left and right
children and I want",00:11:31.490,00:11:35.510
"to write a function named delete that
should take",00:11:35.510,00:11:38.519
"pointer to root node and the data to be
deleted as argument,",00:11:38.519,00:11:42.260
"and this function should return pointer to
root node",00:11:42.260,00:11:45.750
"because that root may change after
deletion. What we're passing to delete",00:11:45.750,00:11:49.610
function is only,00:11:49.610,00:11:50.490
"local copy of root's address. If the
address is changing",00:11:50.490,00:11:54.670
"we need to return it back. To delete a
given value or data to the first need to",00:11:54.670,00:11:59.200
"find it in the tree and once we find the
node containing",00:11:59.200,00:12:02.329
"that data, we can try to delete it.
Remember only identity of tree",00:12:02.329,00:12:06.250
"that we pass to functions is address
of the root node",00:12:06.250,00:12:10.160
"and to perform any action on the tree we
need to start at root.",00:12:10.160,00:12:13.829
"So let's first search for the node with
this data. First I'll cover a corner case.",00:12:13.829,00:12:19.000
"If the root is null that is if the tree
is empty,",00:12:19.000,00:12:22.430
"we can simply return. I can say return
root or return null here, they will mean the same",00:12:22.430,00:12:27.170
"because root is null, else if the data",00:12:27.170,00:12:30.240
"that we are looking for is less than
the data in root",00:12:30.240,00:12:33.579
"then its in the left subtree. The problem
can be reduced to deleting the data are",00:12:33.579,00:12:38.949
from left subtree.,00:12:38.949,00:12:40.269
"We need to go and find the data in left
subtree,",00:12:40.269,00:12:43.430
"so they can make a recursive call to
delete function passing address of",00:12:43.430,00:12:47.579
left child and the data to be deleted.,00:12:47.579,00:12:51.430
"Now the root of the left subtree that is
the left child of this",00:12:51.430,00:12:55.290
current node may change after deletion,00:12:55.290,00:12:58.490
"but the good thing is, the delete
function will return address of the",00:12:58.490,00:13:02.019
modified,00:13:02.019,00:13:02.860
"root of the left subtree. So we can
set the return as",00:13:02.860,00:13:06.829
left child of current node. Now,00:13:06.829,00:13:10.430
if data that we're trying to delete,00:13:10.430,00:13:14.399
"is greater than the data in root,",00:13:14.399,00:13:17.510
"we need to go and delete the data from
right subtree,",00:13:17.510,00:13:21.230
and if the data is neither greater,00:13:21.230,00:13:24.380
"nor lesser that is if it's equal then
we can try deleting the node containing",00:13:24.380,00:13:29.089
"that data. Now let's handle the 3
cases 1 by 1.",00:13:29.089,00:13:32.430
"If there is no child we can simply delete
that node",00:13:32.430,00:13:36.360
"what I'll do here is that first wipe off to
node from memory",00:13:36.360,00:13:40.110
"and this is how I'll do it. What we have in
root right now is address of",00:13:40.110,00:13:44.490
"to node to be deleted. I'm using to
delete operator here",00:13:44.490,00:13:48.130
"that's used to deallocate memory of
an object in heap.",00:13:48.130,00:13:51.829
In C you would use free function.,00:13:51.829,00:13:55.069
"Now root is a dangling pointer because
object in heap is deleted",00:13:55.069,00:13:59.250
but root still has its address. So,00:13:59.250,00:14:02.449
"we can set root as null, and now we can
return root.",00:14:02.449,00:14:06.920
"Reference of this node in its parent
will not be fixed here.",00:14:06.920,00:14:11.160
Once this recursive call finishes,00:14:11.160,00:14:14.620
"then somewhere in these 2 statement in
any of these two statements",00:14:14.620,00:14:18.630
"in any of these two else ifs the link
will be corrected.",00:14:18.630,00:14:22.310
"I hope this is making sense. Okay now
let's handle other cases.",00:14:22.310,00:14:26.310
"If only the left child is null then
what I want to do is",00:14:26.310,00:14:30.449
"I first want to store the address of
current node that I'm trying to delete",00:14:30.449,00:14:35.610
in a temporary pointer to node and now,00:14:35.610,00:14:39.209
"I want to move to root, this pointer
named",00:14:39.209,00:14:44.220
"root to the right child, so the right child
becomes",00:14:44.220,00:14:49.370
"the root of this subtree and now we can
delete",00:14:49.370,00:14:52.980
"the node that has been pointed to
by temp.",00:14:52.980,00:14:57.269
"We will use to delete operator. In C we would
be using free function.",00:14:57.269,00:15:01.699
"and now they can return root.Similarly
if the right child is null,",00:15:01.699,00:15:06.910
"I'll first store address of current
root in",00:15:06.910,00:15:10.329
"a temporary pointer to node then I'll make
the left child new root of the",00:15:10.329,00:15:13.920
subtree,00:15:13.920,00:15:14.500
"so we will move to the left child and then
I'll delete the previous",00:15:14.500,00:15:18.400
"root whose address I have in temp and
finally I'll return root.",00:15:18.400,00:15:23.020
"Actually we need to return root in
all cases, so i'll remove this",00:15:23.020,00:15:27.059
return statement,00:15:27.059,00:15:28.610
from our all these if and else if and,00:15:28.610,00:15:31.880
"write one return root after
everything.",00:15:31.880,00:15:35.510
"Let's talk about the 3rd now. In case
of two children",00:15:35.510,00:15:38.790
"what we need to do is, we need to
search for",00:15:38.790,00:15:42.059
"minimum element in right subtree of the
node that we're trying to delete.",00:15:42.059,00:15:45.880
"Let's say this function findmin will
you give me address of the node with",00:15:45.880,00:15:49.620
"minimum value in tree or subtree,",00:15:49.620,00:15:52.339
"so i'm calling this function findmin and
I'm collecting the return",00:15:52.339,00:15:56.029
"in a pointer to node named
temp.",00:15:56.029,00:16:00.010
"Now I should set the data in current
node that i am trying to delete",00:16:00.010,00:16:04.689
"as this minimum value and now the
problem is getting reduced to",00:16:04.689,00:16:10.020
"deleting this minimum value from the
right subtree of current node.",00:16:10.020,00:16:14.480
"With this much code I think I'm done with
delete function.",00:16:14.480,00:16:19.120
"This looks good to me. Let's quickly run
this code on an example tree and see if",00:16:19.120,00:16:23.319
this works or not.,00:16:23.319,00:16:24.540
"I have drawn a binary search tree here.
Let's say these values",00:16:24.540,00:16:27.760
"outside these nodes are addresses of the
nodes.",00:16:27.760,00:16:31.279
"Now I want to delete number 15 from
this tree,",00:16:31.279,00:16:34.880
"so I'll make a call to delete function
passing",00:16:34.880,00:16:38.189
"address of the root which is
200 and 15",00:16:38.189,00:16:41.949
"the value to be deleted. In delete
function for this particular call",00:16:41.949,00:16:46.899
"control will come to this line, a
recursive call will be made.",00:16:46.899,00:16:51.079
"Execution of this call delete 200 , 15
will",00:16:51.079,00:16:55.140
"pause and it will resume only after this
function below",00:16:55.140,00:16:58.800
"delete 350 , 15 returns.",00:16:58.800,00:17:01.860
"Now for this call below we'll go inside
the third else",00:17:01.860,00:17:05.809
"in case 3, here we will find with
minimum value in right ",00:17:05.809,00:17:09.899
"which is 17 which is 400, the
value is 17",00:17:09.899,00:17:13.720
"address is 400. First we will set the
data in node 350 as 17",00:17:13.720,00:17:18.649
"and we are making a recursive call
to delete 17 from",00:17:18.649,00:17:22.679
"right subtree of 350. We have only one
node in right subtree of 350.",00:17:22.679,00:17:27.149
"Here we have case 1. In this call will
simply delete the node at 400",00:17:27.149,00:17:32.300
"and return null. Remember root will be
returned in all calls",00:17:32.300,00:17:36.950
in the end.,00:17:36.950,00:17:38.740
"Now delete 350 , 15 will resume",00:17:38.740,00:17:41.670
"and in this resumed call, we will set
address of",00:17:41.670,00:17:45.220
right child of node at 350 as null.,00:17:45.220,00:17:48.310
"As you can see the link in parent is
being corrected,",00:17:48.310,00:17:51.710
"when the recursion is unfolding and the
function call",00:17:51.710,00:17:54.760
"corresponding to the parent is
resuming and now this guy can return,",00:17:54.760,00:17:59.360
"and now in this call, we will resume
at this line.",00:17:59.360,00:18:03.180
"So right child of node at 200 will
set as 350.",00:18:03.180,00:18:07.780
"It's already 350 but it will be written
again",00:18:07.780,00:18:10.980
"and now this call can also finish. So I
hope you got some",00:18:10.980,00:18:14.480
"sense of how this recursion is working.
You can find link to all the source",00:18:14.480,00:18:18.430
code,00:18:18.430,00:18:18.950
"and code to test the delete function
in description of this video.",00:18:18.950,00:18:22.940
"This is it for this lesson. 
Thanks for watching.",00:18:22.940,00:18:25.180

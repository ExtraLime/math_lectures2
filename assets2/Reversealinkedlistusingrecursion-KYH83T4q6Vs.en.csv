text,start,stop
"in our previous lesson we saw how we
can traverse",00:00:00.290,00:00:03.460
"a linked list using recursion we
wrote code",00:00:03.460,00:00:06.670
"to print the elements of linked list in
forward as well as reverse order",00:00:06.670,00:00:11.469
"using recursion we did not actually reverse
the list",00:00:11.469,00:00:14.710
"we just printed the elements in reverse
order now in this lesson we will",00:00:14.710,00:00:18.580
reverse,00:00:18.580,00:00:19.029
"a linked list using recursion and this
is yet",00:00:19.029,00:00:22.150
"another famous programming interview
question so if we have",00:00:22.150,00:00:26.029
"an input list like this we have linked
list of integers here",00:00:26.029,00:00:30.800
we have four nodes in the linked list,00:00:30.800,00:00:34.010
"each rectangular block here with two
partitions is a Node first field is",00:00:34.010,00:00:38.570
"to store the data and another to
store the address of the",00:00:38.570,00:00:42.230
"next node the second field stores the
address of the next node",00:00:42.230,00:00:45.530
"and of course we will have one variable
to store the",00:00:45.530,00:00:49.100
"address of the First node or head node we
name that variable head",00:00:49.100,00:00:53.910
"we may name it anything i have named it
head so this is our",00:00:53.910,00:00:57.329
"input list and after reversal our output
should be",00:00:57.329,00:01:01.140
"like this, this variable head should
store the address of",00:01:01.140,00:01:05.309
"the last node in the original list,
the last node in the original list",00:01:05.309,00:01:09.380
"was at address 250 and we will go like
from 250 to 150, 150 to 200",00:01:09.380,00:01:14.610
"200 to 100 and 100 to null, null is
nothing but",00:01:14.610,00:01:17.950
address zero,00:01:17.950,00:01:20.000
"we have already seen how we can
reverse a linked list",00:01:20.000,00:01:23.330
"using iterative method in one of
our previous lessons",00:01:23.330,00:01:27.300
"let us now see how we can solve this
problem using recursion",00:01:27.300,00:01:30.990
"in our solution we must reverse the
list by",00:01:30.990,00:01:35.100
"adjusting the links by reversing the
links",00:01:35.100,00:01:38.410
"not by moving around data or something
so let us first understand the logic",00:01:38.410,00:01:42.420
that we can use,00:01:42.420,00:01:43.720
"in our recursive approach if you remember
from our previous lesson",00:01:43.720,00:01:47.970
"where we had used recursion to print the
list backward",00:01:47.970,00:01:52.039
"print the elements in reverse order then
recursion gives us a Way",00:01:52.039,00:01:56.460
"to traverse the list backward in our C or C++
program.Programatically",00:01:56.460,00:02:02.070
"Node will be a structure like this so
let's first look at the",00:02:02.070,00:02:06.450
"function from the previous lesson the
recursive function that",00:02:06.450,00:02:09.660
"was used to print the list backward to
this function we passed the address of",00:02:09.660,00:02:14.410
a Node,00:02:14.410,00:02:15.019
"initially we pass the address of the head Node
and we have this",00:02:15.019,00:02:18.959
"exit condition if the address passed is
null",00:02:18.959,00:02:22.209
"then we simply return else we make a
recursive call and Pass the address of the",00:02:22.209,00:02:26.500
next,00:02:26.500,00:02:27.019
"Node so main method will typically call 
Reverseprint passing it the address of",00:02:27.019,00:02:31.630
"the head node and this guy will first make
a recursive call and then",00:02:31.630,00:02:35.590
"when this recursive call finishes
then only it will",00:02:35.590,00:02:38.760
"print so I'm writing RP as shortcut 
for ReversePrint",00:02:38.760,00:02:43.310
"so the recursion will go on like this and
when it reaches this particular call when",00:02:43.310,00:02:48.590
"argument is null it will return so this
call will finish and again the control will",00:02:48.590,00:02:53.820
come,00:02:53.820,00:02:54.290
"to this call with address 250 as
argument",00:02:54.290,00:02:58.160
and now we're printing the value ,00:02:58.160,00:03:01.980
"of the node at address 250 which will
be four",00:03:01.980,00:03:05.209
"and then this guy finishes and then we
go ahead and print five",00:03:05.209,00:03:10.030
"and similarly we then go on to print
six and two",00:03:10.030,00:03:14.950
"so recursion kind of gives us a way to
first",00:03:14.950,00:03:17.760
"traverse the list in the forward
direction and then",00:03:17.760,00:03:20.930
"traverse the list in the backward
direction so let us now see how we can",00:03:20.930,00:03:25.260
"implement reverse function using 
recursion",00:03:25.260,00:03:27.859
"let's say for the sake of simplicity
in implementation that",00:03:27.859,00:03:31.659
"head is a global variable so it is
accessible to all the functions",00:03:31.659,00:03:36.829
"now we will implement a function named 
reverse that will take",00:03:36.829,00:03:41.040
"the address of a node as argument
initially we will pass",00:03:41.040,00:03:45.209
"address of the head node to this
function now I want to do something like",00:03:45.209,00:03:49.150
this in my recursion I want to,00:03:49.150,00:03:51.019
"go on till the end, I want to go on",00:03:51.019,00:03:55.049
"making a recursive call till i reach
the last node, for the last node",00:03:55.049,00:03:59.950
"the link part will be null so this is my
exit condition from recursion",00:03:59.950,00:04:05.010
"on this exit condition is what will stop
us from going on infinitely in a",00:04:05.010,00:04:09.760
"recursion and what I'm doing here is
something very simple",00:04:09.760,00:04:13.379
"as soon as I'm reaching the last node
I'm modifying the",00:04:13.379,00:04:17.750
"head pointer to make it point to this
guy so the recursion will work like this",00:04:17.750,00:04:22.960
"from the main method we will call the
Reverse function passing it",00:04:22.960,00:04:26.479
"the address of the head node address 100
we will come and check this condition if",00:04:26.479,00:04:31.190
"P.next is equal to null, no it is
equal to 200 for",00:04:31.190,00:04:35.389
"the node at address 100 so this
recursion",00:04:35.389,00:04:38.599
"will go on till we reach this call,",00:04:38.599,00:04:42.030
call to Reverse passing it address 250,00:04:42.030,00:04:45.389
"and now we will come down and now we
have come to this exit condition and now",00:04:45.389,00:04:49.789
"head will be set as P and the list will
look like this",00:04:49.789,00:04:54.570
"and now Reverse(250), the call to Reverse(250)
will finish and we will come back to ",00:04:54.570,00:04:59.449
Reverse(150),00:04:59.449,00:05:00.360
their is no statement here after,00:05:00.360,00:05:03.490
"this recursive call to Reverse function
if there were some statements here",00:05:03.490,00:05:07.599
"then they would have executed now for 
Reverse(150) after we would have come",00:05:07.599,00:05:13.070
from Reverse(250),00:05:13.070,00:05:14.460
"and that's how we actually traverse the
list in",00:05:14.460,00:05:17.949
reverse order if you see when Reverse(250),00:05:17.949,00:05:22.099
has finished the Node till,00:05:22.099,00:05:25.570
"250 is already reversed because head is
pointing to this node and the link part of",00:05:25.570,00:05:30.469
this node,00:05:30.469,00:05:31.130
"is set as null so till 250 we are
already reversed",00:05:31.130,00:05:35.240
"now when we come to 150 we can make sure
the",00:05:35.240,00:05:38.729
"list is reversed till 150 when we
finish the execution of Reverse(150)",00:05:38.729,00:05:44.219
" to do that we can write
statement like this",00:05:44.219,00:05:48.060
"we will have to do two things we will
have to cut this node and make this",00:05:48.060,00:05:51.659
cut point to this guy,00:05:51.659,00:05:53.169
"so we will build this link and we would have
to cut this link",00:05:53.169,00:05:57.419
"and make this guy point to null and
that's how",00:05:57.419,00:06:01.570
"Node till address 150 will be
reversed after we finish this call",00:06:01.570,00:06:07.520
"so I have written these three lines in
my function that will execute",00:06:07.520,00:06:11.479
after the recursive call so,00:06:11.479,00:06:14.509
"they will execute when the the recursion is
folding up",00:06:14.509,00:06:17.939
"and we are traversing the list in the backward
direction",00:06:17.939,00:06:21.529
so when we are executing Reverse(150),00:06:21.529,00:06:25.339
"and we have come back to it after 
recursion we are at this particular line",00:06:25.339,00:06:29.610
so P would be 150 and q,00:06:29.610,00:06:32.879
"would be P.next so q would be
250 so this guy is",00:06:32.879,00:06:37.330
"p and this guy is q and we are saying that
set q.next is equal to",00:06:37.330,00:06:41.699
p so we will set this particular field,00:06:41.699,00:06:44.779
as 100 so we are building this link,00:06:44.779,00:06:48.479
"and cutting this link and now we are saying
that set",00:06:48.479,00:06:52.180
"p.next equal null so we are building
this link",00:06:52.180,00:06:56.300
"making p.next null and now this call
to Reverse(150) finishes",00:06:56.300,00:07:01.430
"and when this call has finished the
list",00:07:01.430,00:07:04.639
"till 150 is reversed as you can see
head is 250 so from 250 we will go to",00:07:04.639,00:07:10.399
"150 and from 150 we are going to
null",00:07:10.399,00:07:14.149
so till 150 we have a reversed list,00:07:14.149,00:07:17.750
"so this is how things will look like when the
call to Reverse(200) finishes",00:07:17.750,00:07:22.990
till 200 we have reversed list,00:07:22.990,00:07:26.480
"and once again we come to execution of
Reverse(100) and this is how things will",00:07:26.480,00:07:30.740
look like finally when,00:07:30.740,00:07:32.220
"Reverse(100) finish we will return back to
the main function",00:07:32.220,00:07:35.610
we had seen in the previous lesson that,00:07:35.610,00:07:38.820
"how things will happen in the memory
when recursion execute",00:07:38.820,00:07:42.240
"in recursion we save the state of
execution of all the function calls",00:07:42.240,00:07:47.070
"in stack section of the memory in
this function all we're doing is",00:07:47.070,00:07:51.100
"basically we are storing the addresses of
Node in a structure as we go forward",00:07:51.100,00:07:56.670
in recursion,00:07:56.670,00:07:57.480
and then we first work on the last,00:07:57.480,00:08:00.840
"Node to make it part of the reverse list
and then we once again come back to the",00:08:00.840,00:08:04.950
previous node,00:08:04.950,00:08:06.110
"and we keep doing this, watch the
previous lesson for detailed explanation",00:08:06.110,00:08:10.390
"and simulation of how things will happen
in the memory",00:08:10.390,00:08:13.030
for recursion,00:08:13.030,00:08:15.160
"there are couple of more things
here one thing is that",00:08:15.160,00:08:18.900
"instead of writing these two lines I
could write one line for these two lines",00:08:18.900,00:08:24.370
I could say something like p-&gt;next,00:08:24.370,00:08:27.710
"-&gt;next equal p and that would have
meant the same",00:08:27.710,00:08:31.990
"except that this statement is more of 
skated",00:08:31.990,00:08:35.450
"and there is one more thing we have
assumed that head is a global variable",00:08:35.450,00:08:39.070
what if head,00:08:39.070,00:08:40.060
"is not a global variable this Reverse
function will have to ",00:08:40.060,00:08:43.770
"return the address of the modified head I
leave that as an exercise for you to do",00:08:43.770,00:08:48.779
"so this was reversing a linked list
using recursion",00:08:48.779,00:08:52.270
thanks for watching,00:08:52.270,00:08:53.640

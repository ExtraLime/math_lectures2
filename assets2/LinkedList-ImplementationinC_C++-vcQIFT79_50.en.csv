text,start,stop
"In our previous lessons, 
we described linked list,",00:00:00.370,00:00:04.020
"we saw the cost of various operations in linked
list and we",00:00:04.020,00:00:08.280
also compared Linked List with arrays.,00:00:08.280,00:00:11.160
"Now, let us implement Linked List,
 the implementation will be",00:00:11.160,00:00:15.519
pretty similar in c and c++.,00:00:15.519,00:00:17.810
"there will be slight differences that we will
discuss.",00:00:17.810,00:00:22.110
"the prerequisite for this lesson is that you
should have a",00:00:22.110,00:00:24.750
"working knowledge of pointers in C/C++
and you should also know the concept of dynamic",00:00:24.750,00:00:31.080
memory allocation.,00:00:31.080,00:00:32.789
"If you want to refresh any of these concepts
check the",00:00:32.789,00:00:36.030
description of this video for additional resources.,00:00:36.030,00:00:39.739
"Ok so let's get started. As we know in a 
linked list, data is",00:00:39.739,00:00:45.109
"stored in multiple non-contiguous blocks of
memory",00:00:45.109,00:00:49.449
"and we call each block of memory a node in
the linked list.",00:00:49.449,00:00:52.850
"So Let me first draw a linked list here, so
we have a linked",00:00:52.850,00:00:57.899
"list of integers here with three nodes as
we know",00:00:57.899,00:01:01.339
"each node has two fields or two parts one
to store the data and",00:01:01.339,00:01:06.290
"another to store the address of the next node
what",00:01:06.290,00:01:09.510
we can also call link to the next node.,00:01:09.510,00:01:12.470
"So Let's say the address of the first node
is 200 and address of",00:01:12.470,00:01:17.050
"the second node is 100 and the address of
the third",00:01:17.050,00:01:19.690
"node is 300 for this linked list.
This is only a logical view of the linked",00:01:19.690,00:01:25.090
"list.So the address
part of the first node will be 100 and the",00:01:25.090,00:01:29.780
"address of the
second node will be 200 and we will have 300",00:01:29.780,00:01:32.240
here.,00:01:32.240,00:01:33.200
"The address part of the last node will be
null which is only a",00:01:33.200,00:01:36.950
synonym or macro for address 0.,00:01:36.950,00:01:40.170
"0 is an invalid address a pointer variable
equal to 0 or null",00:01:40.170,00:01:45.060
"with address 0 or null means
that the pointer variable does not point to",00:01:45.060,00:01:48.980
"a valid memory
location.",00:01:48.980,00:01:51.390
"The memory block the address of the memory
block allocated to",00:01:51.390,00:01:54.680
"each of the node is totally random, there
is no relation.",00:01:54.680,00:01:58.910
"Its not a guarantee that the addresses will
be in increasing",00:01:58.910,00:02:01.500
"order or decreasing order or adjacent to each
other.",00:02:01.500,00:02:04.820
"So that's why we need to keep these links.Now
the identity of",00:02:04.820,00:02:09.649
"the linked list that we always keep with us
is",00:02:09.649,00:02:12.790
"the address of the first node what we also
call the head node.",00:02:12.790,00:02:17.140
"So we keep another variable that will be of
type pointer to",00:02:17.140,00:02:21.680
"node and this guy will store the address of
the first node.",00:02:21.680,00:02:26.590
"And we can name this pointer variable whatever
lets say this",00:02:26.590,00:02:29.409
"pointer variable is named A.
The name of this particular pointer variable",00:02:29.409,00:02:33.120
"that points to the
head node or the first node can also be interpreted",00:02:33.120,00:02:37.590
"as the name
for the linked list also",00:02:37.590,00:02:40.620
"because this is the only identity of the linked
list that we",00:02:40.620,00:02:43.549
"keep with us all the time.
So let us now see how this logical view can",00:02:43.549,00:02:48.409
"be mapped to a real
program in C or C++.",00:02:48.409,00:02:53.379
"In our program node will be a data type that
will have two",00:02:53.379,00:02:56.939
"fields.one to store the data and another to
store the address.",00:02:56.939,00:03:02.290
"In C we can define such a datatype as structure,
so lets say we",00:03:02.290,00:03:07.810
"define a structure named node with two fields.
First field to store the data, the type of",00:03:07.810,00:03:14.810
"the data here is
integer so this will be node for a linked",00:03:15.560,00:03:19.260
list of integers.,00:03:19.260,00:03:20.700
"If we wanted a Linked List of say Double,
this data type would",00:03:20.700,00:03:25.659
"be double.
The second field will be pointer to node struct",00:03:25.659,00:03:29.900
"node*. We can
name this Link or we can name this next or",00:03:29.900,00:03:34.319
whatever,00:03:34.319,00:03:35.409
"This is C style of declaring node* or pointer
to node.If this",00:03:35.409,00:03:39.790
"was C++ we could simply write Node*.
I would write it this way the C++ way it looks",00:03:39.790,00:03:46.510
better to me.,00:03:46.510,00:03:47.749
"In our Logical view here this variable A is
of type Node* or",00:03:47.749,00:03:54.159
"pointer to node.
Each of these three rectangles with two fields",00:03:54.159,00:03:58.760
"are of type node
and this field in the node, the first field",00:03:58.760,00:04:05.319
"is of type integer
and second field is of type pointer to node",00:04:05.319,00:04:10.719
or Node*.,00:04:10.719,00:04:12.989
"It is important to note which one is what
in the logical view.",00:04:12.989,00:04:16.769
"We should have this visualization before we
go on to implement",00:04:16.769,00:04:20.660
Linked List.,00:04:20.660,00:04:22.639
"OK so Let us now create this particular Linked
List of Integer",00:04:22.639,00:04:26.780
"that we are showing here through our code.To
be able to do so",00:04:26.780,00:04:31.229
"we will have to implement two
operations one to insert a node into the Linked",00:04:31.229,00:04:36.770
List.,00:04:36.770,00:04:37.400
"One operation to insert a node in to Linked
List and another",00:04:37.400,00:04:40.169
"operation to traverse the Linked List.
But before that the first thing that we want",00:04:40.169,00:04:45.509
"to do is that we
want to declare a pointer to the head node,",00:04:45.509,00:04:49.479
"a variable that will store the address of
the head node.",00:04:49.479,00:04:52.490
"For the sake of clarity i will write head
node here.So I have",00:04:52.490,00:04:56.590
"declared a pointer to node named A.
Initially When the list is empty, when there",00:04:56.590,00:05:03.199
"is no element in
the list. This pointer should point no where.",00:05:03.199,00:05:07.669
"So we write a statement something like A is
equal to Null to",00:05:07.669,00:05:12.370
"say this same.With these two statements what
we have done is",00:05:12.370,00:05:15.150
"we have created a pointer to node named A
and this pointer",00:05:15.150,00:05:19.430
points No-where so the list is empty.,00:05:19.430,00:05:22.240
"Now Lets say we want to insert a node in this
list so what we",00:05:22.240,00:05:25.740
"do is we first create a node.Creating a node
is nothing but",00:05:25.740,00:05:30.270
creating a memory block to store a node.,00:05:30.270,00:05:33.810
"In C we use the function malloc to create
a memory block as",00:05:33.810,00:05:39.190
"argument we pass the number of bytes that
we want in the block.",00:05:39.190,00:05:42.830
"So we say that give me a memory block that
will be equal to the",00:05:42.830,00:05:46.110
size of a node.,00:05:46.110,00:05:47.629
"So this call to malloc will create a memory
block.This is",00:05:47.629,00:05:54.129
"dynamically allocated memory,memory allocated
during runtime",00:05:54.129,00:05:57.090
"and
the only way to work with this kind of memory",00:05:57.090,00:06:00.530
"is through
reference to this memory location through",00:06:00.530,00:06:04.699
pointers.,00:06:04.699,00:06:05.370
"Let us assume that this memory block assigned
here is at",00:06:05.370,00:06:07.860
address 200.,00:06:07.860,00:06:09.090
"Now malloc returns a void pointer that gives
us the address of",00:06:09.090,00:06:13.580
"assigned memory block so we need to collect
it in some",00:06:13.580,00:06:17.360
"variable.
Lets say we create a variable named temp which",00:06:17.360,00:06:20.740
"is pointer to
node so we can collect the return of malloc",00:06:20.740,00:06:24.919
"the address in this
particular",00:06:24.919,00:06:26.620
variable.,00:06:26.620,00:06:27.580
"We will need a type casting here because malloc
returns void",00:06:27.580,00:06:30.159
"pointer and we are having temp as pointer
to node",00:06:30.159,00:06:34.930
So now we have created one node in the memory.,00:06:34.930,00:06:38.620
"Now what we need to do is fill in the data
in this particular",00:06:38.620,00:06:42.460
"node and adjust the links which will mean
writing the",00:06:42.460,00:06:46.460
"correct address in the variable A and the
link field of this",00:06:46.460,00:06:51.330
newly created node.,00:06:51.330,00:06:52.900
"To do so we will have to de-reference this
particular pointer",00:06:52.900,00:06:56.169
variable that we just created.,00:06:56.169,00:06:59.319
"As we know if we put a * sign in front of
the pointer",00:06:59.319,00:07:03.020
"variable.We mean de-referencing it to modify
the value at that",00:07:03.020,00:07:08.180
"particular address.
Now in this case we have a node which has",00:07:08.180,00:07:11.310
"two fields,so once we
de-reference if we want to access each of",00:07:11.310,00:07:16.039
"the fields
we need to put something like a dot data here",00:07:16.039,00:07:19.860
"to access the
data and a dot link to write to the link field.",00:07:19.860,00:07:24.409
"So we will write a statement like this to
fill in value 2 here",00:07:24.409,00:07:28.979
"and we have this temp variable pointing to
this",00:07:28.979,00:07:31.930
"right now and link part of this newly created
node should be",00:07:31.930,00:07:36.229
"null because this is the first and the last
node.",00:07:36.229,00:07:42.439
"And the final thing that we need to do is
write the address of",00:07:42.439,00:07:45.960
this newly created node in A.,00:07:45.960,00:07:49.319
"So we will write something like A is equal
to temp. Ok temp was",00:07:49.319,00:07:54.189
"to temporarily store the address of the node
till the time we",00:07:54.189,00:07:57.830
"have
not fixed all the links properly. We can now",00:07:57.830,00:08:00.919
"use temp for some
other purpose.Our linked list is intact now",00:08:00.919,00:08:05.240
it has one node.,00:08:05.240,00:08:07.520
"These two lines that we have written here
for de-referencing",00:08:07.520,00:08:10.879
"and writing the value into the new node.There
is alternate",00:08:10.879,00:08:15.270
"syntax for this
Instead of writing something like *temp bracketed",00:08:15.270,00:08:20.330
"dot data we
could also write temp followed by this arrow",00:08:20.330,00:08:25.870
"and data.we will have two characters to make
this arrow one",00:08:25.870,00:08:29.919
hyphen and one this right angular brace.,00:08:29.919,00:08:35.070
"So we can write something like this.And same
thing below we can",00:08:35.070,00:08:38.409
"write something like this.To create a memory
block in C++ we",00:08:38.409,00:08:45.220
"can use malloc as well
as we can use the new operator.",00:08:45.220,00:08:48.760
"So in C++ it gets very simple.We could simply
write Node* temp",00:08:48.760,00:08:54.439
"= new Node like this and we would mean
the same thing. this is a lot cleaner and",00:08:54.439,00:09:01.250
"new operator is
always preferred over malloc. So if you are",00:09:01.250,00:09:05.700
"using C++ new is
recommended.",00:09:05.700,00:09:09.639
"So far through our program we created an empty
list by creating",00:09:09.639,00:09:13.649
"this pointer to the head node and assigning
the value null to",00:09:13.649,00:09:16.790
"it initially then
we created a node and we added first node",00:09:16.790,00:09:22.550
"in this linked
list.When the list is empty and we want to",00:09:22.550,00:09:25.790
"insert a node the
logic",00:09:25.790,00:09:27.220
is pretty straight forward.,00:09:27.220,00:09:29.070
"When the list is not empty we may want to
insert a node at the",00:09:29.070,00:09:32.860
"beginning of the list or we may want to insert
a node at",00:09:32.860,00:09:35.990
"the end of the list or we may even want to
insert a node",00:09:35.990,00:09:39.040
"somewhere in the middle of the list at a particular
position.",00:09:39.040,00:09:42.560
"we will write separate functions and routines
for these",00:09:42.560,00:09:46.420
"different kind of insertions and we will see
running code in a",00:09:46.420,00:09:50.680
"compiler in our coming lessons.
Lets just talk about the logic here in this",00:09:50.680,00:09:56.470
"whatever
unstructured code i have right now here.",00:09:56.470,00:09:59.500
"So i want to write a code to insert two more
nodes each time at",00:09:59.500,00:10:04.589
"the end of the list.we actually want to create
the",00:10:04.589,00:10:07.230
"linked list with three nodes having values
2,4 and 6 that was",00:10:07.230,00:10:13.240
our initial example in the beginning.,00:10:13.240,00:10:16.290
"Ok So let us add two more nodes with values
4 and 6 in to this",00:10:16.290,00:10:20.690
"linked list.At this stage in our code we already
have a",00:10:20.690,00:10:23.380
"variable temp which is
pointing to this particular node We will create",00:10:23.380,00:10:27.380
"a new node and
use the same variable name to collect the",00:10:27.380,00:10:31.410
"address of this new
node.",00:10:31.410,00:10:32.410
"So we will write a statement like this.So
a new node is created",00:10:32.410,00:10:35.380
"and temp now stores the address of this new
node which is",00:10:35.380,00:10:38.519
"located at
address 100 here.Once again you can set the",00:10:38.519,00:10:41.920
"data.And then
because this is going to be the last node",00:10:41.920,00:10:44.620
"we need to set the
link as null.",00:10:44.620,00:10:47.970
"Now all we need to do is to build the link
of this particular",00:10:47.970,00:10:50.620
"node,Write the address of this newly created
node in to the",00:10:50.620,00:10:54.430
"address field of
this last node.To do so we will have to traverse",00:10:54.430,00:10:58.269
"the list and
we will have to go to the end of the list,",00:10:58.269,00:11:01.480
"to do so we will
write something like this.",00:11:01.480,00:11:03.779
"We can create a new variable temp1 which will
be pointer to",00:11:03.779,00:11:07.589
"node and initially we can point this variable
to the head node",00:11:07.589,00:11:11.730
"by a statement like this.
we can write a loop like this. Now this is",00:11:11.730,00:11:16.209
"generic logic to
reach the end of the list.",00:11:16.209,00:11:18.899
"It will be not so clear if we see this logic
with only one node",00:11:18.899,00:11:22.480
"as we have in this example. Lets draw a list
with multiple",00:11:22.480,00:11:25.199
"nodes.
So we are pointing temp1 to the first node",00:11:25.199,00:11:28.040
"here and if the link
part of this node is null then we are at last",00:11:28.040,00:11:31.940
"node else we can
move to the next node.",00:11:31.940,00:11:35.180
"So temp1 equal to temp1-&gt; link will get us
to the next node.And",00:11:35.180,00:11:39.220
"we will go on till we reach the last node.
For the last node this particular condition",00:11:39.220,00:11:46.220
"temp1-&gt;link not
equal to null will be false because the link",00:11:46.230,00:11:50.949
"part will be null
and we will exit this while loop.",00:11:50.949,00:11:53.970
"So this is our code logic for traversal of
the list all the way",00:11:53.970,00:11:58.740
"till end.If we want to print the element in
the list we will",00:11:58.740,00:12:01.990
"write something like this, we will write
print temp-&gt;data inside the while loop.But",00:12:01.990,00:12:07.670
"right now we want to
insert at the end of the list and we are only",00:12:07.670,00:12:11.009
"traversing the
list to reach the last node.",00:12:11.009,00:12:13.949
"There is one more thing that i want to point
out, we are using",00:12:13.949,00:12:17.570
"this variable temp1 and initially storing
the address in A",00:12:17.570,00:12:21.529
"we are not doing something like A equal A.link
and using the",00:12:21.529,00:12:25.639
"variable A itself to traverse the list because
if we modify",00:12:25.639,00:12:29.490
A we will loose the address of the head node.,00:12:29.490,00:12:32.500
"So A is never modified, the address of the
head node whatever",00:12:32.500,00:12:35.360
"variable stores the address of the head node
is never",00:12:35.360,00:12:37.990
"modified.Only this temporary variables are
modified to traverse",00:12:37.990,00:12:41.449
"the list.So finally after all this we will
write a statement",00:12:41.449,00:12:45.139
"like this temp1 dot link
is equal to temp. temp1 is now pointing here",00:12:45.139,00:12:50.500
"so this address
part is updated and this link is built.",00:12:50.500,00:12:54.880
"So we have two nodes in the list Once again
if we want to",00:12:54.880,00:12:59.040
"insert node with number 6 in this list we
will have to create a",00:12:59.040,00:13:03.570
"new node by this
logic and then we will have to traverse the",00:13:03.570,00:13:07.139
"list by this
logic.So We will point temp1 here first.Then",00:13:07.139,00:13:11.560
"the loop will move
the temp1 to the end.",00:13:11.560,00:13:14.699
"Lets say this new block is at address 300.So
this Last line",00:13:14.699,00:13:17.839
"finally will adjust the link of the node at
address 100.To",00:13:17.839,00:13:22.259
"insert the node at the end
there is one logic in these four line if this",00:13:22.259,00:13:27.370
"list is empty and
another logic in these remaining lines if",00:13:27.370,00:13:31.720
list is not empty.,00:13:31.720,00:13:33.190
"Ideally, we will be writing all this logic
in a function. we will",00:13:33.190,00:13:39.019
"do that in our coming lessons. We will implement
a separate",00:13:39.019,00:13:42.339
"methods to print all
the element in the list or insert a node at",00:13:42.339,00:13:45.810
"the end or we will
implement a separate method to insert a node",00:13:45.810,00:13:49.889
"at beginning of
the list",00:13:49.889,00:13:51.459
"and at a particular position in the list.
This is all for this",00:13:51.459,00:13:54.769
lesson. Thanks for watching.,00:13:54.769,00:13:56.150

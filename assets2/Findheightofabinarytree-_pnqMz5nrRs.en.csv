text,start,stop
"In this lesson, we're going to write code
to find height",00:00:00.440,00:00:03.629
"or what we can also call maximum depth
of",00:00:03.629,00:00:06.730
"a binary tree. We have already discussed
depth",00:00:06.730,00:00:09.749
and height in our first introductory lesson,00:00:09.749,00:00:13.240
"on trees but I'll do a quick recap here.
First of all, I have drawn",00:00:13.240,00:00:17.590
"a binary tree here. I have not filled in any data 
the nodes.",00:00:17.590,00:00:21.030
"Data can be anything. Binary tree, as
we know is",00:00:21.030,00:00:24.280
"a tree in which each node can have
atmost 2 children.",00:00:24.280,00:00:27.890
"So a node can have 0 1 or 2
children.",00:00:27.890,00:00:31.300
"I'll just number these nodes so I can
refer to them.",00:00:31.300,00:00:34.499
"I'll say this root node is number one and
I'll go level by level from left to",00:00:34.499,00:00:39.390
"right, counting",00:00:39.390,00:00:40.239
"2, 3, 4 and so on. Now height of a
tree",00:00:40.239,00:00:45.379
"is defined as number of edges in 
longest path",00:00:45.379,00:00:49.800
from root to a leaf node.,00:00:49.800,00:00:53.929
"In this example tree, 4 6 7 8
and 9 are leaf nodes.",00:00:53.929,00:00:59.120
"A leaf node is a node with 0
children. Number of",00:00:59.120,00:01:02.769
"edges in longest path from root to a
leaf node",00:01:02.769,00:01:07.130
is 3. For both 8 and 9 number of edges in,00:01:07.130,00:01:11.100
path from root is 3. So,00:01:11.100,00:01:14.159
"height of the tree is 3. Actually
we can define height",00:01:14.159,00:01:18.259
of a node in the tree as number of,00:01:18.259,00:01:21.280
edges in longest path from that node,00:01:21.280,00:01:24.729
"to a leaf node, so height of a tree
basically is height of the root node.",00:01:24.729,00:01:29.600
"In this example tree, height of node 3",00:01:29.600,00:01:32.899
"is 1. Height of node 2 is 2 and
height of node 1",00:01:32.899,00:01:37.600
"is 3 and because this is the root
node, this is also the height of the tree.",00:01:37.600,00:01:42.450
"Height of leaf node would be 0,
so if a tree has only one node",00:01:42.450,00:01:48.320
"then the root node itself would be a
leaf node and so height of the tree",00:01:48.320,00:01:52.270
"would be 0. So this is definition
of height of",00:01:52.270,00:01:55.750
a tree. We often also talk about depth,00:01:55.750,00:01:58.920
"and we often confused between depth and
height but these 2 are different properties.",00:01:58.920,00:02:04.109
"depth of a node is defined as number of
edges in path",00:02:04.109,00:02:08.879
"from root to that node. Basically,",00:02:08.879,00:02:13.290
Depth is distance from root and height,00:02:13.290,00:02:16.599
"is distance from the best accessible
leaf node.",00:02:16.599,00:02:20.150
"For node 2 in this example tree, depth is
1 and height",00:02:20.150,00:02:24.209
"is 2. For node number 9 which is a
leaf node",00:02:24.209,00:02:27.989
"depth is 3 and height is 0. For
root node depth is 0",00:02:27.989,00:02:32.750
and height is 3. Height of a tree,00:02:32.750,00:02:37.099
"would be equal to maximum depth of any
node in the tree",00:02:37.099,00:02:40.590
"so height and max depth, these two
terms are used for each other.",00:02:40.590,00:02:45.470
"Okay, let's now see how we can calculate
height",00:02:45.470,00:02:48.590
or max depth of a binary tree.,00:02:48.590,00:02:51.879
I'm going to write a function named FindHeight,00:02:51.879,00:02:56.099
"that will take a reference or address of root
node as argument",00:02:56.099,00:03:00.230
"and return me the height of the binary
tree.",00:03:00.230,00:03:03.370
"Now the logic to calculate how it can be
something like this.",00:03:03.370,00:03:07.230
"For any node, if we can somehow calculate
the height of its left subtree",00:03:07.230,00:03:11.830
"and also the height of its right subtree
then the height of that node would be",00:03:11.830,00:03:16.890
"greater of the heights of left and right
subtrees",00:03:16.890,00:03:20.269
+ 1. For the root node in this tree,00:03:20.269,00:03:23.870
height of the left subtree is 2,00:03:23.870,00:03:27.040
"and height of the right subtree is 1,",00:03:27.040,00:03:30.140
"so height of the root node would be
greater of these 2 values",00:03:30.140,00:03:34.790
+ 1. + 1 for the edge,00:03:34.790,00:03:38.939
"connecting the root node to the subtree,
so",00:03:38.939,00:03:42.480
"height of the root node which would also
be the height of the tree",00:03:42.480,00:03:45.980
"is 3 here. In our code,",00:03:45.980,00:03:49.060
"we can calculate height of left and
right subtrees",00:03:49.060,00:03:52.200
"using recursion. What I'll do here in
FingHeight function is,",00:03:52.200,00:03:56.400
"I'll first make a recursive call to find
height of the left subtree.",00:03:56.400,00:04:01.340
We can say to find out if left subtree,00:04:01.340,00:04:04.659
"or to find height of left child both
will mean the same.",00:04:04.659,00:04:08.629
"I'm collecting the return of this recursive
call in a variable",00:04:08.629,00:04:12.409
"named left height and now I'll make
another recursive call",00:04:12.409,00:04:16.180
"to calculate height of right subtree
or right child.",00:04:16.180,00:04:20.329
"Now height of the tree or height of
whatever node for which we have",00:04:20.329,00:04:24.560
"made this function call would be greater of
these 2 values,",00:04:24.560,00:04:28.250
Left height and right height + 1.,00:04:28.250,00:04:31.759
"Now there is only one more thing missing
in this recursion. We need to write the base",00:04:31.759,00:04:35.789
or,00:04:35.789,00:04:36.380
"exit condition. We cannot go into the
recursion infinitely.",00:04:36.380,00:04:40.520
"What we can do is we can go on until we
make our to recursive call",00:04:40.520,00:04:44.860
"with root equal null and if the root
is null that is if the tree or sub tree",00:04:44.860,00:04:50.400
"is empty, we can return something.",00:04:50.400,00:04:53.600
"What should be done here. Give this some
thought.",00:04:53.600,00:04:56.600
"If I have made a call to find height of
let's say this leaf node this node",00:04:56.600,00:05:01.710
"with number 7 then for this guy both
left and right children are null.",00:05:01.710,00:05:06.190
"In call for this node number 7, we
will make two recursive calls",00:05:06.190,00:05:10.250
"passing null in both the call, so what
should we return.",00:05:10.250,00:05:14.569
"Should we return 0. If these 2 calls
will return 0",00:05:14.569,00:05:19.400
then height of 7 will be 1.,00:05:19.400,00:05:22.979
"Because in the return statement here, we're
saying max of left and right height",00:05:22.979,00:05:26.889
"+ 1. But as we had discussed earlier,
height of",00:05:26.889,00:05:30.060
"a leaf node should be 0. So if we are
returning 0",00:05:30.060,00:05:34.319
"for root equal null, it's not alright. What we
can do is, we can to return -1.",00:05:34.319,00:05:39.759
"When we are returning -1 then this edge
to null",00:05:39.759,00:05:44.130
that does not exist but still,00:05:44.130,00:05:47.889
"was getting counted will be balanced
with this -1.",00:05:47.889,00:05:51.979
"I hope this is making sense and going by
convention also height of an empty tree",00:05:51.979,00:05:57.440
is set to be -1.,00:05:57.440,00:06:00.450
"So this is pseudo code for my function
to find height of",00:06:00.450,00:06:03.400
"a binary tree. Some people define height
as number of node",00:06:03.400,00:06:07.440
"in longest path from root to a leaf node.
We are counting edges here",00:06:07.440,00:06:11.870
"and this is the right definition. If you
want to count number of nodes",00:06:11.870,00:06:16.050
then for a leaf node height would be 1,00:06:16.050,00:06:19.600
"and for empty tree height would be 0.
So all you need to do is return 0 here,",00:06:19.600,00:06:24.660
"and this is the code if you want to
contact number of nodes",00:06:24.660,00:06:28.340
"but I think the right definition is number of
edges so I'll",00:06:28.340,00:06:32.450
"return -1 here. Time complexity of this
function is",00:06:32.450,00:06:36.600
"O(N) where N is number of
nodes in the tree.",00:06:36.600,00:06:40.800
"We will make one recursive call
corresponding to each node in the tree,",00:06:40.800,00:06:44.680
"so we're kind of visiting each node in
the tree once",00:06:44.680,00:06:47.960
"and so running time will be
proportional to number of nodes.",00:06:47.960,00:06:51.260
"I'll skip the detailed analysis of running
time in this lesson.",00:06:51.260,00:06:54.550
"This is what my FineHeight function will
look like inn C or C++. ",00:06:54.550,00:06:59.250
"Max here is a function that the return
greater of two values passed to it as",00:06:59.250,00:07:04.450
arguments.,00:07:04.450,00:07:05.280
"So this is it for this lesson. Thanks for
watching.",00:07:05.280,00:07:08.380

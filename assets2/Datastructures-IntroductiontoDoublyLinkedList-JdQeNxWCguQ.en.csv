text,start,stop
"Hello everyone ! In our lessons in this series
so far, we have discussed linked list quite",00:00:00.290,00:00:05.380
a bit.,00:00:05.380,00:00:06.380
"We have seen how we can create a linked list
and how we can perform various operations",00:00:06.380,00:00:10.310
with linked list.,00:00:10.310,00:00:11.920
"Linked lists as we know are collections of
entities that we call Nodes.",00:00:11.920,00:00:17.370
"So far, in all our implementations, we have
created linked list in which each Node would",00:00:17.370,00:00:23.250
"contain two fields - one to store data and
another to store address of the next node.",00:00:23.250,00:00:30.830
"Lets say we have a linked list of integers
here.",00:00:30.830,00:00:32.800
"So, I'll fill in some values in data field
of each Node.",00:00:32.800,00:00:37.590
"Lets assume that these Nodes are at addresses
200, 250 and 350 respectively.",00:00:37.590,00:00:44.280
"I'll also fill in the address field in each
Node.",00:00:44.280,00:00:47.329
"The address field in first Node will be the
address of second node which is 250.",00:00:47.329,00:00:51.710
"The address field in second node will be address
of third node which is 350 and address part",00:00:51.710,00:00:57.510
in third Node will be 0 or Null.,00:00:57.510,00:01:00.310
"The identity of a linked list that we always
keep with us is the address of head Node or",00:01:00.310,00:01:05.420
reference to head Node.,00:01:05.420,00:01:07.320
"Lets say we have a variable named head only
to store the address of head node.",00:01:07.320,00:01:12.420
"Remember this variable named head is only
a pointer to the head Node.",00:01:12.420,00:01:16.080
"Ideally, we should have named this something
like head pointer.",00:01:16.080,00:01:19.540
"its only pointing to the head Node, its not
the head Node itself.",00:01:19.540,00:01:24.659
head Node is this guy.,00:01:24.659,00:01:26.840
The first node in the linked list.,00:01:26.840,00:01:28.820
"Ok, so right now, in the linked list that
we are showing here each node has only one",00:01:28.820,00:01:35.040
"link, a link to the next Node.",00:01:35.040,00:01:38.460
"In a real program, Node for the linked list
that I am showing here will be defined like",00:01:38.460,00:01:43.450
this.,00:01:43.450,00:01:44.450
"This is how we have defined Node so far in
all our lessons.",00:01:44.450,00:01:49.420
"We have two fields here - one of type integer
to store data and another of type pointer",00:01:49.420,00:01:54.910
to Node - struct Node asterisk.,00:01:54.910,00:01:58.400
I am calling this field next.,00:01:58.400,00:02:00.759
"When we say linked list, by default we mean
such a list that we can also call singly linked",00:02:00.759,00:02:07.030
list.,00:02:07.030,00:02:08.039
What we have here is a singly linked list.,00:02:08.039,00:02:10.929
"What we want to talk about in this lesson
is idea of a doubly linked list.",00:02:10.929,00:02:16.230
"The idea of a doubly linked list is really
simple.",00:02:16.230,00:02:19.739
"In a doubly linked list, each Node would have
two links - one to the next Node and another",00:02:19.739,00:02:26.969
to the previous Node.,00:02:26.969,00:02:29.459
"Programatically, this is how we will define
Node for a doubly linked list in C or C++.",00:02:29.459,00:02:35.290
"I have one more field here which once again
is a pointer to Node.",00:02:35.290,00:02:38.859
"So, I can store address of a Node. i can point
to another Node using this field and this",00:02:38.859,00:02:44.469
"field will be used to store the address of
the previous Node.",00:02:44.469,00:02:48.579
"In a logical representation, I will draw my
Node like this now.",00:02:48.579,00:02:52.209
"I have one field to store data, one to store
address of previous Node and one to store",00:02:52.209,00:02:59.910
address of next Node.,00:02:59.910,00:03:03.430
"Lets say I want to create a doubly linked
list of integers.",00:03:03.430,00:03:06.609
I have created 3 Nodes here.,00:03:06.609,00:03:08.559
"Lets say these nodes at addresses 400, 600
and 800 respectively.",00:03:08.559,00:03:14.309
I'll fill in some data.,00:03:14.309,00:03:16.609
"lets say the cell in the middle in each Node
is to store data.",00:03:16.609,00:03:21.709
"The rightmost cell is lets say to store the
address of the next Node.",00:03:21.709,00:03:26.510
"So, for first Node this field will be 600
which means we have a link like this.",00:03:26.510,00:03:34.150
"For second Node, this field will be 800.",00:03:34.150,00:03:36.639
"For third Node, this field will be zero.",00:03:36.639,00:03:39.829
"For first Node, there is no previous Node,
so this leftmost cell which is supposed to",00:03:39.829,00:03:45.459
"contain the address of the previous Node will
be zero or NULL.",00:03:45.459,00:03:49.709
"The previous Node for second Node will be
400 and the previous Node for the third Node",00:03:49.709,00:03:55.339
is the Node at address 600.,00:03:55.339,00:03:59.029
"And of course we will have a variable to store
the address of the head Node.",00:03:59.029,00:04:02.519
"Ok, so what we have here is a doubly linked
list of integers with 3 Nodes.",00:04:02.519,00:04:08.420
"Ok, so with this much, you already know doubly
linked list.",00:04:08.420,00:04:13.159
"If you have ever implemented a singly linked
list then it should not be very difficult",00:04:13.159,00:04:17.570
implementing a doubly linked list.,00:04:17.570,00:04:20.010
"One obvious question would be, why would we
ever want to create a doubly linked list.",00:04:20.010,00:04:25.980
"What are the advantages or use cases of doubly
linked list.",00:04:25.980,00:04:30.260
"First advantage is that now if we have pointer
to any Node, then we can do a forward as well",00:04:30.260,00:04:35.600
as reverse look-up.,00:04:35.600,00:04:37.280
"With just one pointer, we can look at the
current Node , the next Node as well as the",00:04:37.280,00:04:41.480
previous Node.,00:04:41.480,00:04:42.480
I am showing a pointer named temp here.,00:04:42.480,00:04:45.260
"If temp is a pointer pointing to a Node, then
temp-&gt;next is a pointer pointing to the next",00:04:45.260,00:04:50.970
Node.,00:04:50.970,00:04:51.970
"Its the address of the next Node and temp-&gt;prev
or rather temp arrow previous , this is actually",00:04:51.970,00:04:57.910
"a syntactical sugar for asterisk temp dot
prev.",00:04:57.910,00:05:02.690
"So, this guy temp-&gt;prev is previous Node Or
in pure words, pointer to previous Node.",00:05:02.690,00:05:10.860
"The value stored in temp for this example
right now is 600.",00:05:10.860,00:05:14.810
temp-&gt;next is 800 and temp-&gt;prev is 400.,00:05:14.810,00:05:21.180
"In a singly linked list, there is no way you
can look at the previous Node with just one",00:05:21.180,00:05:26.430
pointer.,00:05:26.430,00:05:27.430
"you will have to use an extra pointer to keep
track of the previous Node.",00:05:27.430,00:05:31.830
"In a lot of scenarios, the ability to look
at the previous Node makes our life easier.",00:05:31.830,00:05:37.120
"Even implementation of some of the operations
like deletion becomes a lot easier.",00:05:37.120,00:05:43.330
"In a singly linked list, to delete a Node,
you would need two pointer - one to the Node",00:05:43.330,00:05:48.530
"to be deleted and one to the previous Node.
but in a doubly linked list, we can do so",00:05:48.530,00:05:55.560
"using only one pointer, a pointer to the Node
to be deleted.",00:05:55.560,00:05:59.380
"All in all this ability that we can do a reverse
look-up in the linked list is really useful.",00:05:59.380,00:06:04.690
"We can flow through the linked list in both
directions.",00:06:04.690,00:06:07.620
"Disadvantage of doubly linked list is that
we are having to use extra memory for pointer",00:06:07.620,00:06:12.750
to previous Node.,00:06:12.750,00:06:14.150
"For a linked list of integers, lets say integer
takes 4 bytes in a typical architecture and",00:06:14.150,00:06:20.370
"pointer also takes 4 bytes, pointer variable
also takes 4 bytes, then in a singly linked",00:06:20.370,00:06:26.320
"list, each Node will be 8 bytes - 4 for data
and 4 for link to the next Node.",00:06:26.320,00:06:33.290
"In a doubly linked list, each Node will be
12 bytes.",00:06:33.290,00:06:36.670
"We will take 4 bytes for data and 8 bytes
for link.",00:06:36.670,00:06:41.360
"For a linked list of integers, we will take
twice for links than data.",00:06:41.360,00:06:46.910
"With a doubly linked list, we also need to
be more careful while resetting links, while",00:06:46.910,00:06:51.490
"inserting or deleting, we need to reset couple
of more links than a singly linked list and",00:06:51.490,00:06:58.060
so we are more prone to errors.,00:06:58.060,00:06:59.700
"We will implement doubly linked list in a
C program in next lesson.",00:06:59.700,00:07:04.000
"We will write basic basic operations like
traversal, insertion and deletion.",00:07:04.000,00:07:09.450
This is it for this lesson.,00:07:09.450,00:07:10.760
Thanks for watching !,00:07:10.760,00:07:11.560

text,start,stop
"In our previous lesson, we saw how we can
evaluate prefix and postfix expressions,",00:00:00.370,00:00:05.180
"now in this lesson we will see an efficient
algorithm to convert infix to postfix. We",00:00:05.180,00:00:10.639
"already know of one way of doing this. We
have seen how we can do this manually. To",00:00:10.639,00:00:15.820
"convert an infix expression to postfix, we
apply operator precedence, and associativity",00:00:15.820,00:00:21.920
"rules. Let's do the conversion for this expression
we have written here. The precedence of multiplication",00:00:21.920,00:00:27.750
"operator is higher. So, we will first convert
this part B*C. B*C will become BC*. The operator",00:00:27.750,00:00:34.750
"will come in front of the operands. Now, we
can do the conversion for this addition. For",00:00:37.989,00:00:42.280
"addition, the operands are A and this postfix
expression. In the final step we can get rid",00:00:42.280,00:00:49.109
"of all the parentheses. So, finally this is
my post fix expression.",00:00:49.109,00:00:53.909
"We can use this logic in a program also. But,
it will not be very efficient. And the implementation",00:00:53.909,00:00:59.670
"will also be somewhat complex. I am going
to talk about one algorithm which is really",00:00:59.670,00:01:04.300
"simple and efficient and in this algorithm
we need to parse the infix expression only",00:01:04.300,00:01:09.840
"once from left to right. And, we can create
the postfix expression. If you can see in",00:01:09.840,00:01:14.720
"infix to postfix conversion, the positions
of operands and operators, may change but",00:01:14.720,00:01:20.840
"the order in which operands occur from left
to right will not change. The order of operators",00:01:20.840,00:01:27.020
"may change. This is an important observation.
In both infix and postfix forms here, the",00:01:27.020,00:01:33.950
"order of operands as we go from left to right
is first we have A, then we have B and then",00:01:33.950,00:01:39.530
"we have C. But, the order of operators is
different. In infix, first we have + and then",00:01:39.530,00:01:46.530
"we have multiplication. In postfix, first
we have multiplication and then we have addition.",00:01:46.720,00:01:52.910
"In postfix form we will always have the operators
in the same order, in which they should be",00:01:52.910,00:01:57.730
"executed. I am going to perform this conversion
once again but this time I am going to use",00:01:57.730,00:02:02.600
"a different logic. What I will do is, I will
parse the infix expression from left to right.",00:02:02.600,00:02:08.190
"So, I will go from left to right, looking
at each token that will either be an operand",00:02:08.190,00:02:13.879
"or an operator. In this expression we will
start at A, A is an operand. If it's an operand",00:02:13.879,00:02:20.879
"we can simply append it in the postfix string
or expression that we are trying to create.",00:02:21.549,00:02:27.180
"At least for A it should be very clear that
this is nothing that can come before A. Okay,",00:02:27.180,00:02:31.939
"so the first rule is that if it's in operand,
we can simply put it in the postfix expression.",00:02:31.939,00:02:37.989
"Moving on, next we have an operator. We cannot
put the operator in the postfix expression,",00:02:37.989,00:02:43.499
"because we have not seen it's right operand
yet. While parsing we have seen only it's",00:02:43.499,00:02:49.090
"left operand. We can place it only after it's
right operand is also placed. So, what I am",00:02:49.090,00:02:56.090
"going to do is I am going to keep this operator
in a separate list or collection and place",00:02:56.260,00:03:01.790
"it later in the postfix expression when it
can be placed and the structure that I am",00:03:01.790,00:03:06.739
"going to use for storage is stack. A stack
is only a special kind of list in which whatever",00:03:06.739,00:03:12.959
"comes in last goes out first. Insertion and
deletion happen from the same end. I have",00:03:12.959,00:03:19.230
"pushed + operator onto the stack here. Moving
on, next we have B which is an operand. As",00:03:19.230,00:03:25.669
"we had said operand can simply be appended.
There is nothing that can come before this",00:03:25.669,00:03:30.529
"operand. The operator on the stack is anyway
waiting for the operand to come. Now at this",00:03:30.529,00:03:37.230
"stage, can we place the addition operator,
to the postfix string. Actually, what's after",00:03:37.230,00:03:43.349
"B also matters. In this case, we have this
multiplication operator after B, which has",00:03:43.349,00:03:49.099
"higher precedence and so the actual operand
for addition is this whole expression B*C.",00:03:49.099,00:03:55.169
"We cannot perform the addition until multiplication
is finished. So while parsing, when I am at",00:03:55.169,00:04:02.169
"B and I have not seen what's ahead of B, I
cannot decide the fate of the operator in",00:04:02.209,00:04:07.620
"the stack. So, let's just move on. Now, we
have this multiplication operator. I want",00:04:07.620,00:04:12.859
"to make this expression further complex to
explain things better. So, I am adding something",00:04:12.859,00:04:17.959
"at tail here in this expression. Now, I want
to convert this expression to postfix form.",00:04:17.959,00:04:23.199
"I am not having any parentheses here. We will
see how we can deal with parentheses later,",00:04:23.199,00:04:28.090
"let's look at an expression where parentheses
does not override operator precedence. Okay,",00:04:28.090,00:04:34.840
"so right now in this expression while parsing
from left to right, we are at this multiplication",00:04:34.840,00:04:39.550
"operator. The multiplication operator itself
cannot go into the postfix expression because",00:04:39.550,00:04:46.090
"we have not seen it's right operand yet. And,
until it's right operand is placed in the",00:04:46.090,00:04:50.770
"postfix expression, we cannot place it. The
operator that we would be looking at while",00:04:50.770,00:04:55.490
"parsing. That operator itself cannot be placed
right away. But, looking at that operator,",00:04:55.490,00:05:01.550
"we can decide whether something from the collection,
something from the stack can be placed into",00:05:01.550,00:05:06.990
"the postfix expression that we are constructing
or not. Any operator in the stack having higher",00:05:06.990,00:05:12.949
"precedence than the operator that we are looking
at, can be popped and placed into the postfix",00:05:12.949,00:05:19.530
"expression. Let's just follow this as rule
for now and I will explain it later. There",00:05:19.530,00:05:25.110
"is only one operator in the stack and It is
not having higher precedence than multiplication",00:05:25.110,00:05:30.789
"so we will not pop it and place it in the
postfix expression. Multiplication itself,",00:05:30.789,00:05:36.220
"will be pushed. If an element in the stack
has something on top of it, that something",00:05:36.220,00:05:41.530
"will always be of higher precedence. So, let's
move on in this expression now. Now, we are",00:05:41.530,00:05:46.669
"at C, which is an operand, so, it can simply
go. Next, we have an operator subtraction.",00:05:46.669,00:05:53.669
"Subtraction itself cannot go but as we had
said if there is anything on the stack having",00:05:54.650,00:06:00.669
"higher precedence than the operator that we
are looking at, it should be popped out and",00:06:00.669,00:06:05.939
"it should go and the question is why? We are
putting these operators on the stack, we are",00:06:05.939,00:06:11.150
"not placing them on the postfix expression
because we are not sure whether we are done",00:06:11.150,00:06:15.710
"with their right operand or not. But after
that operator, as soon as I am getting an",00:06:15.710,00:06:21.169
"operator of lower precedence, that marks the
boundary of the right operand. For this multiplication",00:06:21.169,00:06:27.150
"operator, C is my right operand. It's this
simple variable. For addition, B*C is my right",00:06:27.150,00:06:34.150
"operand because subtraction has lower precedence.
Anything on or after that cannot be part of",00:06:35.970,00:06:42.080
"my right operand. Subtraction, I should say
has lower priority because of the associativity",00:06:42.080,00:06:48.870
"rule. If you remember the order of operation,
addition and subtraction have same precedence",00:06:48.870,00:06:53.979
"but the one that would occur in left would
be given preference. So, the idea is anytime",00:06:53.979,00:07:00.270
"for an operator, if I am getting an operator
of lower priority, we can pop it from the",00:07:00.270,00:07:06.939
"stack and place it in the expression. Here,
we will first pop multiplication and place",00:07:06.939,00:07:12.250
"it and then we can pop addition and now we
will push subtraction onto the stack. Let's",00:07:12.250,00:07:19.250
"move on now. D is an operand. So, it will
simply go. Next we have, multiplication. There",00:07:20.020,00:07:26.969
"is nothing in the stack having higher precedence
than multiplication. So, we will pop nothing.",00:07:26.969,00:07:33.969
"Multiplication will go on to the stack. Next,
we have an operand. It will simply go. Now,",00:07:34.139,00:07:40.219
"there are two ways in which we can find the
end of the right operand for an operator.",00:07:40.219,00:07:45.129
"a is if we get an operator of lesser precedence,
b if we reach the end of the expression. Now,",00:07:45.129,00:07:51.749
"that we have reached end of the expression,
we can simply pop and place these operators.",00:07:51.749,00:07:56.379
"So, first multiplication will go and then
subtraction will go. Let's quickly write pseudo",00:07:56.379,00:08:03.120
"code for whatever I have said so far and then
you can sit with some examples and analyse",00:08:03.120,00:08:08.719
"the logic. I am going to write a function
named infix to postfix that will take a string",00:08:08.719,00:08:14.639
"exp for expression as argument. For the sake
of simplicity, lets assume that each operand",00:08:14.639,00:08:21.060
"or operator will be of one character only.
In an actual implementation you can assume",00:08:21.060,00:08:25.689
"them to be tokens of multiple characters.
So, in my pseudo code here, the first thing",00:08:25.689,00:08:31.499
"I will do is, to create a stack of characters
named S. Now, I will run a loop starting 0",00:08:31.499,00:08:38.499
"till length of expression -1. So, I am looking
at each character that can either be an operand",00:08:38.990,00:08:45.170
"or operator. If the character is an operand
we can append it to the postfix expression.",00:08:45.170,00:08:52.170
"Well, actually I should have declared and
initialized a string before this loop. This",00:08:52.200,00:08:58.889
"is the result string in which I shall be appending
else if exp[i] is operator, we need to look",00:08:58.889,00:09:05.889
"for operators in the stack having higher precedence.
So, I will say while stack is not empty, and",00:09:06.389,00:09:13.389
"top of stack has higher precedence. And let's
say this function HasHigherPrecedence will",00:09:13.480,00:09:18.980
"take two arguments, two operators. So, if
the top of Stack has higher precedence than",00:09:18.980,00:09:25.980
"the operator that we are looking at. We can
append the top of stack to the result which",00:09:26.000,00:09:31.810
"is the variable that will store the postfix
string. And, then we can pop that operator.",00:09:31.810,00:09:38.170
"I am assuming that this S is some class that
has these functions top and pop and empty",00:09:38.170,00:09:44.730
"to check whether it's empty or not. Finally,
once I am done with the popping, Outside this",00:09:44.730,00:09:49.990
"while loop I need to push the current operator.
S is an object of some class that will have",00:09:49.990,00:09:56.829
"these functions top, pop and empty. Okay,
so this is the end of my for loop. At the",00:09:56.829,00:10:03.130
"end of it, I may have some operators left
in the stack. I will pop these operators and",00:10:03.130,00:10:08.600
"append them to the postfix string. I will
use this while loop. I will say that while",00:10:08.600,00:10:13.690
"the stack is not empty, append the operator
at top and pop it. And, finally after this",00:10:13.690,00:10:20.690
"while loop I can return the result string
that will contain the postfix expression.",00:10:21.420,00:10:27.639
"So, this is my pseudo code for whatever logic
I have explained so far. In the logic, I have",00:10:27.639,00:10:33.230
"not taken care of parentheses. What if my
infix expression would have parentheses like",00:10:33.230,00:10:38.240
"this? Their will be slight change from what
we were doing previously. With, parentheses",00:10:38.240,00:10:43.940
"any part of the expression within parentheses
should be treated as independent complete",00:10:43.940,00:10:49.260
"expression in itself. And, no element outside
the parentheses will influence its execution.",00:10:49.260,00:10:56.260
"In this expression, this part A + B is within
one parentheses. It's execution will not be",00:10:56.430,00:11:02.730
"influenced by this multiplication or this
subtraction which is outside it. Similarly,",00:11:02.730,00:11:09.730
"this whole thing is within the outer parentheses.
So, this multiplication operator outside,",00:11:09.860,00:11:16.860
"will not have any influence on execution of
this part as a whole. If parentheses are nested,",00:11:17.220,00:11:24.220
"inner parentheses is sorted out or resolved
first,and then only outer parentheses can",00:11:24.790,00:11:29.220
"be resolved. With parentheses, we will have
some extra rules: we will still go from left",00:11:29.220,00:11:34.430
"to right and we will still use stack. And,
let's say I am going to write the postfix",00:11:34.430,00:11:40.630
"part in write here as I create it. Now, while
parsing, a token can be an operand or operator",00:11:40.630,00:11:47.630
"or an opening or closing of parentheses. I
will use some extra rules. I will first tell",00:11:48.120,00:11:54.389
"them and then I will explain. If it's an opening
parentheses, we can push it onto the stack.",00:11:54.389,00:12:00.050
"The first token here, is an opening parentheses.
So, it will be pushed onto the stack. And,",00:12:00.050,00:12:05.050
"then we will move on. We have an opening parentheses
once again, so once again we will push it.",00:12:05.050,00:12:10.269
"Now, we have an operand. There is no change
in rule for operand. It will simply be appended",00:12:10.269,00:12:15.680
"to the postfix part. Next, we have an operator.
Remember, what we were doing for operator",00:12:15.680,00:12:21.860
"earlier. We were looking at top of stack and
popping as long as we were getting operator",00:12:21.860,00:12:27.440
"of higher precedence. Earlier when we were
not using parentheses, we could go on popping",00:12:27.440,00:12:33.170
"and empty the stack. But, now we need to look
at top of stack and pop only till we get an",00:12:33.170,00:12:39.440
"opening parentheses. Because, if we are getting
an opening parentheses, then it's the boundary",00:12:39.440,00:12:44.990
"of the last opened parentheses and this operator
does not have any influence after that, outside",00:12:44.990,00:12:51.310
"that. So, this + operator does not have any
influence outside this opening parentheses.",00:12:51.310,00:12:57.449
"I will explain this scenario, with some more
examples later. Let's first understand the",00:12:57.449,00:13:02.420
"rules. So, the rule is, if I am seeing an
operator, I need to look at the top of stack.",00:13:02.420,00:13:07.600
"If it's an operator of higher precedence,
I can pop and then I should look at the next",00:13:07.600,00:13:12.680
"top. If it's once again an operator of higher
precedence, I should pop again. But, I should",00:13:12.680,00:13:17.370
"stop when I see an opening parentheses. At,
this stage we have an opening parentheses",00:13:17.370,00:13:22.930
"at top, so we do not need to look below it.
Nothing will be popped anyway. Addition however,",00:13:22.930,00:13:28.480
"will go on to the stack. Remember, after the
whole popping game, we push the operator itself.",00:13:28.480,00:13:33.860
"Next, we have an operand. It will go on, we
will move on. Next, we have a closing of parentheses.",00:13:33.860,00:13:40.790
"When I am getting a closing of parentheses,
I am getting a logical end of the last opened",00:13:40.790,00:13:45.940
"parentheses. For part of the expression, within
that parentheses, it's coming to the end.",00:13:45.940,00:13:51.259
"And, remember what we were doing earlier,
when we were reaching the end of infix expression,",00:13:51.259,00:13:55.949
"we were popping all the operators out and
placing them. So, this time also we need to",00:13:55.949,00:14:00.949
"pop the operators out, but only those operators
that are part of this parentheses that we",00:14:00.949,00:14:07.699
"are closing. So, we need to pop all the operators
until we get an opening parentheses. I am",00:14:07.699,00:14:13.449
"popping this + and appending it. Next, we
have an opening of parentheses, so I will",00:14:13.449,00:14:19.259
"stop. But, as last step I will pop this opening
also. Because, we are done for this parentheses.",00:14:19.259,00:14:25.110
"Okay, so the rule for closing a parentheses,
is pop until you are getting an opening parentheses",00:14:25.110,00:14:29.810
"and then finally pop that particular opening
parentheses also. Let's move on now. Next,",00:14:29.810,00:14:35.579
"we have an operator. We need to look at top
of stack. It's an opening of parentheses.",00:14:35.579,00:14:41.250
"This operator will simply be pushed. Next,
we have an operand. Next, we have an operator.",00:14:41.250,00:14:47.589
"Once again, we will look at the top. We have
multiplication, which is of higher precedence.",00:14:47.589,00:14:52.019
"So, this should be popped and appended. We
will look at the top again. Again, it's an",00:14:52.019,00:14:56.569
"opening of parentheses, so we should stop
looking now. '-' will be pushed now. Next,",00:14:56.569,00:15:02.120
"we have an operand. Next we have a closing
of parentheses. So, we need to pop until we",00:15:02.120,00:15:06.800
"get an opening. '-' will be appended. Finally,
the opening will also be popped. Next, we",00:15:06.800,00:15:12.220
"have an operator and this will simply go.
Next, we have an operand. And, now we have",00:15:12.220,00:15:17.509
"reached the end of expression. So, everything
in the stack will be popped and appended.",00:15:17.509,00:15:22.190
"So, this final is my postfix expression.
I will take one more example and convert it",00:15:22.190,00:15:27.779
"to make things further clear. I want to convert
this expression. I will start at the beginning.",00:15:27.779,00:15:32.579
"First, we have an operand. Then this multiplication
operator, which will simply go onto the stack.",00:15:32.579,00:15:38.819
"The stack right now, is empty. There is nothing
on the top to compare it with. Next, we have",00:15:38.819,00:15:43.569
"an opening parentheses which will simply go.
Next, we have an operand it will be appended",00:15:43.569,00:15:49.600
"and now we move on to this addition operator.
If this opening parentheses was not there,",00:15:49.600,00:15:54.819
"the top of stack would have been the multiplication
operator which has higher precedence. So,",00:15:54.819,00:15:59.920
"it would have been popped. But, now we will
look at the top and it's an opening parentheses.",00:15:59.920,00:16:05.079
"So, we cannot look below. And we will simply
have to move on. Next, we have C. I missed",00:16:05.079,00:16:11.620
"pushing the addition operator last time. Okay,
after C, I have this closure. So, we need",00:16:11.620,00:16:17.730
"to pop until we get an opening. And, then
we need to pop one opening also. Finally we",00:16:17.730,00:16:23.600
"have reached the end of expression. So, everything
in the stack will be popped and appended.",00:16:23.600,00:16:28.720
"So, this finally is my postfix part, postfix
form. In my pseudo code, that I had written",00:16:28.720,00:16:35.319
"earlier, only the part within this for loop
will change to take care of parentheses. In",00:16:35.319,00:16:42.319
"case we have an operator, we need to look
at top of the stack and pop but only till",00:16:43.629,00:16:49.149
"we are an getting opening parentheses. So,
I have put this extra condition in the while",00:16:49.149,00:16:53.399
"loop, this condition will ensure that we stop
once we get an opening parentheses. Right",00:16:53.399,00:16:59.199
"now, in the for loop we are dealing with operand
and operators, we will have two more conditions:",00:16:59.199,00:17:04.069
"If its an opening of parentheses, we should
push. Else, if it's a closure, we can go on",00:17:04.069,00:17:10.380
"popping and appending. Let's say this function
IsOpeningParentheses will check whether a",00:17:10.380,00:17:15.360
"character is opening of parentheses or not.
In fact we should use this function here also",00:17:15.360,00:17:20.230
"when I am checking whether current token is
opening or not. Because, it could be an opening",00:17:20.230,00:17:25.130
"curly brace or opening bracket also, this
function will then take care. Let's say this",00:17:25.130,00:17:30.570
"function will take care. And, similarly for
this last else if, we should use this function",00:17:30.570,00:17:35.409
"IsClosingParentheses. Okay, things are consistent
now. After this while loop in the last else",00:17:35.409,00:17:42.260
"if, we should do one extra pop. And, this
extra pop will pop the opening parentheses.",00:17:42.260,00:17:49.260
"And, now we are done with this else if. And,
this is closure of my for loop. Rest of the",00:17:49.390,00:17:56.390
"stuff will remain same. After the for loop,
we can pop the left overs and append to the",00:17:57.020,00:18:03.770
"string. And, finally we can return. So, this
is my final pseudo code. You can check the",00:18:03.770,00:18:08.659
"description of this video for a link to the
real implementation, actual source code. Okay,",00:18:08.659,00:18:13.950
"So, I will stop here now. This is it for this
lesson. Thanks, for watching.",00:18:13.950,00:18:17.870

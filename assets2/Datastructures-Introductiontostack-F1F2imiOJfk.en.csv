text,start,stop
"In this lesson we're going to introduce
you to stack data structure.",00:00:00.739,00:00:04.800
"Data structures, as we know, are ways to
store and organize data in computers.",00:00:04.800,00:00:10.090
"So far, in the series we have discussed
some of the data structures.",00:00:10.090,00:00:13.710
"We have talked about arrays and linked
lists.",00:00:13.710,00:00:17.039
"Now in this lesson we are going to
talk about stacks and we are going to talk",00:00:17.039,00:00:21.310
about,00:00:21.310,00:00:21.730
stack as abstract data type or,00:00:21.730,00:00:24.770
"ADT. When we talk about a data structure
as",00:00:24.770,00:00:28.010
"abstract data type, we talk only about
the features",00:00:28.010,00:00:32.269
"or operations available with the data
structure.",00:00:32.269,00:00:35.399
"We do not go into implementation details.
So basically we define the data",00:00:35.399,00:00:40.870
"structured only as a mathematical or
logical model.",00:00:40.870,00:00:43.899
"We'll go into implementation of stack in
later lessons.",00:00:43.899,00:00:48.210
"In this lesson, we're going to talk only
about stack",00:00:48.210,00:00:51.510
"ADT. So we are only going to have a look at
the logical view",00:00:51.510,00:00:55.479
"of stack. Stack as a data structure in
computer science is not very different",00:00:55.479,00:01:00.530
"from stack as a way of organizing objects,",00:01:00.530,00:01:04.340
"in real world. Here are some examples of
stack from real world:",00:01:04.340,00:01:08.590
"First figure is of a stack of dinner
plates.",00:01:08.590,00:01:12.160
"Second figure is of a mathematical
puzzle, called",00:01:12.160,00:01:15.540
"tower of hanoi, where we have three rods or
three pegs and multiple disks",00:01:15.540,00:01:20.690
"and the game is about moving a stack of
discs,",00:01:20.690,00:01:23.790
"from one peg to another with this
constraint that,",00:01:23.790,00:01:27.530
"a disc can not go on top of a smaller
disc.",00:01:27.530,00:01:31.100
Third figure is of a pack of Tennis balls.,00:01:31.100,00:01:34.220
"Stack basically is a collection with
this property, that",00:01:34.220,00:01:38.280
"an item in the stack must be inserted
or removed,",00:01:38.280,00:01:42.070
"from the same end that we call the top
of stack.",00:01:42.070,00:01:46.260
"In fact this is not just a property, this
is a constraint or restriction.",00:01:46.260,00:01:50.970
"Only the top of a stack is accessible and
any item has to be inserted",00:01:50.970,00:01:56.430
"or removed from the top. A stack is
also called",00:01:56.430,00:02:00.320
'last in first out' collection. Most,00:02:00.320,00:02:03.430
"recently added item in a stack has to go
out first.",00:02:03.430,00:02:06.570
"In the first example, you will always
pick up a",00:02:06.570,00:02:10.170
"dinner plate from top of the stack and
if you will have to put",00:02:10.170,00:02:13.969
"a plate back into the stack, you will
always put it back on",00:02:13.969,00:02:17.549
"top of the stack. You can argue, that I
can slip out a plate",00:02:17.549,00:02:21.209
"from in between without actually
removing the plates on the top.",00:02:21.209,00:02:25.260
"So the constraint that I should take
out a plate always from the top",00:02:25.260,00:02:29.780
"is not strictly enforced. For the sake of
argument,",00:02:29.780,00:02:33.579
"this is fine. You can say this. In other
two examples where we have",00:02:33.579,00:02:37.519
"discs in a pag, and tennis balls in this",00:02:37.519,00:02:41.170
"box that can open only from one side,
there is no way you can take out an item",00:02:41.170,00:02:45.889
from in between.,00:02:45.889,00:02:46.870
"Any insertion of removal has to happen
from",00:02:46.870,00:02:50.499
top.,00:02:50.499,00:02:52.160
"You can not slip out an item from in
between. You can take out an item,",00:02:52.160,00:02:55.600
"but for that you will have to remove all
the items on top of that item.",00:02:55.600,00:03:00.080
"Let's now formally define stack as an
abstract data tape.",00:03:00.080,00:03:03.750
"A stack is a list or collection with the
restriction that insertion",00:03:03.750,00:03:09.200
"and deletion can be performed only from
one",00:03:09.200,00:03:12.200
"end, that we call the top of stack. Let's
now define the interface or operations",00:03:12.200,00:03:18.110
available with,00:03:18.110,00:03:18.950
"stack ADT. There are two fundamental
operations available with a stack.",00:03:18.950,00:03:23.580
An insertion is called a 'push' operation.,00:03:23.580,00:03:27.350
"'push' operation can insert or push some
item",00:03:27.350,00:03:30.820
"'X' onto the stack. Another operation,
second operation is",00:03:30.820,00:03:35.330
called 'pop'. 'pop' is removing the,00:03:35.330,00:03:39.160
"most recent item from the stack,
most recent element from the stack.",00:03:39.160,00:03:43.650
"'push' and 'pop' are the fundamental
operations and",00:03:43.650,00:03:47.230
"there can be few more. Typically there is
one operation called",00:03:47.230,00:03:50.970
"'top', that simply returns the element at
top of the stack.",00:03:50.970,00:03:55.040
"And there can be an operation to check
wheather",00:03:55.040,00:03:58.489
"a stack is empty or not. So this
operation will",00:03:58.489,00:04:02.290
"return true if the stack is empty, false
otherwise.",00:04:02.290,00:04:06.659
"So 'push' is inserting an element on top
of stack",00:04:06.659,00:04:09.519
"and 'pop' is removing an element from
top of stack.",00:04:09.519,00:04:13.709
"We can 'push' or 'pop' only one element at a
time.",00:04:13.709,00:04:17.070
"All these operations that have written
here can be performed",00:04:17.070,00:04:20.380
"in constant time, or in other words their
time complexity",00:04:20.380,00:04:25.180
is O(1). Remember,00:04:25.180,00:04:28.240
"an element that is pushed or
inserted last on to a stack,",00:04:28.240,00:04:32.229
"is popped or removed first. So stack is
called",00:04:32.229,00:04:36.220
"'last in first out' structure, what goes in
last comes out first.",00:04:36.220,00:04:41.250
"'last in first out', in short is called
'LIFO'.",00:04:41.250,00:04:45.120
"Logically a stack is represented
something like this:",00:04:45.120,00:04:48.979
"As a three sided figure, as a container",00:04:48.979,00:04:52.729
"open from one side. This is representation
of an",00:04:52.729,00:04:56.110
"empty stack. Let's name this stack 's'.
Let's say this figure",00:04:56.110,00:05:00.760
is representing a stack of integers.,00:05:00.760,00:05:03.919
"Right now the stack is empty. I will
perform push and pop operations",00:05:03.919,00:05:08.289
"to insert and remove integers from the
stack.",00:05:08.289,00:05:11.639
"I will first write down the operations here and
then show you",00:05:11.639,00:05:14.770
"what will happen in the logical
representation. Let's first perform",00:05:14.770,00:05:18.940
"a 'push'. I want to 'push' number 2 on to
the stack.",00:05:18.940,00:05:22.880
"The stack is empty right now, so we
can not",00:05:22.880,00:05:26.139
"'pop' anything. After the 'push', stack will look
something like this:",00:05:26.139,00:05:29.910
"There is only one integer in the stack, so
of course",00:05:29.910,00:05:33.430
its on 'top'. Let's 'push' another integer.,00:05:33.430,00:05:37.229
"This time, I want to 'push' number 10.",00:05:37.229,00:05:40.320
And now lets say we want to perform,00:05:40.320,00:05:44.030
a 'pop'. The integer at 'top' right now is,00:05:44.030,00:05:47.970
"10. With a 'pop', it will be removed from
the stack.",00:05:47.970,00:05:51.669
"Let's do few more 'push'. I just pushed
7 and 5 onto the stack.",00:05:51.669,00:05:58.669
"At this stage, if I will call 'top'
operation,",00:06:02.470,00:06:05.639
it will return me number 5. 'IsEmpty',00:06:05.639,00:06:09.139
"will return me false. At this stage,",00:06:09.139,00:06:12.820
a 'pop' will remove 5 from the stack.,00:06:12.820,00:06:16.510
"As you can see the element, the
integer which is coming last,",00:06:16.510,00:06:20.180
"is going out first, That's why we call
stack 'last in first out' data structure.",00:06:20.180,00:06:25.919
We can 'pop' till the stack gets empty.,00:06:25.919,00:06:29.330
"One more 'pop', and stack will be empty.",00:06:29.330,00:06:35.790
"So this pretty much is stack data
structure. Now one obvious question can",00:06:35.790,00:06:40.050
be,00:06:40.050,00:06:40.419
what are the real scenarios where stack,00:06:40.419,00:06:43.990
"helps us. Let's list down some of the
applications of stack.",00:06:43.990,00:06:47.750
"Stack data structure is used for
execution of function calls in a program.",00:06:47.750,00:06:52.620
"We have talked about this quite a bit in
our lessons on dynamic memory allocation",00:06:52.620,00:06:56.790
and linked lists.,00:06:56.790,00:06:58.590
"We can also say that stack is used for
recursion, because",00:06:58.590,00:07:02.460
"recursion is also a chain of function
calls. It's just that,",00:07:02.460,00:07:06.620
"all the calls are to the same function.
To know more about this application, you",00:07:06.620,00:07:10.870
can,00:07:10.870,00:07:11.290
"check the description of this video,
for a link to 'MyCodeSchool'",00:07:11.290,00:07:15.500
lesson on dynamic memory allocation.,00:07:15.500,00:07:17.510
"Another application of stack is we can
use it",00:07:17.510,00:07:21.300
"to implement undo operation,",00:07:21.300,00:07:24.330
"in an editor. We can perform undo
operation in",00:07:24.330,00:07:27.639
"any text editor or image editor. Right now,
I'm pressing 'Ctrl Z',",00:07:27.639,00:07:32.320
"and as you can see some of the text
that I have written, is getting cleared.",00:07:32.320,00:07:36.970
You can implement this using a stack.,00:07:36.970,00:07:40.380
"Stack is used in a number of important
algorithms,",00:07:40.380,00:07:44.289
"like for example a compiler verifies
whether",00:07:44.289,00:07:48.340
"parentheses in a source code are
balanced or not",00:07:48.340,00:07:51.599
"using Stack data structure. Corresponding
to",00:07:51.599,00:07:54.690
"each opening curly brace or opening
parentheses in a source code, there",00:07:54.690,00:07:58.900
must be,00:07:58.900,00:07:59.599
"a closing parentheses at appropriate
position.",00:07:59.599,00:08:02.789
"And if parentheses in a source code are
not put properly, if they're not balanced,",00:08:02.789,00:08:07.240
"compiler should throw error and this check can be
performed using a stack.",00:08:07.240,00:08:12.340
"We will discuss some of these problems
in detail in coming lessons.",00:08:12.340,00:08:16.310
"This much is good for an introduction. In
our next lesson we will discuss",00:08:16.310,00:08:20.870
"implementation of stack. This is it for
this lesson.",00:08:20.870,00:08:24.349
Thanks for watching!!,00:08:24.349,00:08:25.139

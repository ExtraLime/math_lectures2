text,start,stop
"In our previous lesson, we talked about binary
trees in general.",00:00:00.500,00:00:03.490
"Now, in this lesson we are going to talk about
binary search tree, a special kind of binary",00:00:03.490,00:00:08.590
"tree which is an efficient structure to organize
data for quick search as well as quick update.",00:00:08.590,00:00:15.219
"But before I start talking about binary search
tree, I want you to think of a problem.",00:00:15.219,00:00:21.109
"What data structure will you use to store
a modifiable collection?",00:00:21.109,00:00:25.710
"So, lets say you have a collection and it
can be a collection of any data type, records",00:00:25.710,00:00:30.681
in the collection can be of any type.,00:00:30.681,00:00:32.980
"Now, you want to store this collection in
computers memory in some structure and then",00:00:32.980,00:00:38.710
"you want to be able to quickly search for
a record in the collection and you also want",00:00:38.710,00:00:43.379
to be able to modify the collection.,00:00:43.379,00:00:46.010
"You want to be able to insert an element in
the collection or remove an element from the",00:00:46.010,00:00:50.239
collection.,00:00:50.239,00:00:51.239
"So, what data structure will you use?",00:00:51.239,00:00:53.520
"Well, you can use an array or a linked list.",00:00:53.520,00:00:57.820
"These are two well known data structure in
which we can store a collection.",00:00:57.820,00:01:01.570
"Now, what will be running time of these operations
- search, insertion or removal, If we will",00:01:01.570,00:01:07.420
use an array or a linked list.,00:01:07.420,00:01:09.970
"Lets first talk about arrays and for sale
of simplicity, lets say we want to store integers.",00:01:09.970,00:01:14.930
"To store a modifiable list or collection of
integers, we can create a large enough array",00:01:14.930,00:01:21.090
"and we can store the records in some part
of the array.",00:01:21.090,00:01:24.090
We can keep the end of the list marked.,00:01:24.090,00:01:26.390
"In this array that I am showing here, we have
integers from 0 till 3.",00:01:26.390,00:01:30.270
"We have records from 0 till 3 and rest of
the array is available space.",00:01:30.270,00:01:35.670
"Now to search some X in the collection, we
will have to scan the array from index 0 till",00:01:35.670,00:01:42.439
"end and in worst case, we may have to look
at all the elements in the list.",00:01:42.439,00:01:48.220
"If n is the number of elements in the list,
time taken will be proportional to n or in",00:01:48.220,00:01:52.979
"other words, we can say that time complexity
will be big-oh of n.",00:01:52.979,00:01:57.100
"Ok, now what will be the cost of insertion.",00:01:57.100,00:02:00.939
"Lets say we want to insert number 5 in this
list.",00:02:00.939,00:02:03.760
"So, if there is some available space, all
the cells in yellow are available, we can",00:02:03.760,00:02:09.369
"add one more cell by incrementing this marker
'end' and fill in the integer to be added.",00:02:09.369,00:02:17.350
Time taken for this operation will be constant.,00:02:17.350,00:02:19.280
"Running time will not depend upon number of
elements in the collection.",00:02:19.280,00:02:23.530
"So, we can say that time complexity will be
big-oh of 1.",00:02:23.530,00:02:28.450
"Ok, now what about removal.",00:02:28.450,00:02:30.550
Lets say we want to remove 1 from the collection.,00:02:30.550,00:02:34.560
"What we'll have to do is, we'll have to shift
all records to the right of one by one position",00:02:34.560,00:02:40.540
to the left and then we can decrement end.,00:02:40.540,00:02:43.580
"The cost of removal once again will be big-oh
of n.",00:02:43.580,00:02:48.849
"In worst case, we will have to shift n-1 elements.",00:02:48.849,00:02:52.140
"Here, the cost of insertion will be big-oh
of 1, if the array will have some available",00:02:52.140,00:02:58.730
space.,00:02:58.730,00:02:59.730
"So, the array has to be large enough.",00:02:59.730,00:03:02.349
"If the array gets filled, what we can do is,
we can create a new larger array, typically",00:03:02.349,00:03:08.069
"we create an array twice the size of the filled
up array.",00:03:08.069,00:03:12.090
"So, we can create a new larger array and then
we can copy the content of the filled up array",00:03:12.090,00:03:17.110
into this new larger array.,00:03:17.110,00:03:19.250
"The copy operation will cost us big-oh of
n.",00:03:19.250,00:03:22.700
"We have discussed this idea of dynamic array
quite a bit in our previous lessons.",00:03:22.700,00:03:27.440
"So, insertion will be big-oh of 1 if array
is not filled up and it will be big-oh of",00:03:27.440,00:03:32.909
n if array is filled up.,00:03:32.909,00:03:35.549
"For now, lets just assume that the array will
always be large enough.",00:03:35.549,00:03:39.950
"Lets now discuss the cost of these operations
if we will use a linked list.",00:03:39.950,00:03:45.989
"If we would use a linked list, I have drawn
a linked list of integers here, data type",00:03:45.989,00:03:50.650
"can be anything, the cost of search operation
once again will be big-oh of n where n is",00:03:50.650,00:03:57.189
"number of records in the collection or number
of nodes in the linked list.",00:03:57.189,00:04:01.239
"To search, in worst case, we will have to
traverse the whole list.",00:04:01.239,00:04:05.409
We will have to look at all the nodes.,00:04:05.409,00:04:07.790
"The cost of insertion in a linked list is
big-oh of 1 at head and its big-oh of n at",00:04:07.790,00:04:14.980
tail.,00:04:14.980,00:04:15.980
"We can choose to insert at head to keep the
cost low.",00:04:15.980,00:04:19.610
"So, running time of insertion, we can say
is big-oh of 1 or in other words, we will",00:04:19.610,00:04:24.830
take constant time.,00:04:24.830,00:04:27.810
Removal once again will be big-oh of n.,00:04:27.810,00:04:30.060
"We will first have to traverse the linked
list and search the record and in worst case,",00:04:30.060,00:04:35.340
we may have to look at all the nodes.,00:04:35.340,00:04:36.919
"Ok, so this is the cost of operations if we
are going to use array or linked list.",00:04:36.919,00:04:42.780
Insertion definitely is fast.,00:04:42.780,00:04:44.710
"But, how good is big-oh of n for an operation
like search.",00:04:44.710,00:04:49.650
"What do you think? if we are searching for
a record X, then in the worst case, we will",00:04:49.650,00:04:55.210
"have to compare this record X with all the
n records in the collection.",00:04:55.210,00:05:00.720
"Lets say, our machine can perform a million
comparisons in one second.",00:05:00.720,00:05:04.880
"So, we can say that machine can perform 10
the power 6 comparisons in one second.",00:05:04.880,00:05:10.090
"So, cost of one comparison will be 10 to the
power -6 second.",00:05:10.090,00:05:15.250
"Machines in today's world deal with really
large data.",00:05:15.250,00:05:18.660
"Its very much possible for real world data
to have 100 million records or billion records.",00:05:18.660,00:05:23.710
"A lot of countries in this world have population
more than 100 million.",00:05:23.710,00:05:27.580
"2 countries have more than a billion people
living in them.",00:05:27.580,00:05:31.160
"If we will have data about all the people
living in a country, then it can easily be",00:05:31.160,00:05:35.539
100 million records.,00:05:35.539,00:05:36.539
"Ok, so if we are saying that the cost of 1
comparison is 10 the power -6 second.",00:05:36.539,00:05:42.729
"If n will be 100 million, time taken will
be 100 seconds.",00:05:42.729,00:05:46.449
"100 seconds for a search is not reasonable
and search may be a frequently performed operation.",00:05:46.449,00:05:54.650
Can we do something better?,00:05:54.650,00:05:55.680
Can we do better than big-oh of n.,00:05:55.680,00:05:57.479
"Well, in an array, we can perform binary search
if its sorted and the running time of binary",00:05:57.479,00:06:04.009
"search is big-oh of log n which is the best
running time to have.",00:06:04.009,00:06:09.210
I have drawn this array of integers here.,00:06:09.210,00:06:11.270
Records in the array are sorted.,00:06:11.270,00:06:13.930
Here the data type is integer.,00:06:13.930,00:06:16.229
"For some other data type, for some complex
data type, we should be able to sort the collection",00:06:16.229,00:06:21.300
"based on some property or some key of the
records.",00:06:21.300,00:06:24.880
"We should be able to compare the keys of records
and the comparison logic will be different",00:06:24.880,00:06:30.120
for different data types.,00:06:30.120,00:06:31.870
"For a collection of strings, for example,
we may want to have the records sorted in",00:06:31.870,00:06:36.610
dictionary or lexicographical order.,00:06:36.610,00:06:39.000
"So, we will compare and see which string will
come first in dictionary order.",00:06:39.000,00:06:44.520
"Now this is the requirement that we have for
binary search.",00:06:44.520,00:06:47.729
"The data structure should be an array and
the records must be sorted.",00:06:47.729,00:06:51.520
"Ok, so the cost of search operation can be
minimized if we will use a sorted array.",00:06:51.520,00:06:56.730
"But, in insertion or removal, we will have
to make sure that the array is sorted afterwards.",00:06:56.730,00:07:02.310
"In this array, if I want to insert number
5 at this stage, i can't simply put 5 at index",00:07:02.310,00:07:09.440
6.,00:07:09.440,00:07:10.800
"what I'll have to do is, I'll first have to
find the position at which I can insert 5",00:07:10.800,00:07:15.720
in the sorted list.,00:07:15.720,00:07:17.300
"We can find the position in order of log n
time using binary search.",00:07:17.300,00:07:22.180
"We can perform a binary search to find the
first integer greater than 5 in the list.",00:07:22.180,00:07:27.750
"So, we can find the position quickly.",00:07:27.750,00:07:30.639
"In this case, its index 2.",00:07:30.639,00:07:32.610
"But then, we will have to shift all the records
starting this position one position to the",00:07:32.610,00:07:40.120
right.,00:07:40.120,00:07:42.000
"And now, I can insert 5.",00:07:42.000,00:07:44.099
"So, even though we can find the position at
which a record should be inserted quickly",00:07:44.099,00:07:49.300
"in big-oh of log n, this shifting in worst
case will cost us big-oh of n.",00:07:49.300,00:07:54.300
"So, the running time overall for an insertion
will be big-oh of n and similarly, the cost",00:07:54.300,00:08:00.729
of removal will also be big-oh of n.,00:08:00.729,00:08:03.240
We will have to shift some records.,00:08:03.240,00:08:05.379
"Ok, so when we are using sorted array, cost
of search operation is minimized.",00:08:05.379,00:08:10.849
"In binary search for n records, we will have
at max log n to the base 2 comparisons.",00:08:10.849,00:08:17.280
"So, if we can perform million comparisons
in a second, then for n equal 2 to the power",00:08:17.280,00:08:25.270
"31 which is greater than 2 billion, we are
going to take only 31 micro-seconds.",00:08:25.270,00:08:32.870
"log of 2 to the power 31 to base 2 will be
31.",00:08:32.870,00:08:36.700
"Ok, we are fine with search now.",00:08:36.700,00:08:39.750
"we will be good for any practical value of
n.",00:08:39.750,00:08:42.669
But what about insertion and removal.,00:08:42.669,00:08:44.570
They are still big-oh of n.,00:08:44.570,00:08:46.850
Can we do something better here?,00:08:46.850,00:08:48.459
"Well, if we will use this data structure called
binary search tree, I am writing it in short",00:08:48.459,00:08:53.490
"- BST for binary search tree, then the cost
of all these 3 operations can be big-oh of",00:08:53.490,00:09:00.529
log n in average case.,00:09:00.529,00:09:03.779
"The cost of all the operations will be big-oh
of n in worst case.",00:09:03.779,00:09:08.170
"But we can avoid the worst case by making
sure that the tree is always balanced.",00:09:08.170,00:09:13.570
"We had talked about balanced binary tree in
our previous lesson.",00:09:13.570,00:09:17.230
"Binary search tree is only a special kind
of binary tree.",00:09:17.230,00:09:20.490
"To make sure that the cost of these operations
is always big-oh of log n, we should keep",00:09:20.490,00:09:25.640
the binary search tree balanced.,00:09:25.640,00:09:27.550
We'll talk about this in detail later.,00:09:27.550,00:09:30.890
"Let's first see what a binary search tree
is and how cost of these operations is minimized",00:09:30.890,00:09:36.590
when we use a binary search tree.,00:09:36.590,00:09:39.450
"Binary search tree is a binary tree in which
for each node, value of all the nodes in left",00:09:39.450,00:09:47.440
"sub-tree is lesser and value of all the nodes
in right sub-tree is greater.",00:09:47.440,00:09:53.930
"I have drawn binary tree as a recursive structure
here.",00:09:53.930,00:09:57.170
"As we know, in a binary tree, each node can
have at most 2 children.",00:09:57.170,00:10:01.590
We can call one of the children left child.,00:10:01.590,00:10:04.269
"If we will look at the tree as recursive structure,
left child will be the root of left sub-tree",00:10:04.269,00:10:10.339
"and similarly, right child will be the root
of right sub-tree.",00:10:10.339,00:10:14.240
"Now, for a binary tree to be called binary
search tree, value of all the nodes in left",00:10:14.240,00:10:20.430
"sub-tree must be lesser or we can say lesser
or equal to handle duplicates and the value",00:10:20.430,00:10:28.070
"of all the nodes in right sub-tree must be
greater and this must be true for all the",00:10:28.070,00:10:34.589
nodes.,00:10:34.589,00:10:35.589
"So, in this recursive structure here, both
left and right sub-trees must also be binary",00:10:35.589,00:10:40.580
search trees.,00:10:40.580,00:10:42.580
I'll draw a binary search tree of integers.,00:10:42.580,00:10:44.720
"Now, I have drawn a binary search tree of
integers here.",00:10:44.720,00:10:48.670
"Lets see whether this property that for each
node value of all the nodes in left subtree",00:10:48.670,00:10:53.540
"is lesser or equal and the value of all the
nodes in right sub-tree must be greater is",00:10:53.540,00:11:00.529
true or not.,00:11:00.529,00:11:02.050
Lets first look at the root node.,00:11:02.050,00:11:04.279
"Nodes in the left subtree have values 10,
8 and 12.",00:11:04.279,00:11:08.480
"So, they are all lesser than15 and in right
subtree, we have 17, 20 and 25, they are all",00:11:08.480,00:11:16.100
greater than 15.,00:11:16.100,00:11:17.100
"So, we are good for the root node.",00:11:17.100,00:11:19.900
"Now, lets look at this node with value 10.",00:11:19.900,00:11:23.110
"In left, we have 8 which is lesser.",00:11:23.110,00:11:25.050
"In right, we have 12 which is greater.",00:11:25.050,00:11:27.790
"So, we are good.",00:11:27.790,00:11:29.550
"We are good for this node too having value
20 and we don't need to bother about leave",00:11:29.550,00:11:35.649
nodes because they do not have children.,00:11:35.649,00:11:37.620
"So, this is a binary search tree.",00:11:37.620,00:11:40.560
"Now, what if I change this value 12 to 16.",00:11:40.560,00:11:45.170
"Now, is this still a binary search tree.",00:11:45.170,00:11:47.959
"Well, for node with value 10, we are good.",00:11:47.959,00:11:51.430
The node with value 16 is in its right.,00:11:51.430,00:11:54.339
"So, not a problem.",00:11:54.339,00:11:56.120
"But for the root node, we have a node in left
sub-tree with higher value now.",00:11:56.120,00:12:01.570
"So, this tree is not a binary search tree.",00:12:01.570,00:12:04.490
I'll revert back and make the value 12 again.,00:12:04.490,00:12:07.660
"Now, as we were saying we can search, insert
or delete in a binary search tree in big-oh",00:12:07.660,00:12:13.950
of log n time in average case.,00:12:13.950,00:12:16.730
How is it really possible?,00:12:16.730,00:12:18.430
Lets first talk about search.,00:12:18.430,00:12:20.399
"If these integers that I have here in the
tree were in a sorted array, we could have",00:12:20.399,00:12:25.620
"performed binary search and what do we do
in binary search.",00:12:25.620,00:12:30.120
"Lets say we want to search number 10 in this
array.",00:12:30.120,00:12:32.769
"What we do in binary search is, we first define
the complete list as our search space.",00:12:32.769,00:12:38.649
"The number can exist only within the search
space.",00:12:38.649,00:12:41.589
"I'll mark search space using these two pointers
- start and end.",00:12:41.589,00:12:45.860
"Now, we compare the number to be searched
or the element to be searched with mid element",00:12:45.860,00:12:51.899
of the search space or the median.,00:12:51.899,00:12:55.000
"And if the record being searched, if the element
being searched is lesser, we go searching",00:12:55.000,00:12:59.970
"in the left half, else we go searching in
the right half.",00:12:59.970,00:13:03.920
"In case of equality, we have found the element.",00:13:03.920,00:13:07.290
"In this case, 10 is lesser than 15.",00:13:07.290,00:13:09.740
"So, we will go searching towards left.",00:13:09.740,00:13:12.029
Our search space is reduced now to half.,00:13:12.029,00:13:16.399
"Once again, we will compare to the mid-element
and bingo, this time, we have got a match.",00:13:16.399,00:13:21.740
"In binary search, we start with n elements
in search space and then if mid element is",00:13:21.740,00:13:27.220
"not the element that we are looking for, we
reduce the search space to n/2 and we go on",00:13:27.220,00:13:32.540
"reducing the search space to half, till we
either find the record that we are looking",00:13:32.540,00:13:36.970
"for or we get to only one element in search
space and be done.",00:13:36.970,00:13:42.610
"In this whole reduction, if we will go from
n to n/2 to n/4 to n/8 and so on, we will",00:13:42.610,00:13:49.130
have log n to the base 2 steps.,00:13:49.130,00:13:52.090
"If we are taking k steps, then n upon 2 to
the power k will be equal to 1 which will",00:13:52.090,00:13:58.170
"imply 2 to the power k will be equal to n
and k will be equal to log n to the base 2.",00:13:58.170,00:14:03.660
"So, this is why running time of binary search
is big-oh of log n.",00:14:03.660,00:14:08.089
"Now, if we will use this binary search tree
to store the integers, search operation will",00:14:08.089,00:14:14.339
be very similar.,00:14:14.339,00:14:16.019
"Lets say, we want to search for number 12.",00:14:16.019,00:14:18.329
"What we'll do is, we start at root and then
we will compare the value to be searched,",00:14:18.329,00:14:23.490
"the integer to be searched with value of the
root. if its equal, we are done with the search,",00:14:23.490,00:14:29.269
"if its lesser, we know that we need to go
to the left sub-tree because in a binary search",00:14:29.269,00:14:34.680
"tree, all the elements in left sub-tree are
lesser and all the elements in right sub-tree",00:14:34.680,00:14:40.000
are greater.,00:14:40.000,00:14:41.000
"Now, we will go and look at the left child
of node with value 15.",00:14:41.000,00:14:46.490
"We know that number 12 that we are looking
for can exist in this sub-tree only and anything",00:14:46.490,00:14:52.230
apart from the sub-tree is discarded.,00:14:52.230,00:14:54.980
"So, we have reduced the search space to only
these 3 nodes having value 10, 8 and 12.",00:14:54.980,00:15:01.580
"Now, once again, we will compare 12 with 10.",00:15:01.580,00:15:03.730
We are not equal.,00:15:03.730,00:15:05.130
"12 is greater, so we know that we need to
go looking in right sub-tree of this node",00:15:05.130,00:15:12.360
with value 10.,00:15:12.360,00:15:13.360
"So, now our search space is reduced to just
one node.",00:15:13.360,00:15:17.330
"Once again, we will compare the value here
at this node and we have a match.",00:15:17.330,00:15:23.820
"So, searching an element in binary search
tree is basically this traversal in which",00:15:23.820,00:15:29.139
"at each step, we will go either towards left
or right and hence at each step, we will discard",00:15:29.139,00:15:35.380
one of the sub-trees.,00:15:35.380,00:15:37.010
"if the tree is balanced, we call a tree balanced
if for all nodes, the difference between the",00:15:37.010,00:15:42.730
"heights of left and right sub-trees is not
greater than 1.",00:15:42.730,00:15:47.079
"So, if the tree is balanced, we will start
with a search space of n nodes and when we",00:15:47.079,00:15:54.209
"will discard one of the sub-trees, we will
discard n/2 nodes.",00:15:54.209,00:15:57.769
"So, our search space will be reduced to n/2
and then in next step, we will reduce the",00:15:57.769,00:16:03.949
search space to n/4.,00:16:03.949,00:16:05.200
"We will go on reducing like this till we find
the element or till our search space is reduced",00:16:05.200,00:16:11.220
to only one node when we will be done.,00:16:11.220,00:16:13.490
"So, the search here is also a binary search.",00:16:13.490,00:16:17.480
And that's why the name - Binary Search Tree.,00:16:17.480,00:16:19.750
This tree that I am showing here is balanced.,00:16:19.750,00:16:22.009
In fact this is a perfect binary tree.,00:16:22.009,00:16:24.260
"But with same records, we can have an unbalanced
tree like this.",00:16:24.260,00:16:28.529
"This tree has got the same integer values
as we had in the previous structure and this",00:16:28.529,00:16:33.420
"is also a binary search tree, but this is
unbalanced.",00:16:33.420,00:16:36.660
This is as good as a linked list.,00:16:36.660,00:16:38.839
"In this tree there is no right sub-tree for
any of the nodes.",00:16:38.839,00:16:42.959
"Search space will be reduced by only one.at
each step.",00:16:42.959,00:16:46.850
"From n nodes in search space, we will go to
n-1 nodes and then to n-2 nodes, all the way",00:16:46.850,00:16:52.480
till 1 will be n steps.,00:16:52.480,00:16:55.560
"In binary search tree, in average case, cost
of search, insertion or deletion is big-oh",00:16:55.560,00:17:01.199
"of log n and in worst case, this is the worst
case arrangement that I am showing you.",00:17:01.199,00:17:06.900
The running time will be big-oh of n.,00:17:06.900,00:17:08.949
"We always try to avoid the worst case by trying
to keep the binary search tree balanced.",00:17:08.949,00:17:14.480
"With same records in the tree, there can be
multiple possible arrangements.",00:17:14.480,00:17:18.410
"For these integers in this tree, another arrangement
is this.",00:17:18.410,00:17:22.360
"For all the nodes, we have nothing to discard
in left sub-tree in a search.",00:17:22.360,00:17:26.829
This is another arrangement.,00:17:26.829,00:17:28.620
"This is still balanced because for all the
nodes, the difference between the heights",00:17:28.620,00:17:32.220
"of left and right sub-tree is not greater
than 1.",00:17:32.220,00:17:36.090
"But this is the best arrangement when we have
a perfect binary tree.",00:17:36.090,00:17:40.450
"At each step, we will have exactly n/2 nodes
to discard.",00:17:40.450,00:17:43.970
"Ok, now to insert some records in binary search
tree, we will first have to find the position",00:17:43.970,00:17:49.190
"at which we can insert and we can find the
position in big-oh of log n time.",00:17:49.190,00:17:55.100
"Lets say we want to insert 19 in this tree,
what we will do is start at the root.",00:17:55.100,00:18:00.110
"If the value to be inserted is lesser or equal,
if there is no child, insert as left child",00:18:00.110,00:18:06.549
or go left.,00:18:06.549,00:18:07.900
"If the value is greater and there is no right
child, insert as right child or go right.",00:18:07.900,00:18:13.600
"In this case, 19 is greater, so we will go
right.",00:18:13.600,00:18:16.039
"Now, we are at 20.",00:18:16.039,00:18:17.700
19 is lesser and left sub-tree is not empty.,00:18:17.700,00:18:21.320
We have a left child.,00:18:21.320,00:18:22.470
"So, we will go left.",00:18:22.470,00:18:23.820
"Now, we are at 17, 19 is greater than 17.",00:18:23.820,00:18:26.850
"So, it should go in right of 17.",00:18:26.850,00:18:29.620
There is no right child of 17.,00:18:29.620,00:18:31.419
"So, we will create a node with value 19 and
link it to this node with value 17 as right",00:18:31.419,00:18:38.360
child.,00:18:38.360,00:18:39.360
"Because we are using pointers or references
here just like linked list, no shifting is",00:18:39.360,00:18:43.650
needed like an array.,00:18:43.650,00:18:45.350
Creating a link will take constant time.,00:18:45.350,00:18:47.669
"So, overall insertion will also cost us like
search.",00:18:47.669,00:18:50.600
"To delete also, we will first have to search
the node.",00:18:50.600,00:18:55.540
"Search once again will be big-oh of log n
and deleting the node will only mean adjusting",00:18:55.540,00:19:00.770
some links.,00:19:00.770,00:19:01.770
"So, removal also is going to be like search
- big-oh of log n in average case.",00:19:01.770,00:19:07.650
"Binary search tree gets unbalanced during
insertion and deletion.",00:19:07.650,00:19:11.600
"So, often during insertion and deletion, we
restore the balancing.",00:19:11.600,00:19:15.620
"There are ways to do it and we will talk about
all of this in detail in later lessons.",00:19:15.620,00:19:20.170
"In next lesson, we will discuss implementation
of binary search tree in detail.",00:19:20.170,00:19:24.669
This is it for this lesson.,00:19:24.669,00:19:25.750
Thanks for watching.,00:19:25.750,00:19:26.820

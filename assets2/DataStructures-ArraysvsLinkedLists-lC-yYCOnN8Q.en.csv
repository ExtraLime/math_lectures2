text,start,stop
"In our previous lesson, we introduced you
to linked list data structure and we saw how",00:00:00.450,00:00:06.169
"linked lists solve some of the problems that
we have with arrays.",00:00:06.169,00:00:11.210
"So now the obvious question would be which
one is better - an array or a linked list.",00:00:11.210,00:00:17.310
"Well, there is no such thing as one data structure
is better than another data structure.",00:00:17.310,00:00:23.160
"One data structure may be really good for
one kind of requirement, while another data",00:00:23.160,00:00:27.150
"structure really good for another kind of
requirement.",00:00:27.150,00:00:29.870
"So, it all depends upon factor like what is
the most frequent operation that you want",00:00:29.870,00:00:35.480
"to perform with the data structure or what
is the size of the data and there can be other",00:00:35.480,00:00:40.790
factors as well.,00:00:40.790,00:00:42.100
"So, in this lesson, we will compare these
two data structures based on some parameters,",00:00:42.100,00:00:48.150
"based on the cost of operations that we have
with these data structures.",00:00:48.150,00:00:52.530
"So, all in all we will comparatively study
the advantages and disadvantages and try to",00:00:52.530,00:00:58.200
"understand in which scenario we should use
an array and in which scenario we should use",00:00:58.200,00:01:02.950
a linked list.,00:01:02.950,00:01:04.380
"So, i will draw two columns here, one for
array and another for linked list and the",00:01:04.380,00:01:10.280
"first parameter that we want to talk about
is the cost of accessing an element.",00:01:10.280,00:01:16.890
"Irrespective of the size of an array, it takes
constant time to access an element in the",00:01:16.890,00:01:23.650
array.,00:01:23.650,00:01:24.650
"This is because an array is stored as one
contiguous block of memory.",00:01:24.650,00:01:28.999
"So, if we know the starting address or the
base address of this block of memory.",00:01:28.999,00:01:33.880
"Let us say what we have here is an integer
array and base address is 200.",00:01:33.880,00:01:39.029
"The first byte in this array is at address
200.",00:01:39.029,00:01:42.209
"Then let's say if we want to calculate the
address of element at index i, then it will",00:01:42.209,00:01:48.109
"be equal to 200 plus i into size of an integer
in bytes.",00:01:48.109,00:01:54.049
"So, size of an integer in bytes is typically
4 bytes.",00:01:54.049,00:01:57.149
"So, it will be 200 + 4*i.",00:01:57.149,00:01:59.740
"So, if 0th element is at address 200, if we
want to calculate the address for element",00:01:59.740,00:02:05.990
"at index 6, it will be 200 plus 6 into 4 which
will be equal to 224.",00:02:05.990,00:02:12.879
"So, knowing address of any element in an array
is just this calculation for our application.",00:02:12.879,00:02:20.030
"In terms of big-oh notation, constant time
is also called O(1).",00:02:20.030,00:02:25.200
"So, accessing an element in an array is O(1)
in terms of time complexity.",00:02:25.200,00:02:31.980
"If you are not aware of big-oh notation, check
the description of this video for a tutorial",00:02:31.980,00:02:37.849
on time complexity analysis.,00:02:37.849,00:02:40.010
"Now, in a linked list, data is not stored
in a contiguous block of memory.",00:02:40.010,00:02:45.590
"So, if we have a linked list something like
this, let's say we have a linked list of integers",00:02:45.590,00:02:51.200
"here, then we have multiple blocks of memory
at different addresses.",00:02:51.200,00:02:56.340
"Each block in the linked list is called a
node and each node has two fields, one to",00:02:56.340,00:03:02.610
"store the data and one to store the address
of the next node.",00:03:02.610,00:03:07.209
"So, we call the second field, the link field.",00:03:07.209,00:03:10.590
"The only information that we keep with us
about a linked list is the address of the",00:03:10.590,00:03:16.920
first node which is also called the head node.,00:03:16.920,00:03:20.569
"And this is what we keep passing to all the
functions also, the address of the head node.To",00:03:20.569,00:03:25.710
"access an element in the linked list at a
particular position, we first need to start",00:03:25.710,00:03:30.739
"at the head node or the first node, then we
go to the second node and see the address",00:03:30.739,00:03:38.420
of the third node.,00:03:38.420,00:03:39.700
"In the worst case,
to access the last element in the list, we",00:03:39.700,00:03:43.290
"will be traversing all the elements in the
list.",00:03:43.290,00:03:46.060
"In the average case, we will be accessing
the middle element may be.",00:03:46.060,00:03:50.019
"So, if n is the size of he linked list, n
is the number of elements in the linked list,",00:03:50.019,00:03:56.520
then we will traverse n/2 elements.,00:03:56.520,00:03:58.870
"So, the time taken in the average case also
is proportional to the number of elements",00:03:58.870,00:04:04.659
in the linked list.,00:04:04.659,00:04:06.099
"So, we can say that the time complexity in
average case is O(n).So, on this parameter,",00:04:06.099,00:04:13.769
"cost of accessing an element, array scores
heavily over linked list.",00:04:13.769,00:04:18.720
"So iif you have a requirement where you want
to access elements in the list all the time,",00:04:18.720,00:04:23.340
then definitely array is a better choice.,00:04:23.340,00:04:26.360
"Now, the second parameter than we want to
talk about is memory requirement or memory",00:04:26.360,00:04:32.790
usage.,00:04:32.790,00:04:33.790
"with an array, we need to know the size of
the array before creating it, because arrays",00:04:33.790,00:04:38.940
is created as one contiguous clock of memory.,00:04:38.940,00:04:42.190
"So, array is of fixed size.",00:04:42.190,00:04:44.910
"What we typically do is create, we create
a large enough array and some part of the",00:04:44.910,00:04:50.010
"array stores our list and some part of the
array is vacant or empty so that we can add",00:04:50.010,00:04:56.700
more elements in the list.,00:04:56.700,00:04:58.280
"For example, we have an array of 7 integers
here and we have only 3 integers in the list.",00:04:58.280,00:05:04.380
Rest 4 positions are unused.,00:05:04.380,00:05:07.780
There would be some garbage value there.,00:05:07.780,00:05:10.940
"With linked list, lets say we have, let's
say we have this linked list of integers,",00:05:10.940,00:05:16.310
there is no unused memory.,00:05:16.310,00:05:18.720
"We ask memory for one node at a time, so we
do not keep any reserved space.",00:05:18.720,00:05:24.210
"But we use extra memory for pointer variables
and this extra memory requirement for a pointer",00:05:24.210,00:05:31.470
variable in a linked list can not be ignored.,00:05:31.470,00:05:34.860
"In a typical architecture let's say, integer
is stored in 4 bytes and pointer variable",00:05:34.860,00:05:40.900
also takes 4 bytes.,00:05:40.900,00:05:42.320
"So, if you see, the memory requirement for
this array of 7 integers is 28 bytes.",00:05:42.320,00:05:49.530
"And the memory requirement for this linked
list would be 8*3, where 8 is the size of",00:05:49.530,00:05:55.970
"each node, 4 for integer and 4 bytes for the
pointer variable.",00:05:55.970,00:06:00.990
"So, this is also 24 bytes.",00:06:00.990,00:06:03.560
"If we add one more element to the list in
the array, we will just use one more position,",00:06:03.560,00:06:09.190
"while in linked list we will create one more
node, and will take another 8 bytes, so this",00:06:09.190,00:06:14.660
will be 32 bytes.,00:06:14.660,00:06:17.800
"Linked list would fetch us a lot of advantage
if the data, the data part is large in size.",00:06:17.800,00:06:24.060
"So, in this case, we had a linked list if
integers, so integer is only 4 bytes.",00:06:24.060,00:06:29.810
"What if we had a linked list in which the
data part was some complex type that took",00:06:29.810,00:06:37.530
16 bytes.,00:06:37.530,00:06:38.550
"So, 4 bytes for the link and 16 bytes for
the data, each node would have been 20 bytes.",00:06:38.550,00:06:44.920
"An array of 7 elements for 16 bytes of data
would be, 16 byte for each element would be",00:06:44.920,00:06:51.580
112 bytes.,00:06:51.580,00:06:52.580
And linked list of 4 would be only 80 bytes.,00:06:52.580,00:06:59.460
"So, it all depends.",00:06:59.460,00:07:01.270
"If the data part of a list takes a lot of
memory, linked list will definitely consume",00:07:01.270,00:07:07.150
lot less memory.,00:07:07.150,00:07:08.980
"Otherwise, it depends what strategy we are
choosing to decide the size of the array.",00:07:08.980,00:07:14.900
At any time how much array we keep unused.,00:07:14.900,00:07:18.300
"Now, one more point with memory allocation,
because arrays are created as one contiguous",00:07:18.300,00:07:24.220
"block of memory, sometimes when we may want
to create a really really large array, then",00:07:24.220,00:07:29.841
"may be memory may not be available as one
large block, but if we are using linked list,",00:07:29.841,00:07:36.190
"memory may be available as multiple small
blocks.",00:07:36.190,00:07:39.800
"So, we will have this problem of fragmentation
in the memory.",00:07:39.800,00:07:43.280
"Sometimes, we may get many small units of
memory, but we may not get one large block",00:07:43.280,00:07:48.120
of memory.,00:07:48.120,00:07:49.440
"This may be a rare phenomenon, but this is
a possibility.",00:07:49.440,00:07:53.350
"So, this is also where linked list scores.",00:07:53.350,00:07:58.810
"Because arrays have fixed size, once array
gets filled and we need more memory, then",00:07:58.810,00:08:05.061
"there is no other option than to create a
new array of larger size and copy the content",00:08:05.061,00:08:10.820
from the previous array into the new array.,00:08:10.820,00:08:13.530
"So, this is also one cost which is not there
with linked list.",00:08:13.530,00:08:18.530
"So, we need to keep these constraints and
these requirements in mind when we want to",00:08:18.530,00:08:25.490
"decide for one of these data structures for
our requirement.",00:08:25.490,00:08:29.740
"Now, the third parameter that we want to talk
about is cost of inserting an element in the",00:08:29.740,00:08:37.830
list.,00:08:37.830,00:08:38.830
"Remember when we are talking about arrays
here, we are also talking about the possible",00:08:38.830,00:08:42.930
use of array as dynamic list.,00:08:42.930,00:08:46.130
"So, there can be 3 scenarios in insertion.",00:08:46.130,00:08:49.320
"First scenario will be when we want to insert
an element at the beginning of the list.",00:08:49.320,00:08:55.520
"Let's see we want to insert number 3 at the
beginning of the list.",00:08:55.520,00:08:59.250
"In the case of arrays, we will have to shift
each element by one position towards the higher",00:08:59.250,00:09:04.980
index.,00:09:04.980,00:09:05.980
"So, the time taken will be proportional to
the size of the list.",00:09:05.980,00:09:09.730
"So, this will be O(n).",00:09:09.730,00:09:12.430
Let's say n is the size of the list.,00:09:12.430,00:09:14.310
This will be O(n) in terms of time complexity.,00:09:14.310,00:09:17.680
"In the case of linked list, inserting a node
in the beginning will mean only creating a",00:09:17.680,00:09:23.570
"new node and adjusting the head pointer and
the link of this new node.",00:09:23.570,00:09:29.310
"So, the time taken will not depend upon the
size of the list, it will be constant.",00:09:29.310,00:09:34.110
"So, for linked list, inserting an element
at the beginning is O(1) in terms of time",00:09:34.110,00:09:39.430
complexity.,00:09:39.430,00:09:41.160
"Inserting an element at end for an array,
let's say we are talking about dynamic array,",00:09:41.160,00:09:46.650
"a dynamic list in which we create a new array
if it gets filled.",00:09:46.650,00:09:52.100
"If there is space in the array, we just write
to the next higher index of the list.",00:09:52.100,00:09:58.400
"So, it will be constant time.",00:09:58.400,00:10:00.280
"So, time complexity is O(1) if array is not
full.",00:10:00.280,00:10:04.090
"If array is full, we will have to create a
new array and copy all the previous content",00:10:04.090,00:10:08.230
"into new array which will take O(n) time where
n is the size of the list.",00:10:08.230,00:10:12.720
"In the case of linked list, adding an element,
inserting an element in the end will mean",00:10:12.720,00:10:17.960
"traversing the whole list and then creating
a new node and adjusting the links.",00:10:17.960,00:10:23.750
"So, time taken will be proportional to n.",00:10:23.750,00:10:26.320
I will use this color coding for linked list.,00:10:26.320,00:10:31.150
Here n is the number of elements in the list.,00:10:31.150,00:10:33.800
"Now, the third case will be when we want to
insert in the middle of the list at soem nth",00:10:33.800,00:10:40.010
position or may be some ith position.,00:10:40.010,00:10:43.040
"Again in the case of arrays, we will have
to shift elements.",00:10:43.040,00:10:47.960
"For the average case, we may want to insert
at the mid position in the array.",00:10:47.960,00:10:52.230
"So, will have to shift n/2 where n is the
number of elements in the list.",00:10:52.230,00:10:57.830
"So, the time taken is definitely proprotional
to n in average case.",00:10:57.830,00:11:02.750
"So, complexity will be O(n).",00:11:02.750,00:11:05.690
"For linked list also we will have to traverse
till that position and then only we can adjust",00:11:05.690,00:11:10.820
the links.,00:11:10.820,00:11:11.820
"Even though we will not have any shifting,
we will have to traverse till that point and",00:11:11.820,00:11:16.650
"in the average case, time taken will be proportional
to n and the time complexity will be O(n).",00:11:16.650,00:11:23.880
"If you see , deleting an element will also
have these 3 sceanrios, and the time comeplxity",00:11:23.880,00:11:30.730
"for deleting for these 3 sceanrios will also
be the same.",00:11:30.730,00:11:35.250
"And the final point, the final parameter that
I want to talk about is which one is easy",00:11:35.250,00:11:41.760
to use and implement.,00:11:41.760,00:11:44.010
An array definitely is a lot easier to use.,00:11:44.010,00:11:48.350
"Linked list implemetation especially in Cor
C++ is more prone to errors like segmentation",00:11:48.350,00:11:54.779
fault and memory leaks.,00:11:54.779,00:11:56.620
It takes good care to work with linked lists.,00:11:56.620,00:11:59.710
"So, this was arrays vs linked lists.",00:11:59.710,00:12:03.029
"In our next lesson, we will implement linked
list in C or C++.",00:12:03.029,00:12:07.840
"We will get our hands dirty with some real
code.",00:12:07.840,00:12:11.589
So this is it for this lesson.,00:12:11.589,00:12:13.350
Thanks for Watching !,00:12:13.350,00:12:14.010

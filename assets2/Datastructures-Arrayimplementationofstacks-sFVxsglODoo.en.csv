text,start,stop
"In our previous lesson we introduced
you to stack data structure.",00:00:00.410,00:00:03.939
We talked about stack as abstract data type,00:00:03.939,00:00:07.050
"or ADT has been often we define 
data structure as abstract data type.",00:00:07.050,00:00:12.559
"We define it as a mathematical or
logical model.",00:00:12.559,00:00:16.130
"We define only the features or
operations available with the data",00:00:16.130,00:00:20.270
structure,00:00:20.270,00:00:20.910
"and do not bother about implementation.
Now in this lesson we will see how we",00:00:20.910,00:00:25.870
can,00:00:25.870,00:00:26.190
"implement stack data structure. We will
first",00:00:26.190,00:00:29.470
"discuss possible implementations of
stack and",00:00:29.470,00:00:32.660
"then we will go ahead and write some code.
Okay so let's get started",00:00:32.660,00:00:36.980
as we had seen a stack is a list,00:00:36.980,00:00:40.059
"or collection with this restriction, with
this constraint",00:00:40.059,00:00:43.519
that insertion and deletion that we call,00:00:43.519,00:00:46.730
"push and pop operations in a stack must
be performed",00:00:46.730,00:00:51.030
"one element at a time and only from
one",00:00:51.030,00:00:54.539
"end, that we call the top of stack.So if
you see",00:00:54.539,00:00:58.909
"if we can add only this one extra
property only this one",00:00:58.909,00:01:03.069
"extra constraint to any implementation
of a list",00:01:03.069,00:01:06.909
"that insertion and deletion must be
performed",00:01:06.909,00:01:10.090
"only from one end then we can get
a stack.",00:01:10.090,00:01:13.630
"There are two popular ways of creating
lists",00:01:13.630,00:01:16.689
"we have talked about them alot in our
previous lessons we can use",00:01:16.689,00:01:20.450
any of them to create a stack.We can,00:01:20.450,00:01:23.479
implement stacks using a) arrays,00:01:23.479,00:01:26.729
"and b) linked lists both these
implementations are pretty intuitive.",00:01:26.729,00:01:32.039
"Let's first discuss array based
implementation.",00:01:32.039,00:01:35.359
"Let's say I want to create a stack of
integers,",00:01:35.359,00:01:38.909
"so what I can do is I can first create
an array of integers.",00:01:38.909,00:01:43.679
"I am creating an array of 10 integers here,
i'm naming this array",00:01:43.679,00:01:47.509
"'A'. Now I'm going to use this array to
store",00:01:47.509,00:01:51.329
"a stack, what I'm going to say is
that at",00:01:51.329,00:01:54.570
any point some part of this array starting,00:01:54.570,00:01:58.189
index 'zero' till an index marked as,00:01:58.189,00:02:01.609
'top' will be my stack. We can create,00:02:01.609,00:02:06.009
"a variable named 'top' to store the index
of top of stack.",00:02:06.009,00:02:10.399
For an empty stack top is set,00:02:10.399,00:02:13.870
"as -1, right now in this figure",00:02:13.870,00:02:17.310
"top is pointing to an imaginary -1
index in the array.",00:02:17.310,00:02:21.360
An insertion or push operation,00:02:21.360,00:02:24.430
"will be something like this. I will write
a function named",00:02:24.430,00:02:28.540
"'Push' that will take an integer 'x' as
argument.",00:02:28.540,00:02:31.959
"In 'Push' function we will first
increment top",00:02:31.959,00:02:35.690
and then we can fill in integer 'x',00:02:35.690,00:02:39.080
at top index. Here we are assuming that,00:02:39.080,00:02:42.879
"'A' and 'top' will be accessible to 'Push'
function",00:02:42.879,00:02:46.760
"even when they're not passed as
arguments. In 'C' we can declare them as",00:02:46.760,00:02:51.370
global variables,00:02:51.370,00:02:52.610
"or in an object-oriented implementation
all these entities",00:02:52.610,00:02:57.000
"can be members of a class. I'm only
writing pseudo code to explain the",00:02:57.000,00:03:01.709
implementation logic.,00:03:01.709,00:03:03.159
"Okay, so for this example array that I'm
showing here,",00:03:03.159,00:03:06.830
right now top is set as -1,00:03:06.830,00:03:09.959
"so my stack is empty. Let's insert
something onto the stack.",00:03:09.959,00:03:13.730
"I will have to make call to 'Push'
function. Let's say I want to insert",00:03:13.730,00:03:18.159
"number 'two' onto the stack,",00:03:18.159,00:03:19.879
"in a call to 'Push' first 'top' will be
incremented",00:03:19.879,00:03:23.220
"and then the integer passed as argument
will be written at",00:03:23.220,00:03:26.569
"top index, so two will be written at index
'zero'.",00:03:26.569,00:03:30.319
"Let's push one more number, let's say",00:03:30.319,00:03:33.549
"i want to push number 'ten' this time. Once
again 'top' will be incremented",00:03:33.549,00:03:37.689
"'ten' will now go at index 'one', with each
push the stack will expand",00:03:37.689,00:03:42.349
"towards higher indices in the array. To
pop an element from the stack,",00:03:42.349,00:03:47.140
"i am writing a function here for pop
operation. All I need to do is",00:03:47.140,00:03:51.739
decrement 'top' by 'one' with,00:03:51.739,00:03:55.079
"a call to 'pop'. Let's say i am making a call to
'pop' function here,",00:03:55.079,00:03:59.060
top will simply be decremented.,00:03:59.060,00:04:02.060
"Whatever cells are in yellow in this
figure are part of my stack.",00:04:02.060,00:04:05.969
"We do not need to reset this value
before",00:04:05.969,00:04:09.000
"popping, if a cell is not part of stack
anymore we do not care what garbage lies",00:04:09.000,00:04:13.939
there.,00:04:13.939,00:04:14.750
"Next time when we will push we will
modify it anyway.",00:04:14.750,00:04:18.430
"So let's say after this pop operation I want
to perform",00:04:18.430,00:04:22.690
"a push, i want to insert number seven
onto the stack.",00:04:22.690,00:04:26.530
"So top once again will be incremented
and value at index 'two' will be",00:04:26.530,00:04:31.270
"overwritten, the new value will be 7.",00:04:31.270,00:04:34.500
"These two functions 'push' and 'pop' that
i have written here",00:04:34.500,00:04:37.940
"will take constant time. we have simple
operation in these two functions",00:04:37.940,00:04:42.710
"and execution time will not depend upon
size of stack.",00:04:42.710,00:04:46.600
"While defining stack ADT we had said that
all the operations",00:04:46.600,00:04:50.820
"must take constant time or in other words
the time complexity",00:04:50.820,00:04:55.130
should be O(1) .,00:04:55.130,00:04:58.180
"In our implementation here both push
and pop operations are",00:04:58.180,00:05:01.810
O(1). One important thing here,00:05:01.810,00:05:04.819
we can push onto the stack only till,00:05:04.819,00:05:08.020
"array is not exhausted, only till some
space is left in the array.",00:05:08.020,00:05:12.840
"We can have a situation where stack
would consume the whole",00:05:12.840,00:05:16.130
array so top will be equal to highest index,00:05:16.130,00:05:19.550
"in the array.A further push will not be
possible because",00:05:19.550,00:05:23.440
"it will result in an overflow. This is
one limitation with array based",00:05:23.440,00:05:28.229
implementation.,00:05:28.229,00:05:29.340
"To avoid an overflow we can always
create a large enough array,",00:05:29.340,00:05:33.580
"for that we will have to be reasonably sure
that stack will not grow",00:05:33.580,00:05:38.169
"beyond a certain limit. In most practical
cases",00:05:38.169,00:05:41.580
"large enough array works but irrespective
of that",00:05:41.580,00:05:45.130
"we must handle overflow in our
implementation.",00:05:45.130,00:05:49.110
"There are couple of things that we can do in
case of an overflow,",00:05:49.110,00:05:53.600
"'push' function can check whether array is
exhausted or not",00:05:53.600,00:05:56.860
"and it can throw an error in case of an
overflow.",00:05:56.860,00:06:00.180
"So push operation will not succeed, this
will not be a really good behavior.",00:06:00.180,00:06:05.490
"We can do another thing, we can use the
concept of",00:06:05.490,00:06:08.569
"dynamic array. We have talked about
dynamic array in initial lessons in this",00:06:08.569,00:06:12.630
series.,00:06:12.630,00:06:13.680
"What we can do is in case of an
overflow",00:06:13.680,00:06:16.789
we can create a new larger array.,00:06:16.789,00:06:20.039
"We can copy the content of stack from
older filled up array into",00:06:20.039,00:06:24.030
"new array if possible we can delete this
smaller array.",00:06:24.030,00:06:27.780
The cost of copy will be O(n),00:06:27.780,00:06:31.009
"or in simple words time taken to copy
elements from smaller",00:06:31.009,00:06:35.560
"array to larger array will be
proportional",00:06:35.560,00:06:38.610
"to number of elements in stack or
the size of the smaller array",00:06:38.610,00:06:42.520
"because anyway stack will occupy the
whole array.",00:06:42.520,00:06:46.210
"There must be some strategy to decide
the size of larger array.",00:06:46.210,00:06:49.590
"Optimal strategy is that we should
create",00:06:49.590,00:06:52.620
"an array twice the size of smaller
array.",00:06:52.620,00:06:55.620
"There can be two scenarios in a push
operation.",00:06:55.620,00:06:58.729
"In a normal push we will take
constant time,",00:06:58.729,00:07:02.440
"in case of an overflow we will first create
a larger array twice the size of smaller",00:07:02.440,00:07:07.620
"array. Copy all elements in time proportional
to size of the smaller array",00:07:07.620,00:07:12.650
"and then we will take constant time to insert
the new element.",00:07:12.650,00:07:15.860
"The time complexity of push with this
strategy",00:07:15.860,00:07:19.490
will be O(1) in best-case,00:07:19.490,00:07:23.570
"and O(n) in worst case, in case of an
overflow time complexity will be",00:07:23.570,00:07:29.590
O(n),00:07:29.590,00:07:30.139
"but we will still be O(1)
in",00:07:30.139,00:07:33.300
"average case. If we will calculate the
time taken for",00:07:33.300,00:07:37.190
"n pushes then it will be proportional to
n,",00:07:37.190,00:07:40.530
"remember n is the number of elements in
stack.",00:07:40.530,00:07:43.770
O(n) is basically saying that,00:07:43.770,00:07:47.120
time taken will be very close to,00:07:47.120,00:07:50.500
"some constant times n, in simple words
time taken will be proportional to n.",00:07:50.500,00:07:55.599
"If we are taking c into n time for
n pushes,",00:07:55.599,00:07:59.050
"to find out average we will divide by n.
Average time taken for each push will be",00:07:59.050,00:08:04.169
a constant hence O(1) in,00:08:04.169,00:08:07.199
"average case. I will not go in to all the
mathematics of why it's O(n)",00:08:07.199,00:08:12.139
"for n pushes, to know about it you
can check the description of this video",00:08:12.139,00:08:16.620
"for some resources. Okay so this pretty
much is core of our implementation.",00:08:16.620,00:08:21.870
"We have talked about two more operations
in definition of stack",00:08:21.870,00:08:25.419
"ADT, top operation simply returns",00:08:25.419,00:08:28.710
"the element at top of stack so 'top'
function will look something like this.",00:08:28.710,00:08:33.029
"We will simply return the element
at top index.",00:08:33.029,00:08:36.060
"To verify whether stack is empty or not
this is another operation that we have",00:08:36.060,00:08:41.260
defined.,00:08:41.260,00:08:41.740
"We can simply check the value of top if
it is equal to -1,",00:08:41.740,00:08:46.279
"we can say the stack is empty we can
return true",00:08:46.279,00:08:49.520
else we can return false. Sometimes pop,00:08:49.520,00:08:53.900
"and top operations are combined together
in that case pop will not just",00:08:53.900,00:08:58.140
"remove an element from top of stack it
will also return that element.",00:08:58.140,00:09:02.170
"Language libraries in a lot of programming
languages give us",00:09:02.170,00:09:06.110
"implementation of stack. Signature of
functions in these implementations can",00:09:06.110,00:09:10.650
vary,00:09:10.650,00:09:11.320
"slightly. Okay now I will quickly show
you a basic implementation of stack",00:09:11.320,00:09:16.329
"in C. In my C code here I'm going to write
a simple",00:09:16.329,00:09:19.880
"array based implementation to create a
stack of",00:09:19.880,00:09:23.250
"integers. The first thing that I'm going
to do is I'm going to create an array of",00:09:23.250,00:09:27.529
integers,00:09:27.529,00:09:28.610
"as global variable and the size of this
array is 'MAX_SIZE' where",00:09:28.610,00:09:33.779
'MAX_SIZE' is defined by this macro as,00:09:33.779,00:09:37.320
"101. I will declare another global
variable",00:09:37.320,00:09:41.060
"named top and set it as -1 initially,",00:09:41.060,00:09:44.640
"remember top equals -1 means an empty
stack.",00:09:44.640,00:09:47.839
"When a variable is not declared inside
any function",00:09:47.839,00:09:51.010
"it's a global variable, it can be accessed",00:09:51.010,00:09:54.310
"anywhere so you do not have to pass it as
argument",00:09:54.310,00:09:58.060
"to functions and now I will write all
the operations.",00:09:58.060,00:10:01.760
"This is my 'push' function, I'm first
incrementing top",00:10:01.760,00:10:05.800
and then setting the value at top as x.,00:10:05.800,00:10:09.250
"x is the integer to be inserted passed
as argument.",00:10:09.250,00:10:13.140
Instead of writing these two statements,00:10:13.140,00:10:16.140
i can write one statement like this,00:10:16.140,00:10:19.279
"and I will be good. I am using pre
increment operators so",00:10:19.279,00:10:23.959
"increment will happen before assignment. I
also want to handle",00:10:23.959,00:10:29.020
"overflow. We will have an overflow when top
index will be equal to",00:10:29.020,00:10:33.930
"MAX_SIZE-1, highest index",00:10:33.930,00:10:37.339
available in the array. In case of an,00:10:37.339,00:10:40.339
"overflow I simply want to print an
error message",00:10:40.339,00:10:43.470
something like this and return.,00:10:43.470,00:10:47.089
"So in this implementation I'm not using
a dynamic array,",00:10:47.089,00:10:51.150
"in case of overflow push will not
succeed.",00:10:51.150,00:10:54.540
Okay now this is my 'Pop' function,00:10:54.540,00:10:57.720
"i am simply decrementing top. Here also we
must handle one",00:10:57.720,00:11:02.600
"error condition if stack is already
empty",00:11:02.600,00:11:06.079
"we cannot pop, so I'm writing these
statements here if",00:11:06.079,00:11:09.930
top is equal to -1 we cannot,00:11:09.930,00:11:13.030
"pop. I will print this error message that
there is no element to pop",00:11:13.030,00:11:18.040
and simply return. Now let's write,00:11:18.040,00:11:21.170
"top operation, top operation will simply",00:11:21.170,00:11:24.699
"return the integer at top index. So now
my basic operations are all",00:11:24.699,00:11:30.030
"written here. I have already written
Push",00:11:30.030,00:11:33.300
"pop and top. In main function i will make
some calls to 'push' and 'pop'",00:11:33.300,00:11:38.980
"and I want to write one more function
named print and this is",00:11:38.980,00:11:42.510
"something that I'm going to write only
to verify that 'push' and 'pop' are",00:11:42.510,00:11:46.240
happening properly.,00:11:46.240,00:11:47.780
"I will simply print all the elements in
the stack",00:11:47.780,00:11:51.140
"in my main function after each push
or pop operation",00:11:51.140,00:11:55.050
"i will make a call to print. I am writing
multiple function calls, two function",00:11:55.050,00:11:59.620
calls,00:11:59.620,00:12:00.199
"on same line here because I'm short of
space.",00:12:00.199,00:12:03.300
"Remember print function is not a typical
operation available with stack,",00:12:03.300,00:12:07.480
"i am writing it only to test my
implementation.",00:12:07.480,00:12:10.480
"So this pretty much is my code, let's now
run this program and see what happens.",00:12:10.480,00:12:15.579
"This is what I'm getting as output we are
pushing",00:12:15.579,00:12:18.670
"three integers 2,5 and 10 and then we are
performing",00:12:18.670,00:12:22.170
"a pop so 10 gets removed from the
stack",00:12:22.170,00:12:25.980
and then we are pushing 12. So this,00:12:25.980,00:12:29.220
is a basic implementation of stack in C.,00:12:29.220,00:12:32.370
"This is not an ideal implementation, an
ideal implementation should be something",00:12:32.370,00:12:36.540
like,00:12:36.540,00:12:37.160
"we should have a datatype called
stack and",00:12:37.160,00:12:40.480
"we should be able to create instances
of it.",00:12:40.480,00:12:43.510
"We can easily do it in an
object-oriented implementation,",00:12:43.510,00:12:47.510
"we can do it in 'C' also using
structures.",00:12:47.510,00:12:50.630
"Check the description of this video
for link to",00:12:50.630,00:12:53.650
"source code of this implementation as
well as of",00:12:53.650,00:12:56.720
"an object-oriented implementation. In
our next lesson we will discuss",00:12:56.720,00:13:01.540
"linked list implementation of stack this
is it for this lesson.",00:13:01.540,00:13:05.780
Thanks for watching.,00:13:05.780,00:13:06.500

text,start,stop
"In our lessons on linked list so far, we
have implemented some of the",00:00:00.170,00:00:04.690
basic scenarios,00:00:04.690,00:00:06.350
like uh... inserting a node in linked list,00:00:06.350,00:00:09.320
and deleting a node from linked list,00:00:09.320,00:00:11.529
In this lesson,00:00:11.529,00:00:12.980
we will write code,00:00:12.980,00:00:14.079
to reverse a linked list,00:00:14.079,00:00:16.219
This is one of the most,00:00:16.219,00:00:17.550
favorite interview questions,00:00:17.550,00:00:19.750
and this is,00:00:19.750,00:00:21.580
a really interesting problem,00:00:21.580,00:00:23.120
so let me first define the problem. Let's say we  have been given a link to this,00:00:23.120,00:00:27.210
list of,00:00:27.210,00:00:27.660
integers,00:00:27.660,00:00:29.229
like this,00:00:29.229,00:00:30.189
"so this is our input. We have four nodes in
this linked list",00:00:30.189,00:00:34.720
"at addresses hundred, two hundred
one fifty and two fifty respectively.",00:00:34.720,00:00:39.430
I always write these addresses in the logical view because,00:00:39.430,00:00:42.320
it's really important,00:00:42.320,00:00:43.900
we visualize how things are in the memory,00:00:43.900,00:00:46.810
and uh... what is what?,00:00:46.810,00:00:48.730
"Like this first node,",00:00:48.730,00:00:50.710
that we also call the head node is being pointed,00:00:50.710,00:00:54.200
by this particular variable named head,00:00:54.200,00:00:56.600
"so this variable is basically storing
the address of the head node",00:00:56.600,00:01:00.460
"Now, this variable is only the pointer, this is
not the head node itself.",00:01:00.460,00:01:03.950
"And we do not have any other identity
of the linked list",00:01:03.950,00:01:07.369
except the address of the head node.,00:01:07.369,00:01:09.040
"So, given a linked list like this",00:01:09.040,00:01:11.000
if we have to reverse it,00:01:11.000,00:01:12.760
"and by reversing we do not mean
moving around data we cannot move",00:01:12.760,00:01:17.010
5 at,00:01:17.010,00:01:18.170
address 100,00:01:18.170,00:01:19.520
2 at address 250,00:01:19.520,00:01:21.390
and do something like this,00:01:21.390,00:01:22.740
we actually have to adjust the links,00:01:22.740,00:01:25.149
so our output,00:01:25.149,00:01:26.820
"should be something like this,",00:01:26.820,00:01:29.500
"the head pointer should point to this
address two fifty",00:01:29.500,00:01:34.160
"and we should go like  250 to 150, 150 to 200",00:01:34.160,00:01:38.140
and this node at address 100,00:01:38.140,00:01:40.040
should have,00:01:40.040,00:01:40.940
"address 0,",00:01:40.940,00:01:42.230
or null.,00:01:42.230,00:01:43.400
In each of these nodes this first field in red is the data part,00:01:43.400,00:01:47.380
and the second field is the address part.,00:01:47.380,00:01:48.929
"So, this is what we will get when we'll",00:01:48.929,00:01:51.359
reverse the list.,00:01:51.359,00:01:52.940
"there are two approaches to solve this
problem",00:01:52.940,00:01:55.520
one is an iterative approach where we'll be using a loop,00:01:55.520,00:01:58.850
We'll,00:01:58.850,00:01:59.679
traverse through the list,00:01:59.679,00:02:01.200
and at each step we will revert,00:02:01.200,00:02:03.420
one of the links.,00:02:03.420,00:02:05.579
Another solution is,00:02:05.579,00:02:06.819
using recursion.,00:02:06.819,00:02:08.559
"In this lesson, we will",00:02:08.559,00:02:09.819
try to understand the iterative solution.,00:02:09.819,00:02:12.210
"So, coming back to our input list",00:02:12.210,00:02:15.609
the iterative solution is relatively easier to understand,00:02:15.609,00:02:19.159
what we can do is we can traverse the whole list,00:02:19.159,00:02:22.209
and uh... as we go to,00:02:22.209,00:02:23.980
each node,00:02:23.980,00:02:25.050
we can adjust the link part of that node,00:02:25.050,00:02:28.010
to make it,00:02:28.010,00:02:28.740
point to the,00:02:28.740,00:02:29.430
previous node instead of the next node.,00:02:29.430,00:02:32.180
"So, we will start at the first node",00:02:32.180,00:02:34.970
"At each step we want to reverse the link, so we want  to make the node point",00:02:34.970,00:02:39.639
to the previous note instead of the,00:02:39.639,00:02:41.969
next node.,00:02:41.969,00:02:42.940
"For the first node there is no previous node,",00:02:42.940,00:02:46.430
"so lets say the previous node is NULL,",00:02:46.430,00:02:47.169
"and now we want to cut this particular
link",00:02:47.169,00:02:50.509
"and we want to build this
particular link. So, we will simply",00:02:50.509,00:02:53.999
change the address field to 0,00:02:53.999,00:02:56.959
"and we have reversed the link part of
this particular node.",00:02:56.959,00:02:59.829
"And now, we will go to the next node in the list.",00:02:59.829,00:03:03.170
We will come to this node.,00:03:03.170,00:03:04.750
"Of course, the question would be how
would we go to the next node if",00:03:04.750,00:03:08.310
we have,00:03:08.310,00:03:08.790
broken this link here!,00:03:08.790,00:03:10.549
"We will come back to that in the
implementation details.",00:03:10.549,00:03:13.869
Let's say,00:03:13.869,00:03:14.760
we are able to traverse the list and go to each of the nodes at each step.,00:03:14.760,00:03:18.940
Let's say we store all the relevant information to do that,00:03:18.940,00:03:22.239
in some temporary variables.,00:03:22.239,00:03:24.279
"Now, this node again we will reverse the links,  it was the link so the address part will be set as hundred",00:03:24.279,00:03:28.870
here.,00:03:28.870,00:03:30.059
"Now, we will go to the next node at address hundred and fifty,once again to",00:03:30.059,00:03:34.129
"reverse the link, we will set the address as",00:03:34.129,00:03:36.569
200 here.,00:03:36.569,00:03:38.589
"So, we will break this link and",00:03:38.589,00:03:41.399
"basically we are building this link,",00:03:41.399,00:03:43.389
and now we will go to,00:03:43.389,00:03:45.079
"address two fifty, the next node",00:03:45.079,00:03:47.440
and we will set the address one fifty here,00:03:47.440,00:03:49.740
so we will cur this link,00:03:49.740,00:03:51.579
and build this link!,00:03:51.579,00:03:53.809
"And finally, when we have reached the last node, we will adjust the address",00:03:53.809,00:03:59.790
in the head variable,00:03:59.790,00:04:01.329
"to two fifty. So,this particular variable, this particular pointer",00:04:01.329,00:04:05.099
will point to this node at address 250.,00:04:05.099,00:04:08.329
"And, our linked list is reversed now!",00:04:08.329,00:04:12.169
"So, let us implement this particular logic
in the real C program.",00:04:12.169,00:04:16.400
"I will redraw the original input list,",00:04:16.400,00:04:19.829
"in my C code,",00:04:19.829,00:04:21.219
i would define node,00:04:21.219,00:04:22.820
as a structure,00:04:22.820,00:04:24.310
like this!,00:04:24.310,00:04:25.539
"This is how we have defined a node in our
previous lessons.",00:04:25.539,00:04:29.719
"So, there will be two fields,",00:04:29.719,00:04:31.229
uh... one,00:04:31.229,00:04:32.349
"to store the data which will be of
type integer and another to store the",00:04:32.349,00:04:35.939
address of the next node,00:04:35.939,00:04:38.089
We will name this field 'next' of type,00:04:38.089,00:04:41.340
"pointer to node,",00:04:41.340,00:04:42.740
"and let's say,",00:04:42.740,00:04:44.280
"head is a global variable,so, head is a pointer to node, head is a variable",00:04:44.280,00:04:48.410
which is a pointer to node/,00:04:48.410,00:04:50.460
"And, it is a global variable. So, it is accessible to all the functions.",00:04:50.460,00:04:55.580
"We do not need to pass it around to
functions,",00:04:55.580,00:04:58.259
"and now, all I want to do in my code is that,I
want to write a reverse function",00:04:58.259,00:05:02.469
that will reverse,00:05:02.469,00:05:03.840
"the linked list which is pointed to by
this particular pointer.",00:05:03.840,00:05:08.830
"As we said, we'll traverse the
whole list and at each step",00:05:08.830,00:05:12.819
"we will modify the link field of the
node to make it point to the",00:05:12.819,00:05:16.860
previous node instead of the next node.,00:05:16.860,00:05:19.949
"So, how do we traverse the list?",00:05:19.949,00:05:22.119
"We would traverse the list in our C code,",00:05:22.119,00:05:24.989
"something like this,",00:05:24.989,00:05:26.429
we will first take a variable which will be,00:05:26.429,00:05:29.489
pointer to node,00:05:29.489,00:05:30.520
Let's say we will name,00:05:30.520,00:05:31.689
it temp,00:05:31.689,00:05:32.930
uh... then first we will set temp to head,00:05:32.930,00:05:36.370
"By saying this, we will mean",00:05:36.370,00:05:38.469
temp points to,00:05:38.469,00:05:40.240
the first node.,00:05:40.240,00:05:41.889
"And then, we will run a loop like this. 
We will say that",00:05:41.889,00:05:45.289
"while temp is not equal to NULL,",00:05:45.289,00:05:47.659
"take temp to the next address with a
statement like",00:05:47.659,00:05:52.110
temp=temp.next,00:05:52.110,00:05:53.780
"uh... in our problem here, we don't just
have to look at what's the list",00:05:53.780,00:05:57.649
as we traverse the list we have to,00:05:57.649,00:05:59.900
"uh... reverse the links so we have to
set the address field of a",00:05:59.900,00:06:03.810
particular node,00:06:03.810,00:06:04.940
as address of,00:06:04.940,00:06:06.229
the previous node,00:06:06.229,00:06:07.180
instead of the next node.,00:06:07.180,00:06:08.899
"Now in a linked list, we would always know the address of the next node but",00:06:08.899,00:06:12.929
"we would never know the address of the
previous node,",00:06:12.929,00:06:15.449
"so as we traverse the list, we will have to keep",00:06:15.449,00:06:18.139
"track of the previous node in another
variable.",00:06:18.139,00:06:20.900
"So, what i'll be doing, is something
like this.",00:06:20.900,00:06:24.080
"Now, I will also declare a variable named",00:06:24.080,00:06:26.500
previous,00:06:26.500,00:06:27.579
"and initially set it to NULL,",00:06:27.579,00:06:29.900
"because for the first node or the
head node,",00:06:29.900,00:06:32.900
the previous node is NULL.,00:06:32.900,00:06:34.930
"And now, in my loop, we will have to
update both these variables,",00:06:34.930,00:06:39.600
and the variable,00:06:39.600,00:06:40.340
temp that will store the,00:06:40.340,00:06:41.899
current node and the variable prev,00:06:41.899,00:06:45.180
that will store the address of the previous node,00:06:45.180,00:06:48.389
"and now in my loop i can do something
like this",00:06:48.389,00:06:51.499
"At each step,",00:06:51.499,00:06:52.880
"if temp is our current node, we are",00:06:52.880,00:06:55.759
traversing the list,00:06:55.759,00:06:57.289
then we will say that,00:06:57.289,00:06:58.270
temp.next is equal to previous,00:06:58.270,00:07:01.050
"So, we will set the link part of the
current node as the address of the",00:07:01.050,00:07:04.839
previous node.,00:07:04.839,00:07:05.879
"In our example here, at the",00:07:05.879,00:07:07.360
first step,00:07:07.360,00:07:08.340
"we will say that,",00:07:08.340,00:07:10.370
temp.next will be 0.,00:07:10.370,00:07:13.020
NULL is nothing but address 0.,00:07:13.020,00:07:15.069
"So, we will cut this link",00:07:15.069,00:07:17.229
and we will build,00:07:17.229,00:07:18.399
this link.,00:07:18.399,00:07:19.550
"Now, we should be able to",00:07:19.550,00:07:21.800
"move temp to two hundred and we should
be able to move previous to hundred.",00:07:21.800,00:07:25.389
"Now, in the next step",00:07:25.389,00:07:26.879
but there is a problem,00:07:26.879,00:07:28.329
"as soon as we adjusted the link of
this particular node at address hundred",00:07:28.329,00:07:33.219
"to make it point to NULL,",00:07:33.219,00:07:35.219
"we lost the address of the next node.
So how do we move temp",00:07:35.219,00:07:40.259
to this particular node at address two hundered.  We cannot say that temp =,00:07:40.259,00:07:43.899
temp.next.,00:07:43.899,00:07:44.680
"And now,",00:07:44.680,00:07:45.750
"if we say temp=temp.next, now we will go to NULL.",00:07:45.750,00:07:49.080
"So, this is a problem",00:07:49.080,00:07:51.150
so at each step in our iteration before we,00:07:51.150,00:07:54.819
set the link field of  the,00:07:54.819,00:07:56.610
the current node to make it point to the,00:07:56.610,00:07:58.319
previous node,00:07:58.319,00:07:59.549
we should store the address of the next node,00:07:59.549,00:08:02.479
"in a temporary variable,  in another
temporary variable,",00:08:02.479,00:08:05.439
"So, what I will do here is something like
this",00:08:05.439,00:08:08.479
first of all i want to name this particular variable temp,00:08:08.479,00:08:12.300
as current,00:08:12.300,00:08:13.789
to mean that,00:08:13.789,00:08:14.690
"this is the current node at each stage
in my iteration",00:08:14.690,00:08:18.580
"so we initially set current to head and
then",00:08:18.580,00:08:22.060
"we are running the loop as while current is not
equal to NULL,",00:08:22.060,00:08:25.589
and then i have also declared one more temporary pointer variable named next,00:08:25.589,00:08:30.409
what i will do at,00:08:30.409,00:08:32.740
"each step in my iteration inside the while
loop",00:08:32.740,00:08:35.660
is that first,00:08:35.660,00:08:37.190
I will say that next=current.next,00:08:37.190,00:08:40.789
So first I will store the address of the next node in this particular,00:08:40.789,00:08:44.690
variable next.,00:08:44.690,00:08:46.459
"So in our example here, for the first node initially, things will look,",00:08:46.459,00:08:50.269
"something like this. Now we can set
uh... link part of the current node as the",00:08:50.269,00:08:54.690
"address of the previous node
 with a statement like this",00:08:54.690,00:08:58.010
"So, when we will write the address 0 here, initially",00:08:58.010,00:09:01.270
"we will break this link, and",00:09:01.270,00:09:03.610
create this link,00:09:03.610,00:09:05.050
"Now, we will not loose the information
about the next node,",00:09:05.050,00:09:08.290
"now we can redefine our previous and
current",00:09:08.290,00:09:11.050
so we will first move,00:09:11.050,00:09:12.620
previous to current,00:09:12.620,00:09:14.190
and then we will move current to next,00:09:14.190,00:09:17.390
Please note that this particular variable next is a local variable,00:09:17.390,00:09:21.519
in the Reverse function,00:09:21.519,00:09:23.200
and when we say something like current.next we mean the,00:09:23.200,00:09:26.600
"link field in the node,",00:09:26.600,00:09:28.340
"well when we simply say next, we mean this particular local",00:09:28.340,00:09:33.150
"pointer variable, so they're different",00:09:33.150,00:09:35.140
"this is not current.next, actually
this is current -&gt; next",00:09:35.140,00:09:38.780
which is an alternate syntax for,00:09:38.780,00:09:41.710
"*(current).next so we use *
operator to de- reference",00:09:41.710,00:09:45.850
that address,00:09:45.850,00:09:46.770
"and then we access the next field for
the sake of saying we say,  current.next",00:09:46.770,00:09:51.270
or temp.next,00:09:51.270,00:09:53.090
uh... so with these two lines in our loop,00:09:53.090,00:09:55.960
we are resetting out current and previous pointers.,00:09:55.960,00:09:58.939
This is how we are traversing the list.,00:09:58.939,00:10:00.879
"Now,  if you see in the next iteration",00:10:00.879,00:10:03.450
"current is 200, not equal to NULL",00:10:03.450,00:10:06.100
NULL is zero,00:10:06.100,00:10:07.629
"so we will go to this particular
statement",00:10:07.629,00:10:10.150
next is equal to current.next.,00:10:10.150,00:10:12.350
"So, next will now store the address hundred
and fifty,",00:10:12.350,00:10:15.350
and not we will say current.next is equal to,00:10:15.350,00:10:17.450
"previous. So, we will cut this link,",00:10:17.450,00:10:19.920
uh...previous is hundred right now so we will set hundred here.,00:10:19.920,00:10:23.300
"So basically,  we will build this particular
link",00:10:23.300,00:10:26.110
and then we will move,00:10:26.110,00:10:27.720
then we will first move previous to current,00:10:27.720,00:10:30.320
and then move current to next.,00:10:30.320,00:10:32.890
"And, we will go on like this.",00:10:32.890,00:10:39.890
"So finally,",00:10:44.170,00:10:45.390
"we will reach a stage like this when current will be equal to NULL, we will come",00:10:45.390,00:10:49.010
"out of the loop,",00:10:49.010,00:10:50.170
and when we will come out of the loop,00:10:50.170,00:10:52.340
this particular variable,00:10:52.340,00:10:53.930
"previous, this particular pointer
previous will store the address of the last",00:10:53.930,00:10:58.020
node.,00:10:58.020,00:10:59.040
"And, there is one more thing remaining
here.We need",00:10:59.040,00:11:03.180
to adjust this particular variable head,00:11:03.180,00:11:06.280
"uh... this link at this stage does not
exist",00:11:06.280,00:11:09.330
and in my code I will say,00:11:09.330,00:11:11.400
head should now be equal to,00:11:11.400,00:11:13.440
the address in variable,00:11:13.440,00:11:14.760
previous!,00:11:14.760,00:11:15.800
"So, head is now 250",00:11:15.800,00:11:18.560
"this is our new head,",00:11:18.560,00:11:20.460
and now our list is,00:11:20.460,00:11:22.510
reversed,00:11:22.510,00:11:23.920
"uh... there are a couple of things that
i want to point out here",00:11:23.920,00:11:27.620
one thing is that,00:11:27.620,00:11:28.540
"we must see that our
implementation is working for all test",00:11:28.540,00:11:31.490
cases and so we must also verify it for,00:11:31.490,00:11:34.760
"special or corner test cases.  In this
case corner test case will be",00:11:34.760,00:11:39.270
when the list is empty.,00:11:39.270,00:11:41.070
In that case head will be NULL.,00:11:41.070,00:11:43.330
"or, when the list is having only one node",00:11:43.330,00:11:46.490
"if you see this particular
implementation will work for these two",00:11:46.490,00:11:50.100
scenarios,00:11:50.100,00:11:51.320
and give it some time and you,00:11:51.320,00:11:53.360
should be able to figure it out,00:11:53.360,00:11:55.040
let's not run this code with,00:11:55.040,00:11:56.709
"complete implementation of all the
functions to",00:11:56.709,00:11:59.570
insert and print nodes.,00:11:59.570,00:12:01.900
"In my code here,  uh... i have written Reverse function",00:12:01.900,00:12:05.430
"to accep the address of the head node as
argument",00:12:05.430,00:12:09.260
"and then return the address of the head 
node after modification of the list",00:12:09.260,00:12:14.160
after reversal of the list,00:12:14.160,00:12:15.809
"and then I have written the the main method in
which head as a local",00:12:15.809,00:12:19.699
variable,00:12:19.699,00:12:21.130
and then i'm using couple of,00:12:21.130,00:12:22.700
"insert functions and making couple of
calls to insert function",00:12:22.700,00:12:27.210
insert function also takes two arguments,00:12:27.210,00:12:29.680
"the address of the head node and the data
 to be inserted and",00:12:29.680,00:12:32.300
it returns back,00:12:32.300,00:12:33.770
the address of  the head node,00:12:33.770,00:12:36.030
it will either be modified or not modified,00:12:36.030,00:12:38.940
uh...lets say we are inserting this at the end of the list,00:12:38.940,00:12:42.350
2 4 6 8,00:12:42.350,00:12:44.710
and then we are making call to the,00:12:44.710,00:12:47.160
print function which we have written,00:12:47.160,00:12:48.959
to print the,00:12:48.959,00:12:50.010
elements in the list,00:12:50.010,00:12:51.420
"and then i'm making a call to reverse
and finally printing again",00:12:51.420,00:12:55.140
my logic of the reverse function remains the same except that i've,00:12:55.140,00:12:58.240
changed,00:12:58.240,00:12:59.260
the method signature,00:12:59.260,00:13:02.050
and in the end,00:13:02.050,00:13:02.700
"I am returning head,",00:13:02.700,00:13:05.150
"which will return the address of the
head node",00:13:05.150,00:13:08.360
let's say we have written all the insert and print functions correctly,00:13:08.360,00:13:13.370
"these are the two functions insert and print
so let's now run this code and see what",00:13:13.370,00:13:17.410
happens before the list is reversed the list is two four six eight and after,00:13:17.410,00:13:22.030
"the list is reversed the output is eight six
four two",00:13:22.030,00:13:25.890
uh... let us try for the case the list has only one element in,00:13:25.890,00:13:29.430
the list,00:13:29.430,00:13:31.690
"so i will remove, i will comment out these three insert
insert statements and this also seems to",00:13:31.690,00:13:36.730
"be working.So, this was reversal of the linked list through iteration.",00:13:36.730,00:13:41.710
"In the next lesson, we will write code to reverse linked list using recursion.",00:13:41.710,00:13:46.960
"So, thanks for watching!",00:13:46.960,00:13:47.780

text,start,stop
"In this lesson, we will",00:00:00.560,00:00:02.190
"introduce you to linked list data
structure",00:00:02.190,00:00:05.580
"In our previous lesson, we tried to
implement a dynamic list using arrays and",00:00:05.580,00:00:11.149
we had some issues there,00:00:11.149,00:00:13.219
"it was not most efficient in terms of
memory usage, in terms of memory",00:00:13.219,00:00:17.009
consumption,00:00:17.009,00:00:18.359
"When we use arrays, we have some
limitations",00:00:18.359,00:00:21.869
"To be able to understand linked list well,",00:00:21.869,00:00:25.109
"we need to understand these
limitations",00:00:25.109,00:00:27.499
so i'm going to tell you a simple story,00:00:27.499,00:00:30.039
to help you understand this,00:00:30.039,00:00:32.310
"let us say this is computer's memory and
each partition here is one byte of memory",00:00:32.310,00:00:37.610
Now as we know,00:00:37.610,00:00:38.870
each byte of memory,00:00:38.870,00:00:40.530
has an address,00:00:40.530,00:00:42.090
"We are showing only a section of the
memory, that's why it is extending towards",00:00:42.090,00:00:46.030
the bottom and the top,00:00:46.030,00:00:47.730
"let's say that address increases from
bottom to top",00:00:47.730,00:00:51.360
"so if this bike is address 200,
the next byte would be address",00:00:51.360,00:00:55.020
201,00:00:55.020,00:00:56.250
and next byte would be address 202 and so on,00:00:56.250,00:00:59.730
what I want to do is,00:00:59.730,00:01:01.110
i want to draw this memory from,00:01:01.110,00:01:03.110
"left to right horizontally instead
of drawing it from bottom to top",00:01:03.110,00:01:07.330
like this,00:01:07.330,00:01:08.689
uh... this looks better,00:01:08.689,00:01:10.480
"let's say this byte here is address
 200 and as we go",00:01:10.480,00:01:14.220
towards the right,00:01:14.220,00:01:15.479
"the address increases, so this is like 201",00:01:15.479,00:01:18.580
"and we go on like 202, 203 and so on",00:01:18.580,00:01:22.640
it doesn't really matter whether we show memory from bottom to top or,00:01:22.640,00:01:26.210
left to right,00:01:26.210,00:01:27.360
"these are just logical ways to look at
the memory",00:01:27.360,00:01:29.900
so coming back to our story,00:01:29.900,00:01:32.040
Memory is a crucial resource,00:01:32.040,00:01:34.299
and all the applications keep asking for it.,00:01:34.299,00:01:37.300
"So, Mr. computer has given this job
of managing the memory",00:01:37.300,00:01:41.200
"to one of his components, to one of his
guys",00:01:41.200,00:01:43.899
who he calls the memory manager,00:01:43.899,00:01:46.210
now this guy keeps track of,00:01:46.210,00:01:48.960
"what part of the memory is free and what
part of the memory is allocated",00:01:48.960,00:01:52.870
"and anyone who needs memory to store
something needs to talk to this guy",00:01:52.870,00:01:58.700
Albert is our programmer,00:01:58.700,00:02:00.320
and he is building an application,00:02:00.320,00:02:02.810
he needs to store some data,00:02:02.810,00:02:04.720
"in the memory, so he needs to talk to the
memory manager",00:02:04.720,00:02:08.299
"He can talk to the memory manager in
 a high level language like C, let us say",00:02:08.299,00:02:11.939
he  is using,00:02:11.939,00:02:13.159
C to talk to the memory manager,00:02:13.159,00:02:15.349
First he wants to store an integer in the memory,00:02:15.349,00:02:18.439
"so he communicates this to memory
manager by declaring",00:02:18.439,00:02:22.249
an integer variable,00:02:22.249,00:02:24.419
something like this,00:02:24.419,00:02:26.059
"the memory manager sees this declaration
and",00:02:26.059,00:02:28.629
he's says that ok,00:02:28.629,00:02:30.229
you need,00:02:30.229,00:02:31.289
to store an integer variable,00:02:31.289,00:02:33.209
so i need to give you four bytes of memory,00:02:33.209,00:02:36.139
"because integer variable is stored in
four bytes",00:02:36.139,00:02:39.400
in a typical architecture.,00:02:39.400,00:02:41.040
"and let us say in this architecture, it is
stored in four bytes",00:02:41.040,00:02:44.949
so the memory manager looks for,00:02:44.949,00:02:46.900
four bites of free space in the memory,00:02:46.900,00:02:50.109
and assigns it or allocates it ,00:02:50.109,00:02:52.300
for valuable x,00:02:52.300,00:02:53.839
"Address of a block of memory is the address 
of the first byte in the memory",00:02:53.839,00:02:58.069
so let us say this first byte of,00:02:58.069,00:03:00.359
memory here is,00:03:00.359,00:03:02.209
"at address 217, so",00:03:02.209,00:03:05.539
variable x is at address,00:03:05.539,00:03:07.569
217,00:03:07.569,00:03:08.939
"so memory manager kind of communicates
it back to Albert that hey I have",00:03:08.939,00:03:12.809
assigned address 217 for your,00:03:12.809,00:03:15.279
variable x,00:03:15.279,00:03:16.549
you can store whatever you want there.,00:03:16.549,00:03:18.839
and Albert can fill-in any data,00:03:18.839,00:03:21.400
into this valuable,00:03:21.400,00:03:23.829
"now albert needs to store a list of integers,
a list of numbers",00:03:23.829,00:03:29.519
"and and he thinks that the maximum number
of",00:03:29.519,00:03:31.669
integers in this list will be 4.,00:03:31.669,00:03:34.949
so he asks the memory manager,00:03:34.949,00:03:37.490
for an integer array of size ,00:03:37.490,00:03:39.599
four names 'A',00:03:39.599,00:03:41.589
"Now, arrays is always stored in memory as one contiguous block of memory. ",00:03:41.589,00:03:46.359
"So memory manager is like ok, i need to look for",00:03:46.359,00:03:49.529
a block of memory of 16 bytes,00:03:49.529,00:03:52.659
for this variable ,00:03:52.659,00:03:53.880
this array A.,00:03:53.880,00:03:55.449
"so the memory manager allocates this block
starting address two zero one and",00:03:55.449,00:04:00.299
ending address,00:04:00.299,00:04:02.289
two one six,00:04:02.289,00:04:03.149
for this variable 'A',00:04:03.149,00:04:04.659
which is ,00:04:04.659,00:04:05.539
an array of four integers.,00:04:05.539,00:04:08.399
"uh... because array is stored as one
contiguous block of memory",00:04:08.399,00:04:12.279
and,00:04:12.279,00:04:13.139
memory manager conveys the starting address of this block,00:04:13.139,00:04:16.469
whenever Albert tries to access any of the elements in the array,00:04:16.469,00:04:20.289
"Let's say he tries to access,",00:04:20.289,00:04:22.310
let's say he tries to write the value at the ,00:04:22.310,00:04:25.879
fourth element in the array.,00:04:25.879,00:04:27.310
"which he accesses as A[3], Albert's
application knows where to write this",00:04:27.310,00:04:32.310
particular,00:04:32.310,00:04:33.469
value because it knows the base address,00:04:33.469,00:04:36.409
the starting address of,00:04:36.409,00:04:37.939
the block 'A',00:04:37.939,00:04:39.740
the array 'A' and,00:04:39.740,00:04:41.559
from base address,00:04:41.559,00:04:43.500
using the,00:04:43.500,00:04:44.729
index which is 3 here,00:04:44.729,00:04:47.159
it calculates the address of,00:04:47.159,00:04:49.340
A[3],00:04:49.340,00:04:50.369
"so it knows that A[3] is at address
two one three. So, to",00:04:50.369,00:04:53.729
access any of the,00:04:53.729,00:04:55.820
elements in the array,00:04:55.820,00:04:57.259
the application takes constant time,00:04:57.259,00:05:00.319
"and this is one awesome thing  about arrays
that irrespective of the size of the",00:05:00.319,00:05:04.460
arrays,00:05:04.460,00:05:05.459
"uh... the application,an application
can access any of the elements in an array ",00:05:05.459,00:05:10.150
in constant time,00:05:10.150,00:05:11.879
now let's say Albert uses this array of 4 integers to,00:05:11.879,00:05:15.869
store his list,00:05:15.869,00:05:17.569
"so i'll fill in some values here at
these positions ,let's say this is 8",00:05:17.569,00:05:21.719
this is 2,00:05:21.719,00:05:23.029
"this is 6, this is 5, this is 4",00:05:23.029,00:05:26.369
"Now Albert at some point feels that ok, i need to",00:05:26.369,00:05:29.949
have one more element in this list,00:05:29.949,00:05:32.610
"now he has declared an array of size four
and he wants to add a fifith element in ",00:05:32.610,00:05:36.710
the array,00:05:36.710,00:05:37.669
so he asks,00:05:37.669,00:05:39.349
"the memory manager that hey i want to
extend my array 'A'",00:05:39.349,00:05:43.699
is it possible to do so,00:05:43.699,00:05:45.319
i want to extend the same block,00:05:45.319,00:05:47.409
and the memory manager is like when i allocate,00:05:47.409,00:05:50.649
"memory for an array, I do not expect that you will expect an extension, so",00:05:50.649,00:05:55.399
i use whatever memory available adjacent to that block ,00:05:55.399,00:05:59.289
for other variables,00:05:59.289,00:06:00.960
"in some cases I may extend the same
block, but",00:06:00.960,00:06:04.009
"in this case, I have",00:06:04.009,00:06:05.839
an element,00:06:05.839,00:06:07.389
"a variable 'x' ... next to your block.So,
i cannot give you an extension",00:06:07.389,00:06:11.989
"so Albert is like what all options do i
have",00:06:11.989,00:06:14.989
"Memory manager is like, you can
tell me the new size and I can recreate a",00:06:14.989,00:06:19.459
new block,00:06:19.459,00:06:20.989
at some new address,00:06:20.989,00:06:22.569
"and we will have to copy all the
elements from the previous block to the",00:06:22.569,00:06:26.199
new block,00:06:26.199,00:06:27.469
"so Albert says that ok, let's do it",00:06:27.469,00:06:29.760
but the memory manager is like,00:06:29.760,00:06:31.249
"you still need to give me the size of
the new block",00:06:31.249,00:06:33.949
Albert thinks that this time he will give a really ,00:06:33.949,00:06:36.550
large size for the new array or the new block.,00:06:36.550,00:06:39.280
so that it does not fill up.,00:06:39.280,00:06:41.279
this new block starting address 224 is allocated,00:06:41.279,00:06:45.149
Albert asks memory manager to free the previous block. ,00:06:45.149,00:06:48.400
"and this is some cost. He has to copy
all the elements, all the numbers from",00:06:48.400,00:06:52.310
the previous block into the new block,00:06:52.310,00:06:54.539
"and now he can add one more element to
this list",00:06:54.539,00:06:57.819
"and he has kept his array large this
time",00:06:57.819,00:07:00.909
just in case he needs,00:07:00.909,00:07:02.330
more numbers in the list,00:07:02.330,00:07:04.440
The only option that Albert ,00:07:04.440,00:07:06.289
had was to create,00:07:06.289,00:07:08.020
"'A' as an entirely new block, as an
entirely new array",00:07:08.020,00:07:12.269
"and albert is it still feeling bad
because if the list is too small",00:07:12.269,00:07:16.429
he is not using some,00:07:16.429,00:07:18.150
part of the array,00:07:18.150,00:07:19.379
and so memory is getting wasted,00:07:19.379,00:07:21.360
"and if the list again grows too much he
will again have to",00:07:21.360,00:07:25.499
"create a new array, a new block and he will
again have to copy all the elements",00:07:25.499,00:07:29.849
"from the previous block into the new
block",00:07:29.849,00:07:32.769
"Albert is desperately seeking a
solution to this problem",00:07:32.769,00:07:36.530
and the solution to this problem,00:07:36.530,00:07:38.620
is a data structure named,00:07:38.620,00:07:41.569
linked list,00:07:41.569,00:07:43.059
so let us not try to understand,00:07:43.059,00:07:45.360
linked list data structure and see how it solves,00:07:45.360,00:07:48.659
Albert's problem,00:07:48.659,00:07:50.059
what Albert can do is that,00:07:50.059,00:07:52.300
"instead of asking the memory manager
for an array",00:07:52.300,00:07:55.110
which will be one ,00:07:55.110,00:07:56.239
large contiguous block of memory,00:07:56.239,00:07:58.829
he can ask memory,00:07:58.829,00:08:00.150
for one unit of data at a time,00:08:00.150,00:08:02.169
for one element at a time,00:08:02.169,00:08:04.879
in a separate request,00:08:04.879,00:08:07.119
I'm cleaning up the memory here,00:08:07.119,00:08:10.150
once again let's say Albert wants to store,00:08:10.150,00:08:12.720
this list of four integers in the memory,00:08:12.720,00:08:15.339
what if he,00:08:15.339,00:08:16.279
"requests memory for one integer at a time.
So, first he pings memory manager for ",00:08:16.279,00:08:21.259
some memory to store number six,00:08:21.259,00:08:23.300
"memory manager will be like ok you need
space to store an integer",00:08:23.300,00:08:27.010
"so you get this block of four bytes
at address",00:08:27.010,00:08:30.579
204,00:08:30.579,00:08:31.889
so Albert can ,00:08:31.889,00:08:33.010
store number six here,00:08:33.010,00:08:34.760
"now Albert makes another reques,t a
separate request",00:08:34.760,00:08:37.640
for number five,00:08:37.640,00:08:39.310
"let's say he gets this blocks starting
address two one seven",00:08:39.310,00:08:42.729
for number five,00:08:42.729,00:08:43.980
"because he makes a separate request, he may or may not get",00:08:43.980,00:08:48.120
memory adjacent to number 6.,00:08:48.120,00:08:50.310
higher probability is that  he will not get,00:08:50.310,00:08:52.470
"an adjacent memory location so
similarly Albert makes uh... separate",00:08:52.470,00:08:56.440
requests,00:08:56.440,00:08:57.470
for number four and two,00:08:57.470,00:08:58.989
so let's say he gets these two blocks at address 232 and 242 respectively ,00:08:58.989,00:09:03.129
 for numbers,00:09:03.129,00:09:04.460
four and two,00:09:04.460,00:09:05.420
so as you can see when Albert makes separate request,00:09:05.420,00:09:09.140
for each integer,00:09:09.140,00:09:10.520
"instead of getting one contiguous block of 
memory, he gets these disjoint",00:09:10.520,00:09:15.120
non-contiguous blocks of memory,00:09:15.120,00:09:18.710
so we need to store some more information here,00:09:18.710,00:09:21.340
we need to store the information that this  is the first,00:09:21.340,00:09:24.550
"element in the list and this is the
second element in the list",00:09:24.550,00:09:27.870
"so we need to link these blocks together
somehow",00:09:27.870,00:09:30.520
"we an array, it was very simple",00:09:30.520,00:09:32.440
"we had one contiguous block of memory, so",00:09:32.440,00:09:35.410
"so we knew where a particular element is
by calculating its address using the",00:09:35.410,00:09:40.270
"starting address of the blocks and the
position of the element in the array",00:09:40.270,00:09:43.860
"but here, we need to store the
information that this is the first block",00:09:43.860,00:09:47.540
"which  stores the first element and 
this is the second block which stores the",00:09:47.540,00:09:50.640
second element,00:09:50.640,00:09:51.980
and so on,00:09:51.980,00:09:53.520
"to link these blocks together and
to store the information that this is",00:09:53.520,00:09:56.990
"the first block in the list and this is
the",00:09:56.990,00:09:59.500
second block in the list,00:09:59.500,00:10:01.170
what we can do is that,00:10:01.170,00:10:02.630
"we can store some extra information with
each block",00:10:02.630,00:10:06.180
"so what if we can have two parts in each
block something like this",00:10:06.180,00:10:10.520
"and in one part of the block, we store
 the data or the value",00:10:10.520,00:10:15.050
"and in the other part of the block
we store the address of the next block.",00:10:15.050,00:10:20.310
in this example in the first block the address part,00:10:20.310,00:10:23.710
"would be 217, the address of the next block that stores 5",00:10:23.710,00:10:28.570
and in this,00:10:28.570,00:10:29.559
next block or the second block address part would be,00:10:29.559,00:10:32.780
232,00:10:32.780,00:10:34.510
In the block at address 232,00:10:34.510,00:10:36.830
We will store the address 242,00:10:36.830,00:10:39.620
the address of the next block that stores,00:10:39.620,00:10:42.120
number two,00:10:42.120,00:10:43.220
and the block at 242 is the last block.,00:10:43.220,00:10:46.020
"there is no next block after this so
in the",00:10:46.020,00:10:48.690
address part we can have,00:10:48.690,00:10:50.680
"address as zero, zero is",00:10:50.680,00:10:52.640
invalid address,00:10:52.640,00:10:53.950
zero can be used to mark that this is the,00:10:53.950,00:10:56.710
end of the list,00:10:56.710,00:10:57.809
there is no link to the next,00:10:57.809,00:10:59.650
uh... node or next block after this ,00:10:59.650,00:11:02.590
particular block,00:11:02.590,00:11:04.470
so Albert now actually has to request,00:11:04.470,00:11:07.150
"memory manager for a block of money that
will store",00:11:07.150,00:11:10.590
two variables,00:11:10.590,00:11:11.670
one an integer variable that will store the value,00:11:11.670,00:11:15.240
of our element,00:11:15.240,00:11:16.530
"and one a pointer variable that will store
 the address of the next block",00:11:16.530,00:11:20.790
the next node,00:11:20.790,00:11:22.060
in the list,00:11:22.060,00:11:23.200
in c he can define,00:11:23.200,00:11:25.620
a type named,00:11:25.620,00:11:26.699
Node,00:11:26.699,00:11:27.430
like this,00:11:27.430,00:11:28.390
"he will have two fields in the node, one to store the data",00:11:28.390,00:11:32.500
this field,00:11:32.500,00:11:33.520
will be an ineteger,00:11:33.520,00:11:35.240
and one more field to store the address of,00:11:35.240,00:11:39.360
the next node on the list,00:11:39.360,00:11:41.430
so Albert will ask,00:11:41.430,00:11:42.370
a Node,00:11:42.370,00:11:44.040
Albert will ask memory for a node,00:11:44.040,00:11:45.829
from the memory manager,00:11:45.829,00:11:47.160
"and the memory manager will be like, Ok",00:11:47.160,00:11:49.140
you need a node that needs 4 bytes for,00:11:49.140,00:11:52.730
an integer variable and four more bytes for,00:11:52.730,00:11:56.120
the pointer variable that will store the address,00:11:56.120,00:11:58.680
"Pointer variable also in a typical architecture is
stored in four bytes",00:11:58.680,00:12:02.610
so now memory manager gives us a block of 8 bytes. ,00:12:02.610,00:12:05.920
and we call this block - a Node,00:12:05.920,00:12:08.880
"Notice that the second field in the node
structure is Node star which means",00:12:08.880,00:12:13.190
pointer to node,00:12:13.190,00:12:14.630
so this field will only ,00:12:14.630,00:12:17.010
store an address,00:12:17.010,00:12:18.520
of the next node in the list,00:12:18.520,00:12:20.670
"so if we store the list like this in
the memory as these non-contiguous",00:12:20.670,00:12:25.300
nodes connected to each other,00:12:25.300,00:12:27.410
but then this is a linked list data structure,00:12:27.410,00:12:31.170
"Logical view of the linked list
data structure will be something like",00:12:31.170,00:12:34.150
this,00:12:34.150,00:12:34.990
"data is stored in these nodes and each
node stores the data as well as the link",00:12:34.990,00:12:40.270
"to the next node so each node kind of points
to the next node",00:12:40.270,00:12:43.930
the first node,00:12:43.930,00:12:45.119
is also called,00:12:45.119,00:12:46.320
the head node,00:12:46.320,00:12:47.740
"and the only information about the list
that we keep all the time is",00:12:47.740,00:12:52.340
address of the head node,00:12:52.340,00:12:53.930
or address of the first node,00:12:53.930,00:12:55.650
"so address of the head node kind of
gives us access to the complete list",00:12:55.650,00:13:00.350
the address in the last node,00:13:00.350,00:13:02.039
is,00:13:02.039,00:13:02.760
NULL or  zero,00:13:02.760,00:13:04.300
which means that,00:13:04.300,00:13:05.180
the last node does not point to any other node.,00:13:05.180,00:13:08.330
now if we want to traverse the linked list,00:13:08.330,00:13:11.350
the only way to do it is,00:13:11.350,00:13:13.020
we start at the head,00:13:13.020,00:13:14.870
"we go to the first guy and then we ask the first 
guy the address ",00:13:14.870,00:13:18.450
the next guy,00:13:18.450,00:13:19.790
"adress of the next node and then we
go to the next node and ask",00:13:19.790,00:13:22.670
"the address of the next node and this
is the only way to access the elements",00:13:22.670,00:13:27.070
in the linked list,00:13:27.070,00:13:28.620
if we want to insert a node in the linked list,00:13:28.620,00:13:32.180
"let's say we want to add number
three at the end of the linked list",00:13:32.180,00:13:35.650
"then all we need to do is first create
 a node in the linked list",00:13:35.650,00:13:39.430
"sorry first ... create a node 
independently and separately it will get",00:13:39.430,00:13:43.230
some memory location,00:13:43.230,00:13:45.170
"so we created this node with value 3. 
Now all we need to do",00:13:45.170,00:13:50.190
"is fill the address properly, adjust these links
properly",00:13:50.190,00:13:53.450
so,00:13:53.450,00:13:54.500
the address of this particular node,00:13:54.500,00:13:56.670
will be filled in this node ,00:13:56.670,00:13:59.960
with value 2. And this node ,00:13:59.960,00:14:00.970
"the address part can be NULL, so it is the last
node, it does not point to",00:14:00.970,00:14:05.310
any other node,00:14:05.310,00:14:06.590
"let's also show this uh... these nodes
in the memory here",00:14:06.590,00:14:11.090
so i have written the address of each node in ,00:14:11.090,00:14:14.490
brown at top of these notes,00:14:14.490,00:14:16.630
and i have also filled in this address field of each node,00:14:16.630,00:14:20.360
let's say uh...,00:14:20.360,00:14:21.500
the Node for,00:14:21.500,00:14:22.690
value three gets address 252,00:14:22.690,00:14:25.370
"so this is how things will be in the
memory and this is how the logical view",00:14:25.370,00:14:28.360
will be,00:14:28.360,00:14:29.460
the linked list,00:14:29.460,00:14:30.470
"uh... is always identified by the
address of the first node",00:14:30.470,00:14:34.500
"and unlike arrays we cannot access any
of the elements in constant time",00:14:34.500,00:14:38.980
in the case of arrays using the,00:14:38.980,00:14:40.889
"starting address of the block of
memory and using the position of the ",00:14:40.889,00:14:44.379
"element in the list, we could calculate
the address of the element",00:14:44.379,00:14:48.520
"but in this case we have to start at the
head",00:14:48.520,00:14:51.370
"and we have to ask this element for the 
next element",00:14:51.370,00:14:54.569
"and then ask the next element who is
your next, it's like playing",00:14:54.569,00:14:58.450
"treasure hunt. You go to the first
guy and then you get the address for the",00:14:58.450,00:15:02.420
"second and then you go to the second guy and
you get address of the third guy.",00:15:02.420,00:15:06.290
so the time taken to access elements,00:15:06.290,00:15:09.180
will be proportional,00:15:09.180,00:15:10.649
"to the size of the list let's say the
size of the list is n, there are n",00:15:10.649,00:15:14.119
elements in the list,00:15:14.119,00:15:15.490
"in the worst case to traverse the last element
we will",00:15:15.490,00:15:18.430
"go through all the elements, so time taken
to access elements is proportional to n",00:15:18.430,00:15:22.510
or in other words we say that this operation will cost us or rather the ,00:15:22.510,00:15:26.620
time complexity of this operation is big-oh of n,00:15:26.620,00:15:30.220
insertion into the list,00:15:30.220,00:15:32.100
"we can insert anywhere in the list, we
first need to create a node and",00:15:32.100,00:15:36.200
just adjust these links,00:15:36.200,00:15:38.630
"properly, like say i want",00:15:38.630,00:15:40.680
"10 at 3rd position in the list so all we
need to do is create a Node, store",00:15:40.680,00:15:44.940
the value 10 in the data part,00:15:44.940,00:15:47.750
something like this,00:15:47.750,00:15:49.180
Let's say we get the node at address 310,00:15:49.180,00:15:51.870
"So, we will adjust the address field in 
the second node to point to",00:15:51.870,00:15:56.119
"this node at address 310,and this
 node will point to",00:15:56.119,00:15:59.839
the node with value 4.,00:15:59.839,00:16:01.420
"Now to insert also, we will have to 
traverse the list and got to that",00:16:01.420,00:16:04.520
particular position,00:16:04.520,00:16:06.190
and so this will be,00:16:06.190,00:16:08.140
O(n) again in terms of of time complexity,00:16:08.140,00:16:10.990
"the only thing is that uh... the
insertion will be a simple operation, we",00:16:10.990,00:16:13.940
will not have to do all the shifts as,00:16:13.940,00:16:16.380
we had to do in an array.,00:16:16.380,00:16:20.410
"To insert something in between, we had
 to shift all the elements by one position",00:16:20.410,00:16:22.909
towards higher indices,00:16:22.909,00:16:24.309
similarly to delete something,00:16:24.309,00:16:26.720
from this list will also O(n),00:16:26.720,00:16:28.660
"so we can see some good things about
linked list",00:16:28.660,00:16:31.250
that is no extra use of memory,00:16:31.250,00:16:33.929
in the sense that some memory is unused,00:16:33.929,00:16:36.560
"We are using some extra memory, we are
using some extra money to store the",00:16:36.560,00:16:39.540
addresses,00:16:39.540,00:16:40.700
but we have the benefit that we create,00:16:40.700,00:16:43.090
nodes as and when we want,00:16:43.090,00:16:45.710
"and we can also free the nodes as
and when we want",00:16:45.710,00:16:48.800
"we do not have to guess the size of the
list beforehand like in the case of",00:16:48.800,00:16:52.250
arrays,00:16:52.250,00:16:54.130
"We will discuss all the 
operations on linked list and the cost",00:16:54.130,00:16:57.490
of these operations,00:16:57.490,00:16:58.980
as well as comparison with array,00:16:58.980,00:17:01.320
"in our next lessons. We will also be
implementing linked list in C",00:17:01.320,00:17:05.980
or C++,00:17:05.980,00:17:07.130
"so this is all for a basic
introduction to linked list",00:17:07.130,00:17:10.490
Thanks for watching !,00:17:10.490,00:17:10.990

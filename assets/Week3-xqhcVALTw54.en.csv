text,start,stop
&gt;&gt; [MUSIC PLAYING],00:00:00.487,00:00:11.210
&gt;&gt; ROB BODEN: All right.,00:00:11.210,00:00:12.100
"So, first thing first, of video
from a familiar face.",00:00:12.100,00:00:15.620
&gt;&gt; [VIDEO PLAYBACK],00:00:22.080,00:00:22.560
&gt;&gt; -All right.,00:00:22.560,00:00:23.370
"This is CS50, and this is
the start of week three.",00:00:23.370,00:00:27.150
"I'm sorry I couldn't be there with you
today, but allow me to introduce",00:00:27.150,00:00:29.980
CS50's own Rob Boden.,00:00:29.980,00:00:32.880
&gt;&gt; [END VIDEO PLAYBACK],00:00:32.880,00:00:33.872
&gt;&gt; [APPLAUSE AND CHEERS],00:00:33.872,00:00:39.340
"&gt;&gt; ROB BODEN: The filmography in
that video is fantastic.",00:00:39.340,00:00:41.277
All right.,00:00:47.280,00:00:47.770
"So first, there's another lunch.",00:00:47.770,00:00:50.960
It's tomorrow at 1:15.,00:00:50.960,00:00:52.330
There's no lunch this Friday.,00:00:52.330,00:00:54.480
It is with Quora.,00:00:54.480,00:00:55.810
"And Tommy's not here yet, but one of
the people there is former head CF,",00:00:55.810,00:01:00.190
Tommy McWilliam.,00:01:00.190,00:01:01.530
So he's a fun guy.,00:01:01.530,00:01:02.730
You should come.,00:01:02.730,00:01:04.819
&gt;&gt; All right.,00:01:04.819,00:01:05.900
"So last week, we started breaking apart
about what a string really is.",00:01:05.900,00:01:11.360
"We've known since the beginning that
it's a sequence of characters.",00:01:11.360,00:01:14.830
"But last week, we delved into the fact
that what is really a sequence of",00:01:14.830,00:01:18.130
"characters, well, we now have
arrays of characters.",00:01:18.130,00:01:22.110
"And we know that a string, it's an array
of characters, at the very end,",00:01:22.110,00:01:26.450
"we have this special null byte, this
backslash 0, that indicates the end of",00:01:26.450,00:01:30.920
the string.,00:01:30.920,00:01:32.230
"&gt;&gt; And so a string is an array of
characters, but we can have more than",00:01:32.230,00:01:36.970
"just an array of characters,
we can have an array of any",00:01:36.970,00:01:39.530
type of thing we want.,00:01:39.530,00:01:40.890
"So, if you recall from last week, the
Ages program that David introduced",00:01:40.890,00:01:51.570
really quickly.,00:01:51.570,00:01:53.560
"So first thing we're going to do is
ask the user for an integer, the",00:01:53.560,00:01:57.010
number of people in the room.,00:01:57.010,00:01:58.800
"Once we have that integer,
we're declaring an array.",00:01:58.800,00:02:01.260
Notice this bracket syntax.,00:02:01.260,00:02:02.890
You're going to get used to that.,00:02:02.890,00:02:04.540
"&gt;&gt; So we're declaring an array of integers
called ages, and there are n",00:02:04.540,00:02:09.430
integers in this array.,00:02:09.430,00:02:12.080
"So this pattern right here, this 4 int
i equals 0, i is less than n, i plus",00:02:12.080,00:02:16.480
"plus, that is also going to be a pattern
that you get very used to.",00:02:16.480,00:02:20.580
"Because that's pretty much how you're
always going to iterate over arrays.",00:02:20.580,00:02:24.000
"So remember that n is the
length of our array.",00:02:24.000,00:02:26.330
"And so here, we are repeatedly asking
for the age of person i in the room.",00:02:26.330,00:02:32.120
"&gt;&gt; After this, we go down, and for whatever
arbitrary reason, we then",00:02:32.120,00:02:36.640
"print out how old they're going
to be a year from now.",00:02:36.640,00:02:40.220
"And running that program, let's
make ages, dot slash ages.",00:02:40.220,00:02:49.980
"So number of people in the room,
let's say there are three.",00:02:49.980,00:02:53.010
"And say, the first person is 13,
next is 26, and the last is 30.",00:02:53.010,00:02:59.880
"So then it'll iterate over those three
people, print out 14, 27, and 31.",00:02:59.880,00:03:05.080
"&gt;&gt; So remember that when we declare an
array of size n, the indices in that",00:03:05.080,00:03:16.060
"array, the array has values and
indices 0, 1, 2, all the way",00:03:16.060,00:03:19.950
up to n minus 1.,00:03:19.950,00:03:21.680
"So when we said there were three people
in the room, and we put in here",00:03:21.680,00:03:26.255
"the first iteration through this
loop, i is going to be 0.",00:03:26.255,00:03:29.850
So in index 0.,00:03:29.850,00:03:31.650
"We are assigning the first
age the user enters.",00:03:31.650,00:03:34.540
"Then in the next one, we're entering the
second n the user enters, and in",00:03:34.540,00:03:38.870
"next to two, the last n.",00:03:38.870,00:03:40.580
"&gt;&gt; So notice that an array of size
three does not have anything",00:03:40.580,00:03:44.200
in the index three.,00:03:44.200,00:03:46.040
This is not valid.,00:03:46.040,00:03:49.036
All right.,00:03:49.036,00:03:50.250
"So, going back here.",00:03:50.250,00:03:55.136
"So now that we've dealt with arrays,
we have some familiarity.",00:03:57.650,00:04:01.590
"Now we're going to move on to command
line arguments, which are going to be",00:04:01.590,00:04:03.780
pretty relevant to this problem set.,00:04:03.780,00:04:05.890
"&gt;&gt; So up until now, whenever you've
declared your main function, we've",00:04:05.890,00:04:09.670
said int main void.,00:04:09.670,00:04:11.230
"So void just means that
we aren't passing any",00:04:11.230,00:04:14.070
arguments to this function.,00:04:14.070,00:04:16.440
"Now we're going to see that main
can take some arguments.",00:04:16.440,00:04:19.190
"Here we call them int argc
and string argv brackets.",00:04:19.190,00:04:22.470
"The brackets, once again, indicating
that we're dealing with arrays.",00:04:22.470,00:04:26.930
"So here, string argv brackets, we're
dealing with an array of strings.",00:04:26.930,00:04:31.850
"So argc, that's going to indicate
how many arguments we've",00:04:31.850,00:04:35.360
passed to this program.,00:04:35.360,00:04:37.580
"And to see what that means,
let's close this.",00:04:37.580,00:04:46.050
&gt;&gt; OK.,00:04:46.050,00:04:46.490
"So up until now, we've run every
program like dot slash ages.",00:04:46.490,00:04:50.790
"We can also, at the command line, past
pass arguments, thus the term, command",00:04:50.790,00:04:55.250
line arguments.,00:04:55.250,00:04:56.550
"So the first argument, hello world.",00:04:56.550,00:04:59.760
"So here, argc would be three.",00:04:59.760,00:05:03.350
"It's the count of the arguments
at the command line.",00:05:03.350,00:05:07.720
"Argc is always at least 1, since dot
slash ages, itself, counts as one of",00:05:07.720,00:05:12.840
the command line arguments.,00:05:12.840,00:05:14.490
&gt;&gt; Then hello is the first.,00:05:14.490,00:05:17.010
"If dot slash ages is the zeroth, then
hello is the first, and world is the",00:05:17.010,00:05:20.460
second command line argument.,00:05:20.460,00:05:22.830
"So the string argv, we're going to see,
contains the strings, dot slash",00:05:22.830,00:05:29.490
"ages, hello, and world.",00:05:29.490,00:05:33.830
"And, by David's request, we're going
to play a video introducing that.",00:05:33.830,00:05:38.945
&gt;&gt; [VIDEO PLAYBACK],00:05:42.486,00:05:43.890
"&gt;&gt; -Up until now in programs we've
written, we've declare",00:05:43.890,00:05:46.240
main as int main void.,00:05:46.240,00:05:48.500
"And all this time, that void has
simply been specifying that the",00:05:48.500,00:05:51.170
"program does not take any
command line arguments.",00:05:51.170,00:05:54.430
"In other words, when a user runs a
program, he or she can provide command",00:05:54.430,00:05:57.750
"line arguments by writing additional
words or phrases after the program's",00:05:57.750,00:06:01.710
name at the prompt.,00:06:01.710,00:06:03.000
"&gt;&gt; Well, if you do you want your program to
take command line arguments, one or",00:06:03.000,00:06:06.550
"more such words, we need to replace
void with a couple of arguments.",00:06:06.550,00:06:10.540
So let's do that.,00:06:10.540,00:06:12.200
Include CS50.h.,00:06:12.200,00:06:15.750
Include standard io.h.,00:06:15.750,00:06:19.360
Int main.,00:06:19.360,00:06:20.760
"And now, instead of void, I'm going to
specify an int called argc, and an",00:06:20.760,00:06:26.330
array of strings called argv.,00:06:26.330,00:06:28.780
"Now, argc and argv are
simply conventions.",00:06:28.780,00:06:31.820
"&gt;&gt; We could have called these arguments
most anything we want.",00:06:31.820,00:06:34.000
"But what is important is that argc is
an int because, by definition, it is",00:06:34.000,00:06:37.630
"going to contain the argument count, the
number of words in total that the",00:06:37.630,00:06:41.360
user has typed at his or her prompt.,00:06:41.360,00:06:43.380
"argv, meanwhile, argument vector, is
going to actually be an array storing",00:06:43.380,00:06:47.910
"all of the words that the user has
typed at his or her prompt.",00:06:47.910,00:06:52.020
"&gt;&gt; Let's proceed to do something now
with one or more of these",00:06:52.020,00:06:54.500
command line arguments.,00:06:54.500,00:06:55.660
"In particular, let's go ahead and print
whatever word the user types",00:06:55.660,00:07:00.070
"after the program's name
at the prompt.",00:07:00.070,00:07:03.960
Open bracket.,00:07:03.960,00:07:04.730
Close bracket.,00:07:04.730,00:07:06.240
Printf percent s backslash and comma.,00:07:06.240,00:07:10.510
"And now I need to tell printf what value
to plug into that placeholder.",00:07:10.510,00:07:14.550
"I want the first word that the user has
typed after the program's name,",00:07:14.550,00:07:18.600
"and so I'm going to specify
argv bracket 1, close",00:07:18.600,00:07:23.130
"parenthesis, semicolon.",00:07:23.130,00:07:24.830
"&gt;&gt; Now, why bracket 1 and not bracket 0?",00:07:24.830,00:07:27.290
"Well, it turns out, automatically stored
in argv 0 is going to be the",00:07:27.290,00:07:30.990
program's actual name.,00:07:30.990,00:07:32.620
"So the first word that the user types
after the program's name is, by",00:07:32.620,00:07:36.180
"convention, going to be
stored in argv 1.",00:07:36.180,00:07:38.990
"Let's now compile and
run this program.",00:07:38.990,00:07:42.380
"&gt;&gt; Make argv 0, dot slash argv 0.",00:07:42.380,00:07:47.780
And now a word like hello.,00:07:47.780,00:07:50.520
Enter.,00:07:50.520,00:07:51.670
"And there we have it, hello.",00:07:51.670,00:07:53.520
&gt;&gt; [END VIDEO PLAYBACK],00:07:53.520,00:07:55.750
&gt;&gt; ROB BODEN: All right.,00:07:55.750,00:07:57.000
Close that.,00:07:59.380,00:08:01.230
"So taking a look at that program that
we just introduced to us, well, just",00:08:01.230,00:08:16.730
"to show, if we print argv 0, make, now
what is it, argv 0, dot slash argv 0.",00:08:16.730,00:08:24.710
"So, as expected, it's printing out the
name of the program, since argv 0 is",00:08:24.710,00:08:30.440
"always going to be the
name of the program.",00:08:30.440,00:08:32.970
"But let's do something a
bit more interesting.",00:08:32.970,00:08:35.640
"&gt;&gt; So in the problem set, you'll be
introduced to this function, atoi.",00:08:35.640,00:08:42.080
So what do we use atoi for?,00:08:42.080,00:08:44.440
"That's going to convert a
string to an integer.",00:08:44.440,00:08:48.550
"So if I pass the string, one two three,
to atoi, that'll convert that",00:08:48.550,00:08:53.280
"to the integer, one two three.",00:08:53.280,00:08:56.910
"So we're going to convert the first
command line argument to an integer,",00:08:56.910,00:09:01.480
and then just print that integer.,00:09:01.480,00:09:05.690
"&gt;&gt; So basically, we're kind of
reimplementing getint, just the",00:09:05.690,00:09:09.680
"integer is entered at the command
line instead of in the program",00:09:09.680,00:09:12.350
interactively.,00:09:12.350,00:09:14.560
"So then, making argv 0, let's do
it in here, and close that.",00:09:14.560,00:09:23.170
"So running argv 0, and let's enter the
integer, one two three four one two.",00:09:23.170,00:09:27.670
"So it'll print the integer, one
two three four one two.",00:09:27.670,00:09:30.840
"There are some subtleties to atoi that
it'll stop caring about anything",00:09:30.840,00:09:35.500
"beyond a valid numeric character,
but that doesn't matter.",00:09:35.500,00:09:39.040
"&gt;&gt; So what do you think happens
if I do this?",00:09:39.040,00:09:42.870
Segmentation fault.,00:09:45.520,00:09:47.050
So why is that?,00:09:47.050,00:09:50.410
"If you look back at our program, we're
converting argv 1, the first argument",00:09:50.410,00:09:56.060
"after the program name, to an integer.",00:09:56.060,00:09:59.610
"But there is no argument passed
after the program name.",00:09:59.610,00:10:03.350
"So here, we see that this is a buggy
program, since, if we try to run it",00:10:03.350,00:10:08.060
"without any arguments,
it will just crash.",00:10:08.060,00:10:10.530
"&gt;&gt; So another common pattern you'll see
is something like, if argc is less",00:10:10.530,00:10:16.950
"than two, indicating that there was not
at least the program name and a",00:10:16.950,00:10:21.100
"first argument, then we'll do something
like printf, not enough",00:10:21.100,00:10:29.100
command line arguments.,00:10:29.100,00:10:31.190
"That's probably not a good one to print,
it's probably something, like",00:10:31.190,00:10:33.170
"you should enter an integer
at the command line.",00:10:33.170,00:10:35.440
I'll just end it there.,00:10:35.440,00:10:37.450
And then return 1.,00:10:37.450,00:10:39.600
"So remember that at the end of our
program, if we return 0, that sort of",00:10:39.600,00:10:44.740
indicates success.,00:10:44.740,00:10:47.060
"And main also automatically
returns 0 if you don't.",00:10:47.060,00:10:50.940
"&gt;&gt; So here, we're retuning 1 to indicate
that that's not success.",00:10:50.940,00:10:55.800
"And you can return whatever you want,
just, 0 indicates success, and",00:10:55.800,00:11:01.000
anything else indicates failure.,00:11:01.000,00:11:03.390
So let's run this version of things.,00:11:03.390,00:11:04.855
"So now, if we don't enter a command line
argument, it'll correctly tell",00:11:12.880,00:11:16.600
"us, not enough command line.",00:11:16.600,00:11:18.290
Didn't finish the sentence.,00:11:18.290,00:11:20.610
"Else, if we actually pass it one,
it can complete the program.",00:11:20.610,00:11:24.950
"So this is how you would use argc in
order to validate the number of",00:11:24.950,00:11:27.920
"command line arguments that
are actually passed.",00:11:27.920,00:11:30.630
"&gt;&gt; So let's make this program a bit more
complicated, and look at the second",00:11:30.630,00:11:39.360
iteration of things.,00:11:39.360,00:11:42.180
"So now, we're not just printing the
first command line argument.",00:11:42.180,00:11:46.310
"Here, we're iterating from int i equals
0, i is less than argc, i plus",00:11:46.310,00:11:51.210
"plus, and printing argv, index i.",00:11:51.210,00:11:55.280
"So this pattern, again, this is the same
pattern as before, except instead",00:11:55.280,00:11:59.300
"of calling the variable
n, we're using argc.",00:11:59.300,00:12:02.600
"&gt;&gt; So this is iterating over each index
in the array, and printing each",00:12:02.600,00:12:09.520
element in that array.,00:12:09.520,00:12:11.910
"And so, when we run this program, well,
I didn't enter any command line",00:12:11.910,00:12:20.300
"arguments, so it just prints
the program name.",00:12:20.300,00:12:22.540
"If I enter a bunch of things, it'll
print one, each on its own line.",00:12:22.540,00:12:26.053
&gt;&gt; OK.,00:12:31.213,00:12:32.210
So let's take this one step further.,00:12:32.210,00:12:34.770
"And instead of printing each argument
on its own line, let's print each",00:12:34.770,00:12:38.890
"character of each argument
on its own line.",00:12:38.890,00:12:42.590
"So remember that argv is
an array of strings.",00:12:42.590,00:12:46.700
"So what is a string, but
an array of characters?",00:12:46.700,00:12:50.960
"So that means that argv is really an
array of an array of characters.",00:12:50.960,00:12:57.140
"So taking advantage of that,
let's ignore this for now.",00:12:57.140,00:13:04.920
Let's just consider the string argv 0.,00:13:04.920,00:13:08.190
"&gt;&gt; So if we want to bring each character of
argv 0 on its own line, then I want",00:13:08.190,00:13:14.170
"to do the pattern we're used to, i is
less than the length of the array,",00:13:14.170,00:13:19.500
"which here, is strlen of, that's
not what I want to do, string",00:13:19.500,00:13:23.990
s equals argv 0.,00:13:23.990,00:13:26.450
"So i is less than the length of our
array, which in this case is an array",00:13:26.450,00:13:30.390
"of characters, i plus plus.",00:13:30.390,00:13:34.410
"And so, as we saw last week, it's ideal
if we move that strlen outside",00:13:34.410,00:13:41.040
"of the condition, since n will be adding
the strlen of s each time we go",00:13:41.040,00:13:45.210
"through the loop, and it's
not going to be changing.",00:13:45.210,00:13:47.720
So we'll set it equal to n over here.,00:13:47.720,00:13:50.230
&gt;&gt; OK.,00:13:54.260,00:13:55.170
"So now, we're iterating over
each index in the array.",00:13:55.170,00:14:01.320
"And so, if we want to print each
character in that array, percent c is",00:14:01.320,00:14:05.630
"the flag we want to use
for characters.",00:14:05.630,00:14:06.880
"And now a bracket i is going to be the
string, index character i, so if the",00:14:10.750,00:14:19.770
string were hello.,00:14:19.770,00:14:20.970
"then s 0 is going to be h, s bracket
1 will be e, and so on.",00:14:20.970,00:14:27.530
"&gt;&gt; So now we want to combine
these two things.",00:14:27.530,00:14:30.800
"We want to print each character
of each command line argument.",00:14:30.800,00:14:35.440
"So we're going to have
a nested for loop.",00:14:35.440,00:14:38.950
"And conventionally, the first counter
is i, the next is going to be j, n",00:14:38.950,00:14:47.480
"will be the strlen of argv i, i
is less than n, i plus plus.",00:14:47.480,00:14:54.450
"And now instead of printing argv i, so
argv bracket i is going to index--",00:14:59.150,00:15:06.870
"that's going to be the i-th command line
argument, argv i, j is going to",00:15:06.870,00:15:14.280
"be the jth character of
the i-th argument.",00:15:14.280,00:15:16.925
"I'll get rid of this up here now
since we put it into that loop.",00:15:20.580,00:15:24.810
"So is equivalent to string s equals
argv i, and then s bracket j.",00:15:24.810,00:15:33.900
"&gt;&gt; Well, we don't need to declare
this variable s.",00:15:33.900,00:15:36.980
"Instead, we'll just combine these
two into what we had, argv i, j.",00:15:36.980,00:15:44.530
&gt;&gt; SPEAKER 1: [INAUDIBLE].,00:15:44.530,00:15:45.780
&gt;&gt; ROB BODEN: Good call.,00:15:48.850,00:15:49.680
So this is broken.,00:15:49.680,00:15:52.936
"If I actually ran it, we would
have realized this.",00:15:52.936,00:15:55.510
"So the counter I care about
in this particular for",00:15:55.510,00:16:01.210
"loop is j, the iterator.",00:16:01.210,00:16:05.410
"So you would have run into issues,
probably an infinite loop, if we",00:16:05.410,00:16:08.560
hadn't fixed that.,00:16:08.560,00:16:09.540
"That's why we're also talking
about debugging today.",00:16:09.540,00:16:12.220
&gt;&gt; OK.,00:16:12.220,00:16:13.120
So let's run this program.,00:16:13.120,00:16:15.240
"And let's actually add a separate printf
right here that will just print",00:16:15.240,00:16:21.200
"another line, since this means when we
run the program, there'll be a blank",00:16:21.200,00:16:27.480
"line in between each character of
each command line argument.",00:16:27.480,00:16:31.830
"Well, we'll see what that means.",00:16:31.830,00:16:33.448
Oop.,00:16:37.310,00:16:37.790
Got some bug.,00:16:37.790,00:16:39.870
"Error implicitly declaring
library function strlen.",00:16:39.870,00:16:42.860
"&gt;&gt; So going back into our program, I
forgot to hash include string.h.",00:16:42.860,00:16:51.630
"So string.h is going to be the
header file that declares",00:16:54.240,00:16:57.730
the function strlen.,00:16:57.730,00:16:58.980
"OK, it compiles.",00:17:04.650,00:17:06.060
"Now, let's run it.",00:17:06.060,00:17:09.109
So just that.,00:17:09.109,00:17:10.930
"It's going to print out our
program name, hello world.",00:17:10.930,00:17:17.790
"It's going to print each thing, each
character, on its own line.",00:17:17.790,00:17:23.510
OK.,00:17:23.510,00:17:24.540
"&gt;&gt; So let's actually take this
one step further.",00:17:24.540,00:17:30.625
"And instead of using string.h, let's
think about how we'd implement our own",00:17:34.050,00:17:39.700
strlen function.,00:17:39.700,00:17:41.420
"So I'll immediately give
a function signature.",00:17:41.420,00:17:45.600
"So let's call in my_strlen, and it's
going to take a string as an argument,",00:17:45.600,00:17:52.900
"and we expect to return the
length of that string.",00:17:52.900,00:17:57.220
"So, where's that guy?",00:17:57.220,00:18:03.430
Yes.,00:18:03.430,00:18:04.990
OK.,00:18:04.990,00:18:06.740
"So remember from the earlier slide that
was also from last week, that an",00:18:06.740,00:18:12.900
"array of characters, well, a string,
so let's say this is our string s.",00:18:12.900,00:18:18.890
"So if s is the string, hello, then,
H-E-L-L-O, in memory, that's going to",00:18:18.890,00:18:29.870
"be, and then this backslash
0 character.",00:18:29.870,00:18:35.610
&gt;&gt; So how do we get the length of s?,00:18:35.610,00:18:39.170
"Well, the trick is looking for this
backlash 0 character, this null",00:18:39.170,00:18:43.190
terminator.,00:18:43.190,00:18:44.380
"So the algorithm Is going
to be something like few",00:18:44.380,00:18:50.270
enough characters that--,00:18:50.270,00:18:51.510
"let's have this hand represent some
counter, let's call this int length.",00:18:51.510,00:18:56.180
"So, starting from over here, we're
going to iterate over our string.",00:18:56.180,00:19:00.060
"&gt;&gt; So the first character, it's H,
and it's not back slash 0, so",00:19:00.060,00:19:04.100
the length is 1.,00:19:04.100,00:19:05.170
"Iterate to the next character,
E, and it's not backslash 0.",00:19:05.170,00:19:08.050
Length is 2.,00:19:08.050,00:19:09.630
"L, 3.",00:19:09.630,00:19:10.960
"L, 4.",00:19:10.960,00:19:11.850
"O, 5.",00:19:11.850,00:19:13.050
"And finally, we reach backslash
0, and so that means, well,",00:19:13.050,00:19:16.690
this string is over.,00:19:16.690,00:19:17.780
So let's return 5.,00:19:17.780,00:19:20.130
"&gt;&gt; So actually implementing that, first,
my n length equals 0, my right hand.",00:19:20.130,00:19:33.630
And we're going to iterate--,00:19:33.630,00:19:36.088
&gt;&gt; SPEAKER 1: [INAUDIBLE],00:19:36.088,00:19:38.000
"&gt;&gt; ROB BODEN: Oh, shoot.",00:19:38.000,00:19:38.640
Good call.,00:19:38.640,00:19:39.870
Boom.,00:19:39.870,00:19:42.680
So n length equals 0.,00:19:42.680,00:19:44.140
"So now, while s length does not
equal and then, backslash 0.",00:19:46.910,00:19:58.310
"So remember, this backslash 0, it is an
actual character, and it indicates",00:19:58.310,00:20:04.660
the end of the string.,00:20:04.660,00:20:05.820
"Just like, also, backslash
n is an actual character.",00:20:05.820,00:20:09.850
"Backslash 0 is going to indicate
the end of our string.",00:20:09.850,00:20:14.040
I don't want to put that there.,00:20:14.040,00:20:15.414
"And while s indexed by length is not
equal to the null terminator, then",00:20:19.190,00:20:25.620
we're just going to increment length.,00:20:25.620,00:20:27.130
"So then, at the end of our program,
length is eventually going to",00:20:29.860,00:20:34.880
be 5 in this case.,00:20:34.880,00:20:37.610
And we'll just return length.,00:20:37.610,00:20:39.210
&gt;&gt; OK.,00:20:42.570,00:20:43.530
"So now down here, I don't
do my_strlen.",00:20:43.530,00:20:48.290
"Let's compile it to make sure
everything runs smoothly.",00:20:48.290,00:20:50.700
Was I doing in 2?,00:20:55.820,00:20:58.210
Or was that 1?,00:20:58.210,00:21:00.565
That should do.,00:21:00.565,00:21:01.940
All right.,00:21:01.940,00:21:02.690
So this is argv 2.,00:21:02.690,00:21:08.490
"Works as anticipated, although
was that the one I did it in?",00:21:08.490,00:21:11.585
Yes.,00:21:15.060,00:21:15.550
OK.,00:21:15.550,00:21:16.760
"This version of things did not have
the printf new line after, but it",00:21:16.760,00:21:21.820
doesn't make any difference.,00:21:21.820,00:21:22.910
OK.,00:21:22.910,00:21:23.300
So worked as expected.,00:21:23.300,00:21:25.780
"&gt;&gt; Now we can even combine this one step
further, where notice here, well,",00:21:25.780,00:21:34.750
"first, we're grabbing the strlen of argv
i, and then we're iterating over",00:21:34.750,00:21:38.920
each character in that string.,00:21:38.920,00:21:41.450
"So instead of doing that, what if we
just combine this logic of waiting",00:21:41.450,00:21:47.480
"until we hit backslash 0 right
into this for loop?",00:21:47.480,00:21:50.740
"So iterate while argv i, j does
not equal backslash 0.",00:21:53.740,00:22:07.490
So let's run it first.,00:22:07.490,00:22:10.680
&gt;&gt; All right.,00:22:19.838,00:22:21.180
"So here, this condition is saying--",00:22:21.180,00:22:27.655
let's clear that.,00:22:38.090,00:22:40.060
"So now, let this be our argv.",00:22:40.060,00:22:49.140
"So when I just ran that program before,
argv is an array of strings.",00:22:49.140,00:22:55.290
"And so, if I run it with dot slash argv
2, hello world, then the argv",00:22:55.290,00:23:03.100
"itself is length 3, for argv
zero, hello, and world.",00:23:03.100,00:23:07.650
"&gt;&gt; And inside of each of these indices is,
itself an array, where this'll be",00:23:11.700,00:23:19.660
"dot, this will be slash, I don't know
if that was the right direction, I",00:23:19.660,00:23:23.780
don't think it was.,00:23:23.780,00:23:25.680
"A-R-V dash, need more space.",00:23:25.680,00:23:30.110
Let's cut into this array.,00:23:30.110,00:23:32.570
"A-R-V dash 0, and then backslash 0.",00:23:32.570,00:23:38.230
And then in disarray will be hello.,00:23:38.230,00:23:43.160
"Let's say, H-E backslash 0.",00:23:43.160,00:23:45.910
"And finally, W-O backslash 0.",00:23:45.910,00:23:51.130
"&gt;&gt; So the algorithm that we just wrote,
the nested for loops, what they're",00:23:51.130,00:23:59.730
"doing is, we first have the
counter i and then j.",00:23:59.730,00:24:07.321
"This would be easier with code on the
screen, Let's go back to this.",00:24:07.321,00:24:15.206
OK.,00:24:15.206,00:24:17.476
"So notice that i is the iterator that's
iterating over each command",00:24:17.476,00:24:24.600
line argument.,00:24:24.600,00:24:25.610
"And j is the iterator iterating
over each character in that",00:24:25.610,00:24:28.870
command line argument.,00:24:28.870,00:24:30.410
"So what this innermost printf is doing
is, we have printf argv 0 0, printf",00:24:30.410,00:24:46.755
"argv 0 1, printf argv 0 2, 0 3, 0 4, 0
5, 0 6, but now, argv 0 7 is going to",00:24:46.755,00:24:58.680
equal backslash 0.,00:24:58.680,00:25:00.670
"&gt;&gt; So then we exit that for loop,
and now i iterates to 1.",00:25:00.670,00:25:05.730
"And now we're going to print
argv 1 0, argv 1 1--",00:25:05.730,00:25:10.910
"well, now, since I cut hello short,
argv 1 2 is again going to be",00:25:10.910,00:25:17.040
backslash 0.,00:25:17.040,00:25:18.170
"And so, increment i and continue, and
so on, until we print out all of",00:25:18.170,00:25:25.050
"world, and those are three command line
arguments, and we'll exit out of",00:25:25.050,00:25:28.580
"the outermost loop, and
finish our program.",00:25:28.580,00:25:31.670
OK.,00:25:38.390,00:25:39.640
&gt;&gt; So let's come back here.,00:25:43.903,00:25:46.795
"So you'll gain some familiarity with
command line arguments on this",00:25:49.670,00:25:52.370
particular problem set.,00:25:52.370,00:25:54.460
"&gt;&gt; Now, debugging.",00:25:54.460,00:25:56.630
"So you probably have already had to do
some debugging with your previous",00:25:56.630,00:26:01.680
problem set.,00:26:01.680,00:26:03.120
"And one very easy way of debugging,
first, let's look at a buggy program.",00:26:03.120,00:26:08.420
"Well, walking through this program,
we're going to ask the user for an",00:26:20.710,00:26:23.830
"integer, grab that integer, and then,
arbitrarily, we have a while loop that",00:26:23.830,00:26:29.350
"is just going to decrement
i until it's equal to 10.",00:26:29.350,00:26:32.280
"Let's just assume I'm entering
an integer greater than 10.",00:26:32.280,00:26:35.820
So decrement i until it's equal to 10.,00:26:35.820,00:26:38.700
"&gt;&gt; And then we have another while loop
that, while i does not equal 0, we're",00:26:38.700,00:26:42.630
going to decrement i by 3.,00:26:42.630,00:26:44.540
"So if you see the intent of the bug
here, it's that this'll decrement i to",00:26:44.540,00:26:49.790
"be 10, and then this while loop will
decrement i from 10, to 7, to 4, to 1,",00:26:49.790,00:26:57.010
"to negative 2, to negative 5, and so on,
to negative infinity, since i will",00:26:57.010,00:27:02.880
never actually equal 0.,00:27:02.880,00:27:05.920
"And then at the end of this program,
we have the foo function which is",00:27:05.920,00:27:08.610
going on print out that i.,00:27:08.610,00:27:12.130
"&gt;&gt; So this is a short and trivial program,
and the bug is obvious,",00:27:12.130,00:27:16.520
"especially after I just
said what the bug was.",00:27:16.520,00:27:18.790
"But the intent here is, well, this might
actually look like some of your",00:27:18.790,00:27:24.840
"solutions from greedy from the last
problem set, and maybe you do have",00:27:24.840,00:27:30.040
"some infinite loop in your program,
and you have no idea",00:27:30.040,00:27:32.800
what's causing it.,00:27:32.800,00:27:34.100
"So a very useful debugging technique
is to just add printfs",00:27:34.100,00:27:38.690
all over your code.,00:27:38.690,00:27:40.180
"&gt;&gt; So here I want a printf outside
first while loop.",00:27:40.180,00:27:49.200
"And here I want a printf,
and I'll just print i.",00:27:49.200,00:27:53.155
"I'll even do first while loop, i.",00:27:55.670,00:27:58.330
"Outside, second while loop.",00:28:05.130,00:28:09.040
"Once again, print inside
of here, the value i.",00:28:09.040,00:28:12.170
And let's run this.,00:28:16.270,00:28:17.520
&gt;&gt; So dot slash debug.,00:28:22.620,00:28:24.800
Enter an integer.,00:28:24.800,00:28:25.610
Let's do 13.,00:28:25.610,00:28:28.150
And boom.,00:28:28.150,00:28:28.760
"We see that we are infinite looping
inside of the second while loop.",00:28:28.760,00:28:33.300
So now we know what the bug is.,00:28:33.300,00:28:36.305
"But printf debugging is perfectly great,
but once your programs get",00:28:39.610,00:28:45.610
"longer and more complicated, there are
more sophisticated solutions to",00:28:45.610,00:28:50.560
getting things working.,00:28:50.560,00:28:51.705
So let's remove all these printfs.,00:28:51.705,00:28:52.955
"And let's make sure I didn't
break anything.",00:29:06.242,00:29:08.896
OK.,00:29:08.896,00:29:09.850
"&gt;&gt; So the program we're going
to introduce is called",00:29:09.850,00:29:14.180
"GDB, for GNU Debugger.",00:29:14.180,00:29:16.715
"Well, actually, let's remove debug for
a second, and make debug again.",00:29:21.892,00:29:27.510
"Well, actually first, a good lesson
in command line arguments.",00:29:31.420,00:29:34.440
"Notice that this Clang command that is
compiling everything is being passed",00:29:34.440,00:29:37.780
"at the command line, these
command line arguments.",00:29:37.780,00:29:41.300
"So exactly how you are going to be using
command line arguments, as we",00:29:41.300,00:29:46.250
"did before, and as you will in PSET
2, that's how Clang is using them.",00:29:46.250,00:29:51.500
"&gt;&gt; So notice that this first flag, dash
ggdb3, what that's saying is, Clang,",00:29:51.500,00:30:00.070
"you should compile this file with the
intent that we will eventually",00:30:00.070,00:30:03.790
need to debug it.,00:30:03.790,00:30:05.380
"So as long as you have that flag,
then we can GDB debug.",00:30:05.380,00:30:13.840
And it'll open up the GNU Debugger.,00:30:13.840,00:30:17.380
"&gt;&gt; So there are a lot of commands
that you need to get used to.",00:30:17.380,00:30:22.920
"First one that you'll probably
immediately need is Run.",00:30:22.920,00:30:27.100
So what is Run going to do?,00:30:27.100,00:30:28.200
It's going to start our program.,00:30:28.200,00:30:30.910
"So run, starting program, the program
asks us for an integer, 13.",00:30:30.910,00:30:36.180
"And then it's infinite looping as
expected, except I removed the",00:30:36.180,00:30:39.170
"printfs, so we don't even see that.",00:30:39.170,00:30:40.500
Exited normally.,00:30:43.320,00:30:44.600
Oh.,00:30:44.600,00:30:45.850
"It's possible that it wrapped all the
way around, back to-- ignoring that.",00:30:48.570,00:30:53.640
Assume it did not exit normally.,00:30:53.640,00:30:55.170
There's a complicated answer to that.,00:30:59.500,00:31:03.370
"&gt;&gt; So now, that's not very useful.",00:31:03.370,00:31:07.890
"So just running our program inside of
this debugger doesn't help us in any",00:31:07.890,00:31:11.480
"way, since we could have just done
dot slash debug from outside GDB.",00:31:11.480,00:31:15.610
"So the one command that
you'll probably--",00:31:15.610,00:31:21.250
and I'll quit this.,00:31:21.250,00:31:22.970
"Control-d or quit, both work.",00:31:22.970,00:31:25.850
So let's open it up again.,00:31:25.850,00:31:29.550
"&gt;&gt; Another command that you'll probably
immediately want to",00:31:29.550,00:31:31.130
get used to is Break.,00:31:31.130,00:31:33.600
"So we'll break on main for now,
and then I'll explain that.",00:31:33.600,00:31:37.120
"Well, here we see we set a breakpoint
at this line in debug.c.",00:31:41.010,00:31:46.370
"So what break means is that when I
type run, the program is going to",00:31:46.370,00:31:50.160
"continue running until
I hit a breakpoint.",00:31:50.160,00:31:53.560
"So when I hit run, the program starts,
and then it breaks as soon as it",00:31:53.560,00:31:59.390
enters the main function.,00:31:59.390,00:32:01.940
"Break main is going to be something
you pretty commonly do.",00:32:01.940,00:32:06.930
"&gt;&gt; And now, to introduce you
to some more commands.",00:32:06.930,00:32:11.340
"Notice here, that it's saying we
broke at line 11, which is",00:32:11.340,00:32:14.330
"printf, enter an integer.",00:32:14.330,00:32:16.230
"So the command Next is going to be how
we go to the next line of code.",00:32:16.230,00:32:21.260
"This is going to allow us to step
through our program line by line.",00:32:21.260,00:32:24.810
So next.,00:32:24.810,00:32:26.260
"&gt;&gt; Now line 12, we're going
to get the integer.",00:32:26.260,00:32:29.820
Next.,00:32:29.820,00:32:30.450
"And if you just hit Enter again, it'll
redo the last thing you did.",00:32:30.450,00:32:34.290
"So I don't need to type
next each time.",00:32:34.290,00:32:36.480
"So enter an integer, 13.",00:32:36.480,00:32:40.100
"So now, line 14, while i is greater
than 10, and I'll do next.",00:32:40.100,00:32:46.940
And we see we're going to decrement i.,00:32:46.940,00:32:48.685
So we're going to decrement i again.,00:32:48.685,00:32:50.210
"&gt;&gt; So now, another useful
command is Print.",00:32:50.210,00:32:53.620
"So Print is going to print out
the value of the variable.",00:32:53.620,00:32:55.750
"Let's bring out the value
of variable i.",00:32:55.750,00:32:57.825
Let's print i.,00:32:57.825,00:32:58.705
It's going to say i is 11.,00:32:58.705,00:33:00.910
"Now we Next again while
i is greater than 10.",00:33:00.910,00:33:03.330
"So i's still greater than
10, since it's 11.",00:33:03.330,00:33:05.590
i minus minus.,00:33:05.590,00:33:06.920
Let's print i again.,00:33:06.920,00:33:08.250
"As expected, it's 10.",00:33:08.250,00:33:10.950
"&gt;&gt; So now, next.",00:33:10.950,00:33:12.510
"It's going back to the condition, i is
greater than 10, but i is now 10, so",00:33:12.510,00:33:16.250
"it's not greater than 10, so we expect
it to fall out of the while loop.",00:33:16.250,00:33:20.040
And now we're below that line of code.,00:33:20.040,00:33:22.220
"And another command, List, is just going
to display the previous and next",00:33:22.220,00:33:28.750
"couple of lines of code, in
case you lost yourself.",00:33:28.750,00:33:31.240
"So we just exited this while loop,
and now we have entered this",00:33:31.240,00:33:35.420
"while loop, line 18.",00:33:35.420,00:33:37.080
So while i does not equal 0.,00:33:37.080,00:33:39.860
"And, next, i equals i minus 3, and we'll
notice, this'll just keep going.",00:33:39.860,00:33:46.570
And we can print i.,00:33:46.570,00:33:48.270
&gt;&gt; Each command sort of has shortcuts.,00:33:48.270,00:33:49.990
So p is short for Print.,00:33:49.990,00:33:51.720
So we can p i.,00:33:51.720,00:33:53.400
"Just keep holding n,
or keep doing Next.",00:33:53.400,00:33:57.550
Print i again.,00:33:57.550,00:33:58.340
You see now it's negative 167.,00:33:58.340,00:34:00.380
"So this will go on forever, but not
really forever, since you just saw, it",00:34:00.380,00:34:06.030
will actually end at some point.,00:34:06.030,00:34:09.330
&gt;&gt; So that is Beginning GDB.,00:34:09.330,00:34:15.699
But let's do one more thing in GDB.,00:34:15.699,00:34:19.504
"Uh, debug.",00:34:19.504,00:34:20.754
"So, in this particular case, the
infinite loop happened to be inside of",00:34:23.540,00:34:28.534
the main function.,00:34:28.534,00:34:30.050
"And for now, just accept that that I'm
going to move the infinite loop into",00:34:30.050,00:34:35.779
the foo function.,00:34:35.779,00:34:37.029
"Just remember that, at the end of this
program, well, this was originally",00:34:40.679,00:34:43.730
"calling foo, which was just
going to print i.",00:34:43.730,00:34:46.210
"But now we're calling foo, which is
going to decrement i until it's 0, and",00:34:46.210,00:34:51.880
then print that variable.,00:34:51.880,00:34:54.548
OK.,00:34:54.548,00:34:55.469
Save that.,00:34:55.469,00:34:57.970
Make debug.,00:34:57.970,00:35:00.175
"And now, gdb debug.",00:35:00.175,00:35:03.310
OK.,00:35:03.310,00:35:04.090
"&gt;&gt; So if I just Run then I'm not going to
be able to actually step through my",00:35:04.090,00:35:10.580
program line-by-line.,00:35:10.580,00:35:11.730
"So let's break at main,
and then type run.",00:35:11.730,00:35:19.820
"So go through this, printf, enter
an integer, get the integer, 13.",00:35:19.820,00:35:28.160
"So we're going to keep decrementing
until i is greater than 10.",00:35:34.180,00:35:37.490
"Then we're going to fall through the
while loop, and get to the line--",00:35:37.490,00:35:42.840
let's open it up in a separate window.,00:35:42.840,00:35:44.364
"So we decremented until i was no longer
greater than 10, and then we",00:35:48.720,00:35:53.300
"called the function, foo.",00:35:53.300,00:35:55.700
"&gt;&gt; So what happened as soon as I hit
function foo, well, I called foo, and",00:35:55.700,00:36:01.340
then I no longer had control over GDB.,00:36:01.340,00:36:04.030
"So as soon as I hit Next at this line,
things continued until this happened,",00:36:04.030,00:36:10.230
where the program exited when--,00:36:10.230,00:36:12.400
assume it didn't exist eventually.,00:36:12.400,00:36:14.450
You saw it pause for a bit though.,00:36:14.450,00:36:16.390
"So why did I lose control over
the program at that point?",00:36:16.390,00:36:22.040
"Well, when I type next, that goes to
the literal next line of code that",00:36:22.040,00:36:27.540
will execute.,00:36:27.540,00:36:28.850
"So after line 21, the next line of code
that will execute is line 22,",00:36:28.850,00:36:35.950
"which is, exiting from main.",00:36:35.950,00:36:38.520
"So I don't want to just go
to the next line of code.",00:36:38.520,00:36:43.810
"I want to go into the function, foo,
and then also step through",00:36:43.810,00:36:48.170
those lines of code.,00:36:48.170,00:36:49.830
"&gt;&gt; So for that, we have an alternative.",00:36:49.830,00:36:53.726
Let's quit that again.,00:36:53.726,00:36:56.770
Break main.,00:36:56.770,00:36:58.020
"Uh, 1, next, next, 13, next,
next, next, carefully,",00:37:00.520,00:37:06.370
before we hit line foo.,00:37:06.370,00:37:09.820
OK.,00:37:09.820,00:37:10.520
"&gt;&gt; So now, we're at line 21,
where we call foo.",00:37:10.520,00:37:13.700
"We don't want to type next, since that
will just call the function foo, and",00:37:13.700,00:37:17.100
go to the next line of code.,00:37:17.100,00:37:18.710
What we want to use is Step.,00:37:18.710,00:37:20.840
"So there's a difference between Step
and Next, where Step steps into the",00:37:20.840,00:37:25.690
"function, and Next goes
over the function.",00:37:25.690,00:37:28.190
"It just executes the entirety of
the function and keeps going.",00:37:28.190,00:37:32.830
"&gt;&gt; So Step is going to bring us
into the function, foo.",00:37:32.830,00:37:37.210
"And we see here, now, we're back at
this while loop that's, in theory,",00:37:37.210,00:37:41.160
going to continue forever.,00:37:41.160,00:37:44.190
"And if you hit Step, when it isn't even
a function to call, then it's",00:37:44.190,00:37:50.420
identical to Next.,00:37:50.420,00:37:51.720
"So it's only when you're at a line that
is calling a function that Step",00:37:51.720,00:37:55.320
is going to differ from Next.,00:37:55.320,00:37:56.970
So Step will bring us here.,00:37:56.970,00:37:57.930
"Step, step, step, step, step, step, and
we'll just infinite loop forever.",00:37:57.930,00:38:02.100
"&gt;&gt; So you might get used to that as your
way of identifying infinite loops, is",00:38:02.100,00:38:06.810
"just holding this Enter key to
see where you get stuck.",00:38:06.810,00:38:08.960
"There are better ways to do that, but
for now, that is perfectly sufficient.",00:38:11.610,00:38:14.780
"And stylistically, to conform to Style
50, I should have done this.",00:38:14.780,00:38:17.967
OK.,00:38:21.550,00:38:24.030
&gt;&gt; So one last command to introduce.,00:38:24.030,00:38:28.400
"Well, let's gdb debug in.",00:38:28.400,00:38:30.810
"So instead of breaking at main, if I
know the foo function is also the",00:38:30.810,00:38:35.580
"problem, then I could have just
said, break at foo, instead.",00:38:35.580,00:38:39.230
"Let's say I break at
both main and foo.",00:38:39.230,00:38:42.310
"So you can set as many breakpoints
as you want.",00:38:42.310,00:38:45.390
"When I type run, it's going
to stop at the--",00:38:45.390,00:38:49.230
"ooh, let's recompile, since
I changed things.",00:38:49.230,00:38:52.180
"You'll see this line, Warning, source
file is more recent than executable.",00:38:52.180,00:38:55.950
"So that means that I just went in here
and changed these to conform to Style",00:38:55.950,00:38:59.680
"50, but I did not recompile
the program.",00:38:59.680,00:39:03.100
So GDB makes me aware of that.,00:39:03.100,00:39:04.870
"I'll quit, make debug again,
hit gdb debug.",00:39:04.870,00:39:10.130
OK.,00:39:10.130,00:39:10.700
"&gt;&gt; So now, back to what I was doing.",00:39:10.700,00:39:12.800
"Break main, break foo.",00:39:12.800,00:39:15.720
"Now if I run the program, so it's
going to continue until hits a",00:39:15.720,00:39:20.680
breakpoint.,00:39:20.680,00:39:21.320
"That breakpoint happens to
be the first one at main.",00:39:21.320,00:39:24.680
"Now, instead of doing next, next, next,
next, next, until I hit foo, I",00:39:24.680,00:39:28.630
"can type continue, which will continue
until you hit the next breakpoint.",00:39:28.630,00:39:35.230
I have to enter the integer first.,00:39:35.230,00:39:37.200
"Continue will continue until I hit the
next breakpoint, which is that",00:39:37.200,00:39:40.570
function of foo.,00:39:40.570,00:39:43.320
"&gt;&gt; So Run will run until you hit a
breakpoint, but you only type run when",00:39:43.320,00:39:50.130
"you're starting the program, and then,
from then on, it's continue.",00:39:50.130,00:39:54.060
"If I just did break main and
then ran, it'll break at",00:39:54.060,00:40:01.950
"main, and then continue.",00:40:01.950,00:40:03.670
"Since I don't have a break point at foo,
enter the integer, then now I'm",00:40:03.670,00:40:10.050
not going to break at foo.,00:40:10.050,00:40:11.380
"It's just going to infinite
loop until that.",00:40:11.380,00:40:16.318
OK.,00:40:16.318,00:40:17.568
&gt;&gt; So that's Intro to GDB.,00:40:19.500,00:40:24.420
"You should start using it
in your problem sets.",00:40:24.420,00:40:27.790
"It can be very helpful
to identify bugs.",00:40:27.790,00:40:30.550
"If you actually just, line-by-line, go
through your code, and compare what is",00:40:30.550,00:40:35.280
"actually happening with what you expect
to happen, then it's pretty",00:40:35.280,00:40:39.740
difficult to miss your bugs.,00:40:39.740,00:40:41.060
OK.,00:40:45.280,00:40:46.530
"&gt;&gt; So last week David brought up this
secret-key cryptography stuff for the",00:40:48.310,00:40:54.040
"first time, where we don't want
passwords just be stored on our",00:40:54.040,00:40:59.350
"computer in some plain text file, where
someone can come over and just",00:40:59.350,00:41:03.210
open it up and read them.,00:41:03.210,00:41:04.660
"Ideally, they would be encrypted
in some way.",00:41:04.660,00:41:07.530
"And in Problem Set 2, you'll be dealing
with one method of encryption,",00:41:07.530,00:41:13.340
"or, well, two methods, but
they aren't so great.",00:41:13.340,00:41:16.520
"If you do the hacker edition, you're
also going to be dealing with",00:41:16.520,00:41:20.050
decrypting some things.,00:41:20.050,00:41:22.150
"&gt;&gt; So the issue now is, well, even if
we have the strongest encryption",00:41:22.150,00:41:29.770
"algorithm in the world, if you choose a
particularly poor password, then it",00:41:29.770,00:41:34.830
"won't help you very much, since people
will still be able to figure it out.",00:41:34.830,00:41:37.720
"Even if seeing the encrypted string and
it looks like a mess of garbage",00:41:37.720,00:41:41.530
"that means nothing to them, if they
still just need to try a few passwords",00:41:41.530,00:41:44.760
"to figure it out, then you
aren't very secure.",00:41:44.760,00:41:50.560
"So watching a video that
makes that point.",00:41:50.560,00:41:55.890
&gt;&gt; [VIDEO PLAYBACK],00:41:59.587,00:42:00.970
"&gt;&gt; -Helmet, you fiend.",00:42:00.970,00:42:02.100
What's going on?,00:42:02.100,00:42:03.370
What are you doing to my daughter?,00:42:03.370,00:42:05.170
"&gt;&gt; -Permit me to introduce the brilliant
young plastic surgeon, Dr. Phillip",00:42:05.170,00:42:09.910
"Schlotkin, the greatest nose
job man in the entire",00:42:09.910,00:42:13.730
"universe, and Beverly Hills.",00:42:13.730,00:42:16.080
&gt;&gt; -Your Highness.,00:42:16.080,00:42:17.210
&gt;&gt; -Nose job?,00:42:17.210,00:42:18.070
I don't understand.,00:42:18.070,00:42:18.670
She's already had a nose job.,00:42:18.670,00:42:20.090
It was a sweet sixteen present.,00:42:20.090,00:42:21.910
&gt;&gt; -No.,00:42:21.910,00:42:22.140
It's not what you think.,00:42:22.140,00:42:23.690
"It's much, much worse.",00:42:23.690,00:42:25.420
"If you do not give me the combination to
the air shield, Dr. Schlotkin will",00:42:25.420,00:42:30.300
give your daughter back her old nose.,00:42:30.300,00:42:34.226
&gt;&gt; -No.,00:42:34.226,00:42:35.476
Where did you get that?,00:42:38.712,00:42:40.516
&gt;&gt; -All right.,00:42:40.516,00:42:41.440
I'll tell.,00:42:41.440,00:42:42.180
I'll tell.,00:42:42.180,00:42:43.381
"No, daddy.",00:42:43.381,00:42:44.263
"No, you mustn't.",00:42:44.263,00:42:45.590
"&gt;&gt; -You're right, my dear.",00:42:45.590,00:42:46.860
I'll miss your new nose.,00:42:46.860,00:42:48.450
"But I will not tell him the combination,
no matter what.",00:42:48.450,00:42:52.090
&gt;&gt; -Very well.,00:42:52.090,00:42:53.680
"Dr. Schlotkin, do your worst.",00:42:53.680,00:42:55.685
&gt;&gt; -My pleasure.,00:42:55.685,00:42:56.914
&gt;&gt; [TOOLS BEING SHARPENED],00:42:56.914,00:43:00.690
&gt;&gt; -No.,00:43:00.690,00:43:01.910
Wait.,00:43:01.910,00:43:02.520
Wait.,00:43:02.520,00:43:03.836
I'll tell.,00:43:03.836,00:43:05.300
I'll tell.,00:43:05.300,00:43:06.880
&gt;&gt; -I knew it would work.,00:43:06.880,00:43:09.130
All right.,00:43:09.130,00:43:09.900
Give it to me.,00:43:09.900,00:43:12.850
&gt;&gt; -The combination is one.,00:43:12.850,00:43:16.918
&gt;&gt; -One.,00:43:16.918,00:43:17.406
&gt;&gt; -One.,00:43:17.406,00:43:18.382
&gt;&gt; -Two.,00:43:18.382,00:43:19.358
&gt;&gt; -Two.,00:43:19.358,00:43:19.846
&gt;&gt; -Two.,00:43:19.846,00:43:20.822
&gt;&gt; -Three.,00:43:20.822,00:43:21.310
&gt;&gt; -Three.,00:43:21.310,00:43:21.798
&gt;&gt; -Three.,00:43:21.798,00:43:22.774
&gt;&gt; -Four.,00:43:22.774,00:43:23.262
&gt;&gt; -Four.,00:43:23.262,00:43:23.750
&gt;&gt; -Four.,00:43:23.750,00:43:26.150
&gt;&gt; -Five.,00:43:26.150,00:43:27.010
&gt;&gt; -Five.,00:43:27.010,00:43:27.670
&gt;&gt; -Five.,00:43:27.670,00:43:29.010
"&gt;&gt; -So the combination is one,
two, three, four, five.",00:43:29.010,00:43:34.770
"That's the stupidest combination
I ever heard in my life.",00:43:34.770,00:43:37.460
"That's the kind of thing an idiot
would have on his luggage.",00:43:37.460,00:43:39.710
"&gt;&gt; -Thank you, your Highness.",00:43:39.710,00:43:42.000
&gt;&gt; -What did you do?,00:43:42.000,00:43:43.530
&gt;&gt; -I turned off the wall.,00:43:43.530,00:43:44.490
&gt;&gt; -No you didn't.,00:43:44.490,00:43:45.420
You turned off the whole movie.,00:43:45.420,00:43:45.840
&gt;&gt; -I must have pressed the wrong button.,00:43:45.840,00:43:46.930
"&gt;&gt; -Well, put it back on.",00:43:46.930,00:43:48.265
Put the movie back on.,00:43:48.265,00:43:49.110
"&gt;&gt; -Yes, sir.",00:43:49.110,00:43:49.510
"Yes, sir.",00:43:49.510,00:43:49.917
"&gt;&gt; -Let's go, Arnold.",00:43:49.917,00:43:50.324
"Come, Gretchen.",00:43:50.324,00:43:51.140
"Of course, you know I'll still
have to bill you for this.",00:43:51.140,00:43:53.060
&gt;&gt; [END VIDEO PLAYBACK],00:43:53.060,00:43:53.440
&gt;&gt; ROB BODEN: All right.,00:43:53.440,00:43:54.690
"So now that we're already talking about
security in some ways, nice",00:43:59.690,00:44:08.430
"little movie poster, so in recent
days, these issues with the NSA",00:44:08.430,00:44:16.050
monitoring everything.,00:44:16.050,00:44:17.300
"It can be difficult to feel like you
have some sort of privacy in the",00:44:21.840,00:44:26.930
"online world, although I couldn't tell
you most of the details of PRISM.",00:44:26.930,00:44:34.540
"So moving beyond PRISM, we're not going
to be talking about that, now",00:44:34.540,00:44:42.130
think about your laptop.,00:44:42.130,00:44:44.030
"So up here, I want to switch
to my actual account,",00:44:44.030,00:44:48.360
with my little penguin.,00:44:48.360,00:44:50.370
"So I have a password set, and that
password is whatever I want it to be.",00:44:50.370,00:44:57.310
"&gt;&gt; But remember that what I'm logging
in with, so this login",00:44:57.310,00:45:02.430
"prompt, is some program.",00:45:02.430,00:45:04.850
"It's some program that was
written by some person.",00:45:04.850,00:45:07.910
"And so, that person, if they are
particularly malicious, they could",00:45:07.910,00:45:13.250
"have said, all right, so if the password
that I enter is equal to my",00:45:13.250,00:45:17.780
"actual password, or it's equal
to some special password--",00:45:17.780,00:45:22.800
David is awesome or something--,00:45:22.800,00:45:25.550
then let them in.,00:45:25.550,00:45:27.190
"So a malicious programmer could have
access to all of your Macs, or",00:45:27.190,00:45:33.760
"Windows, or anything.",00:45:33.760,00:45:36.150
"&gt;&gt; So that isn't much of a concern, since,
I mean, this is login program",00:45:36.150,00:45:41.980
"that's shipped with OS X, hundreds
or thousands of people have",00:45:41.980,00:45:48.720
reviewed this code.,00:45:48.720,00:45:50.020
"And so, if, in your code somewhere, you
say if this string equals equals",00:45:50.020,00:45:55.330
"David is awesome, login, then someone's
going to be, like, wait.",00:45:55.330,00:45:58.860
This is not right.,00:45:58.860,00:45:59.800
This shouldn't be here.,00:45:59.800,00:46:01.790
"So that's one way we get things
to be kind of secure.",00:46:01.790,00:46:06.650
"&gt;&gt; But think about even programs
that you write.",00:46:06.650,00:46:10.300
Let's say you wrote the login program.,00:46:10.300,00:46:13.000
"So this login program that you wrote,
so obviously, you are a good",00:46:13.000,00:46:20.440
programmer.,00:46:20.440,00:46:21.210
"You're not going to put any malicious
if x equals equals David is awesome",00:46:21.210,00:46:25.610
into your code.,00:46:25.610,00:46:27.860
"But this program, what do you
use to compile this program?",00:46:27.860,00:46:31.930
Something like Clang.,00:46:31.930,00:46:34.180
"So what if the person who happened to
write Clang special cased in Clang",00:46:34.180,00:46:38.460
"something like, if I am compiling the
login program, then enter this code",00:46:38.460,00:46:44.310
"into the login program that says, if
x equals equals David is awesome?",00:46:44.310,00:46:49.720
"So not quite yet, but we have the same
issue here, where Clang, well,",00:46:49.720,00:46:59.890
"thousands, if not tens of thousands of
people, have looked at Clang, have",00:46:59.890,00:47:03.790
"looked at its lines of code and said,
all right, there's nothing bad here.",00:47:03.790,00:47:07.160
"Obviously, no one is doing
anything this malicious.",00:47:07.160,00:47:10.680
"&gt;&gt; But what is Clang itself, like,
what if I compile Clang?",00:47:10.680,00:47:15.780
"What if I have some compiler that
compiles Clang that inserts into Clang",00:47:15.780,00:47:20.900
"this special hack that says, all right,
when I compile Clang, then the",00:47:20.900,00:47:25.610
"executable I get should specially look
inside of the login program and insert",00:47:25.610,00:47:31.290
"this password, equals equals
Dave is awesome?",00:47:31.290,00:47:34.230
"So remember that your compiler itself
needs to be compiled at some point.",00:47:34.230,00:47:37.990
"So if what you choose to compile Clang
with, itself is malicious, then you",00:47:37.990,00:47:42.810
"could be screwed the whole
way down the line.",00:47:42.810,00:47:45.580
"&gt;&gt; So here, we have Ken Thompson
and Dennis Ritchie.",00:47:45.580,00:47:49.630
So this is an iconic photo.,00:47:49.630,00:47:53.780
Dennis Ritchie is on the right.,00:47:53.780,00:47:55.470
He is a major--,00:47:55.470,00:47:58.740
"pretty much wrote C. So you can
thank him for this class.",00:47:58.740,00:48:03.640
Ken Thomson's on the left.,00:48:03.640,00:48:04.840
The two of them basically wrote UNIX.,00:48:04.840,00:48:07.780
"Well, they were major contributors
in UNIX.",00:48:07.780,00:48:10.140
There were some others.,00:48:10.140,00:48:11.310
"So Ken Thompson, at some point,
he wins the Turing Award.",00:48:11.310,00:48:16.240
"And the Turing award, I've always heard
it referenced this way, it's the",00:48:16.240,00:48:20.860
Nobel Prize of computer science.,00:48:20.860,00:48:23.100
"&gt;&gt; So at the Turing Award, he has to
give his acceptance speech.",00:48:23.100,00:48:27.500
"And he gives this very famous speech
now, called Reflections on Trusting",00:48:27.500,00:48:31.790
"Trust, which we have linked
to on the course website.",00:48:31.790,00:48:35.620
"And in this speech, he says, all right,
so I wrote UNIX, and now all of",00:48:35.620,00:48:41.670
you people are using UNIX.,00:48:41.670,00:48:43.320
"Now, remember today that Linux is
a direct descendant of UNIX.",00:48:43.320,00:48:46.960
OS X directly uses UNIX.,00:48:46.960,00:48:50.140
"Windows doesn't so much, but a lot
of ideas were taken from UNIX.",00:48:50.140,00:48:53.810
"&gt;&gt; So he goes up to the stage and says,
all right, I wrote UNIX.",00:48:53.810,00:48:59.220
"And just so you guys know, I'm
able to log into every",00:48:59.220,00:49:03.940
single one of your computers.,00:49:03.940,00:49:05.590
"Since I put one of these special if x
equals equals Ken Thomson is awesome,",00:49:05.590,00:49:14.280
then I'm allowed to login.,00:49:14.280,00:49:16.350
"So people are like, well,
how'd you do that?",00:49:16.350,00:49:18.370
"We looked at the login program
and nothing's there.",00:49:18.370,00:49:21.090
"He's like, well, I modified the compiler
to log in the login program",00:49:21.090,00:49:24.700
"so that the login program now will have
that x equals equals Ken Thompson",00:49:24.700,00:49:30.490
is awesome.,00:49:30.490,00:49:31.700
"&gt;&gt; And they say, well, that's not true.",00:49:31.700,00:49:33.120
"We're looking at the compiler, and the
compiler doesn't have any lines of",00:49:33.120,00:49:35.740
code like that.,00:49:35.740,00:49:36.400
"He's like, OK, but what are you
compiling the compiler with?",00:49:36.400,00:49:40.540
"And they think, and he's, like, well,
I'm the one who gave you the compiler",00:49:40.540,00:49:44.810
"you're using to compile the compiler, so
you are compiling a compiler, that",00:49:44.810,00:49:50.580
"itself is malicious, and will
break the login program.",00:49:50.580,00:49:56.390
"So basically, at that point, there's
no way you could look at the source",00:49:56.390,00:49:59.360
"code of the login program
to see what is wrong.",00:49:59.360,00:50:02.450
"You couldn't even look in the
source code of the compiler",00:50:02.450,00:50:04.220
to see what is wrong.,00:50:04.220,00:50:06.790
"&gt;&gt; You would need to look at the machine
code, the actual binary of the",00:50:06.790,00:50:11.940
"compiled compiler to see, wait, these
lines of code should not be here.",00:50:11.940,00:50:16.760
"But Ken Thompson took it one step
further and said, well, there are",00:50:16.760,00:50:22.130
"these special programs that actually
help you read the binary of programs,",00:50:22.130,00:50:25.980
"and so if someone used that program to
read the binary, they would see these",00:50:25.980,00:50:29.340
lines of code.,00:50:29.340,00:50:30.490
"He modified those programs to say, all
right, if you're looking at the",00:50:30.490,00:50:34.020
"compiler, don't show this particular
set of binary.",00:50:34.020,00:50:38.460
"&gt;&gt; So then you need to take that a step
further and basically, that could have",00:50:38.460,00:50:42.830
"taken multiple levels of indirection,
and at some point, no one's actually",00:50:42.830,00:50:46.210
going to be checking.,00:50:46.210,00:50:47.990
"So the moral of the story is, you're
not going to be writing",00:50:47.990,00:50:52.590
Clang in this class.,00:50:52.590,00:50:54.340
"You're going to be using climbing
Clang a lot in this class.",00:50:54.340,00:50:57.020
"For all you know, Clang is a malicious
program that is sabotaging every",00:50:57.020,00:51:00.490
single program you've ever compiled.,00:51:00.490,00:51:03.520
"And to leave you on that very ominous
note, see you on Wednesday.",00:51:03.520,00:51:08.206
&gt;&gt; [APPLAUSE],00:51:08.206,00:51:10.030
&gt;&gt; SPEAKER 2: At the next CS50.,00:51:10.030,00:51:12.935
&gt;&gt; SPEAKER 3: Don't you dare say that.,00:51:12.935,00:51:14.580
You can do this.,00:51:14.580,00:51:15.930
"You've done this before, you can do this
today, you can do this tomorrow.",00:51:15.930,00:51:19.440
You've been doing this for years.,00:51:19.440,00:51:20.930
Just go up there and do this.,00:51:20.930,00:51:22.790
You can do this.,00:51:22.790,00:51:24.310
&gt;&gt; [MUSIC PLAYING],00:51:24.310,00:51:26.102

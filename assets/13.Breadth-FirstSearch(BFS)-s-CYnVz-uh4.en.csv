text,start,stop
"The following content is
provided under a Creative",00:00:00.050,00:00:02.490
Commons license.,00:00:02.490,00:00:04.010
"Your support will help
MIT OpenCourseWare",00:00:04.010,00:00:06.350
"continue to offer high quality
educational resources for free.",00:00:06.350,00:00:10.720
"To make a donation or
view additional materials",00:00:10.720,00:00:13.330
"from hundreds of MIT courses,
visit MIT OpenCourseWare",00:00:13.330,00:00:17.226
at ocw.mit.edu.,00:00:17.226,00:00:17.851
"PROFESSOR: Today we're going
to introduce graph search",00:00:21.730,00:00:23.980
"in general and talk about
one algorithm, which",00:00:23.980,00:00:25.896
"is breadth-first search, and
understand how in principle you",00:00:25.896,00:00:29.340
"can solve a puzzle
like the Rubik's Cube.",00:00:29.340,00:00:33.180
"So before I get to
Rubik's Cubes let",00:00:33.180,00:00:36.190
"me remind you of some
basic stuff about graphs.",00:00:36.190,00:00:41.942
"Or I can tell you to start
out with, graph search is",00:00:41.942,00:00:50.380
about exploring a graph.,00:00:50.380,00:00:52.905
"And there's many different
notions of exploring a graph.",00:00:55.890,00:00:58.980
"Maybe I give you some
node in a graph, s,",00:00:58.980,00:01:01.950
"and some other
node in a graph, t,",00:01:01.950,00:01:03.790
"and I'd like to
find a path that's",00:01:03.790,00:01:06.940
"going to represent a
problem like I give you",00:01:06.940,00:01:09.390
"a particular state of a
Rubik's Cube and I want to know",00:01:09.390,00:01:13.140
"is there some path that
gets me into a solved state?",00:01:13.140,00:01:16.534
"Do I really want to
solve this on stage?",00:01:16.534,00:01:18.200
What the hell?,00:01:18.200,00:01:19.230
We started.,00:01:19.230,00:01:21.650
"So this is a particularly
easy state to solve,",00:01:21.650,00:01:24.410
which is why I set up this way.,00:01:24.410,00:01:26.816
"All right, so there you go.",00:01:26.816,00:01:27.940
"Seven by seven by seven Rubik's
Cube solved in 10 seconds.",00:01:27.940,00:01:31.510
Amazing.,00:01:31.510,00:01:33.650
New world record.,00:01:33.650,00:01:36.030
"So you're given some initial
state of the Rubik's Cube.",00:01:36.030,00:01:39.327
"You're given the
targets that you",00:01:39.327,00:01:40.702
know what solved looks like.,00:01:40.702,00:01:42.160
You want to find this path.,00:01:42.160,00:01:45.000
"Maybe you want to
find all paths from s.",00:01:45.000,00:01:47.887
"Maybe you just want to
explore all the nodes",00:01:47.887,00:01:49.720
in a graph you can reach from s.,00:01:49.720,00:01:51.160
"Maybe you want to explore all
the nodes in a graph or maybe",00:01:51.160,00:01:53.460
all the edges in a graph.,00:01:53.460,00:01:54.501
"These are all
exploration problems.",00:01:54.501,00:01:56.077
"They're all going to
be solved by algorithms",00:01:56.077,00:01:57.910
from this class and next class.,00:01:57.910,00:02:01.640
"So before we go
further though, I",00:02:01.640,00:02:04.350
"should remind you
what a graph is",00:02:04.350,00:02:07.330
"and sort of basic
features of graphs",00:02:07.330,00:02:10.169
that we're going to be using.,00:02:10.169,00:02:12.230
"This is also 6042 material so
you should know it very well.",00:02:12.230,00:02:15.390
"If you don't,
there's an appendix",00:02:15.390,00:02:17.120
in the textbook about it.,00:02:17.120,00:02:18.820
We have a set of vertices.,00:02:18.820,00:02:20.097
We have a set of edges.,00:02:20.097,00:02:21.055
"Edges are either
unordered pairs--",00:02:33.360,00:02:38.655
some sets of two items--,00:02:41.460,00:02:44.240
or ordered pairs.,00:02:47.140,00:02:50.630
"In this case, we call
the graph undirected.",00:02:58.230,00:03:02.270
"In this case, we call
the graph directed.",00:03:02.270,00:03:04.920
"Usually, there's only one type.",00:03:04.920,00:03:07.630
"Either all the
edges are directed",00:03:07.630,00:03:09.030
or all the edges are undirected.,00:03:09.030,00:03:11.690
"There is a study of
graphs that have both,",00:03:11.690,00:03:13.440
but we are not doing that here.,00:03:13.440,00:03:15.397
Some simple examples.,00:03:18.720,00:03:20.430
Here is a graph.,00:03:23.344,00:03:24.010
This is an undirected graph.,00:03:29.570,00:03:30.795
This is a directed graph.,00:03:42.820,00:03:44.070
"The set of vertices
here is a, b, c, d.",00:03:48.490,00:03:50.115
"The set of vertices
here is a, b, c.",00:03:50.115,00:03:52.525
The set of edges here is--,00:03:52.525,00:03:55.180
"E is going to be things
like a, b; b, c; c, d--",00:03:55.180,00:04:04.250
I think you get the idea.,00:04:04.250,00:04:05.550
"Just for completeness,
V is a, b, c, d.",00:04:09.780,00:04:12.750
"Just so you remember
notations and so on.",00:04:12.750,00:04:14.640
"One of the issues we're going
to talk about in this class",00:04:17.214,00:04:19.589
"is how do you represent a graph
like this for an algorithm?",00:04:19.589,00:04:23.562
"So it's all fine to say,
oh, this is a set of things.",00:04:23.562,00:04:25.770
This is a set of things.,00:04:25.770,00:04:27.070
"An obvious representation
is, you have",00:04:27.070,00:04:28.710
a list or an array of vertices.,00:04:28.710,00:04:31.120
You have an array of edges.,00:04:31.120,00:04:32.520
"Each edge knows
its two end points.",00:04:32.520,00:04:34.320
"That would be a horrible
representation for a graph",00:04:34.320,00:04:37.650
"because if you're, I
don't know, at vertex, a,",00:04:37.650,00:04:39.920
"and you want to know, well
what are the neighbors of a?",00:04:39.920,00:04:42.340
b and c.,00:04:42.340,00:04:43.260
"You'd have to go through
the entire edge list",00:04:43.260,00:04:45.290
"to figure out the
neighbors of a.",00:04:45.290,00:04:47.380
"So it's been linear time just
to know where you can go from a.",00:04:47.380,00:04:50.424
"So we're not going to
use that representation.",00:04:50.424,00:04:52.340
"We're going to use some
better representations.",00:04:52.340,00:04:55.430
"Something called
an adjacency list.",00:04:55.430,00:04:57.160
"Over here, you've got things
like a, c; b, c; and c, b.",00:05:01.560,00:05:07.970
"So you can have edges
in both directions.",00:05:07.970,00:05:10.716
What am I missing?,00:05:10.716,00:05:11.620
"b, a.",00:05:11.620,00:05:12.120
"So that's E, in that case.",00:05:14.892,00:05:17.480
"There are a whole lot of
applications of graph search.",00:05:22.180,00:05:25.484
"I'll make you a little list
to talk about few of them.",00:05:25.484,00:05:28.430
So we've got web crawling.,00:05:32.270,00:05:35.095
You're Google.,00:05:39.010,00:05:39.605
"You want to find all
the pages on the web.",00:05:39.605,00:05:42.100
"Most people don't just tell
you, hey, I've got a new page,",00:05:42.100,00:05:45.050
please index it.,00:05:45.050,00:05:46.450
"You have to just keep
following links--",00:05:46.450,00:05:48.520
"in the early days of the
web, this was a big deal--",00:05:48.520,00:05:50.710
"following links finding
everything that's out there.",00:05:50.710,00:05:53.659
"It's a little bit of an issue
because if you define it wrong,",00:05:53.659,00:05:56.200
"the internet is infinite
because of all those dynamically",00:05:56.200,00:05:59.690
generated pages.,00:05:59.690,00:06:00.600
"But to deal with
that, Google goes",00:06:00.600,00:06:03.330
"sort of breadth-first
for the most part.",00:06:03.330,00:06:05.350
"It's prioritized You want
to see all the things you",00:06:05.350,00:06:09.710
"can reach from pages you
already have and keep going.",00:06:09.710,00:06:15.440
"At some point, you give up
when you run out of time.",00:06:15.440,00:06:19.130
Social networking.,00:06:19.130,00:06:21.130
You're on Facebook.,00:06:21.130,00:06:22.000
You use Friend Finder.,00:06:22.000,00:06:23.500
"It tries to find the friends
that are nearest to you.",00:06:23.500,00:06:26.260
"Or friends of friends is
sort of a level to search.",00:06:26.260,00:06:31.140
"That's essentially a
graph search problem.",00:06:31.140,00:06:33.340
"You want to know what's
two levels or three",00:06:33.340,00:06:37.130
levels of separation from you.,00:06:37.130,00:06:39.180
"And then you loop over those
and look for other signs",00:06:39.180,00:06:43.529
that you might be good friends.,00:06:43.529,00:06:44.820
"You are on a network like the
internet or some intranet.",00:06:49.560,00:06:54.460
You want to broadcast a message.,00:06:54.460,00:06:56.110
So here's you.,00:06:56.110,00:06:57.340
You want to send data out.,00:06:57.340,00:06:59.350
"That's essentially a
graph exploration problem.",00:06:59.350,00:07:01.830
"That message, that packet, is
going to explore the graph.",00:07:01.830,00:07:04.850
Garbage collection.,00:07:09.460,00:07:10.325
"I hope you all know that
modern languages have",00:07:14.340,00:07:17.369
garbage collection.,00:07:17.369,00:07:18.160
"This is why you don't have to
worry about freeing things.",00:07:18.160,00:07:21.740
"Even in Python--
even in CPython,",00:07:21.740,00:07:23.800
"I learned-- there is a garbage
collector as of version two.",00:07:23.800,00:07:27.600
"But also in PyPy, and
JPython and in Java--",00:07:27.600,00:07:31.590
"pretty much every
fairly modern language",00:07:31.590,00:07:35.564
you have garbage collection.,00:07:35.564,00:07:36.730
"Meaning, if there's some data
that's unreachable from--",00:07:36.730,00:07:40.780
So you have your variables.,00:07:40.780,00:07:43.820
"Variables that can be
accessed by the program.",00:07:43.820,00:07:45.890
"Everything that's reachable
from there you have to keep.",00:07:45.890,00:07:48.410
"But if some data structure
becomes no longer reachable,",00:07:48.410,00:07:52.020
"you can throw it away
and regain memory.",00:07:52.020,00:07:57.895
"So that's happening behind
the scenes all the time,",00:07:57.895,00:08:00.020
"and the way it's
being done is with",00:08:00.020,00:08:01.750
"their breadth-first
search, which",00:08:01.750,00:08:03.170
"is what we're going
to talk about today.",00:08:03.170,00:08:04.990
Another one.,00:08:07.620,00:08:08.450
Model checking.,00:08:08.450,00:08:09.095
"Model checking is-- you have
some finite model of either",00:08:14.890,00:08:21.250
"a piece of code, or a
circuit, or chip, whatever,",00:08:21.250,00:08:24.205
"and you want to prove
that it actually",00:08:24.205,00:08:26.220
does what you think it does.,00:08:26.220,00:08:27.620
And so you've drawn a graph.,00:08:27.620,00:08:29.530
"The graph is all
the possible states",00:08:29.530,00:08:31.790
"that your circuit or your
computer program could reach,",00:08:31.790,00:08:36.000
or that it could possibly have.,00:08:36.000,00:08:38.393
"You start in some
initial state, and you",00:08:38.393,00:08:40.059
"want to know among all the
states that you can reach,",00:08:40.059,00:08:42.267
does it have some property.,00:08:42.267,00:08:43.400
"And so you need to visit
all the vertices that",00:08:43.400,00:08:46.050
"are reachable from
a particular place.",00:08:46.050,00:08:48.500
"And usually people do that
using breadth-first search.",00:08:48.500,00:08:53.720
"I use breadth-first
search a lot,",00:08:53.720,00:08:55.390
"myself, to check
mathematical conjectures.",00:08:55.390,00:08:59.860
"So if you're a mathematician,
and you think something",00:08:59.860,00:09:06.270
is true.,00:09:06.270,00:09:07.722
"Like maybe-- It's hard to
give an example of that.",00:09:07.722,00:09:11.600
"But you can imagine some graph
of all the possible inputs",00:09:11.600,00:09:15.690
"to that theorem, and
you need to check them",00:09:15.690,00:09:18.330
for every possible input--,00:09:18.330,00:09:19.600
"If this is true-- the
typical way to do that",00:09:19.600,00:09:21.450
"is breadth-first searching
through that entire graph",00:09:21.450,00:09:24.480
of states.,00:09:24.480,00:09:27.100
"Usually, we're testing
finite, special cases",00:09:27.100,00:09:29.694
"of a general conjecture, but
if we find a counter-example,",00:09:29.694,00:09:32.110
we're done.,00:09:32.110,00:09:32.900
"Don't have to work
on it anymore.",00:09:32.900,00:09:34.591
"If we don't find a
counter-example, usually then",00:09:34.591,00:09:36.590
we have to do the mathematics.,00:09:36.590,00:09:38.270
"It doesn't solve everything,
but it's helpful.",00:09:38.270,00:09:42.695
"And then, the fun
thing we're going",00:09:47.600,00:09:52.430
"to talk about a
little bit today,",00:09:52.430,00:09:54.070
"is if you want to solve
something like a two",00:09:54.070,00:09:55.903
"by two by two Rubik's
Cube optimally,",00:09:55.903,00:09:57.939
"you can do that using
breadth-first search.",00:09:57.939,00:09:59.730
"And you're going to do
that on your problem set.",00:09:59.730,00:10:02.935
"To do it solving this one
optimally using breadth-first",00:10:02.935,00:10:05.340
search would probably--,00:10:05.340,00:10:08.800
"would definitely-- take
more than the lifetime",00:10:08.800,00:10:11.140
of the universe.,00:10:11.140,00:10:12.330
"So don't try seven
by seven by seven.",00:10:12.330,00:10:14.780
"Leave that to the
cubing experts, I guess.",00:10:17.610,00:10:21.180
"I think no one will ever solve
a seven by seven by seven",00:10:21.180,00:10:23.610
Rubik's Cube optimally.,00:10:23.610,00:10:26.150
"There are ways to find a
solution just not the best one.",00:10:26.150,00:10:30.190
"So let me tell you just
for fun, as an example.",00:10:30.190,00:10:33.395
"This Pocket Cube, which is a
two by two by two Rubik's Cube.",00:10:36.930,00:10:41.530
"What we have in mind is
called the configuration graph",00:10:41.530,00:10:45.780
"or sometimes
configuration space.",00:10:45.780,00:10:48.480
"But it's a graph, so
we'll call it a graph.",00:10:48.480,00:10:50.701
"This graph has a vertex for
each possible state of the cube.",00:10:54.040,00:11:01.465
So this is a state.,00:11:10.340,00:11:12.535
This is a state.,00:11:15.140,00:11:16.820
This is a state.,00:11:16.820,00:11:17.640
This is a state.,00:11:17.640,00:11:19.240
Now I'm hopelessly lost.,00:11:19.240,00:11:21.790
Anyone want to work on this?,00:11:21.790,00:11:23.540
Bored?,00:11:23.540,00:11:25.802
No one?,00:11:25.802,00:11:26.560
"Alright, I'll leave
it unsolved then.",00:11:26.560,00:11:28.510
So all those are vertices.,00:11:31.040,00:11:32.522
"There's actually
a lot of vertices.",00:11:32.522,00:11:33.980
"There are 264 million
vertices or so.",00:11:33.980,00:11:38.690
If you want.,00:11:38.690,00:11:39.310
To the side here.,00:11:39.310,00:11:41.560
"Number of vertices is something
like 8 factorial times 3",00:11:41.560,00:11:49.300
to the 8.,00:11:49.300,00:11:51.950
"And one way to see that
is to draw a two by two",00:11:51.950,00:11:57.637
by two Rubik's Cube.,00:11:57.637,00:11:58.470
"So these are what you
might call cubelets,",00:12:01.458,00:12:12.890
"or cubies I think is the
standard term in Rubik's Cube",00:12:12.890,00:12:16.370
land.,00:12:16.370,00:12:16.870
"There's eight of them
in a two by two by two.",00:12:21.220,00:12:23.125
Two cubed.,00:12:23.125,00:12:24.750
"You can essentially permute
those cubies within the cube",00:12:24.750,00:12:28.452
however you like.,00:12:28.452,00:12:29.160
That's 8 factorial.,00:12:29.160,00:12:31.020
"And then each of them has
three possible twists.",00:12:31.020,00:12:33.234
It could be like this.,00:12:33.234,00:12:34.150
It could be like this.,00:12:34.150,00:12:35.180
Or it could be like this.,00:12:35.180,00:12:37.700
So you've got three for each.,00:12:37.700,00:12:39.356
"And this is actually
an accurate count.",00:12:39.356,00:12:40.980
"You're not over-counting the
number of configurations.",00:12:40.980,00:12:43.229
"All of those are, at least
in principle, conceivable.",00:12:43.229,00:12:45.760
"If you take apart the
cube, you can reassemble it",00:12:45.760,00:12:48.060
in each of those states.,00:12:48.060,00:12:49.590
"And that number is
about 264 million.",00:12:49.590,00:12:53.930
"Which is not so
bad for computers.",00:12:57.720,00:13:00.000
You could search that.,00:13:00.000,00:13:01.764
Life is a little bit easier.,00:13:01.764,00:13:02.930
"You get to divide by
24 because there's",00:13:02.930,00:13:04.940
24 symmetries of the cube.,00:13:04.940,00:13:06.800
Eight times three.,00:13:06.800,00:13:08.190
"You can divide by three,
also, because only a third",00:13:08.190,00:13:12.329
"of the configuration space
is actually reachable.",00:13:12.329,00:13:14.370
"If you're not allowed
to take the parts apart,",00:13:14.370,00:13:16.070
"if you have to get
there by a motion,",00:13:16.070,00:13:17.720
"you can only get to 1/3
of the two by two by two.",00:13:17.720,00:13:21.096
"So it's a little bit
smaller than that,",00:13:21.096,00:13:22.720
"if you're actually doing a
breadth-first search, which",00:13:22.720,00:13:24.550
"is what you're going to be
doing on your problem set.",00:13:24.550,00:13:26.758
"But in any case, it's feasible.",00:13:26.758,00:13:29.350
That was vertices.,00:13:29.350,00:13:30.370
We should talk about edges.,00:13:30.370,00:13:31.575
"For every move--
every move takes you",00:13:42.240,00:13:47.570
"from one configuration
to another.",00:13:47.570,00:13:49.870
"You could traverse it in one
direction and make that move.",00:13:49.870,00:13:52.960
You could also undo that move.,00:13:52.960,00:13:54.210
"Because every move is
undoable in a Rubik's Cube,",00:13:54.210,00:13:57.230
this graph is undirected.,00:13:57.230,00:13:58.940
"Or you can think of it as every
edge works in both directions.",00:13:58.940,00:14:02.570
So this is a move.,00:14:02.570,00:14:03.610
It's called a quarter twist.,00:14:03.610,00:14:05.830
"This is a controversy
if you will.",00:14:05.830,00:14:07.640
"Some people allow a whole
half twist as a single move.",00:14:07.640,00:14:10.430
"Whether you define that as a
single move or a double move",00:14:10.430,00:14:13.030
is not that big a deal.,00:14:13.030,00:14:14.380
"It just changes
some of the answers.",00:14:14.380,00:14:17.920
"But you're still exploring
essentially the same graph.",00:14:17.920,00:14:20.970
"So that's the graph
and you'd like",00:14:23.454,00:14:24.870
"to know some
properties about it.",00:14:24.870,00:14:26.244
"So let me draw a
picture of the graph.",00:14:26.244,00:14:28.580
"I'm not going to draw
all 264 million vertices.",00:14:28.580,00:14:31.560
"But in particular,
there's the solved state--",00:14:31.560,00:14:34.960
"we kind of care
about that one, where",00:14:34.960,00:14:37.090
all the colors are aligned--,00:14:37.090,00:14:40.070
"then there's all of
the configurations",00:14:40.070,00:14:44.100
you could reach by one move.,00:14:44.100,00:14:46.040
"So these are the possible
moves from the solved state.",00:14:46.040,00:14:49.950
"And then from those
configurations,",00:14:52.950,00:14:55.400
there's more places you can go.,00:14:55.400,00:14:57.970
"Maybe there's multiple ways
to get to the same node.",00:14:57.970,00:15:00.448
"But these would be
all the configurations",00:15:03.320,00:15:05.250
you can reach in two moves.,00:15:05.250,00:15:07.190
And so on.,00:15:15.170,00:15:16.940
"And at some point,
you run out of graph.",00:15:16.940,00:15:19.100
"So there might be a
few nodes out here.",00:15:19.100,00:15:26.250
"The way I'm drawing
this, this is everything",00:15:26.250,00:15:28.580
"you can reach in one move, in
two movies, in three moves.",00:15:28.580,00:15:31.240
"At the end, this
would be 11 moves,",00:15:31.240,00:15:35.010
if you allow half twists.,00:15:35.010,00:15:37.760
"And as puzzlers,
we're particularly",00:15:37.760,00:15:41.470
"interested in this
number, which you",00:15:41.470,00:15:44.740
"would call, as a graph theorist,
the diameter of the graph.",00:15:44.740,00:15:50.760
Puzzlers call it God's number.,00:15:50.760,00:15:53.200
If you were God or some omni--,00:15:53.200,00:15:57.110
something being.,00:15:57.110,00:15:59.020
"You have the optimal algorithm
for solving the Rubik's Cube.",00:15:59.020,00:16:01.860
"How many moves do you
need If you always",00:16:01.860,00:16:04.220
follow the best path?,00:16:04.220,00:16:06.100
"And the answer is, in
the worst case, 11.",00:16:06.100,00:16:08.650
"So we're interested in the worst
case of the best algorithm.",00:16:08.650,00:16:14.130
"For two by two by
two, the answer is 11.",00:16:14.130,00:16:16.880
"For three by three by
three, the answer is 20.",00:16:16.880,00:16:20.050
"That was just proved
last summer with a couple",00:16:20.050,00:16:23.070
years of computer time.,00:16:23.070,00:16:24.650
For four by four by four--,00:16:24.650,00:16:25.800
I don't have one here--,00:16:25.800,00:16:26.759
"I think we'll never
know the answer.",00:16:26.759,00:16:28.258
"For five by five by five,
we'll never know the answer.",00:16:28.258,00:16:30.525
"For six, for seven, same deal.",00:16:30.525,00:16:33.820
"But for two by two by
two, you can compute it.",00:16:33.820,00:16:36.330
"You will compute it
on your problem set.",00:16:36.330,00:16:38.180
"And it's kind of nice
to know because it",00:16:38.180,00:16:40.400
"says whatever configuration I'm
in, I can solve it in 11 moves.",00:16:40.400,00:16:46.800
"But the best known
way to compute it,",00:16:46.800,00:16:49.440
"is basically to construct
this graph one layer at a time",00:16:49.440,00:16:54.220
until you're done.,00:16:54.220,00:16:55.470
"And then you know
what the diameter is.",00:16:55.470,00:16:57.310
"The trouble is, in between
here this grows exponentially.",00:16:57.310,00:17:00.910
"At some point, it
decreases a little bit.",00:17:00.910,00:17:03.180
"But getting over
that exponential hump",00:17:03.180,00:17:04.970
is really hard.,00:17:04.970,00:17:06.564
"And for three by three by
three, they used a lot of tricks",00:17:06.564,00:17:08.980
"to speed up the
algorithm, but in the end",00:17:08.980,00:17:13.490
"it's essentially a
breadth-first search.",00:17:13.490,00:17:15.760
What's a breadth-first search?,00:17:15.760,00:17:17.359
This going layer by layer.,00:17:17.359,00:17:19.060
"So we're going to
formalize that in a moment.",00:17:19.060,00:17:22.430
But that is the problem.,00:17:22.430,00:17:25.089
"So just for fun,
any guesses what",00:17:25.089,00:17:37.320
"the right answer is for an
n by n by n Rubik's cube?",00:17:37.320,00:17:40.020
What's the diameter?,00:17:40.020,00:17:41.721
"Not an exact answer,
because I think we'll never",00:17:41.721,00:17:43.720
know the exact answer.,00:17:43.720,00:17:44.850
"But if I want theta
something, what",00:17:44.850,00:17:48.558
do you think the something is?,00:17:48.558,00:17:50.280
"How many people here have
solved the Rubik's Cube?",00:17:54.649,00:17:56.732
Ever?,00:17:56.732,00:17:58.130
"So you know what we're
talking about here.",00:17:58.130,00:18:00.510
Most people have worked on it.,00:18:00.510,00:18:04.390
"To think about an n by
n by n Rubik's Cube,",00:18:04.390,00:18:08.280
each side has area n squared.,00:18:08.280,00:18:11.420
"So total surface
area is 6 n squared.",00:18:11.420,00:18:14.210
"So there's, roughly, stata n
squared little cubies here.",00:18:14.210,00:18:18.718
"So what do you think the right
[INAUDIBLE] is for n by n by n?",00:18:18.718,00:18:21.301
No guesses?,00:18:26.702,00:18:27.480
AUDIENCE: n cubed?,00:18:32.095,00:18:33.450
PROFESSOR: n cubed?,00:18:33.450,00:18:34.900
Reasonable guess.,00:18:34.900,00:18:36.540
But wrong.,00:18:36.540,00:18:38.045
It's an upper bounds.,00:18:38.045,00:18:39.690
Why n cubed?,00:18:39.690,00:18:40.890
AUDIENCE: [INAUDIBLE].,00:18:43.432,00:18:44.348
"PROFESSOR: Oh, you're
guessing based on the numbers.",00:18:48.834,00:18:51.000
Yeah.,00:18:51.000,00:18:51.499
"The numbers are
misleading, unfortunately.",00:18:51.499,00:18:53.500
"It's the law of small
numbers I guess.",00:18:53.500,00:18:56.466
It doesn't really look right.,00:18:56.466,00:18:59.300
I know the answer.,00:18:59.300,00:19:00.636
"I know the answer
because we just",00:19:00.636,00:19:02.010
wrote a paper with the answer.,00:19:02.010,00:19:03.259
"This is a new result.
From this summer.",00:19:03.259,00:19:05.940
But I'm curious.,00:19:05.940,00:19:08.330
"To me the obvious answer is
n squared because there's",00:19:08.330,00:19:11.050
about n squared cubies.,00:19:11.050,00:19:12.700
"And it's not so hard to show
in a constant number moves",00:19:12.700,00:19:15.340
"you can solve a constant
number of cubies.",00:19:15.340,00:19:19.011
"If you think about the
general algorithms,",00:19:19.011,00:19:20.760
"like if you've ever
looked up professor's cube",00:19:20.760,00:19:22.676
"and how to solve it,
you're doing like 10 moves,",00:19:22.676,00:19:25.200
"and then maybe you
swap two cubies",00:19:25.200,00:19:27.720
"which you can use to
solve a couple of cubies",00:19:27.720,00:19:30.530
in a constant number of moves.,00:19:30.530,00:19:31.910
"So n squared would be
the standard answer",00:19:31.910,00:19:36.400
"if you're following
standard algorithms.",00:19:36.400,00:19:38.600
"But it turns out, you can
do a little bit better.",00:19:38.600,00:19:41.225
"And the right answer is n
squared divided by log n.",00:19:41.225,00:19:43.350
I think it's cool.,00:19:43.350,00:19:45.050
"Hopefully, you guys
can appreciate that.",00:19:45.050,00:19:46.814
"Not a lot of people can
appreciate n squared divided",00:19:46.814,00:19:48.980
"by log n, but here in
algorithms, we're all about n",00:19:48.980,00:19:52.365
squared over log n.,00:19:52.365,00:19:53.290
"If you're interested, the
paper's on my website.",00:19:57.770,00:20:00.420
"I think its called, Algorithms
For Solving Rubik's Cubes.",00:20:00.420,00:20:03.590
There's a constant there.,00:20:03.590,00:20:05.110
Current constant is not so good.,00:20:05.110,00:20:06.980
Let's say it's in the millions.,00:20:06.980,00:20:08.320
[LAUGHTER],00:20:08.320,00:20:11.760
You've got to start somewhere.,00:20:11.760,00:20:13.010
"The next open problem
will be to improve",00:20:15.754,00:20:17.420
"that constant to
something reasonable that",00:20:17.420,00:20:19.170
maybe is close to 20.,00:20:19.170,00:20:20.720
But we're far from that.,00:20:20.720,00:20:25.250
"Let's talk about
graph representation.",00:20:25.250,00:20:27.145
"Before we can talk
about exporting a graph,",00:20:31.289,00:20:33.080
"we need to know what
we're given as input.",00:20:33.080,00:20:36.680
"And there's basically one
standard representation",00:20:36.680,00:20:39.950
and a bunch of variations of it.,00:20:39.950,00:20:43.510
"And they're called
adjacency lists.",00:20:43.510,00:20:45.125
"So the idea with
an adjacency list,",00:20:48.090,00:20:49.720
"is you have an array
called Adj, for adjacency",00:20:49.720,00:20:58.436
"of size V. Each
element in the array",00:20:58.436,00:21:02.290
is a pointer to a linked list.,00:21:02.290,00:21:03.735
"And the idea is that this
array is indexed by a vertex.",00:21:07.610,00:21:12.260
"So we're imagining
a world where we",00:21:18.960,00:21:21.170
can index arrays by vertices.,00:21:21.170,00:21:23.500
"So maybe, you just
label your vertices",00:21:23.500,00:21:25.960
zero through v minus 1.,00:21:25.960,00:21:27.730
Then that's a regular array.,00:21:27.730,00:21:29.760
"Or, if you want
to get fancy, you",00:21:29.760,00:21:31.802
"can think of a vertex as an
arbitrary hashable thing,",00:21:31.802,00:21:35.200
"and Adj is actually
a hash table.",00:21:35.200,00:21:37.700
"And that's how you
probably do it in Python.",00:21:37.700,00:21:39.810
"Maybe your vertices are
objects, and this is just",00:21:39.810,00:21:42.910
"hashing based on the
address of the object.",00:21:42.910,00:21:44.764
"But we're not going
to worry about that.",00:21:44.764,00:21:46.430
"We're just going
to write Adj of u.",00:21:46.430,00:21:48.370
"Assume that somehow you
can get to the linked list",00:21:48.370,00:21:50.560
corresponding to that vertex.,00:21:50.560,00:21:51.768
"And the idea is,
for every vertex",00:22:00.680,00:22:02.420
"we just store its
neighbors, namely",00:22:02.420,00:22:06.260
"the vertices you can
reach by one step from u.",00:22:06.260,00:22:10.220
"So I'm going to define that
a little more formally.",00:22:10.220,00:22:13.150
"Adj of u is going to be
the set of all vertices,",00:22:13.150,00:22:17.080
"V, such that u, v is an edge.",00:22:17.080,00:22:22.430
"So if I have a vertex
like b, Adj of b",00:22:31.320,00:22:35.990
"is going to be both a
and c because in one step",00:22:35.990,00:22:38.685
"there are outgoing edges
from b to a and b to c.",00:22:38.685,00:22:42.010
"So Adj of b is a, c.",00:22:42.010,00:22:44.730
In that graph.,00:22:52.260,00:22:53.530
"I should have labeled the
vertices something different.",00:22:53.530,00:22:56.620
"Adj of a is going to be
just c because you can't",00:22:56.620,00:23:02.670
get with one step from a to b.,00:23:02.670,00:23:05.145
"The edge is in the
wrong direction.",00:23:05.145,00:23:08.080
And Adj of c is b.,00:23:08.080,00:23:13.240
"I think that definition's
pretty clear.",00:23:17.480,00:23:19.260
"For undirected graphs,
you just put braces here.",00:23:19.260,00:23:23.290
Which means you store--,00:23:23.290,00:23:24.710
"I mean, it's the same thing.",00:23:24.710,00:23:25.980
"Here Adj of c is going
to be a, b, and d, as you",00:23:25.980,00:23:29.180
"can get in one step from c to
a, from c to b, from c to d.",00:23:29.180,00:23:33.200
For pretty much every--,00:23:33.200,00:23:34.520
"At least for graph
exploration problems,",00:23:34.520,00:23:36.700
"this is the
representation you want.",00:23:36.700,00:23:38.580
"Because you're at some
vertex, and you want to know,",00:23:38.580,00:23:39.850
where can I go next.,00:23:39.850,00:23:40.930
"And Adj of that vertex tells you
exactly where you can go next.",00:23:40.930,00:23:44.560
So this is what you want.,00:23:44.560,00:23:45.830
"There's a lot of different
ways to actually implement",00:23:50.030,00:23:53.040
adjacency lists.,00:23:53.040,00:23:56.540
I've talked about two of them.,00:23:56.540,00:23:59.440
"You could have the vertices
labeled zero to v minus 1,",00:23:59.440,00:24:02.720
"and then this is,
literally, an array.",00:24:02.720,00:24:05.020
And you have--,00:24:05.020,00:24:06.120
I guess I should draw.,00:24:06.120,00:24:08.460
"In this picture,
Adj is an array.",00:24:08.460,00:24:13.730
"So you've got a, b, and c.",00:24:13.730,00:24:17.080
"Each one of them is a
pointer to a linked list.",00:24:17.080,00:24:20.490
"This one's actually going
to be a, c, and we're done.",00:24:20.490,00:24:27.510
"Sorry, that was b.",00:24:27.510,00:24:30.820
"Who said it had to be
alphabetical order?",00:24:30.820,00:24:33.520
"A is a pointer to c,
c is a pointer to b.",00:24:33.520,00:24:38.110
"That's explicitly how
you might represent it.",00:24:38.110,00:24:40.570
"This might be a hash
table instead of an array,",00:24:40.570,00:24:43.350
if you have weirder vertices.,00:24:43.350,00:24:45.870
"You can also do it in a more
object-oriented fashion.",00:24:45.870,00:24:48.370
"For every vertex, v, you can
make the vertices objects,",00:24:55.590,00:24:59.090
"and v dot neighbors
could store what",00:24:59.090,00:25:05.930
"we're defining over
there to be Adj",00:25:05.930,00:25:08.460
"of v. This would be the more
object-oriented way to do it",00:25:08.460,00:25:13.630
"I've thought a lot about
this, and I like this,",00:25:13.630,00:25:16.040
"and usually when I implement
graphs this is what I do.",00:25:16.040,00:25:19.010
"But it is actually convenient
to have this representation.",00:25:19.010,00:25:23.200
"There's a reason the textbook
uses this representation.",00:25:23.200,00:25:25.665
"Because, if you've already
got some vertices lying around",00:25:25.665,00:25:28.040
"and you want to have multiple
graphs on those vertices,",00:25:28.040,00:25:31.150
this lets you do that.,00:25:31.150,00:25:33.710
"You can define multiple Adj
arrays, one for graph one, one",00:25:33.710,00:25:37.934
"for graph two, one
for graph three",00:25:37.934,00:25:39.350
"but they can all talk
about the same vertices.",00:25:39.350,00:25:41.790
"Whereas here, vertex can
only belong to one graph.",00:25:41.790,00:25:45.410
"It can only have one
neighbor structure",00:25:45.410,00:25:48.260
that says what happens.,00:25:48.260,00:25:49.390
"If you're only dealing
with one graph,",00:25:49.390,00:25:51.000
this is probably cleaner.,00:25:51.000,00:25:52.850
"But with multiple graphs, which
will happen even in this class,",00:25:52.850,00:25:56.220
"adjacency lists are
kind of the way to go.",00:25:56.220,00:26:00.534
"You can also do
implicitly-represented graphs.",00:26:00.534,00:26:02.450
"Which would be to say,
Adj of u is a function.",00:26:13.580,00:26:20.595
"Or v dot neighbors is a
method of the vertex class.",00:26:23.960,00:26:36.660
"Meaning, it's not just
stored there explicitly.",00:26:36.660,00:26:39.210
"Whenever you need it,
you call this function",00:26:39.210,00:26:41.270
and it computes what you want.,00:26:41.270,00:26:45.500
"This is useful because
it uses less space.",00:26:45.500,00:26:47.420
"You could say this uses
zero space or maybe v space.",00:26:47.420,00:26:52.030
One for each vertex.,00:26:52.030,00:26:53.470
It depends.,00:26:53.470,00:26:54.139
"Maybe you don't even need
to explicitly represent",00:26:54.139,00:26:56.180
all the vertices.,00:26:56.180,00:26:58.080
"You start with some vertex,
and given a vertex, somehow",00:26:58.080,00:27:03.500
"you know how to compute, let's
say in constant time or linear",00:27:03.500,00:27:06.610
"time or something, the
neighbors of that vertex.",00:27:06.610,00:27:10.270
"And then from
there, you can keep",00:27:10.270,00:27:11.840
"searching, keep
computing neighbors,",00:27:11.840,00:27:13.340
until you find what you want.,00:27:13.340,00:27:14.590
"Maybe you don't have to
build the whole graph,",00:27:14.590,00:27:16.506
"you just need to build enough of
it until you find your answer.",00:27:16.506,00:27:19.774
"Whatever answer
you're searching for.",00:27:19.774,00:27:21.315
"Can you think of a situation
where that might be the case?",00:27:21.315,00:27:23.850
"Where implicit representation
would be a good idea?",00:27:27.205,00:27:29.330
Yes.,00:27:29.330,00:27:29.830
Rubik's Cubes.,00:27:29.830,00:27:30.710
They're really good.,00:27:30.710,00:27:31.543
"I never want to
build this space.",00:27:31.543,00:27:33.170
It has a bajillion states.,00:27:33.170,00:27:36.060
A bajillion vertices.,00:27:36.060,00:27:37.170
It would take forever.,00:27:37.170,00:27:38.780
"There's more
configurations of this cube",00:27:38.780,00:27:41.580
"than there are particles
in the known universe.",00:27:41.580,00:27:45.590
I just computed that in my head.,00:27:45.590,00:27:47.701
[LAUGHTER],00:27:47.701,00:27:50.120
"I have done this
computation recently,",00:27:50.120,00:27:52.130
"and for five by five by five
it's like 10 to the 40 states.",00:27:52.130,00:27:55.620
"Or 10 to the 40, 10 to the 60.",00:27:55.620,00:27:58.359
"There's about 10 to the
80 particles in the known",00:27:58.359,00:28:00.400
universe.,00:28:00.400,00:28:00.940
10 to the 83 or something.,00:28:00.940,00:28:02.240
"So this is probably
10 to the 200 or so.",00:28:02.240,00:28:06.750
It's a lot.,00:28:06.750,00:28:07.862
You never want to build that.,00:28:07.862,00:28:09.070
"But, it's very easy to
represent this state.",00:28:09.070,00:28:11.820
"Just store where
all the cubies are.",00:28:11.820,00:28:13.520
"And it's very easy to see what
are all the configurations you",00:28:13.520,00:28:16.410
can reach in one move.,00:28:16.410,00:28:17.640
"Just try this move, try
this move, try this move.",00:28:17.640,00:28:20.630
"Put it back and
try the next move.",00:28:20.630,00:28:22.371
And so on.,00:28:22.371,00:28:22.870
"For an m by n by
n cube in order n",00:28:25.660,00:28:27.600
"time, you can list all
the order n next states.",00:28:27.600,00:28:30.210
"You can list all the
order n neighbors.",00:28:30.210,00:28:32.050
"And so you can keep exploring,
searching for your state.",00:28:32.050,00:28:35.224
"Now you don't want to explore
too far for that cube,",00:28:35.224,00:28:37.390
"but at least you're
not hosed just",00:28:37.390,00:28:41.020
"from the problem of
representing the graph.",00:28:41.020,00:28:44.190
"So even for two by
two by two, it's",00:28:44.190,00:28:46.030
"useful to do this
mostly to save space.",00:28:46.030,00:28:48.165
You're not really saving time.,00:28:48.165,00:28:50.310
"But you'd like to not have to
store all 264 million states",00:28:50.310,00:28:54.960
"because it's going to be several
gigabytes and it's annoying.",00:28:54.960,00:29:01.850
"Speaking of space-- ignoring
the implicit representation--",00:29:01.850,00:29:05.650
"how much space does this
representation require?",00:29:05.650,00:29:08.755
"V plus E. This Is going
to be the bread and butter",00:29:19.820,00:29:23.090
of our graph algorithms.,00:29:23.090,00:29:24.609
"Most of the things we're going
to talk about achieve V plus E",00:29:24.609,00:29:27.150
time.,00:29:27.150,00:29:27.650
This is essentially optimal.,00:29:27.650,00:29:29.090
"It's linear in the
size of your graph.",00:29:29.090,00:29:32.162
"You've got V vertices, E edges.",00:29:32.162,00:29:34.700
"Technically, in
case you're curious,",00:29:34.700,00:29:37.160
"this is really the size
of V plus the size of E.",00:29:37.160,00:29:40.560
"But in the textbook, and
I guess in the world,",00:29:40.560,00:29:44.689
"we just omit those sizes of
whenever they're in a theta",00:29:44.689,00:29:46.980
notation or Big O notation.,00:29:46.980,00:29:49.180
"So number vertices
plus number of edges.",00:29:49.180,00:29:50.930
"that sort of the
bare minimum you",00:29:50.930,00:29:52.304
"need if you want an explicit
representation of the graph.",00:29:52.304,00:29:55.456
"And we achieve
that because we've",00:29:55.456,00:29:56.830
"got we've got v space just to
store the vertices in an array.",00:29:56.830,00:30:00.880
And then if you add up--,00:30:00.880,00:30:03.820
Each of these is an edge.,00:30:03.820,00:30:06.677
You have to be a little careful.,00:30:06.677,00:30:08.010
"In undirected graphs, each
of these is a half edge.",00:30:08.010,00:30:11.570
"So there's actually two
times e nodes over here.",00:30:11.570,00:30:15.340
"But it's theta E.
So theta V plus E",00:30:15.340,00:30:19.390
is the amount of space we need.,00:30:19.390,00:30:22.140
"And ideally, all our algorithms
will run in this much time.",00:30:22.140,00:30:25.090
"Because that's what you need
just to look at the graph.",00:30:25.090,00:30:28.550
"So let's do an actual algorithm,
which is breadth-first search.",00:31:06.710,00:31:11.590
"So to the simplest algorithm
you can think of in graphs.",00:31:14.920,00:31:18.420
"I've already outlined
it several times.",00:31:18.420,00:31:21.090
You start at some node.,00:31:21.090,00:31:22.640
"You look at all the nodes
you can get to from there.",00:31:22.640,00:31:24.810
"You look at all the nodes
you can get to from there.",00:31:24.810,00:31:26.976
Keep going until you're done.,00:31:26.976,00:31:29.300
"So this is going to explore
all of the vertices that",00:31:29.300,00:31:32.110
are reachable from a node.,00:31:32.110,00:31:34.030
"The challenge-- The
one annoying thing",00:31:36.720,00:31:39.270
"about breadth-first search
and why this is not trivial",00:31:39.270,00:31:41.520
"is that there can
be some edges that",00:31:41.520,00:31:44.280
"go sort of backwards, like
that, to some previous layer.",00:31:44.280,00:31:52.340
"Actually, that's
not true, is it?",00:31:52.340,00:31:54.242
This can't happen.,00:31:58.090,00:31:59.275
You see why?,00:31:59.275,00:32:02.220
"Because if that edge
existed, then from this node",00:32:02.220,00:32:06.280
you'd be able to get here.,00:32:06.280,00:32:08.205
"So in an undirected
graph, that can't happen.",00:32:08.205,00:32:10.180
"In a directed graph,
you could conceivably",00:32:10.180,00:32:12.520
have a back edge like that.,00:32:12.520,00:32:13.660
"You'd have to realize, oh,
that's a vertex I've already",00:32:13.660,00:32:16.270
"seen, I don't want to put
it here, even though it's",00:32:16.270,00:32:19.450
"something I can
reach from this node,",00:32:19.450,00:32:21.270
because I've already been there.,00:32:21.270,00:32:22.961
"We've got to worry
about things like that.",00:32:22.961,00:32:24.710
"That's, I guess, the main
thing to worry about.",00:32:27.260,00:32:29.970
"So our goal is to
visit all the nodes--",00:32:34.620,00:32:36.615
"the vertices-- reachable
from given node, s.",00:32:40.950,00:32:47.555
"We want to achieve
V plus E time.",00:32:51.470,00:32:54.720
"And the idea is to look
at the nodes that are",00:33:00.190,00:33:10.530
reachable first in zero moves.,00:33:10.530,00:33:15.780
Zero moves.,00:33:15.780,00:33:17.040
That's s.,00:33:17.040,00:33:17.820
Then in one move.,00:33:20.390,00:33:23.480
"Well that's everything you
can reach from s in one step.",00:33:23.480,00:33:27.650
That's adjacency of s.,00:33:27.650,00:33:29.430
"And then two moves,
and three moves, and so",00:33:29.430,00:33:32.810
on until we run out of graph.,00:33:32.810,00:33:36.910
"But we need to be careful
to avoid duplicates.",00:33:36.910,00:33:47.800
"We want to avoid
revisiting vertices",00:33:47.800,00:33:51.090
for a couple of reasons.,00:33:51.090,00:33:52.090
"One is if we didn't, we
would spend infinite time.",00:33:52.090,00:33:55.110
"Because we'd just go
there and come back,",00:33:55.110,00:33:56.945
and go there and come back.,00:33:56.945,00:33:58.070
"As long as there's
at least one cycle,",00:33:58.070,00:33:59.740
"you're going to keep
going around the cycle",00:33:59.740,00:34:00.920
"forever and ever if you don't
try to avoid duplicates.",00:34:00.920,00:34:03.280
"So let me write down some
code for this algorithm.",00:34:05.707,00:34:07.790
It's pretty straightforward.,00:34:07.790,00:34:09.580
"So straightforward, we
can be completely explicit",00:34:09.580,00:34:12.190
and write pseudocode.,00:34:12.190,00:34:13.830
"There's a few different ways
to implement this algorithm.",00:34:18.824,00:34:21.199
I'll show you my favorite.,00:34:21.199,00:34:23.780
"The textbook has a
different favorite.",00:34:23.780,00:34:25.659
"I'm going to write in
pure Python, I believe.",00:34:42.040,00:34:44.739
Almost done.,00:35:57.370,00:35:58.100
I think I got that right.,00:36:30.650,00:36:33.160
"So this is at the end
of the while-loop.",00:36:33.160,00:36:36.594
"And at that point
we should be done.",00:36:36.594,00:36:39.272
"We can do an actual
example, maybe.",00:36:39.272,00:36:40.730
"I'm going to do it on
an undirected graph,",00:37:16.610,00:37:19.560
"but this algorithm works just as
well on directed and undirected",00:37:19.560,00:37:22.470
graphs.,00:37:22.470,00:37:22.970
There's an undirected graph.,00:37:28.330,00:37:30.950
"We're given some
start vertex, s,",00:37:30.950,00:37:34.890
"and we're given
the graph by being",00:37:34.890,00:37:37.430
given the adjacency lists.,00:37:37.430,00:37:39.850
"So you could iterate over
the vertices of that thing.",00:37:39.850,00:37:42.600
"Given a vertex, you
can list all the edges",00:37:42.600,00:37:44.420
you can reach in one step.,00:37:44.420,00:37:47.112
"And then the top
of the algorithm's",00:37:47.112,00:37:48.570
just some initialization.,00:37:48.570,00:37:50.400
The basic structure--,00:37:50.400,00:37:51.980
"We have this thing called the
frontier, which is what we just",00:37:51.980,00:37:55.890
reached on the previous level.,00:37:55.890,00:37:58.920
"I think that's going to
be level i minus one.",00:37:58.920,00:38:04.480
"Just don't want to
make an index error.",00:38:04.480,00:38:06.225
"These are going to be all the
things you can reach using",00:38:08.930,00:38:11.920
exactly i minus one moves.,00:38:11.920,00:38:14.970
"And then next is going
to be all the things",00:38:14.970,00:38:17.020
you can reach in i moves.,00:38:17.020,00:38:18.560
"So to get started,
what we know is s.",00:38:21.310,00:38:24.976
"s is what you can
reach in zero moves.",00:38:24.976,00:38:28.580
"So we set the level
of s to be zero.",00:38:28.580,00:38:31.540
"That's the first
line of the code.",00:38:31.540,00:38:33.219
"There's this other
thing called the parent.",00:38:33.219,00:38:35.010
We'll worry about that later.,00:38:35.010,00:38:36.650
It's optional.,00:38:36.650,00:38:37.720
"It gives us some
other fun structure.",00:38:37.720,00:38:40.700
"We set i to be one because
we just finished level zero.",00:38:40.700,00:38:44.950
"Frontier of what you can reach
in level zero is just s itself.",00:38:44.950,00:38:49.600
"So we're going to
put that on the list.",00:38:49.600,00:38:51.560
"That is level zero. i equals
one So one minus one is zero.",00:38:51.560,00:38:54.870
All good.,00:38:54.870,00:38:56.360
And then we're going to iterate.,00:38:56.360,00:38:57.810
"And this is going
to be looking at--",00:38:57.810,00:38:59.540
"The end of the iteration
is to increment i.",00:38:59.540,00:39:02.347
"So you could also
call this a for-loop",00:39:02.347,00:39:03.930
"except we don't know
when it's going to end.",00:39:03.930,00:39:05.763
"So it's easier to
think of i incrementing",00:39:05.763,00:39:09.020
"each step not knowing
when we're going to stop.",00:39:09.020,00:39:11.150
"We're going to stop whenever
we run out of nodes.",00:39:11.150,00:39:13.191
"So whenever frontier
is a non-empty list.",00:39:13.191,00:39:16.787
"the bulk of the work
here is computing",00:39:16.787,00:39:18.370
what the next level is.,00:39:18.370,00:39:19.520
That's called next.,00:39:19.520,00:39:20.860
It's going to be level i.,00:39:20.860,00:39:22.330
We do some computation.,00:39:22.330,00:39:23.310
"Eventually we have
what's on the next level.",00:39:23.310,00:39:26.020
Then we set frontier next.,00:39:26.020,00:39:28.172
Because that's our new level.,00:39:28.172,00:39:29.380
"We increment i, and then
invariant of frontier being",00:39:29.380,00:39:32.930
level i minus 1 is preserved.,00:39:32.930,00:39:35.642
Right after here.,00:39:35.642,00:39:36.350
"And then we just keep going
till we run out of nodes.",00:39:36.350,00:39:40.100
How do we compute next?,00:39:40.100,00:39:42.230
"Well, we look at every
node in the frontier,",00:39:42.230,00:39:44.210
"and we look at all the nodes
you can reach from those nodes.",00:39:44.210,00:39:47.660
"So every node, u, in the
frontier and then we look at--",00:39:47.660,00:39:50.730
"So this means there
is an edge from u",00:39:50.730,00:39:53.110
to v through the picture.,00:39:53.110,00:39:55.660
"We look at all the edges
from all the frontier nodes",00:39:55.660,00:39:58.520
where you can go.,00:39:58.520,00:39:59.870
"And then the key thing is
we check for duplicates.",00:39:59.870,00:40:02.330
"We see, have we seen
this node before?",00:40:02.330,00:40:04.830
"If we have, we would have set
it's level to be something.",00:40:04.830,00:40:08.270
"If we haven't seen
it, it will not",00:40:08.270,00:40:09.870
"be in the level hash table
or the level dictionary.",00:40:09.870,00:40:14.160
"And so if it's not in
there, we'll put it in there",00:40:14.160,00:40:18.350
and add it to the next layer.,00:40:18.350,00:40:20.640
"So that's how you
avoid duplicates.",00:40:20.640,00:40:22.860
"You set its level to make sure
you will never visit it again,",00:40:22.860,00:40:25.890
"you add it to the next frontier,
you iterate, you're done.",00:40:25.890,00:40:28.870
"This is one version
of what you might",00:40:31.359,00:40:32.900
call a breadth-first search.,00:40:32.900,00:40:34.240
"And it achieves
this goal, visiting",00:40:34.240,00:40:36.270
"all the nodes reachable
from s, in linear time.",00:40:36.270,00:40:39.220
"Let's see how it works
on a real example.",00:40:39.220,00:40:41.640
So first frontier is this thing.,00:40:41.640,00:40:43.740
"Frontier just has the node
s, so we just look at s,",00:40:46.670,00:40:49.120
"and we look at all
the edges from s.",00:40:49.120,00:40:50.930
We get a and x.,00:40:50.930,00:40:52.440
"So those get added
to the next frontier.",00:40:52.440,00:40:56.460
"Maybe before I go too
far, let me switch colors.",00:40:56.460,00:41:01.040
Multimedia here.,00:41:05.700,00:41:08.080
So here's level one.,00:41:08.080,00:41:12.576
"All of these guys, we're going
to set their level to one.",00:41:12.576,00:41:17.270
They can be reached in one step.,00:41:17.270,00:41:18.877
That's pretty clear.,00:41:18.877,00:41:19.710
So now frontier is a and x.,00:41:19.710,00:41:22.570
That's what next becomes.,00:41:22.570,00:41:24.380
Then frontier becomes next.,00:41:24.380,00:41:26.240
"And so we look at
all the edges from a.",00:41:26.240,00:41:28.510
That's going to be s and z.,00:41:28.510,00:41:31.110
"s, we've already looked at,
it already has a level set,",00:41:31.110,00:41:33.730
so we ignore that.,00:41:33.730,00:41:35.200
So we look at z.,00:41:35.200,00:41:35.880
"Z does not have a
level indicated here,",00:41:35.880,00:41:38.200
"so we're going to set
it to i which happens",00:41:38.200,00:41:40.300
to be two at this point.,00:41:40.300,00:41:42.340
And we look at x.,00:41:42.340,00:41:43.200
"It has neighbors s, d, and c.",00:41:43.200,00:41:45.160
We look at s again.,00:41:45.160,00:41:46.330
"We say, oh, we've already
seen that yet again.",00:41:46.330,00:41:48.680
"So we're worried about
this taking a lot of time",00:41:48.680,00:41:50.800
"because we look at s
three times in total.",00:41:50.800,00:41:54.090
Then we look at d.,00:41:54.090,00:41:56.290
"d hasn't been set, so we set
it to two. c hasn't been set,",00:41:56.290,00:41:59.240
so we set it to two.,00:41:59.240,00:42:00.220
"So the frontier at
level two is that.",00:42:00.220,00:42:05.945
"Then we look at all
the neighbors of z.",00:42:05.945,00:42:07.570
There's a. a's already been set.,00:42:07.570,00:42:09.489
Look at all the neighbors of d.,00:42:09.489,00:42:10.780
There's x.,00:42:10.780,00:42:11.370
There's c.,00:42:11.370,00:42:11.870
Those have been set.,00:42:11.870,00:42:12.703
There's f.,00:42:12.703,00:42:13.850
This one gets added.,00:42:13.850,00:42:16.440
Then we look at c.,00:42:16.440,00:42:17.480
There's x.,00:42:17.480,00:42:18.020
That's been done. d's been done.,00:42:18.020,00:42:19.770
f's been done.,00:42:19.770,00:42:20.690
v has not been done.,00:42:20.690,00:42:23.370
"So this becomes a
frontier at level three.",00:42:23.370,00:42:27.300
Then we look at level three.,00:42:27.300,00:42:28.930
There's f.,00:42:28.930,00:42:29.577
"D's been done, c's been
done, b's been done.",00:42:29.577,00:42:31.410
"We look at v. c's been
done. f's been done.",00:42:31.410,00:42:34.530
Nothing to add to next.,00:42:34.530,00:42:35.710
Next becomes empty.,00:42:35.710,00:42:36.780
Frontier becomes empty.,00:42:36.780,00:42:38.240
The while-loop finishes.,00:42:38.240,00:42:39.530
TA DA!,00:42:39.530,00:42:40.760
"We've computed-- we've
visited all the vertices.",00:42:40.760,00:42:43.510
Question.,00:42:43.510,00:42:44.453
AUDIENCE: [INAUDIBLE].,00:42:44.453,00:42:45.369
What notation?,00:42:51.325,00:42:52.910
"PROFESSOR: This is
Python notation.",00:42:52.910,00:42:54.460
You may have heard of Python.,00:42:54.460,00:42:56.860
"This is a dictionary
which has one key value,",00:42:56.860,00:43:01.720
"s, and has one value, zero.",00:43:01.720,00:43:03.720
So you could--,00:43:03.720,00:43:06.110
That's shorthand in Python for--,00:43:06.110,00:43:08.300
"Usually you have a
comma separated list.",00:43:08.300,00:43:10.440
"The colon is specifying
key value pairs.",00:43:10.440,00:43:14.310
I didn't talk about parent.,00:43:17.300,00:43:19.760
We can do that for a little bit.,00:43:19.760,00:43:23.310
"So parent we're initializing to
say, the parent of s is nobody,",00:43:23.310,00:43:28.280
"and then whenever we
visit a new vertex,",00:43:28.280,00:43:30.890
"v, we set its parent to be
the vertex that we came from.",00:43:30.890,00:43:34.900
"So we had this vertex,
v. We had an edge",00:43:34.900,00:43:36.650
"to v from some vertex, u.",00:43:36.650,00:43:38.560
We set the parent of v to be u.,00:43:38.560,00:43:40.720
"So let me add in
what that becomes.",00:43:40.720,00:43:44.140
I'll change colors yet again.,00:43:44.140,00:43:47.300
"Although it gets hard to
see any color but red.",00:43:47.300,00:43:51.820
So we have s.,00:43:51.820,00:43:55.340
"When we visited a, then the
parent of a would become s.",00:43:55.340,00:44:00.810
"When we visited z, the
parent of z would be a.",00:44:00.810,00:44:05.150
Parent of x is going to be s.,00:44:05.150,00:44:07.640
Parent of d is going to be x.,00:44:07.640,00:44:09.925
"The parent of c
is going to be x.",00:44:09.925,00:44:12.765
The parent of f--,00:44:12.765,00:44:14.364
"it could have been either
way, but the way I did it,",00:44:14.364,00:44:16.530
"d went first, and so
that became its parent.",00:44:16.530,00:44:21.200
"And I think for v,
c was its parent.",00:44:21.200,00:44:25.327
"So that's what the parent
pointers will look like.",00:44:25.327,00:44:27.410
They always follow edges.,00:44:27.410,00:44:28.820
"They actually follow
edges backwards.",00:44:28.820,00:44:30.760
"If this was a directed
graph, the graph",00:44:30.760,00:44:32.620
"might be directed that way
but the parent pointers",00:44:32.620,00:44:35.420
go back along the edges.,00:44:35.420,00:44:37.270
So it's a way to return.,00:44:37.270,00:44:38.390
It's a way to return to s.,00:44:38.390,00:44:41.710
"If you follow these pointers,
all roads lead to s.",00:44:41.710,00:44:44.580
"Because we started at s,
that's the property we have.",00:44:48.140,00:44:50.550
"In fact, these pointers
always form a tree,",00:44:50.550,00:44:54.180
and the root of the tree is s.,00:44:54.180,00:44:56.280
"In fact, these pointers form
what are called shortest paths.",00:44:56.280,00:44:59.860
"Let me write down a
little bit about this.",00:44:59.860,00:45:05.730
Shortest path properties.,00:45:19.970,00:45:21.285
"If you take a node, and
you take its parent,",00:45:45.910,00:45:51.400
"and you take the
parent of the parent,",00:45:51.400,00:45:53.170
"and so on, eventually
you get to s.",00:45:53.170,00:45:56.600
"And if you read it
backwards, that will actually",00:45:56.600,00:45:59.540
be a path in the graph.,00:45:59.540,00:46:01.880
"And it will be a shortest
path, in the graph,",00:46:01.880,00:46:09.420
"from s to v.
Meaning, if you look",00:46:09.420,00:46:14.610
"at all paths in the graph
that go from s to v--",00:46:14.610,00:46:17.180
"So say we're going from
s to v, how about that,",00:46:17.180,00:46:21.460
we compute this path out of BFS.,00:46:21.460,00:46:23.230
"Which is, follow a
parent of v is c, parent",00:46:23.230,00:46:25.450
"of c is x, parent of x is s.",00:46:25.450,00:46:27.670
Read it backwards.,00:46:27.670,00:46:28.600
"That gives us a
path from s to v.",00:46:28.600,00:46:30.590
"The claim is, that
is the shortest",00:46:30.590,00:46:32.140
"way to get from s to v. It
might not be the only one.",00:46:32.140,00:46:35.420
"Like if you're going from s
to f, there's two short paths.",00:46:35.420,00:46:38.330
"There's this one
of length three.",00:46:38.330,00:46:40.330
"There's this one
of length three..",00:46:40.330,00:46:42.160
Uses three edges.,00:46:42.160,00:46:43.390
Same length.,00:46:43.390,00:46:45.300
"And in the parent
pointers, we can only",00:46:45.300,00:46:47.110
"afford to encode
one of those paths",00:46:47.110,00:46:48.640
"because in general there might
be exponentially many ways",00:46:48.640,00:46:51.015
to get from one node to another.,00:46:51.015,00:46:52.690
"We find a shortest path, not
necessarily the only one.",00:46:52.690,00:46:56.940
And the length of that path--,00:46:56.940,00:47:00.600
"So shortest here means that
you use the fewest edges.",00:47:00.600,00:47:03.750
"And the length will
be level of v. That's",00:47:03.750,00:47:07.910
what we're keeping track of.,00:47:07.910,00:47:10.729
"If the level's zero, you can
get there with zero steps.",00:47:10.729,00:47:13.020
"If the level's one, you
get there with one steps.",00:47:13.020,00:47:15.060
"Because we're visiting
everything you can possibly",00:47:15.060,00:47:17.143
"get in k steps, the
level is telling you what",00:47:17.143,00:47:19.830
that shortest path distance is.,00:47:19.830,00:47:21.411
"And the parent
pointers are actually",00:47:21.411,00:47:22.910
giving you the shortest path.,00:47:22.910,00:47:25.030
That's the cool thing about BFS.,00:47:25.030,00:47:27.090
"Yeah, BFS explores the vertices.",00:47:27.090,00:47:28.620
"Sometimes, that's
all you care about.",00:47:28.620,00:47:30.416
"But in some sense,
what really matters,",00:47:30.416,00:47:32.040
"is it finds the shortest way to
get from anywhere to anywhere.",00:47:32.040,00:47:36.200
"For a Rubik's Cube,
that's nice because you",00:47:36.200,00:47:40.200
"run BFS from the start
state of the Rubik's Cube.",00:47:40.200,00:47:43.260
"Then you say, oh,
I'm in this state.",00:47:43.260,00:47:45.190
You look up this state.,00:47:45.190,00:47:46.724
You look at its level.,00:47:46.724,00:47:47.640
"It says, oh, you can
get there in nine steps.",00:47:47.640,00:47:50.590
"That's, I think, the average.",00:47:50.590,00:47:52.260
So I'm guessing.,00:47:52.260,00:47:53.501
"I don't know how to
do this in nine steps.",00:47:53.501,00:47:55.250
"Great, so now you
know how to solve it.",00:47:58.470,00:48:00.220
"You just look at
the parent pointer.",00:48:00.220,00:48:01.720
"The parent pointer gives
you another configuration.",00:48:01.720,00:48:03.095
"You say, oh, what move was that?",00:48:03.095,00:48:05.030
And then you do that move.,00:48:05.030,00:48:06.480
I'm not going to solve it.,00:48:06.480,00:48:07.940
"Then you look at the
parent pointer of that.",00:48:07.940,00:48:09.360
You do that move.,00:48:09.360,00:48:10.045
"You look at the parent
pointer of that.",00:48:10.045,00:48:11.510
You do that move.,00:48:11.510,00:48:12.080
"Eventually, you'll get
to the solved state,",00:48:12.080,00:48:13.871
"and you will do it using
the fewest possible moves.",00:48:13.871,00:48:16.430
"So if you can afford to put the
whole graph in memory, which",00:48:16.430,00:48:20.590
"you can't for a big Rubik's Cube
but you can for a small one,",00:48:20.590,00:48:23.450
"then this will give you a
strategy, the optimal strategy,",00:48:23.450,00:48:27.560
"God's algorithm if you will,
for every configuration.",00:48:27.560,00:48:32.400
It solves all of them.,00:48:32.400,00:48:34.200
Which is great.,00:48:34.200,00:48:36.199
"What is the running
time of this algorithm?",00:48:36.199,00:48:37.990
"I claim it's order V plus E.
But it looked a little wasteful",00:48:37.990,00:48:41.870
"because it was checking
vertices over and over and over.",00:48:41.870,00:48:45.300
"But if you think
about it carefully,",00:48:45.300,00:48:47.260
you're only looking--,00:48:47.260,00:48:49.246
"what's the right
way to say this--",00:48:49.246,00:48:51.270
you only check every edge once.,00:48:51.270,00:48:55.584
"Or in undirected graphs,
you check them twice,",00:48:55.584,00:48:57.500
once from each side.,00:48:57.500,00:49:00.820
"A vertex enters the
frontier only once.",00:49:00.820,00:49:04.290
"Because once it's in the
frontier, it gets a level set.",00:49:04.290,00:49:07.610
"And once it has a level set,
it'll never go in again.",00:49:07.610,00:49:11.450
It'll never get added to next.,00:49:11.450,00:49:14.450
"So s gets added once then we
check all the neighbors of s.",00:49:14.450,00:49:17.440
"a gets added once, then we
check all the neighbors of a.",00:49:17.440,00:49:19.910
"Each of these guys
gets added once.",00:49:19.910,00:49:21.520
We check all the neighbors.,00:49:21.520,00:49:22.950
"So the total running
time is going",00:49:22.950,00:49:24.410
"to be the sum over all
vertices of the size",00:49:24.410,00:49:27.490
"of the adjacency list of v. So
this is the number of neighbors",00:49:27.490,00:49:33.530
that v has.,00:49:33.530,00:49:35.220
And this is going to be?,00:49:35.220,00:49:37.579
Answer?,00:49:37.579,00:49:38.079
"AUDIENCE: Two times
the number of edges.",00:49:42.336,00:49:44.004
PROFESSOR: Sorry,00:49:44.004,00:49:44.670
"AUDIENCE: Double
the number of edges.",00:49:44.670,00:49:46.211
"PROFESSOR: Twice the number of
edges for undirected graphs.",00:49:46.211,00:49:48.930
"It's going to be the number
of edges for directed graphs.",00:49:48.930,00:49:51.330
This is the Handshaking Lemma.,00:49:51.330,00:49:52.770
"If you don't remember
the Handshaking Lemma,",00:49:52.770,00:49:54.670
you should read the textbook.,00:49:54.670,00:49:57.330
Six o four two stuff.,00:49:57.330,00:49:59.116
"Basically you visit
every edge twice.",00:50:03.300,00:50:06.780
"For directed graphs, you
visit every edge once.",00:50:06.780,00:50:10.870
"But it's order E. We
also spend order V",00:50:10.870,00:50:13.590
because we touch every vertex.,00:50:13.590,00:50:15.790
"So the total running
time is order V plus E.",00:50:15.790,00:50:18.770
"In fact, the way this is going,
you can be a little tighter",00:50:18.770,00:50:23.240
"and say it's order E. I just
want to mention in reality--",00:50:23.240,00:50:26.827
"Sometimes you don't care about
just what you can reach from s,",00:50:26.827,00:50:29.410
"you really want to
visit every vertex.",00:50:29.410,00:50:31.410
"Then you need another
outer loop that's",00:50:31.410,00:50:33.710
"iterating over all the vertices
as potential choices for s.",00:50:33.710,00:50:38.170
"And you then can visit all the
vertices in the entire graph",00:50:38.170,00:50:41.160
even if it's disconnected.,00:50:41.160,00:50:42.930
"We'll talk more about
that next class.",00:50:42.930,00:50:45.040
That's it for BFS.,00:50:45.040,00:50:46.607

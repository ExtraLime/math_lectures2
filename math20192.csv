lecture_title,lecture_text,title,description,channelid,playlist_id,vidid
Part2ofthetransformofthesin(at)_Laplacetransform_DifferentialEquations_KhanAcademy--cApVwKR1Ps.en.csv,"Welcome back. We were in the midst of figuring
out the Laplace transform of sine of at when
I was running out of time. This was the definition
of the Laplace transform of sine of at. I said that also equals y. This is going to be useful for
us, since we're going to be doing integration
by parts twice. So I did integration by parts
once, then I did integration by parts twice. I said, you know, don't worry
about the boundaries of the integral right now. Let's just worry about the
indefinite integral. And then after we solve for y--
let's just say y is the indefinite version of this--
then we can evaluate the boundaries. And we got to this point, and we
made the realization, after doing two integration by parts
and being very careful not to hopefully make any careless
mistakes, we realized, wow, this is our original y. If I put the boundaries here,
that's the same thing as the Laplace transform of
sine of at, right? That's our original y. So now-- and I'll switch colors
just avoid monotony-- this is equal to, actually,
let me just-- this is y. Right? That was our original
definition. So let's add a squared over
sine squared y to both sides of this. So this is equal to y plus--
I'm just adding this whole term to both sides of this
equation-- plus a squared over s squared y is equal to-- so
this term is now gone, so it's equal to this stuff. And let's see if we
can simplify this. So let's factor out an e to the
minus st. Actually, let's factor out a negative e to the
minus st. So it's minus e to the minus st, times sine of--
well, let me just write 1 over s, sine of at, minus 1 over
s squared, cosine of at. I really hope I haven't made
any careless mistakes. And so this, we can add
the coefficient. So we get 1 plus a squared,
over s squared, times y. But that's the same thing as s
squared over s squared, plus a squared over s squared. So it's s squared plus a
squared, over s squared, y is equal to minus e to the minus
st, times this whole thing, sine of at, minus 1 over s
squared, cosine of at. And now, this right here, since
we're doing everything with respect to dt, this is
just a constant, right? So we can say a constant
times the antiderivative is equal to this. This is as good a time as any
to evaluate the boundaries. Right? If this had a t here, I would
have to somehow get them back on the other side. Because the t's are involved in
evaluating the boundaries, since we're doing our definite
integral or improper integral. So let's evaluate the
boundaries now. And we could've kept
them along with us the whole time, right? And just factored out this
term right here. But anyway. So let's evaluate this
from 0 to infinity. And this should simplify
things. So the right-hand side of this
equation, when I evaluate it at infinity, what is e to
the minus infinity? Well, that is 0. We've established that
multiple times. And now it approaches 0 from
the negative side, but it's still going to be 0,
or it approaches 0. What's sine of infinity? Well, sine just keeps
oscillating, between negative 1 and plus 1, and
so does cosine. Right? So this is bounded. So this thing is going
to overpower these. And if you're curious,
you can graph it. This kind of forms an envelope
around these oscillations. So the limit, as this approaches
infinity, is going to be equal to 0. And that makes sense, right? These are bounded between
0 and negative 1. And this approaches
0 very quickly. So it's 0 times something
bounded between 1 and negative 1. Another way to view it is the
largest value this could equal is 1 times whatever
coefficient's on it, and then this is going to 0. So it's like 0 times 1. Anyway, I don't want to focus
too much on that. You can play around with
that if you like. Minus this whole thing
evaluated at 0. So what's e to the minus 0? Well, e to the minus 0 is 1. Right? That's e to the 0. We have a minus 1, so it becomes
plus 1 times-- now, sine of 0 is 0. Minus 1 over s squared,
cosine of 0. Let's see. Cosine of 0 is 1, so we have
minus 1 over s squared, minus 1 over s squared, times 1. So that is equal to minus
1 over s squared. And I think I made a mistake,
because I shouldn't be having a negative number here. So let's backtrack. Maybe this isn't a
negative number? Let's see, infinity, right? This whole thing is 0. When when you put 0 here,
this becomes a minus 1. Yeah. So either this is a plus
or this is a plus. Let's see where I
made my mistake. e to the minus st-- oh, I
see where my mistake is. Right up here. Where I factored out a minus
e to the minus st, right? Fair enough. So that makes this 1
over s, sine of at. But if I factor out a minus e to
the minus st, this becomes a plus, right? It was a minus here, but I'm
factoring out of a minus e to the minus st. So that's a plus. This is a plus. Boy, I'm glad that was not
too difficult to find. So then this becomes a plus. And then this becomes a plus. Thank God. It would have been sad if I
wasted two videos and ended up with a careless, negative
number. Anyway. So now we have s squared plus
a squared, over s squared, times y is equal to this. Multiply both sides times
s squared over-- s squared plus a squared. Divide both sides by this, and
we get y is equal to 1 over s squared-- And actually, let me
make sure that that is right. It's 1 over s squared. y is equal to 1 over s squared,
times s squared, over s squared plus a squared. And then these cancel out. And let me make sure
that I haven't made another careless mistake. Because I have a feeling I have. Yep. There. I see the careless mistake. And it was all in this term. And I hope you don't mind my
careless mistakes, but I want you to see that I'm doing these
things in real time and I am human, in case you haven't
realized already. Anyway, so I made the same
careless mistake. So I factor out an e to the
minus st here, so it's plus. But it was a over s squared. So this is an a. That's an a. And so this is an a. And so this is an a. And so this is an a. Right? This was an a. And this is the correct
answer. a over s squared
plus a squared. So I hope those careless
mistakes didn't throw you off too much. These things happen when you do
integration by parts twice with a bunch of variables. But anyway, now we are ready
to add a significant entry into our table of Laplace
transforms. And that is that the Laplace transform-- I had
an extra curl, there. That was unecessary. Let me do it again. The Laplace transform of sine
of at is equal to a over s squared, plus a squared. And that's a significant
entry. And maybe a good exercise for
you, just to see how fun it is to do these integration by parts
problems twice, is to figure out the Laplace transform
of cosine of at. And I'll give you a hint. It's s over s squared over
s squared plus a squared. And it's nice that there's
that symmetry there. Anyway, I'm almost
at my time limit. And I'm very tired working
on this video. So I'll leave it there and I'll
see you in the next one.",Part 2 of the transform of the sin(at) | Laplace transform | Differential Equations | Khan Academy,"Part 2 of getting the Laplace transform of sin(at)

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-5?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-tutorial/v/laplace-transform-3-l-sin-at?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,-cApVwKR1Ps
Introductiontotheinverseofafunction_Matrixtransformations_LinearAlgebra_KhanAcademy--eAzhBZgq28.en.csv,"Let's say we have some function,
f, and it's a mapping from the set X to Y. So if I were to draw the set X
right there, that's my set X. If I were to draw the set
Y, just like that. We know, and I've done this
several videos ago, that a function just associates any
member of our set X-- so I have some member of my set
X there-- if I apply the function to it, or if we're
dealing with vectors, we can imagine instead of using the
word function, we would use the word transformation. But it's the same thing. We would associate with this
element, or this member of X, a member of Y. So that's why we call
it a mapping. When I apply this function--
I'll do it in a different color-- this little member of
X is associated with this member of Y. If this is right here,
this is a capital X. Let's say we call this a,
and let's call that b. We would say that the function
where a is a member of X and b is a member of Y, we would say
that f of a is equal to b. This is all a review of
everything that we've learned already about functions. Now I'm going to
define a couple of interesting functions. The first one-- I guess it's
really just one function, I said it's a couple-- but I'll
call it the identity function. This is a function. I'll just call it
a big capital I. This identity function
operates on some set. So let's say this is the
identity function on set X, and it's a mapping
from X to X. What's interesting about the
identity function is that if you give it some a that is a
member of X-- so lets say you give it that a-- the identity
function applied to that member of X, the identity
function of a, is going to be equal to a. So it literally just maps
things back to itself. So the identity function, if I
were draw it on this diagram right here, would
look like this. It would look like-- we pick a
nice suitable color-- it would look like this. It would just kind
of be a circle. It just points back
at the point that you started off with. It associates all points
with themselves. That's the identity function on
X, especially as it applies to the point a. If you apply it to some other
point in X, it would just refer back to itself. That's the identity
function on X. You could also have an identity
function on Y. So let's say that b
is a member of Y. So I drew b right there. Then the Y identity function--
so this would be that identity function on Y applied
to b-- would just refer back to itself. So that would be equal to b. This is the identity
function on Y. So you might say, hey
Sal, these are kind of silly functions. But we'll use them. They're actually at least a
useful notation to use as we progress through our explorations of linear algebra. But I'm going to make
a new definition. I'm going to say that a
function-- let me pick a nice color, pink-- I'm going to say
that a function, let me say f since we already established
it right over here. I'm going to say that f is
invertible, introducing some new terminology. f is invertible if and only
if the following is true. I could either write it with
these two-way arrows like that, or I could write it
as iff with two f's. That means that if this is true,
then this is true, and only if this is true. So this implies that, and
that implies this. So f is invertible-- I'm kind
of making a definition right here-- if and only if there
exists a function, I'll call it nothing just yet. I'll call it something
in a second. I'll write it as this f
with this negative 1 superscript on it. So f is invertible if and only
if there exists a function f inverse-- well I guess I just
called it something. Let me do that in purple. Remember f is just a mapping
from X to Y. So this function, f inverse,
is going to be a mapping from Y to X. So I'm saying that f is
invertible if there exists a function, f inverse, that's a
mapping from Y to X such that if I take the composition of f
inverse with f, this is equal to the identity function
over X. So let's think about
what's happening. This is just part
of it actually. Let me just complete the
whole definition. This is true, this has to be
true, and the composition of f with the inverse function has
to be equal to the identity function over Y. So let's just think about
what's this saying. There's some function-- I'll
call it right now, this called the inverse of f-- and it's
a mapping from Y to X. Let me draw it up here. So f is a mapping from X to Y. We showed that. This is the mapping
of f right there. It goes in that direction. We're saying there has be some
other function, f inverse, that's a mapping from Y to X. So let's write it here. So f inverse is a mapping from Y
to X. f inverse, if you give me some value in set
Y, I go to set X. So this guy's domain is this
guy's codomain, and this guy's codomain is this guy's domain. Fair enough. But let's see what
it's saying. It's saying that the composition
of f inverse with f, has to be equal to
the identity matrix. So essentially it's saying if I
apply f to some value in X-- right, if you think about
what's this composition doing-- this guy's going
from X to Y. This guy goes from Y to X. So let's think about what's
happening here. f is going from X to Y. Then f inverse is going
from Y to X. So this composition is going to
be a mapping from X to X, which the identity function
needs to do. It needs to go from X to X. They're saying this equals
the identity function. So that means when you apply f
on some value in our domain, so you go here, and then you
apply f inverse to that point over there, you go back to
this original point. So another way of saying this
is that f-- let me do it in another color-- the composition
of f inverse with f of some member of the set
X is equal to the identity function applied on that item. These two statements
are equivalent. So by definition, this
thing is going to be your original thing. Or another way of writing this
is that f inverse applied to f of a is going to
be equal to a. That's what this first
statement tells us. If you think of it visually,
it's saying you start with an a, you apply f to it, and you
get this value right here. That is f of a. I'm saying it equals b, or I
said it equalled b earlier on. Then if you apply this f
inverse-- and it doesn't always exist-- but if you apply
that f inverse to this function, it needs to
go back to this. By definition it needs to go
back to your original a. It has to be equivalent to just
doing this little closed loop right when I introduce you
to the identity function. Now that's what this statement
is telling us right here. The second statement is saying
look, if I apply f to f inverse, I'm getting the
identity function on Y. So if I start at some point in
Y right there, and I apply f inverse first, maybe
I go right here. Let's call that lowercase y So
this would be f inverse of lowercase y. Then if I were to apply f to
that-- I know this chart is getting very confusing-- if I
apply f to this right here, I need to go right back
to my original Y. So when I apply f to f inverse
of Y this has to be equivalent of just doing the identity
function on y. So that's what the second
statement is saying. Or another way to write it is
that f of f inverse of y, where y is a member of the
set capital Y, it has to be equal to Y. You've been exposed to the idea
of an inverse before. We're just doing it a little
bit more precisely because we're going to start dealing
with these notions with transformations and matrices
in the very near future. So it's good to be exposed to it
in this more precise form. Now the first thing you might
ask is let's say that I have a function f, and there does exist
a function f inverse that satisfies these
two requirements. So f is invertible. The obvious question, or maybe
it's not an obvious question is, is f inverse unique? Actually probably the obvious
question is how do you know when something's invertible. We're going to talk a
lot about that in the very near future. But let's say we know that
f is invertible. How do we know, or do we know
whether f inverse is unique? To answer that question, let's
assume it's not unique. So if it's not unique, let's say
that there's two functions that satisfy our two constraints
that can act as inverse functions of f. Let's say that g
is one of them. So let's say g is a mapping. Remember f is a mapping
from X to Y. Let's say that g is a mapping
from Y to X such that if I apply f to something and then
apply g to it-- so this gets me from X to Y. Then when I do the composition
with g, that gets me back into X. This is equivalent to the
identity function. This was part of the definition
of what it means to be an inverse. I'm assuming that g is
an inverse of f. This assumption implies
these two things. Now let's say that h is
another inverse of f. By definition, by what I just
called an inverse, h has to satisfy two requirements. It has to be a mapping
from Y to X. Then if I take the composition
of h with f, I have to get the identity matrix on the set X. Now that wasn't just part
of the definition. It implies even more
than that. If something is an inverse, it
has to satisfy both of these. The composition of the inverse
with the function has to become the identity
matrix on x. Then the composition of the
function with the inverse has to be the identity
function on Y. Let's write that. So g is an inverse of f. It implies this. It also implies-- I'll do
it in yellow-- that the composition of f with
g is equal to the identity function on y. Then if we do it with h, the
fact that h is an inverse of f implies that the composition
of f with h is equal to the identity function
on y as well. Let me redraw what I drew in the
beginning just so we know what we're doing. So if this is a set X right
here-- let me do it in a different color-- let's say this
right here is the set Y. We know that f is a
mapping X to Y. What we're trying to determine
is is f's inverse unique. So any inverse, so we're saying
that g is a situation that if you take the composition
of g with f, you get the identity matrix. So f does that. If you could take g
you're going to go back to the same point. So it's equivalent. So taking the composition of g
with f-- that means doing f first then g-- this is the
equivalent of just taking the identity function in X, so just
taking an X and going back to an X. It's equivalent to that. So this is g right here. The same thing is true with h. h should also be. If I start with some element in
X and go into Y, and then apply h, it should also be
equivalent to the identity transformation. That's what this statement and
this statement are saying. Now this statement is saying
that if I start with some entry in Y here and I apply g,
which is the inverse of f, I'm going to go here. So g will take me there. When I apply f then to that, I'm
going to go back to that same element of Y. That's equivalent to
just doing the identity function on Y. That's the same thing as the
identity function of Y. I could do the same
thing here with h. I just take a point here, apply
h, then apply f back. I should just go back
to that point. That's all of what
this is saying. So let's go back to
the question of whether g is unique. Can we have two different
inverse functions g and h? So let's start with g. Remember g is just a mapping
from Y to X. So this is going to be equal to,
this is the same thing as the composition of the identity function over x with g. To show you why that's the case,
remember g just goes from-- these diagrams get me
confused very quickly-- so let's say this is
x and this is y. Remember g is a mapping
from y to x. So g will take us there. There's a mapping from y to x. I'm saying that this g is
equivalent to the identity mapping, or the identity
function in composition with this. Because all this is saying is
you apply g, and then you apply the identity
mapping on x. So obviously you're going to get
to the exact same mapping or the exact same point. So these are equivalent. But what is another
way of writing the identity mapping on x? What's another way
of writing that? Well by definition, if
h is another inverse of f, this is true. So I can replace this in this
expression with a composition of h with f. So this is going to be equal to
the composition of h with f, and the composition
of that with g. You might want to put
parentheses here. I'll do it very lightly. You might want to put
parentheses there. But I showed you a couple
of videos ago that the composition of functions, or
of transformations, is associative. It doesn't matter if you put
the parentheses there or if you put the parentheses there. Actually I'll do that. I'll put the parentheses there
at first just so you can understand that this
is the same thing as that right there. But we know that composition
is associative. So this is equal to the
composition of h with the composition of f and g. Now what is this equal to, the
composition of f and g? Well it's equal to, by
definition, it's equal to the identity transformation
over y. So this is equal to h composed
with, or the composition of h with, the identity function over
y with this right here. Now what is this going to be? Remember h is a mapping
from y to x. Let me redraw it. So that's my x and
that is my y. h could take some element
in y and gives me some element in x. If I take the composition of the
identity in y-- so that's essentially I take some element,
let me do it this way-- I take some element in
y, I apply the identity function, which essentially
just gives me that element again, and then I
apply h to that. That's the same thing as just
applying h to the function to begin with. So just going through this
little exercise we've shown, even though we started off
saying I have these two different inverses, we've
just shown that g must be equal to h. So any function has
a unique inverse. You can't set up two
different inverses. If you do you'll find that
they're always going to be equal to each other. So far we know what
an inverse is. We don't know what causes
someone to be able to have an inverse or not, but we know if
they have an inverse, how to think about it. We also know that that
inverse is unique.",Introduction to the inverse of a function | Matrix transformations | Linear Algebra | Khan Academy,"Introduction to the inverse of a function

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/proof-invertibility-implies-a-unique-solution-to-f-x-y?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/composition_of_transformations/v/distributive-property-of-matrix-products?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,-eAzhBZgq28
Logisticfunctionapplication_Firstorderdifferentialequations_KhanAcademy--fIsaqN-aaQ.en.csv,"- So we've seen in the
last few videos if we start with a logistic differential equation where we have r which is
essentially is a constant that says how fast our we growing when we're unconstrained
by environmental limits. Then we have K which we can view as the maximum population
given our constraints. We saw that if we wanted to solve this, and we didn't want one
of the constant solutions of N of T is equal to zero, or N of T is equal to K, and we did this in the last few videos. We got the solution that N of T is equal to our initial N naught
times our maximum population. All of that over our initial population plus the difference between
our maximum population, and the initial population. So K minus N naught times
E to the negative rt. That this right over here. This logistic function. This logistic function is
a nonconstant solution, and it's the interesting one we care about if we're going to model population to the logistic differential equation. So now that we've done all
that work to come up with this, let's actually apply it. That was the whole goal, was
to model population growth. So let's come up with some assumptions. Let's first think about, well let's say that I have an island. So let's say that this is my island, and I start settling it with a 100 people. So I'm essentially saying N naught Let me do that in the N naught color. So I'm saying N naught is equal to 100. Let's say that this environment, given current technology
of farming and agriculture, and the availability of
water and whatever else, let's say it can only
support 1,000 people max. So you get the idea, so
we get K is equal to 1000. That's the limit to the population. So now what we have to think about is what is r going to be? So we have to come up
with some assumptions. So, let's say in a generation
which is about 20 years, well I'll just assume in 20 years, yeah I think it's reasonable
that the population grows by, let's say that the
population grows by 50%. In 20 years you have 50% growth. 50% increase, increase
in the actual population. So what would you have to
have your annual increase in order to after 20 years to grow by 50%. Well to think about that
I'll get out my calculator. One way to think about it, growing by 50%, that means that you are at
1.5 your original population, and if I take that to the 120th power, and we'll just do 1 divided by 20th. This essentially says how
much am I going to grow by or what is going to, this is telling me I'm going to grow by a factor
of 1.02 every year, 1.02048. So one way to think
about it is if every year I grow by 0.020 I'll just
round five then over 20 years as this compounds I
will have grown by 50%. So that would be our r. This is essentially how much
we're going to grow each year. Let me write that, growth each year. We're going to assume
our t here is in years. So we're going to assume
that our t is in years. So t is in years. So what would our logistic
function look like, given all these assumptions? We would have N of T, let me N of T, is equal to, is equal to N naught times K. That's going to be 100 times 1000. So it's going to be 100 times 1000. My initial population
times my maximum population divided by my initial population, plus the difference between
my final and initial. So that's 1000 minus 100,
so that's going to be, this right over here is going to be 900. 900 times e to the negative r. So the negative 0.0205 times t. So it will be equal to that, and to verify that this actually is, this actually does describe population in the that way we thought the logistic differential equation would let's actually plot it. So let me just pause this
video and then plot it. So there you go, I made a plot and I copy and pasted it here, and we see the behavior
that we wanted to see. We see the population right
over here at year zero, it's starting at 100. Let me do this in a color that
you're more likely to see. Population starts at
100, and we can see that, let's see after 20 years our population looks like it's almost grown to 150. So it looks like, at
least in the beginning, this term, this right
over here is dominating. We are growing by this .0205,
that would be 2.05% per year, which gets us close to 50% growth, and we see that's what
happening initially. So we go from 100 to 150
in the first 20 years, in the first generation. Then in the next generation
we should add another 75 if we weren't being kind of
constrained by the environment. So 150 plus 75 would be 225, and it looks like we got
after 20 years to about 200. So we're a little bit slower. We're a little bit slower than kind of the pure exponential growth. But the pure exponential
growth would probably have us tracking something closer to here, but still growing pretty well. But then as our population gets larger and larger and larger as we're getting closer and closer to
the maximum population, our rate of growth is approaching zero. So we constantly approach
our maximum population, but we never quite get there. It's really an asymptote. We're just approaching it as
time goes on and on and on. But you can kind of set your own threshold and say ok, when do we get to kind of 90% of maximum population? That looks like that happens, 90% of maximum population happened after 210 years on this island. So on a human scale that seems like a long time, many generations. But, I guess in a cosmic
scale it's not that long. Not even a cosmic scale, even just slightly longer
than a human scale. So, it'll happen, well this
describes what's happening. So this is a pretty interesting model, and I'd be interested
to see how it compares with actual data out there
for actual population growth. With that said, it's not this you know, everything that we've done
so far has always assumed, we're kind of assuming this
idea of a Malthusian limit. But what we've learned from human history, that this Malthusian limit
seems to keep getting pushed higher and higher based on
the improvement of technology. That we're able to grow more crops in a certain amount of area. We have better rule of law, so people don't kill each other as often. We have better control
of water and irrigation, and all of these things. So that we're able to increase the limits far beyond what we thought. I would guess if you told Thomas Malthus that in the year 2014
we have seven billion people on the earth, he would have said that's far beyond the Malthusian limit. He probably would have guessed the Malthusian limit was like a billion, or two billion given the
technology of the time, and we're already at 7 billion. As technology improves
and agriculture improves, and rule of law improves,
and everything improves, we might be able to get, who knows? There might be a time,
we might think it's crazy for their to be 20 billion
people on the planet, but given today's technology. But if technology improves
then optimistic scenarios that maybe we could keep going. That's not necessarily a good thing, but that just might be what it is.",Logistic function application | First order differential equations | Khan Academy,"Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/eulers-method-tutorial/v/eulers-method?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/logistic-differential-equation/v/solving-logistic-differential-equation-part2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,-fIsaqN-aaQ
Integratingfactors2_Firstorderdifferentialequations_KhanAcademy-0NyeDUhKwBE.en.csv,"And, in the last video, we had
this differential equation. And it at least looked like
it could be exact. But when we took the partial
derivative of this expression, which we could call M with
respect to y, it was different than the partial derivative of
this expression, which is N in the exact differential
equations world. It was different than
N with respect to x. And we said, oh boy,
it's not exact. But we said, what if we could
multiply both sides of this equation by some function that
would make it exact? And we called that mu. And in the last video, we
actually solved for mu. We said, well, if we multiply
both sides of this equation by mu of x is equal to x, it should
make this into an exact differential equation. It's important to note, there
might have been a function of y that if I multiplied by
both sides it would also make it exact. There might have been a function
of x and y that would have done the trick. But our whole goal is just
to make this exact. It doesn't matter which one
we pick, which integrating factor-- this is called the
integrating factor-- which integrating factor we pick. So anyway, let's do it now. Let's solve the problem. Let's multiply both sides of
this equation by mu, and mu of x is just x. We multiply both sides by x. So see, if you multiply this
term by x, you get 3x squared y plus xy squared, we're
multiplying these terms by x now, plus x to the third
plus x squared y, y prime is equal to 0. Well now, first of all, just as
a reality check, let's make sure that this is now
an exact equation. So what's the partial of this
expression, or this kind of sub-function, with
respect to y? Well, it's 3x squared, that's
just kind of a constant coefficient of y, plus 2xy,
that's the partial with respect to y of that
expression. Now let's take the partial of
this with respect to x. So we get 3x squared plus 2xy. And there we have it. The partial of this with respect
to y is equal to the partial of this with
respect to N. So we now have an exact equation
whose solution should be the same as this. All we did is we multiplied
both sides of this equation by x. So it really shouldn't change
the solution of that equation, or that differential equation. So it's exact. Let's solve it. So how do we do that? Well, what we say is, since
we've shown this exact, we know that there's some function
psi where the partial derivative of psi with respect
to x is equal to this expression right here. So it's equal to 3x squared
y plus xy squared. Let's take the antiderivative of
both sides with respect to x, and we'll get psi
is equal to what? x to the third y plus,
we could write, 1/2 x squared y squared. And of course, this psi is a
function of x and y, so when you take the partial with
respect to x, when you go that way, you might have lost some
function that's only a function of y. So instead of a plus c here,
it could've been a whole function of y that we lost. So
we'll add that back when we take the antiderivative. So this is our psi. But we're not completely done
yet, because we have to somehow figure out what
this function of y is. And the way we figure that out
is we use the information that the partial of this
with respect to y should be equal to this. So let's set that up. So what's the partial of this
expression with respect to y? So I could write, the partial
of psi with respect to y is equal to x to the third plus
2 times 1/2, so it's just x squared y plus h prime of y. That's the partial of a function
purely of y with respect to y. And then that has to equal our
new N, or the new expression we got after multiplying by
the integrating factor. So that's going to be equal
to this right here. This is, hopefully, making sense
to you at this point. And that should be equal to x to
the third plus x squared y. And interesting enough,
both of these terms are on this side. So let's subtract both of those
terms from both sides. So x to the third, x to
the third, x squared y, x squared y. And we're left with h prime
of y is equal to 0. Or you could say that h of y
is equal to some constant. So there's really no y, the
extra function of y. There's just some constant
left over. So for our purposes, we
can just say that psi is equal to this. Because this is just a constant,
we're going to take the antiderivative anyway,
and get a constant on the right hand side. And in the previous videos, the constants all merged together. So we'll just assume that
that is our psi. And we know that this
differential equation, up here, can be rewritten as, the
derivative of psi with respect to x, and that just falls out
of the partial derivative chain rule. The derivative of psi with
respect to x is equal to 0. If you took the derivative of
psi with respect to x, it should be equal to this whole
thing, just using the partial derivative chain rule. And we know what psi is. So we can write-- or actually
we don't even have to. We could use this fact to say,
well, if we integrate both sides, that a solution of this
differential equation is that psi is equal to c. I just took the antiderivative
of both sides. So, a solution to the
differential equation is psi is equal to c. So psi is equal to x
to the third y plus 1/2 x squared y squared. And we could have said plus c
here, but we know the solution is that psi is equal to c, so
we'll just write that there. I could have written a plus
c here, but then you have a plus c here. You have another
constant there. And you can just subtract
them from both sides. And they just merge into another
arbitrary constant. But anyway, there we have it. We had a differential equation
that, at least superficially, looked exact. It looked exact, but then, when
we tested the exactness of it, it was not exact. But we multiplied it by
an integrating factor. And in the previous video, we
figured out that a possible integrating factor is that
we could just multiply both sides by x. And when we did that,
we tested it. And true enough, it was exact. And so, given that it was exact,
we knew that a psi would exist where the derivative
of psi with respect to x would be equal to this
entire expression. So we could rewrite
our differential equation like this. And we'd know that a solution
is psi is equal to c. And to solve for psi, we just
say, OK, the partial derivative of psi with
respect to x is going to be this thing. Antiderivative of both sides,
and there's some constant h of y-- not constant, there's some
function of y-- h of y that we might have lost when we took the
partial with respect to x. So to figure that out, we
take this expression. Take the partial with respect
to y, and set that equal to our N expression. And by doing that, we figured
out that that function of y is really just some constant. And we could have written
that here. We could have written
that plus c. We could call that
c1 or something. But we know that the solution
of our original differential equation is psi is equal to c. So the solution of our
differential equation is psi x to the third y plus
1/2 x squared y squared is equal to c. We could have had this
plus c1 here, then subtracted both sides. But I think I've said it
so many times that you understand, why if h of
y is just a c, you can kind just ignore it. Anyway, that's all for
now, and I will see you in the next video. You now know a little bit about
integrating factors. See you soon.",Integrating factors 2 | First order differential equations | Khan Academy,"Now that we've made the equation exact, let's solve it!

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/homogeneous-equations/v/first-order-homegenous-equations?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/integrating-factors-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,0NyeDUhKwBE
3x3determinant_Matrixtransformations_LinearAlgebra_KhanAcademy-0c7dt2SQfLw.en.csv,"In the last video we defined the
notion of a determinant of a 2 by 2 matrix. So if I have some matrix-- let's
just call it B-- if my matrix B looks like this, if
its entries are a, b, c, d, we've defined to determinant
of B. Which could also be written as
B with these lines around it, which could also be written as
the entries of the matrix with those lines around
it, a, b, c, d. And I don't want you to
get these confused. This is the matrix when
you have the brackets. This is the determinant of the
matrix, when you just have these straight lines. And this, by definition, was
equal to ad minus bc. And you saw in the last video,
or maybe you saw in the last video, what the motivation
for this came from. When we figured out the inverse
of B, we determined that it was equal to 1 over ad
minus bc times another matrix, which was essentially these
two entry swaps, you got a d and an a. And then these two entries
made negative, so minus c and minus b. This was the inverse of b. And we said, well, when
is this defined? This is defined as long as this
character right here does not equal 0. So you said hey, this looks
pretty important. Let's call this thing right
there the determinant. And then we could say that B is
invertible, if and only if, the determinant of B
does not equal 0. Because if it equals 0, then
this formula for your inverse won't be well defined. And we just got this from our
technique of creating an augmented matrix whatnot. But the big take away is we
defined this notion of a determinant it for
a 2 by 2 matrix. Now the next question is, well
that's just a 2 by 2, everything we do in linear
algebra, we like to generalize it to higher numbers of
rows and columns. So the next step, at least--
let's just do baby steps-- let's start with a 3 by 3. Let's define what its
determinant is. So let me construct a
3 by 3 matrix here. Let's say my matrix A is equal
to-- let me just write its entries-- first row, first
column, first row, second column, first row,
third column. Then you have a2
1, a2 2, a2 3. Then you have a3 1, third
row first column, a3 2, and then a3 3. That is a 3 by 3 matrix. Three rows and three columns. This is 3 by 3. I am going to define the
determinant of A. So this is a definition. I'm going to define the
determinant of this 3 by 3 matrix A as being equal to--
and this is a little bit convoluted, but you'll get the
hang of it eventually. In the next several videos we're
just going to do a ton of determinants. So it just becomes a bit of
second nature to you. It's a little computationally
intensive sometimes. But it equals this first row. It equals a1 1 times the
determinant of the matrix you get, if you get rid of this
guy's column and row. So if you get rid of this guy's
column and row, you're left with this matrix here. So times the determinant of the
matrix a2 2, a2 3, a3 2, and then a3 3. Just like that. So that's our first entry
and that's a plus this. And then I said it's a plus
this, because the next entry's going to be a minus. You have a minus this
guy right here. So then you're going to have
minus a1 2 times the matrix you get if you eliminate
his column and his row. So times, you're going to get
these entries right there. So a2 1, a2 3, a3 1, and
then you have a3 3. We're not quite done. You could probably guess with
the next one's going to be. Then you're going to have a
plus-- let me switch to a better color-- plus this guy. Plus a1 3 times the determinant
of its-- I guess you could call it--
its sub-matrix. We'll call it that for now. So this matrix right here. So a2 1, a2 2, a3 1, a3 2. This is our definition of the determinant of a 3 by 3 matrix. And the motivation is, because
when you take the determinant of a 3 by 3 it turns out-- I
haven't shown it to you yet-- that the property is the same. That if the determinant of this
is 0, you will not be able to find an inverse. And when I defined determinant
in this way. If the determinant does not
equal 0, you will be able to find an inverse. So that's where this
came from. And I haven't shown
you that yet. And I might not show you
because it's super computational. It'll take a long time. It'll be very hairy and I'll
make careless mistakes. But the motivation comes from
the exact same place as the 2 by 2 version. But I think what you probably
want to see right now is at least just this thing applied
to an actual matrix, because this looks all abstract
right now. But if we do it with an actual
matrix, you'll actually see it's not too bad. So let's leave the definition up
there, and let's say that I have the matrix 1, 2, 4, 2, 2,
minus 1, 3, and 4, 0, 1. So by our definition of a
determinant, the determinant of this guy right here-- so
let's say I call that matrix C-- C is equal to that. So if we want to figure out
the determinant of C, the determinant of C is equal to--
I take this guy right here, let me take that 1-- times the
determinant of-- let's just call it the submatrix,
right here. So we have a minus 1, we
have a 3, we have a 0, and we have a 1. Just like that. Notice, I got rid of
this guy's column and this guy's row. And I was just left with
minus 1, 3, 0, 1. Next, I take this guy. And this is the trick. You have to alternate signs. If you start with a positive
here, this next one's going to be a minus. So you're going to have minus 2
times the submatrix-- we can call it-- if we get rid
of this guy's column and this guy's row. So 2, 3, 4, 1. I just blanked this out. If I could videotape my finger,
I would cover my finger over this column right
here and over that row, and you'd just see a 2,
a 3, a 4, and a 1. And that's what I
put right there. And then finally, we went
plus, minus, plus. So finally, we'll have plus 4
times the determinant of the submatrix, if you get rid of
that row in that column. So 2, minus 1, 4, 0. Now, these are pretty
straightforward. These are not too
bad to compute. Let's actually do it. So this is going to be equal
to 1 times what? Minus 1 times 1. Let me just write it out. Minus 1 times 1, minus
0 times 3. This just comes from the
definition of a 2 by 2 determinant. We've already defined that. And then we're going to have
a minus 2 times 2 times 1, minus 4 times 3. And then finally, we're going to
have a plus 4 times 2 times 0 minus minus 1 times 4. I wrote it all out
so you can see. This thing right here is just
this thing right here. And then you have
the 4 out front. This thing right here was just
this thing right here. So it's the determinant of the
2 by 2 submatrix for each of these guys. And if we compute this, this is
equal to-- minus 1 times 1 is minus 1. Minus 0, that's 0. So this is a minus 1 times
1, so that's a minus 1. And then we get-- what
is this equal to? This right here is 12. So you get 2 minus 12. Right? You get 2 times 1
minus 4 times 3. So it's minus 10. So that is equal to minus 10. And then you have a minus
10 times a minus 2. So that becomes a
plus 20, right? Minus 2 times minus 10. And then finally, in the green,
we have 2 times 0, that's just a 0. And then you have minus 1 times
4, which is minus 4. Then you have a minus sign
here, so it's plus 4. So this all becomes a plus 4. Plus 4 times 4 is
16, so plus 16. And what do we get when
we add this up? We get 20 plus 16 minus 1. It is equal to 35. We're done. We found the determinant
of our 3 by 3 matrix. Not too bad. Right there, so that is equal
to the determinant of C. So the fact that this isn't
0 tells you that C is invertible. In the next video, we'll try
to extend this to n by n square matrices.",3 x 3 determinant | Matrix transformations | Linear Algebra | Khan Academy,"Determinants: Finding the determinant of a 3x3 matrix

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-nxn-determinant?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-formula-for-2x2-inverse?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,0c7dt2SQfLw
ExploringthesolutionsetofAx=b_Matrixtransformations_LinearAlgebra_KhanAcademy-1PsNIzUJPkc.en.csv,"Let's say I have some linear
transformation T from R2 to R2. So that is R2, and
then this is R2. T just maps from any member of
R2 to another member of R2, just like that. And I'm going to define T. It's a linear transformation. I'm going to define it. When I take the transformation
of some member of R2, it's equivalent to multiplying it by
this matrix, by the matrix 1 minus 3, minus 1, 3. So just to kind of understand
this transformation a little bit more, let's think about all
of the values that it can take on in our codomain. So if we say that 1 minus 3,
minus 1, 3, times any vector in our domain-- so x1, x2-- it's
going to be equal to some other vector in our codomain. Let me call that vector b. B is a member of R2. So it's going to be
equal to b1, b2. All I'm doing here is I'm
essentially-- if I call this right here, I call that matrix
A-- I'm just trying to find out what are all the possible
values for Ax is equal to b? I'm trying to find out all of
the possible b's in this case. So if I were to solve this
equation for any particular b, what I would do is I
would put this in reduced row echelon form. Well, first I would make an
augmented matrix of it. So I would put a 1, a minus
3, a minus 1, and a 3. And I would augment it with
the member of our codomain we're trying to be equal to. So b1, b2. And then, I would put it in
reduced row echelon form. So how can we do that? How can we put it in reduced
row echelon form? I'll keep my first
row the same. 1 minus 3, and then b1. And then my second row, I'll
replace it with my second row plus my first row. So minus 1 plus 1 is 0. 3 plus minus 3 is 0. And then b2 plus b1 is--
well I can just write that as b1 plus b2. So this is only going
to have solutions. I have an interesting
situation here. You've seen it before. I have a row of 0's. And the only way that this
is going to actually have solutions is if this thing right
here is also going to be equal to 0. So the only members b that are
members of Rm that have solutions are the ones where
if you add up their two terms-- so let's say b is equal
to b1 and b2-- are the ones where the two terms added
up have to be to 0. b1 plus b2 have to
be equal to 0. Or another way you could write
it is that b2 has to be equal to minus b1. So if we were to actually draw
our codomain-- let's do it. We always stay in the abstract,
but sometimes it's useful to draw an
actual example. Let's say that our
codomain is R2. Let me draw some axes
right here. Let's say that this
is my b1-axis, and this is my b2-axis. I could have called that
x and y, but I called that b1 and b2. What are all of the members
of my codomain that have a solution, that have a mapping? Well, b2 has to be equal
to minus b1. So it's going to
look like this. It's just going to be a line
with a slope of negative 1. This is all the b's that
have a solution. Because if you're not
on this line. If you're a member of your
codomain-- this is the codomain right here, R2. R2 is also our domain, but let
me make it very clear that this is the codomain
that I've drawn. This is what we're
mapping into. It's very clear that if we're
not on this line, if you pick somebody whose two terms don't
add up to equalling 0, or aren't the negative of each
other, if you pick someone over here in our codomain, and
then you try to solve the equation over here, 0 is going
to equal some non-zero number here and you're not going
to have a solution. And we touched on this
in the last video. And so in this case we could
say that this right here is the image of our
transformation. Or even another way of
thinking about it. This is our codomain. Let me draw a domain. So if you take any member of
R2, and it's always mapping onto something onto that line,
clearly each point on that line is going to be mapped to
by more than one vector. So we're not dealing with
an onto transformation. We saw that in the last video. In order for something to be
onto, when you put it in reduced row echelon form,
you cannot have all 0's in one of the rows. Or another way to say it in
reduced row echelon form, every row has to have
a pivot entry. Well, let's focus
on the b's that actually do have a solution. So let's focus on these b's,
so that when you take a b1 plus b2, it actually is going
to be equal to 0. So we could have the b, I don't
know, that could be the b5 minus 5. Obviously the b0, 0
is going to work. You could have 1, negative 1. Maybe that's right there. Let's focus on those for a
second and see how many members of our domain
map into them. So if we take this right here
and then we apply this equation up here, we only
have one constraint. We're assuming that this is
going to be equal to 0. So let's assume that
we're dealing with the b's in our image. Let's assume that we're dealing
with something where we can get a solution. That b1 plus b2 is equal to 0. Then what is our constraints? What will map to our vector
b that we're dealing with? If we just take this topic
equation right here, we have 1 times x1-- let me switch
colors-- minus 3 times x2 is equal to b1. And then this row will give us
no constraints, because it's just going to be
a bunch of 0's. So this is the only constraint
for a member of our domain that will map to some particular
b now that we are picking, some particular
b that satisfies this constraint. So we could write this solution
set-- let me rewrite it as x1 is equal
to b1, plus 3x2. Or if we wanted to write the
entire solution set, it would look like this. x1, x2 is equal to the vector
b1, 0, plus-- x1 is b1, plus 3, times x2, so plus
x2 times 3. And x2 is just going
to be equal to x2. That's a free variable. So x2 is equal to 0
plus x2, times 1. So what we're saying here is
this transformation just maps to this line here for all of the
vectors in our codomain, where their two entries
add up to each other. Let's assume that we actually
have one of those vectors. And so first of all, this is
definitely not an onto transformation. But let's assume that
we are dealing with one of those guys. So if we are picking a
particular one of those guys for a particular b-- let me
write this down-- that has a solution to Ax is equal to b,
the solution set will be equal to this thing right here. It'll be equal to x1, x2
is equal to the first entry of your b. b1, 0 plus x2, times
the vector 3,1. And if you think about this, if
you pick a particular b-- so let's say we pick our-- let
me draw this out, because I think it's nice to
visualize it all. Actually, maybe I'll
draw it like this. I don't want to draw
our blobs anymore. So let me draw my axes. So my axes look like this. We know that the image of our
transformation is the line with a negative 1 slope, because
the two entries have to be equal to the negative
of each other. Let's pick a particular
b that has a solution. So let's say we pick
that b right there. In order for it to have a
solution, its entries have to be the negative of each other. So let's say that's the
entry 5, minus 5. That is our b. So what we just showed is that
the solution set, if we want to say, hey, what in our domain
maps to this guy? So let's think about what
in our domain maps to this right here. Let's think about what in our
domain maps to this point right here, to this
particular b. So that's going to be all of
the x's that satisfy Ax is equal to 5, minus 5. So x1, x2 is going to be equal
to b1, it's going to be equal to 5, 0 plus x2, plus any
scale or multiple of the vector 3, 1. So our solution set is going to
be, you take the vector 5, 0-- so maybe the vector 5, 0,
specifies this position right here-- and then you're going to
add to it multiples of the vector 3, 1. The vector 3, 1 looks like this,
1, 2, 3 and you go up 1. The vector 3, 1 is going
to look like this. So if you add multiples of
this-- multiples of that could stretch out like that or could
go negative like that-- to this vector 5, 0, you're
essentially going to-- let me see if I can draw this neatly--
you're going to end up with a solution set that
looks like that right there. So if you pick a particular
b right there that has a solution, we just said that
everything on this line will map to that point in
our solution set. And in fact, if you picked
another point, let's say you picked the point minus 5, 5. Then the solution set that maps
to that would actually be-- this first term would
be the minus 5. It would be here. And all of these guys
would map to that. Well, this all interesting. I mean, we've been doing a
lot of abstract things. And I think it might be
satisfying that you're actually seeing something more
concrete in this example. But I'm doing all of
this for a reason. Because I want to understand
what the solution set is to a general non-homogeneous
equation like this. And to understand it a little
bit better, let's imagine what is the solution set
if I were to pick this guy, the 0 vector? Then what's going to be
the solution set? So if we say that Ax is equal to
0, then our solution set is going to the vector 0, 0,
plus x2, times 3, 1. So it's going to be what? This is just the 0 vector,
so it's going to be here. It's going to be here, and
it's going to just be multiples of 3, 1. It's going to look something
like that. What's this? What is the solution set to the
equation of Ax equal to 0. This is the null space. This, by definition, is
the null space of A. So notice-- and this is the big
takeaway from this video-- that for any solution-- we're
picking b's that actually do have solutions, because we're
picking them on this line. We're picking them in the
image of our codomain. The solution set to any Ax is
equal to some b where b does have a solution, it's
essentially equal to a shifted version of the null set,
or the null space. This right here is
the null space. That right there is the null
space for any real number x2. Any scale or multiple of
3, 1 is the null space. I just showed it right there. It's going to be that. And so all of these other
solution sets are just some particular vector, some
x particular, plus the null space. Obviously, this vector by
itself would also be a solution to Ax is equal to b,
because you can just set x2 to be equal to 0. So in general-- and I haven't
proven this to you rigorously, but hopefully you kind of get
the intuition behind it. The solution-- and I'll do this
in the next video, just because I realize I'm running
long on time. Assuming Axb has a solution-- in
the example we just did, we can assume it has, if we pick
one of these points here. So assuming it has a solution,
if we pick a point off of our image, then we're not going
to have a solution. But assuming Axb has a solution,
the solution set is going to be equal to some
particular vector-- so you could just think of it as a set
with just one vector right there-- with, or combined with,
or the union of that set, with your null space of
this matrix right here. I haven't proven this to you
yet, but hopefully you get the intuition of why this is true. We just solved it for
particular cases that do have solutions. We say, hey, it's going
to take this form. And I just showed you
that this is the form of the null space. And the reason why we're doing
that is because we've been talking about invertibility. And in order to be invertible
you have to be onto, and 1 to 1. And for something to be 1 to
1, you have to have at most one solution that maps to
a particular vector. You might have none. But you might have,
at most, one. So in order to have, at most,
one solution-- and the solution set is always going to
be equal to this, so you're always going to have this
solution-- so in order to have, at most, one solution,
your null space can't have anything in it. Or it can just have
the zero vector. So that means that your null
space of A has to be trivial, or to be empty, or to just
have the zero vector. I'll do this a little bit more
rigorously in the next video, but I think when you do it
sometimes with the rigor, you don't necessarily get
the intuition. But this is going to be a very
interesting takeway, and I think you already understand
it's leading up to conditions for invertibility.",Exploring the solution set of Ax = b | Matrix transformations | Linear Algebra | Khan Academy,"Exploring the solution set of Ax=b (non homogeneous equations)

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/linear-algebra-matrix-condition-for-one-to-one-trans?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/determining-whether-a-transformation-is-onto?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,1PsNIzUJPkc
Introductiontoprojections_Matrixtransformations_LinearAlgebra_KhanAcademy-27vT-NWuw0M.en.csv,"  Let's say I have a line that
goes through the origin. I'll draw it in R2, but this
can be extended to an arbitrary Rn. Let me draw my axes. Those are my axes right there,
not perfectly drawn, but you get the idea. Let me draw a line that goes
through the origin here. So that is my line there. And we know that a line in any
Rn-- we're doing it in R2-- can be defined as just all of
the possible scalar multiples of some vector. So let's say that this is
some vector right here that's on the line. We can define our line. We could say l is equal to
the set of all the scalar multiples-- let's say that
that is v, right there. So it's all the possible scalar
multiples of our vector v where the scalar multiples,
by definition, are just any real number. So obviously, if you take all
of the possible multiples of v, both positive multiples and
negative multiples, and less than 1 multiples, fraction
multiples, you'll have a set of vectors that will essentially
define or specify every point on that line that
goes through the origin. And we know, of course, if this
wasn't a line that went through the origin,
you would have to shift it by some vector. It would have to be some
other vector plus cv. But anyway, we're starting off
with this line definition that goes through the origin. What I want to do in this video
is to define the idea of a projection onto l of
some other vector x. So let me draw my
other vector x. Let's say that this right here
is my other vector x. Now, a projection, I'm going
to give you just a sense of it, and then we'll define it a
little bit more precisely. A projection, I always imagine,
is if you had some light source that were
perpendicular somehow or orthogonal to our line-- so
let's say our light source was shining down like this, and
I'm doing that direction because that is perpendicular
to my line, I imagine the projection of x onto this line
as kind of the shadow of x. So if this light was coming
down, I would just draw a perpendicular like that, and the
shadow of x onto l would be that vector right there. So we can view it as the shadow
of x on our line l. That's one way to think of it. Another way to think of it,
and you can think of it however you like, is how much of
x goes in the l direction? So the technique would
be the same. You would draw a perpendicular
from x to l, and you say, OK then how much of l would have to
go in that direction to get to my perpendicular? Either of those are how I
think of the idea of a projection. I think the shadow is part of
the motivation for why it's even called a projection,
right? When you project something,
you're beaming light and seeing where the light
hits on a wall, and you're doing that here. You're beaming light and you're
seeing where that light hits on a line in this case. But you can't do anything
with this definition. This is just kind of an
intuitive sense of what a projection is. So we need to figure out some
way to calculate this, or a more mathematically precise
definition. And one thing we can do is,
when I created this projection-- let me actually
draw another projection of another line or another vector
just so you get the idea. If I had some other vector over
here that looked like that, the projection of this
onto the line would look something like this. You would just draw a
perpendicular and its projection would be like that. But I don't want to talk
about just this case. I want to give you the sense
that it's the shadow of any vector onto this line. So how can we think about it
with our original example? In every case, no matter how
I perceive it, I dropped a perpendicular down here. And so if we construct a vector
right here, we could say, hey, that vector is
always going to be perpendicular to the line. And we can do that. I wouldn't have been talking
about it if we couldn't. So let me define this vector,
which I've not even defined it. What is this vector
going to be? If this vector-- let me
not use all these.   We know we want to somehow
get to this blue vector. Let me keep it in blue. That blue vector is the
projection of x onto l. That's what we want to get to. Now, one thing we can
look at is this pink vector right there. What is that pink vector? That pink vector that I just
drew, that's the vector x minus the projection, minus this
blue vector over here, minus the projection
of x onto l, right? If you add the projection to
the pink vector, you get x. So if you add this blue
projection of x to x minus the projection of x, you're, of
course, you going to get x. We also know that this pink
vector is orthogonal to the line itself, which means it's
orthogonal to every vector on the line, which also means that
its dot product is going to be zero. So let me define the projection
this way. The projection, this is going
to be my slightly more mathematical definition. The projection onto l of some
vector x is going to be some vector that's in l, right? I drew it right here,
this blue vector. I'll trace it with
white right here. Some vector in l where, and
this might be a little bit unintuitive, where x minus the
projection vector onto l of x is orthogonal to my line. So I'm saying the projection--
this is my definition. I'm defining the projection of x
onto l with some vector in l where x minus that projection
is orthogonal to l. This is my definition. That is a little bit more
precise and I think it makes a bit of sense why it connects to
the idea of the shadow or projection. But how can we deal with this? I mean, this is still
just in words. How can I actually calculate
the projection of x onto l? Well, the key clue here is this
notion that x minus the projection of x is
orthogonal to l. So let's see if we can
use that somehow. So the first thing we need to
realize is, by definition, because the projection of x onto
l is some vector in l, that means it's some scalar
multiple of v, some scalar multiple of our defining vector,
of our v right there. So we could also say, look, we
could rewrite our projection of x onto l. We could write it as some scalar
multiple times our vector v, right? We can say that. This is equivalent to
our projection. Now, we also know that x minus
our projection is orthogonal to l, so we also know that x
minus our projection-- and I just said that I could rewrite
my projection as some multiple of this vector right there. You could see it the
way I drew it here. It almost looks like it's
2 times its vector. So we know that x minus our
projection, this is our projection right here,
is orthogonal to l. Orthogonality, by definition,
means its dot product with any vector in l is 0. So let's dot it with
some vector in l. Or we could dot it with
this vector v. That's what we use
to define l. So let's dot it with v,
and we know that that must be equal to 0. We're taking this vector right
here, dotting it with v, and we know that this has
to be equal to 0. That has to be equal to 0. So let's use our properties of
dot products to see if we can calculate a particular value of
c, because once we know a particular value of c, then we
can just always multiply that times the vector v, which we
are given, and we will have our projection. And then I'll show it to you
with some actual numbers. So let's see if we can
calculate a c. So if we distribute this c--
oh, sorry, if we distribute the v, we know the dot
product exhibits the distributive property. This expression can be rewritten
as x dot v, right? x dot v minus c times v dot v.   I rearranged things. We know that c minus cv dot
v is the same thing. We could write it as minus cv. This is minus c times v dot v,
and all of this, of course, is equal to 0. And if we want to solve for c,
let's add cv dot v to both sides of the equation. And you get x dot v is equal
to c times v dot v. Solving for c, let's divide
both sides of this equation by v dot v. You get-- I'll do it in
a different color. c is equal to this: x dot
v divided by v dot v. Now, what was c? We are saying the projection of
x-- let me write it here. The projection of x onto
l is equal to some scalar multiple, right? We know it's in the line, so
it's some scalar multiple of this defining vector,
the vector v. And we just figured out
what that scalar multiple is going to be. It's going to be x dot v over v
dot v, and this, of course, is just going to be
a number, right? This is a scalar still. Even though we have all these
vectors here, when you take their dot products, you just end
up with a number, and you multiply that number times v. You just kind of scale v and
you get your projection. So in this case, the way I
drew it up here, my dot product should end up with some
scaling factor that's close to 2, so that if I start
with a v and I scale it up by 2, this value would be 2, and
I'd get a projection that looks something like that. Now, this looks a little
abstract to you, so let's do it with some real vectors, and
I think it'll make a little bit more sense. And nothing I did here
only applies to R2. Everything I did here can be
extended to an arbitrarily high dimension, so even though
we're doing it in R2, and R2 and R3 is where we tend to
deal with projections the most, this could apply to Rn. Let me do this particular
case. Let me define my line l to
be the set of all scalar multiples of the vector-- I
don't know, let's say the vector 2, 1, such that
c is any real number. Let me draw my axes here. That's my vertical axis. This is my horizontal
axis right there. And so my line is all the
scalar multiples of the vector 2 dot 1. And actually, let me just call
my vector 2 dot 1, let me call that right there the vector v. Let me draw that. So I go 1, 2, go up 1. That right there
is my vector v.   And the line is all of
the possible scalar multiples of that. So let me draw that. So all the possible scalar
multiples of that and you just keep going in that direction, or
you keep going backwards in that direction or anything
in between. That's what my line is, all
of the scalar multiples of my vector v.   Now, let's say I have another
vector x, and let's say that x is equal to 2, 3. Let me draw x. x is 2, and
then you go, 1, 2, 3. So x will look like this. Vector x will look like that. Well, let me draw it a little
bit better than that. Vector x will look like that. That is vector x. But what we want to do
is figure out the projection of x onto l. We can use this definition
right here. So let me write it down. The projection of x onto
l is equal to what? It's equal to x dot v, right? Where v is the defining
vector for our line. So it's equal to x, which is
2, 3, dot v, which is 2, 1, all of that over v dot v. So all of that over 2, 1, dot
2, 1 times our original defining vector v. So what's our original
defining vector? It's this one right
here, 2, 1. So times the vector, 2, 1. And what does this equal? When you take these two dot of
each other, you have 2 times 2 plus 3 times 1, so 4 plus
3, so you get 7. This all simplified to 7. And then this, you get 2
times 2 plus 1 times 1, so 4 plus 1 is 5. So you get 7/5. That will all simplified to 5. That was a very fast
simplification. You might have been daunted
by this strange-looking expression, but when you take
dot products, they actually tend to simplify very quickly. And then you just multiply
that times your defining vector for the line. So we're scaling it up
by a factor of 7/5. So multiply it times
the vector 2, 1, and what do you get? You get the vector-- let me
do it in a new color. You get the vector, 14/5
and the vector 7/5. And just so we can visualize
this or plot it a little better, let me write
it as decimals. 14/5 is 2 and 4/5,
which is 2.8. And this is 1 and 2/5,
which is 1.4. And so the projection of x
onto l is 2.8 and 1.4. So 2.8 is right about there,
and I go 1.4 is right about there, so the vector is going
to be right about there. I haven't even drawn
this too precisely, but you get the idea. This is the projection. Our computation shows
us that this is the projection of x onto l. If we draw a perpendicular right
there, we see that it's consistent with our idea of
this being the shadow of x onto our line now. Well, now we actually can
calculate projections. In the next video, I'll actually
show you how to figure out a matrix
representation for this, which is essentially a
transformation.  ",Introduction to projections | Matrix transformations | Linear Algebra | Khan Academy,"Determining the projection of a vector on s line

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/expressing-a-projection-on-to-a-line-as-a-matrix-vector-prod?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/unit-vectors?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,27vT-NWuw0M
Transposeofamatrix_Matrixtransformations_LinearAlgebra_KhanAcademy-2t0003_sxtU.en.csv,"I've got a matrix A, and
it's an m by n matrix. It has m rows and n columns. So I can write it in fairly
general terms like this. The first row would be a11. First row, first column. a12, First row, second column. All the way to-- I
have n columns. So a1n, first row,
n-th column. And then the second row
would look like this. a second row, first column. A second row, second column. All the way to a second
row, n column. And we'll just keep doing that
all the way down until you get to the m-th row. The m row would look
like this. Each of these are the entries
in each of the rows or columns, depending on how
you want to look at it. So this is going to
be a sub m 1. mth row, first column. a sub m 2. And you go all the
way to a sub m n. This is our matrix right here. That is my matrix A. Now, I'm going to define the
transpose of this matrix as a with this superscript t. And this is going to be my
definition, it is essentially the matrix A with all the rows
and the columns swapped. So my matrix A transpose is
going to be a n by m matrix. Notice I said m rows
and n columns. Now this is going to have
n rows and m columns. So what is this guy going
to look like? What is he going to look like? Well I'm gonna swap my
rows and my columns. So my first row becomes
my first column. So I'm going to have a11. That entry's still going
to be in that position. But now this entry is not
going to be right here. a12. And my second row I have what
I used to have in my second row, first column. I'm now going to have what
I had in my second column, first row. I'm just going to go down
all the way to a1n. And that makes--
not a i n, a1n. And that makes sense because
I'll now have n columns. Sorry I now have n rows. I had n columns before. Now I have n rows. Now this row, when I transpose
it is going look like this. a21, a22, all the
way down to a2n. It might be a little confusing
for you right now to have this notation right there because
everything we've done so far. We've always said, hey this
first number's the row and the second number is the column. That's what we did up here. What I'm doing here, you can
ignore that reference to the rows and columns. You can just say whatever we
had here in my first row, second column, I
now have here. When you look at this transpose,
don't take these subscripts too literally. Or now you can kind of reverse
your interpretation. This is now the first
column, second row. This was the second
row, first column. I don't want you get too
confused with these subscripts. Just keep in mind, we're
taking all the rows and turning them into the columns
to get the transpose. And then you just
keep doing this. And then this m-th row will now
become the m-th column. am1, am2, all the way
down to a m n. So, this entry is
now that entry. If you know, this entry
is now that entry. That entry is now
at that entry. I think you get the idea. This is what a transpose is. And sometimes when you do in
the abstract, it can be a little confusing. And we'll especially appreciate
that once we do some of the proofs involving
the transpose. But actually taking the
transpose of an actual matrix, with actual numbers, shouldn't
be too difficult. So, let's start with
the 2 by 2 case. I'll try to color code
it as best as I can. So let's say I have
the matrix. Let's say I defined A. Let's do B now. I already defined A. Let's say B. B is equal to the matrix
1, 2, 3, 4. Those colors are pretty close. But what is B transpose
going to look like? B transpose is going to be equal
to-- You switch the rows and columns. So the first row will now
become the first column. 1, 2. And the second row will
now become the second column, 3, 4. Or you could view it
the other way. The first column now became
the first row. And the second column now
became the second row. Let's do an example. Instead of even doing a 2 by
3-- or a 3 by 3-- let me do one that might be a little
bit more challenging. I think this'll make
things clear. So let's say I have
the matrix C. Let me make it a pretty
big matrix. Let's say it is a 4 by
3 matrix right here. Let me just throw some
numbers in there. 1, 0, minus 1. 2, 7. Oh I want to do it in
different colors. Let me do that in a
different color. So then I get 2, 7, minus 5. Then I get 4 minus 3, 2. I have to do one
more row here. So let me just make that
minus 1, 3, and 0. That is my matrix C. So what is-- let me do that,
and I like to be aesthetically pleasing. So let me close the bracket
in the same color. So what is C transpose
going to be? So, C transpose. Let me do that in a
different color. C transpose is now going
to be a 3 by 4 matrix. And, essentially, it's going
to be the matrix C with all the rows swapped for the columns
or all the columns swapped for the rows. So, it's now going to
be a 3 by 4 matrix. And that first row there
is now going to become the first column. 1, 0, minus 1. The second row here
is now going to become the second column. 2, 7, minus 5. I didn't use the exact same
green, but you get the idea. This third row will become
the third column. 4, minus 3, 2. And then, finally, the
fourth row will become the fourth column. Minus 1, 3, and 0. All we did is, this guy was in
the second row, third column. Now, that same guy
is in the what? He is in the second column
and the third row. All we did is switch the
rows and the columns. We could do it with another. Let's see. Let's do it with this
one right here. This guy right here is
in the third row. 1, 2, 3. And the second column. And when you go down here this
guy is now in the third column and the second row. That's all a transpose is. And, just as a little
interesting thing, what happens if we take the transpose
of the transpose? So what happens if we
take C transpose and then transpose that? What is that going
to be equal to? Well to go from C to C
transpose, we switched all the rows and the columns. All the entries the
rows and columns. When you take the transpose
again, remember let's just focus on this guy. This was second row,
third column. You took the transpose,
it becomes second column and third row. If you were to take the
transpose again of that, he would then become the second
row and third column again. So C transpose, the transpose
of C transpose, is just equal to C. You're swapping all
the columns when you take the transpose. And when you take the
transpose again, you swap them all back. That's all that means. Anyway. Hope you found that useful.",Transpose of a matrix | Matrix transformations | Linear Algebra | Khan Academy,"Transpose of a matrix

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-determinant-of-transpose?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-determinant-as-scaling-factor?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,2t0003_sxtU
Determinantwhenrowmultipliedbyscalar_Matrixtransformations_LinearAlgebra_KhanAcademy-32rdijPB-rA.en.csv,"Let's explore what happens to
determinants when you multiply them by a scalar. So let's say we wanted to find
the determinant of this matrix, of a, b, c, d. By definition the determinant
here is going to be equal to a times d minus b times c, or
c times b, either way. ad minus bc. That's the determinant
right there. Now what if we were
to multiply one of these rows by a scalar. Let's say we multiply it by k. So we have the situation a, b. Let's multiply the second
row times k. So we kc and kd. Now what's the determinant
going to look like? We're going to have a times
kd, or we could just write that as kad, minus kc times b,
or we could right that as kbc. If we factor out the k,
we get that equals k times ad minus bc. Now you immediately see that
this thing is the same thing as this thing. So this is equal to k times the
determinant of a, b, c, d. So when you just multiply a
row by a scalar-- just one row, not the entire matrix--
when you just multiply a row by some scalar, the resulting
determinant will be the original determinant
times that scalar. Now you might say well what
happens if I multiply the whole matrix times
that scalar. Well that's equivalent to
multiplying by a scalar twice. Let's say I have the matrix A,
and the matrix A is equal to a, b, c, d. If I were to think about the
matrix kA, now I'm not just multiplying one row. I'm multiplying the whole
matrix by a scalar. This is going to be equal
to ka, kb, kc, and kd. When you figure out its
determinant, the determinant of k times A is going to be
equal to the determinant of ka, kb, kc, and kd. Here you're immediately going
to end up with k squared terms. You're going to have
k squared times ad. It's going to be equal to k
squared ad minus k squared bc, or k squared times ad minus
bc, or k squared times the determinant of just A. So you have to be
very careful. This is only for a
two by two case. You'll find out if this was an
n by n matrix that this would have been k to the n. So the take away is the only way
you can say that this is going to be some scalar multiple
times your original determinant, is only if you
multiply one row times that scalar multiple, not
the whole matrix. Let's see how this extends
to maybe a 3 by 3 case. You might say, hey Sal, you just
picked the second row. Does it work with
the first row? I'll leave that for you to
determine, but it does. It does work. It doesn't matter which row
I multiplied it by. Let's take the three
by three case. Let's say we have some matrix. Let's call this A again. I'm redefining A. It's going to be a, b,
c, d, e, f, g, h, i. Then if you take its
determinant, the determinant of A is going to be equal to--
we can do it a couple of different ways. But I'll just pick some
arbitrary row. Because that's the row that
we're going to multiply by some scalar. So let's just take that
row right there. Remember the plus
minus pattern. Remember plus, minus, plus,
minus, plus, minus, plus, minus, plus, that little
checkerboard pattern. So d is a minus right there. So it's going to be equal to
minus d times the determinant of its submatrix. So you cross out that
column in that row. It's b, c, h, i. It's going to be plus e times
its submatrix a, c, g, i. It's going to be minus f times--
you get rid of that row in that column--
d, e, g, h, the determinant of d, e, g, h. That's the determinant
of this matrix A. Now what if we define some
new matrix here? Let's call it A prime. Let me make this scroll
down a little bit. Let me define A prime
right here. A prime, I'm just going to
multiply this row by a scalar. So it's going to be equal to
a, b, c, kd, ke, and kf. I'm not multiplying the whole
matrix times the scalar. I can't say this is kA. I'm just multiplying
one of its rows. Then I have g, h, and i. So what's the determinant
of A prime going to be? I put that prime there. So it's different than A,
but it's derived from A. I just multiplied one row
of A times the scalar. Well I can go along that same
row that I did up here. I can go along that same row. The only difference is is that
instead of having a d, I now have a kd. Instead of an e, I
now have a ke. So instead of a d, I'm going
to have a kd there. Instead of an e, I'm going
to have an ke there. So it's going to be this exact
same thing, but I can replace this guy, this guy, and this guy
with them multiplied by k. So it's going to be equal to
minus kd times the determinant of the submatrix b, c, h, i--
I'm not even look over here because it's going to be the
same thing as that one up there-- plus ke times the
determinant of a, c, g, i, minus kf times the determinant
of d, e, g, h. What is this equal to? This is equal to, if you just
factor out the k, it's equal to k times this. So it's equal to k times
the determinant of A. So our result also worked
for three by three case. I just happened to pick
the middle row. But I encourage you
to pick other rows and to see what happens. So let's actually do it
for the general case. Because I've just been giving
you particular examples, and I like to show you the general
proof when the general proof isn't too harry. So let's say I have
an n by n matrix. Let's say that I
have matrix A. Let's say that A is n by n. You can write it like this. This is the first row. This is the first column a11,
a12, all the way to a1n. I'm going to pick some arbitrary
row here that I'm going to end up multiplying
by a scalar. So we can go down here. Let's say row ai, so this is
ai1, ai2, all the way to ain. This is some row that I'm going
to use to determine the determinant. Remember we can go to any row
to get the determinant. Then finally you keep going. You get an1, an2, all
the way to ann. This is as general as you can
get for an n by n matrix. Now let's figure out its
determinant, so the determinant of A. I'm just going to go down
this row right there. So the determinant of
A is equal to what? Well we have to remember the
checkerboard pattern. We don't know where we are on
the checkerboard pattern because I just picked an
arbitrary general row here. But we can use the general
formula that the sign is going to be determined by negative 1
to the i-- I don't know if i is even or odd-- so it's
going to be i plus for this term 1 power. That's it's sign. This is what gives us the
checkerboard pattern. Let me make that clear. It looks complicated, but this
is just a checkerboard. Times this term right there,
so times ai, so the coefficient, ai1, and then times
this guy's submatrix. You remember the submatrix. You get rid of this row, and
this column is going to be everything that's left over. So times that submatrix
of ai1. Then it's going to be plus-- we
just keep doing it-- plus negative 1 to the i plus
2 times ai2 times its submatrix-- all the way, you
just keep going-- plus minus 1 to the i plus n times ai. You're in the nth column,
and then its submatrix. This is going to be an n minus
1 by n minus 1 matrix. All of these are going to be. Just like that, that's
the determinant of A. We could actually rewrite
it in sigma notation. That'll simplify things
a little bit. So the determinant of A, we can
rewrite it as the sum from j is equal to 1 to j-- I'll
write it explicitly here-- j is equal to n of negative 1 to
the i plus j times aij, and then each of the submatrices,
Aij. This thing right here is just
another way of writing this thing I wrote up there. I'm just saying the sum. You just take j equal 1,
put them in there. You get this term right there. You take j equal
2, you add it. You get this term right there. You keep doing it. You get j equal n. You get that term right there. So these two things
are equivalent. So what happens I have
some new matrix? Let me copy and paste
my current matrix. So let me copy and paste it. Actually let me copy and
paste everything. That'll make things
move quickly. I copied it. Now let me paste it
just like that. Let me define a new
matrix A prime. It's still an n by n matrix. But that row that I just
happened to use to determine my determinant, I'm going to
multiply it by a scalar k. So it's k ai1, k ai2 k
ain just like that. So what's the determinate
of A prime? Well we're just going to
go down this row again. But now instead of just an ai1,
we have a k ai1 Instead of an ai2, we have a
k ai2 Instead of an ain we have a k ain. So it's determinant is just
going to be this same thing, but instead of an aij
everywhere, we're going to have a k aij. So this is the determinant
of A prime. We could just take out this
constant right here. It has no i's or j's in it. I has no j's in it in
particular, so we can just take it out. So it's equal to k times the sum
from j is equal to 1 to j is equal to n of minus 1 to
the i plus j times aij. This is the coefficient. This is the submatrix for each
of those coefficients, aij. That's a matrix right
there, an n minus 1 by n minus 1 matrix. Then you immediately recognize--
I think you saw where this was going-- this
right here is just the determinant of A. So we get the result that the
determinant of A prime is equal to k times the
determinant of A. So we've just shown you in
general, if you have any n by n matrix, if you multiply only
one row, not the whole matrix, only one row by some scalar
multiple k, the resulting determinant will be your
original determinant times k. Now I touched on this in
the original video. What is the determinant
of k times A? So now we're multiplying
every row times k. Or another way to think about
is you're multiplying n rows times k. So you're doing this n times. So if you multiply
k times itself n times, what do you get? You get k to the n. So this is going to be equal
to k to the n times the determinant of A. If you just do it once,
you get k times the determinant of A. Now if you do a second row,
you're going to get k times k times the determinant of A. If you do a third row, you're
going to get k to the third times the determinant of A. The fourth row, k to the
fourth times the determinant of A. If you do them all, all n rows,
you're going to have k to the n times the
determinant of A. Anyway, hopefully you found
that interesting. I encourage you to experiment
with these other ways. Try going down a column and
seeing what happens.",Determinant when row multiplied by scalar | Matrix transformations | Linear Algebra | Khan Academy,"The determinant when a row is multiplied by a scalar

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-correction-scalar-muliplication-of-row?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-rule-of-sarrus-of-determinants?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,32rdijPB-rA
Laplacetransform2_Laplacetransform_DifferentialEquations_KhanAcademy-33TYoybjqPg.en.csv,"Let's keep doing some Laplace
transforms. For one, it's good to see where a lot of those
Laplace transform tables you'll see later on actually
come from, and it just makes you comfortable with
the mathematics. Which is really just kind of
your second semester calculus mathematics, but it makes you
comfortable with the whole notion of what we're doing. So first of all, let me just
rewrite the definition of the Laplace transform. So it's the L from Laverne
&amp; Shirley. So the Laplace transform of some
function of t is equal to the improper integral from 0 to
infinity of e to the minus st times our function. Times our function of t, and
that's with respect to dt. So let's do another
Laplace transform. Let's say that we want to take
the Laplace transform-- and now our function f of t, let's
say it is e to the at. Laplace transform
of e to the at. Well we just substituted it into
this definition of the Laplace transform. And this is all going to be
really good integration practice for us. Especially integration
by parts. Almost every Laplace transform
problem turns into an integration by parts problem. Which, as we learned long ago,
integration by parts is just the reverse product rule. So anyway. This is equal to the integral
from 0 to infinity. e to the minus st times
e to the at, right? That's our f of t. dt. Well this is equal to just
adding the exponents because we have the same base. The integral from 0
to infinity of e to the a minus stdt. And what's the antiderivative
of this? Well that's equal to what? With respect to C. So it's equal to-- a minus s,
that's just going to be a constant, right? So we can just leave it
out on the outside. 1/a minus s times e to the a
minus st. And we're going to evaluate that from t is equal to
infinity or the limit as t approaches infinity to
t is equal to 0. And I could have put this inside
the brackets, but it's just a constant term, right? None of them have t's in them,
so I can just pull them out. And so this is equal to 1/a
minus s times-- now we essentially have to evaluate
t at infinity. So what is the limit
at infinity? Well we have two cases
here, right? If this exponent-- if this a
minus s is a positive number, if a minus s is greater than
0, what's going to happen? Well as we approach infinity,
e to the infinity just gets bigger and bigger and
bigger, right? Because it's e to an infinitely
positive exponent. So we don't get an answer. And when you do improper
integrals, when you take the limit to infinity and it doesn't
come to a finite number, the limit doesn't
approach anything, that means that k the improper
integral diverges. And so there is no limit. And to some degree, we can say
that the Laplace transform is not defined with a minus s is
greater than 0 or when a is greater than s. Now what happens if a minus
s is less than 0? Well then this is going
to be some negative number here, right? And then if we take e to an
infinitely negative number, well then that does approach
something. That approaches 0. And we saw that in the
previous video. And I hope you understand
what I'm saying, right? e to an infinity negative number
approaches 0, while e to an infinitely positive
number is just infinity. So that doesn't really
converge on anything. So anyway. If I assumed that a minus s is
less than 0, or a is less than s, and this is the assumption I
will make, just so that this improper integral actually
converges to something. So if a minus s is less than
0, and this is a negative number, e to the a minus s
times-- well t, where t approaches infinity will be 0. Minus this integral
evaluated at 0. So when you value this
at 0, what happens? T equals 0. This whole thing becomes
e to the 0 is 1. And we are left with what? Minus 1/a minus s. And that's just the same
thing as 1/s s minus a. So we have our next entry in our
Laplace transform table. And that is the Laplace
transform. The Laplace transform of e to
the at is equal to 1/s s minus a, as long as we make the
assumption that s is greater than a. This is true when s is greater
than a, or a is less than s. You could view it either way. So that's our second entry in
our Laplace transform table. Fascinating. And actually, let's relate this
to our previous entry in our Laplace transform
table, right? What was our first entry in our
Laplace transform table? It was Laplace transform of
1 is equal to 1/s, right? Well isn't 1 just the same
thing as e to the 0? So we could have said that this
is the Laplace-- I know I'm running out of space, but
I'll do it here in purple. We could have said Laplace
transform of 1 is the same thing as e to the 0
times t, right? And that equals 1/s. And luckily it's good to see
that that is consistent. And actually, remember, we even
made the condition when s is greater than 0, right? We assumed that s is greater
than 0 this example. Here again, you say s
is greater than 0. This is completely consistent
with this one, right? Because if a is equal to 0, then
the Laplace transform of e to the 0 is just
1/s minus 0. That's just 1/s. And we have to assume that
s is greater than zero. So really these are kind of the
same entry in our Laplace transform table. But it's always nice in
mathematics when we see that two results we got in trying
to do slightly different problems actually are,
in some ways, connected or the same result. Anyway I'll see you in the
next video and we'll keep trying to build our table of
Laplace transforms. And maybe three or four videos from now
I'll actually show you how these transforms are extremely
useful in solving all sorts of differential equations. See you soon.",Laplace transform 2 | Laplace transform | Differential Equations | Khan Academy,"Laplace transform of e^at

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-tutorial/v/laplace-transform-3-l-sin-at?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-tutorial/v/laplace-transform-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,33TYoybjqPg
2ndOrderLinearHomogeneousDifferentialEquations4_KhanAcademy-3uO_uPb9H8w.en.csv,"Let's solve another 2nd order
linear homogeneous differential equation. And this one-- well, I won't
give you the details before I actually write it down. So the differential equation is
4 times the 2nd derivative of y with respect to x, minus
8 times the 1st derivative, plus 3 times the function
times y, is equal to 0. And we have our initial
conditions y of 0 is equal to 2. And we have y prime of
0 is equal to 1/2. Now I could go into the whole
thing y is equal to e to the rx is a solution, substitute
it in, then factor out e to the rx, and have the
characteristic equation. And if you want to see all of
that over again, you might want to watch the previous
video, just to see where that characteristic equation
comes from. But in this video, I'm just
going to show you, literally, how quickly you can do these
type of problems mechanically. So if this is our original
differential equation, the characteristic equation is going
to be-- and I'll do this in a different color-- 4r
squared minus 8r plus 3r is equal to 0. And watch the previous video if
you don't know where this characteristic equation
comes from. But if you want to do these
problems really quick, you just substitute the 2nd
derivatives with an r squared, the first derivatives with an
r, and then the function with-- oh sorry, no. This is supposed to
be a constant-- And then the coefficient on the
original function is just a constant, right? I think you see what I did. 2nd derivative r squared. 1st derivative r. No derivative-- you could say
that's r to the 0, or just 1. But this is our characteristic
equation. And now we can just figure
out its roots. This is not a trivial one for
me to factor so, if it's not trivial, you can just use
the quadratic equation. So we could say the solution
of this is r is equal to negative b-- b is negative 8, so
it's positive 8-- 8 plus or minus the square root
of b squared. So that's 64, minus 4
times a which is 4, times c which is 3. All of that over 2a. 2 times 4 is 8. That equals 8 plus or minus
square root of 64 minus-- what's 16 times 3-- minus 48. All of that over 8. What's 64 minus 48? Let's see, it's 16, right? Right. 10 plus 48 is 58, then
another-- so it's 16. So we have r is equal to 8 plus
or minus the square root of 16, over 8, is equal to
8 plus or minus 4 over 8. That equals 1 plus
or minus 1/2. So the two solutions of this
characteristic equation-- ignore that, let me scratch that
out in black so you know that's not like a 30 or
something-- the two solutions of this characteristic equation
are r is equal to-- well 1 plus 1/2 is equal to
3/2-- and r is equal to 1 minus 1/2, is equal to 1/2. So we know our two r's, and we
know that, from previous experience in the last video,
that y is equal to c times e to the rx is a solution. So the general solution of this
differential equation is y is equal to c1 times e-- let's
use our first r-- e to the 3/2 x, plus c2 times
e to the 1/2 x. This differential equations
problem was literally just a problem in using the
quadratic equation. And once you figure out
the r's you have your general solution. And now we just have to use
our initial conditions. So to know the initial
conditions, we need to know y of x, and we need to
know y prime of x. Let's just do that right now. So what's y prime? y prime of our general solution
is equal to 3/2 times c1 e to the 3/2 x, plus--
derivative of the inside-- 1/2 times c2 e to the 1/2 x. And now let's use our actual
initial conditions. I don't want to lose them-- let
me rewrite them down here so I can scroll down. So we know that y of 0 is equal
to 2, and y prime of 0 is equal to 1/2. Those are our initial
conditions. So let's use that information. So y of 0-- what happens
when you substitute x is equal to 0 here.? You get c1 times e to the 0,
essentially, so that's just 1, plus c2-- well that's just e to
the 0 again, because x is 0-- is equal to-- so this is,
when x is equal to 0, what is y? y is equal to 2. Y of 0 is equal to 2. And then let's use the
second equation. So when we substitute x is equal
to 0 in the derivative-- so when x is 0 we get 3/2 c1--
this goes to 1 again-- plus 1/2 c2-- this is 1 again, e to
the 1/2 half times 0 is e to the 0, which is 1-- is equal
to-- so when x is 0 for the derivative, y is equal to 1/2,
or the derivative is 1/2 at that point, or the slope
is 1/2 at that point. And now we have two equations
and two unknowns, and we could solve it a ton of ways. I think you know how
to solve them. Let's multiply the top
equation-- I don't know-- let's multiply it by 3/2,
and what do we get? We get-- I'll do it in a
different color-- we get 3/2 c1 plus 3/2 c2 is equal to--
what's 3/2 times 2? It's equal to 3. And now, let's subtract-- well,
I don't want to confuse you, so let's just subtract the
bottom from the top, so this cancels out. What's 1/2 minus 3/2? 1/2 minus 1 and 1/2. Well, that's just
minus 1, right? So minus c2 is equal to--
what's 1/2 minus 3? It's minus 2 and 1/2,
or minus 5/2. And so we get c2 is
equal to 5/2. And we can substitute back
in this top equation. c1 plus 5/2 is equal to 2, or c1
is equal to 2, which is the same thing as 4/2, minus 5/2,
which is equal to minus 1/2. And now we can just substitute
c1 and c2 back into our general solution and we have
found the particular solution of this differential equation,
which is y is equal to c1-- c1 is minus 1/2-- minus 1/2 e to
the 3/2 x plus c2-- c2 is 5/2-- plus c2, which is 5/2, e
to the 1/2 x, and we are done. And it might seem
really fancy. We're solving a differential
equation. Our solution has e in it. We're taking derivatives
and we're doing all sorts of things. But really the meat of this
problem was solving a quadratic, which was our
characteristic equation. And watch the previous video
just to see why this characteristic equation works. But it's very easy to come up
with the characteristic equation, right? I think you obviously see that
y prime turns into r squared, y prime turns into r, and then
y just turns into 1, essentially. So you solve a quadratic. And then after doing that,
you just have to take one derivative-- because after
solving the quadratic, you immediately have the general
solution-- then you take its derivative, use your
initial conditions. You have a system of linear
equations which is Algebra I. And then you solve them for the
two constants, c1 and c2, and you end up with your
particular solution. And that's all there is to it. I will see you in
the next video.",2nd Order Linear Homogeneous Differential Equations 4 | Khan Academy,"Another example with initial conditions!

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/complex-roots-characteristic-equation/v/complex-roots-of-the-characteristic-equations-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/linear-homogeneous-2nd-order/v/2nd-order-linear-homogeneous-differential-equations-3?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,3uO_uPb9H8w
Laplacetransformtosolveanequation_Laplacetransform_DifferentialEquations_KhanAcademy-3uYb-RhM7lU.en.csv,"I've been doing a ton of videos
on the mechanics of taking the Laplace Transform,
but you've been sitting through them always wondering,
what am I learning this for? And now I'll show you, at
least in the context of differential equations. And I've gotten a
bunch of letters on the Laplace Transform. What does it really mean? And and all that. And those are excellent
questions and you should strive for that. It's hard to really have an
intuition of the Laplace Transform in the differential
equations context, other than it being a very useful tool that
converts differential or integral problems into algebra
problems. But I'll give you a hint, and if you want a path
to learn it in, you should learn about Fourier series and
Fourier Transforms, which are very similar to Laplace
Transforms. And that'll actually build up the intuition
on what the frequency domain is all about. Well anyway, let's actually use
the Laplace Transform to solve a differential equation. And this is one we've
seen before. So let me see. So let's say the differential
equation is y prime prime, plus 5, times the first
derivative, plus 6y, is equal to 0. And you know how to solve this
one, but I just want to show you, with a fairly
straightforward differential equation, that you could solve
it with the Laplace Transform. And actually, you
end up having a characteristic equation. And the initial conditions are
y of 0 is equal to 2, and y prime of 0 is equal to 3. Now, to use the Laplace
Transform here, we essentially just take the Laplace Transform
of both sides of this equation. Let me use a more
vibrant color. So we get the Laplace Transform
of y the second derivative, plus-- well we
could say the Laplace Transform of 5 times y prime,
but that's the same thing as 5 times the Laplace Transform--
y prime. y prime plus 6 times the
Laplace Transform of y. And let me ask you a question. What's the Laplace
Transform of 0? Let me do that. So the Laplace Transform of 0
would be be the integral from 0 to infinity, of 0 times
e to the minus stdt. So this is a 0 in here. So this is equal to 0. So the Laplace Transform
of 0 is 0. And that's good, because I
didn't have space to do another curly L. So what are the Laplace
Transforms of these things? Well this is where we break
out one of the useful properties that we learned. Let me write it over here. I think that's going
to need as much real estate as possible. Let me erase this. So we learned that the Laplace
Transform-- I'll do it here. Actually, I'll do
it down here. The Laplace Transform of f
prime, or we could even say y prime, is equal to s times
the Laplace Transform of y, minus y of 0. We proved that to you. And this is extremely
important to know. So let's see if we
can apply that. So the Laplace Transform of y
prime prime, if we apply that, that's equal to s times the
Laplace Transform of-- well if we go from y prime to y,
you're just taking the anti-derivative, so if you're
taking the anti-derivative of y, of the second derivative, we
just end up with the first derivative-- minus the first
derivative at 0. Notice, we're already using
our initial conditions. I won't substitute
it just yet. And then we end up with plus 5,
times-- I'll write it every time-- so plus 5 times the
Laplace Transform of y prime, plus 6 times the Laplace
Transform of y. All of that is equal to 0. So just to be clear, all I did
is I expanded this into this using this. So how can we rewrite the
Laplace Transform of y prime? Well, we could use this once
again, so let's do that. So this over here-- I'll do it
in magenta-- this is equal to s times what? s times the Laplace Transform
of y prime. Well that's s times the Laplace
Transform of y, minus y of 0, right? I took this part and replaced
it with what I have in parentheses. So minus y prime of 0-- and now
I'll switch colors-- plus 5 times-- once again the Laplace
Transform of y prime. Well we can use this again. So 5 times s times Laplace
Transform of y, minus y of 0, plus 6 times the Laplace
Transform-- oh I ran out of space, I'll do it in another
line-- plus 6 times the Laplace Transform of y. All of that is equal to 0. I know this looks really
confusing but we'll simplify right now. And we could get rid of this
right here, because we've used it as much as we need to. So now we just simplify. And notice, using the Laplace
Transform, we didn't have to guess at a general solution
or anything like that. Even when we did a
characteristic equation, we guessed what the original
general solution was. Now we're just taking Laplace
Transforms, and let's see where this gets us. And actually I just want to
make clear, because I know it's very confusing, so I
rewrote this part as this. And I rewrote this
thing as this. And everything else
is the same. But now let's simplify
the math. So we get s squared, times the
Laplace Transform of y-- I'm going to write smaller, I've
learned my lesson-- minus s times y of 0. Let's substitute y of 0 here. y
of 0 is 2, so s times y of 0 is 2 times s, so 2s, distribute
that s, minus y prime of 0. Y prime of 0 is 3. So minus 3, plus-- so we have
5 times s times the Laplace Transform of y, so plus 5s times
the Laplace Transform of y, minus 5 times y of 0. y
of 0 is 2, so minus 10. Minus 10, right? 5 times-- this is 2 right here--
so 5 times 2, plus 6 times the Laplace
Transform of y. All of that is equal to 0. Now, let's group our Laplace
Transform of y terms and our constant terms, and we
should be hopefully getting some place. So let's see, my Laplace
Transform of y terms, I have this one, I have this one,
and I have that one. So what am I left with? Well let me factor out the
Laplace Transform of y part. So I get the Laplace Transform
of y-- and that's good because it's a pain to keep writing
it over and over-- times s squared plus 5s plus 6. So those are all my Laplace
Transform terms. And then I have my constant terms. So let's
see, I have 1s, so minus 2s, minus 3, minus 10,
is equal to 0. And what can we do here? Well, this is interesting,
first of all. Notice that the coefficients on
the Laplace Transform of y terms, that those are that
characteristic equation that we dealt with so much, and that
is hopefully, to some degree, second nature to you. So that's a little bit of a
clue, and if you want some very tenuous connections, well
that makes a lot of sense. Because the characteristic
equation to get that, we substituted e to the rt, and the
Laplace Transform involves very similar function. But anyway, let's go back
to the problem. So how do we solve this? And actually, let me just give
you the big picture here, because this is a good point. What I'm going to do is I'm
going to solve this. I'm going to say the Laplace
Transform of y is equal to something. And then I'm going to say,
boy, what functions the Laplace Transform
is at something? And then I'll have
the solution. If that confuses you, just wait
and hopefully it'll make some sense. From here until that point
it's just some fairly hairy algebra. So let's scroll down a little
bit, just so we have some breathing room. And so I get the Laplace
Transform of y, times s squared, plus 5s, plus 6, is
equal to-- let's add these terms to both sides of this
equation-- is equal to 2s plus 3 plus 10-- oh, that's
silly-- plus 13. This is minus 13 here. A phone call. Who's calling? I think it's some kind of
marketing phone call. Anyway, 2s plus 13, and
now what can I do? Well. Let's divide both sides by this
s squared plus 5s plus 6. So I get the Laplace Transform
of y is equal to 2s plus 13, over s squared plus 5s plus 6. Now we're almost done. Everything here is just a
little bit of algebra. So now we're almost done. We haven't solved for y yet, but
we know that the Laplace Transform of y is
equal to this. Now, if we just had this in
our table of our Laplace Transforms, we would immediately
know what y was, but I don't see something, or
I don't remember anything we did in our table that looks
like this expression of s. I'm essentially out of time, so
the next video we're going to figure out what functions
Laplace Transform is this. And it actually turns out it's
a sum of things we already know, and we just have to
manipulate this a little bit algebraically. See you in the next video.",Laplace transform to solve an equation | Laplace transform | Differential Equations | Khan Academy,"Using the Laplace Transform to solve an equation we already knew how to solve.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-to-solve-differential-equation/v/laplace-transform-solves-an-equation-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-of-the-dirac-delta-function?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,3uYb-RhM7lU
Laplacetransformoftheunitstepfunction_Laplacetransform_KhanAcademy-4Mr7aEHQr8E.en.csv,"The whole point in learning
differential equations is that eventually we want to model real
physical systems. I know everything we've done so far has
really just been a toolkit of being able to solve them, but
the whole reason is that because differential equations
can describe a lot of systems, and then we can actually
model them that way. And we know that in the real
world, everything isn't these nice continuous functions, so
over the next couple of videos we're going to talk about
functions that are a little bit more discontinuous than what
you might be used to even in kind of a traditional
calculus or traditional Precalculus class. And the first one is the
unit step function. Let's write it as u, and
then I'll put a little subscript c here of t. And it's defined as when t is--
let me put it this way. It's defined as 0 when t is less
than-- whatever subscript I put here-- when t
is less than c. And it's defined as 1-- that's
why we call it the unit step function-- when t is greater
than or equal to c. And if I had to graph this, and
you could graph it as well but it's not too difficult
to graph. Let me draw my x-axis
right here. And I'll do a little
thicker line. That's my x-axis right there. This is my y-axis right there. And when we talk about Laplace
transforms, which we'll talk about shortly, we only care
about t is greater than 0. Because we saw, in our
definition of the Laplace transform, we're always taking
the integral from 0 to infinity, so we're
only dealing with the positive x-axis. But anyway, by this definition,
it would be zero all the way until you get to
some value c, so you'd be zero until you get to c. And then at c, you jump, and the
point c is included x is equal to c here. So it's included, so I'll put
a dot there, because it's greater than or equal to c. You're at 1, so this
is 1 right here. And then you go forward
for all of time. And you're like, Sal, you just
said that differential equations, we're learning to
model things, why is this type of a function useful? Well, in the real world,
sometimes you do have something that essentially jolts
something, that moves it from this position
to that position. And obviously, nothing can move
it immediately like this, but you might have some
system, it could be an electrical system or mechanical
system, where maybe the behavior looks something
like this, where maybe it moves it like that
or something. And this function is a pretty
good analytic approximation for some type of real world
behavior like this when something just gets moved. Whenever we solve these
differential equations analytically, we're really
just trying to get a pure model of something. Eventually, we'll see that it
doesn't perfectly describe things, but it helps describe
it enough for us to get a sense of what's going
to happen. Sometimes it will completely
describe things, but anyway, we can ignore that for now, so
let me get rid of these things right there. So the first question is,
well, you know, what if something doesn't jar
just like that? What if I want to construct more
fancy unit functions or more fancy step functions? Let's say I wanted to construct
something that looked like this. Let me say this is my y-axis. This is my x-axis. And let's say I wanted to
construct something that is at-- and let me do it in
a different color. Let's say it's at 2
until I get to pi. And then from pi until forever
it just stays at zero. So how could I construct this
function right here using my unit step function? So what if I had written
it as-- so my unit step function's at zero initially, so
what if I make it 2 minus a unit step function that
starts at pi? So if I define my function
here, will this work? Well, this unit step function,
when we pass pi, is only going to be equal to 1, but
we want this thing to be equal to zero. So it has to be 2 minus 2, so
I'll have to put at 2 here, and this should work. When we're at any value below
pi, when t is less than pi here, this becomes a zero,
so our function will just evaluate to 2, which
is right there. But as soon as we hit t is equal
to pi, that pi is the c in this example, as soon as
we hit that, the unit step function becomes 1. We multiply that by 2, and we
have 2 minus 2, and then we end up here with zero, Now, that might be nice and
everything, but let's say you wanted for it to go back up. Let's say that instead of it
going like this-- let me kind of erase that by overdrawing the
x-axis again-- we want the function to jump up again. We want it to jump up again. And lets say at some value,
let's say it's at 2pi, we want the function to jump up again. How could we construct this? And we could make it jump to
anything, but let's say we want it to jump back to 2. Well, we could just add another
unit step function here, something that would have
been zero all along, all the way up until this point. But then at 2pi, it jumps,
so in this case, our c would be 2pi. That's our unit step function,
and we want it to jump to 2. This would just jump
to 1 by itself. So let's multiply it by 2. And now we have this function. So you could imagine, you
can make an arbitrarily complicated function of things
jumping up and down to different levels based on
different essentially linear combinations of these
unit step functions. Now, what if I wanted
to do something a little bit fancier? What if I wanted to do something
that-- let's say I have some function that
looks like this. Let me draw some function. I should draw straighter
than that. I should have some standards. So let's say that just
my regular f of t-- let me, this is x. Actually, why am I doing x? This would be the t-axis. We're doing the time domain. It could have been x. And then we'll call
this f of t. So let me draw some
arbitrary f of t. Let's say my function looks
something crazy like that. So this is my f of t. What if I'm modeling
a physical system that doesn't do this? That actually at some point--
well, actually, let's say it stays at zero. It stays at zero until
some value. Let's say it goes to zero
until-- I don't know, I'll call that c again. And then at c, f of t
kind of starts up. So right at c, f of t should
start up, so it just kind of goes like this. So essentially what we have here
is a combination of zero all the way, and then we
have a shifted f of t. So at c, we have a shifted f of
t, so it shifts that way. So how can we construct this
yellow function, where it's essentially a shifted version
of this green function, but it's zero below c? This green function might
have continued. It might have gone something
like this. It might have, continued and
done something crazy, but what we did is we shifted it from
here to there, and then we zeroed out everything
before c. So how could we do that? Well, just shifting this
function, you've learned in your Algebra II or your
precalculus classes, to shift a function by c to the right,
you just to replace your t with a t minus c. So this function right here
is f of t minus c. And to make sure I get it right,
what I always do is I imagine, OK, what's going to
happen when t is equal to c? When t is equal to c, you're
going to have a c minus a c, and you're going
to have f of 0. So f of 0, it should
be the same. So when t is equal to c, this
value, the value of the function should be equivalent
to the value of the original green function at zero, so it's
equivalent to that value, which makes sense. If we go up one more above c, so
let's say this is one more above c, so we get to this
point, if t is c plus 1, then when you put c plus 1 minus c,
you just have f of 1, and f of 1 is really just this
point right here. And so it'll be that f of
1, so it makes sense. So as we move one forward here,
we're essentially at the same function value as we were
there, so the shift works. But I said that we have to
also-- if I just shifted this function, you would have all
this other stuff, because you would have had all this other
stuff when the function was back here still going on. The function-- I'll draw it lightly-- would still continue. But I said I wanted to zero
out this function before we reach c. So how can I zero out
that function? Well, I think it's pretty
obvious to you. I started this video talking
about the unit step function. So what if I multiply
the unit step function times this thing? What's going to happen? So what if I-- my new function,
I call it the unit step function up until c of
t times f of t minus c? So what's going to happen? Until we get to c, the unit
step function is zero when it's less than c. So you're going to have zero
times I don't care what this is Zero times anything is zero,
so this function is going to be zero. Once you hit c, the unit step
function becomes 1. So once you pass c, this thing
becomes a 1, and you're just left with 1 times
your function. So then your function can behave
as it would like to behave, and you actually
shifted it. This t minus c is what actually
shifted this green function over to the right. And this is actually
going to be a very useful constructed function. And in a second, wer'e going
to figure out the Laplace transform of this, and you're
going to appreciate, I think, why this is a useful function
to look at. But now you understand at least
what it is and why it essentially shifts a function
and zeroes out everything before that point. Well, I told you that this is
a useful function, so we should add its Laplace transform
to our library of Laplace transforms.
So let's do that. Let's take a the Laplace
transform of this, of the unit step function up to c. I'm doing it in fairly general
terms. In the next video, we'll do a bunch of examples
where we can apply this, but we should at least prove to
ourselves what the Laplace transform of this thing is. Well, the Laplace transform of
anything, or our definition of it so far, is the integral from
0 to infinity of e to the minus st times our function. So our function in this case is
the unit step function, u sub c of t times f
of t minus c dt. And this seems very general. It seems very hard to evaluate
this integral at first, but maybe we can make some form of
a substitution to get it into a term that we can appreciate. So let's make a substitution
here. Let me pick a nice variable
to work with. I don't know, we're not
using an x anywhere. We might as well use an x. That's the most fun variable
to work with. Sometimes, you'll see in a
lot of math classes, they introduce these crazy Latin
alphabets, and that by itself makes it hard to understand. So I like to stay away from
those crazy Latin alphabets, so we'll just use a regular x. Let's make a substitute. Let's say that x is equal
to t minus c. Or you could, if we added t to
both sides, we could say that t is equal to x plus c. Let's see what happens
to our subsitution. And also, if we took the
derivative of both sides of this, or I guess the
differential, you would get dx is equal to dt. Or I mean, if you took dx with
respect to dt, you would get that to equal to 1. c
is just a constant. Then if you multiply both sides
by dt, you get dx is equal to dt, and that's
a nice substitution. So what is our integral going
to become with this substitution? So our integral this
was t equals 0 to t is equal to infinity. When t is equal to 0, what is
x going to be equal to? Well, x is going to be
equal to minus c. Actually, before I go there,
let me actually take a step back, because we
could progress. We could go in this direction. But we could actually simplify
it more before we do that. Let's go back to out original
integral before we even made our substitution. If we're taking the integral
from 0 to infinity of this thing, we already said what does
this integral look like or what does this function
look like? It's zero. We have this unit step function
sitting right here. We have the unit step function
sitting right there. So this whole expression
is going to be zero until we get to c. This whole thing, by definition,
this unit step function is zero until
we get to c. So this everything's going
to be zeroed out until we get to c. So we could essentially say,
you know, we don't have to take the integral from t equals
0 to t equals infinity. We could take the integral--
let me write it here. I'll just use that old
integral sign. We could just take the integral
from t is equal to c to t is equal to infinity of e
to the minus st, the unit step function, uc of t times
f of t minus c dt. In fact, at this point, this
unit step function, it has no use anymore. Because before t is equal to c,
it's 0, and now that we're only worried about values above
c, it's equal to 1, so it equals 1 in this context. I want to make that
very clear to you. What did I do just here? I changed our bottom boundary
from 0 to c. And I think you might realize
why I did it when I was working with the substitution,
because this will simplify things if we do this
ahead of time. So if we have this unit step
function, this thing is going to zero out this entire integral
before we get to c. Remember, this definite integral
is really just the area under this curve of this
whole function, of the unit step function times
all of this stuff. All of this stuff, when we
multiply it, is going to be zero until we get
to some value c. And then above c, it's going to
be e to the minus st times f of t minus c. So it's going to start doing
all this crazy stuff. So if we want to essentially
find the area under this curve, we can ignore all the
stuff that happens before c. So instead of going from t
equals 0 to infinity, we can go from t is equal to c to
infinity because there was no area before t was equal to c. So that's all I did here. And then the other thing I said
is that the unit step function, it's going to be 1
over this entire range of potential t-values, so we can
just kind of ignore it. It's just going to be 1 this
entire time, so our integral simplifies to the definite
integral from t is equal to c to t is equal to infinity of e
to the minus st times f of t minus is c dt. And this will simplify
it a good bit. I was going down the other
road when I did the substitution first, which would
have worked, but I think the argument as to why I could
have changed the boundaries would've been a harder
argument to make. So now that we had this, let's
go back and make that substitution that x is
equal to t minus c. So our integral becomes-- I'll
do it in green-- when t is equal to c, what is x? Then x is 0, right? c minus c is 0. When t is equal to infinity,
what is x? Well x is, you know, infinity
minus any constant is still going to be infinity, or if
the limit is t approaches infinity, x is still going
to be infinity here. And it's the integral of e to
the minus s, but now instead of a t, we have the
substitution. If we said x is equal to t minus
c, then we can just add c to both sides and get t
is equal to x plus c. So you get x plus c there, and
then times the function f of t minus c, but we said t minus
c is the same thing as x. And dt is the same
thing is dx. I showed you that right there,
so we can write this as dx. Now this is starting to look
a little bit interesting. So what is this equal to? This is equal to the integral
from 0 to infinity-- let me expand this out-- of e to
the minus sx minus sc times f of x dx. Now, what is the equal to? Well, we could factor out an e
to the minus sc and bring it outside of the integral, because
this has nothing to do with what we're taking the
integral with respect to. So let's do that. Let me take this guy out, and
maybe just to not confuse you, let me rewrite the
whole thing. 0 to infinity. I could rewrite this e term
as e-- actually, let me write it this way. I'll do what was already in
green as e to the minus sx times e to the minus sc. Common base. So if I were to multiply these
two, I could just add the exponents, which you would
get that up there, times f of x, d of x. This is a constant term with
respect to x, so we can just factor it out. We can just factor this thing
out right there, so then you get e to the minus sc times
the integral from 0 to infinity of e to the minus
sx times f of x dx. Now, what were we doing
here the whole time? We were taking the Laplace
transform of the unit step function that goes up to c, and
then it's 0 up to c, and it's 1 after that, of t times
some shifted function f of t minus c. And now we got that as being
equal to this thing, and we made a substitution. We simplified it a little bit. e to the minus sc times the
integral from 0 to infinity of e to the minus sx f of x dx. Something about the tablet
doesn't work properly right around this period. But this should look
interesting to you. What is this? This is the Laplace transform
of f of x. Let me write that down. What's the Laplace transform
of-- well, I could write it as f of t or f of x. The Laplace transform of f of
t is equal to the integral from 0 to infinity of e to the
minus st times f of t dt. This and this are the
exact same thing. We're just using a t here. We're using an x here. No difference. They're just letters. This is f of t. e to the minus st
times f of t dt. I could have also rewritten
it as the Laplace transform of f of t. I could write this as the
integral from 0 to infinity of e to the minus sy
times f of y dy. I could do it by anything
because this is a definite integral. The y's are going to disappear, and we've seen that. All you're left with
is a function of s. This ends up being some capital,
well, you know, we could write some capital
function of s. So this is interesting. This is the Laplace transform
of f of t times some scaling factor, and that's what
we set out to show. So we can now show that the
Laplace transform of the unit step function times some
function t minus c is equal to this function right here, e to
the minus sc, where this c is the same as this c right
here, times the Laplace transform of f of t. Times the Laplace transform--
I don't know what's going on with the tablet right
there-- of f of t. Let me write that. This is equal to-- because it's
looking funny there-- e to the minus sc times the
Laplace transform of f of t. So this is our result. Now, what does this mean? Oh, look it back-filled
it somehow. What does this mean? What can we do with this? Well, let's say we wanted to
figure out the Laplace transform of the unit
step function that starts up at pi of t. And let's say we're taking
something that we know well: sine of t minus pi. So we shifted it, right? This thing is really
malfunctioning at this point right here. Let me pause it. I just paused. Sorry if that was a little
disconcerting. I just paused the video because
it was having trouble recording at some point
on my little board. So let me rewrite the result
that we proved just now. We showed that the Laplace
transform of the unit step function t, and it goes to 1
at some value c times some function that's shifted
by c to the right. It's equal to e to the minus cs
times the Laplace transform of just the unshifted
function. That was our result. That was the big takeaway
from this video. And if this seems like some
Byzantine, hard-to-understand result, we can apply it. So let's say the Laplace
transform, this is what I was doing right before the actual
pen tablet started malfunctioning. If we want to take the Laplace
transform of the unit step function that goes to 1 at pi,
t times the sine function shifted by pi to the right, we
know that this is going to be equal to e to the minus cs. c is pi in this case, so minus
pi s times the Laplace transform of the unshifted
function. So in this case, it's
the Laplace transform of sine of t. And we know what the Laplace
transform of sine of t is. It's just 1 over s
squared plus 1. So the Laplace transform of this
thing here, which before this video seemed like something
crazy, we now know is this times this. So it's e to the minus pi s
times this, or we could just write it as e to the minus pi
s over s squared plus 1. We'll do a couple more examples
of this in the next video, where we go back and
forth between the Laplace world and the t and between
the s domain and the time domain. And I'll show you how this is a
very useful result to take a lot of Laplace transforms and
to invert a lot of Laplace transforms.",Laplace transform of the unit step function | Laplace transform | Khan Academy,"Introduction to the unit step function and its Laplace Transform

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/inverse-laplace-examples?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-of-t-n-l-t-n?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,4Mr7aEHQr8E
Lineartransformations_Matrixtransformations_LinearAlgebra_KhanAcademy-4PCktDZJH8E.en.csv,"  You now know what a
transformation is, so let's introduce a special kind of
transformation called a linear transformation. It only makes sense that we have
something called a linear transformation because we're
studying linear algebra. We already had linear
combinations so we might as well have a linear
transformation. And a linear transformation,
by definition, is a transformation-- which we
know is just a function. We could say it's from the set
rn to rm -- It might be obvious in the next video why
I'm being a little bit particular about that, although
they are just arbitrary letters -- where
the following two things have to be true. So something is a linear
transformation if and only if the following thing is true. Let's say that we have
two vectors. Say vector a and let's
say vector b, are both members of rn. So they're both in our domain. So then this is a linear
transformation if and only if I take the transformation of
the sum of our two vectors. If I add them up first, that's
equivalent to taking the transformation of each of the
vectors and then summing them. That's my first condition
for this to be a linear transformation. And the second one is, if I take
the transformation of any scaled up version of a vector
-- so let me just multiply vector a times some scalar
or some real number c . If this is a linear
transformation then this should be equal to c times
the transformation of a. That seems pretty
straightforward. Let's see if we can apply these
rules to figure out if some actual transformations
are linear or not. So let me define a
transformation. Let's say that I have the
transformation T. Part of my definition I'm going
to tell you, it maps from r2 to r2.   So if you give it a
2-tuple, right? Its domain is 2-tuple. So you give it an x1 and an x2
let's say it maps to, so this will be equal to, or it's
associated with x1 plus x2. And then let's just say it's 3
times x1 is the second tuple. Or we could have written this
more in vector form. This is kind of our
tuple form. We could have written it -- and
it's good to see all the different notations that you
might encounter -- you could write it a transformation of
some vector x, where the vector looks like
this, x1, x2. Let me put a bracket there. It equals some new vector,
x1 plus x2. And then the second component
of the new vector would be 3x1. That's a completely legitimate
way to express our transformation. And a third way, which I never
see, but to me it kind of captures the essence of what
a transformation is. It's just a mapping or
it's just a function. We could say that the
transformation is a mapping from any vector in r2 that looks
like this: x1, x2, to-- and I'll do this notation-- a
vector that looks like this. x1 plus x2 and then 3x1. All of these statements
are equivalent. But our whole point of writing
this is to figure out whether T is linearly independent. Sorry, not linearly
independent. Whether it's a linear
transformation. I was so obsessed with linear
independence for so many videos, it's hard to get it out
of my brain in this one. Whether it's a linear
transformation. So let's test our
two conditions. I have them up here. So let's take T of, let's say
I have two vectors a and b. They're members of r2. So let me write it. A is equal to a1, a2, and
b is equal to b1, b2. Sorry that's not a vector. I have to make sure that
those are scalars. These are the components
of a vector. And b2. So what is a1 plus b? Sorry, what is vector
a plus vector b? Brain's malfunctioning. All right. Well, you just add up
their components. This is the definition
of vector addition. So it's a1 plus b1. Add up the first components. And the second components is
just the sum of each of the vector's second compnents.
a2 plus b2. Nothing new here. But what is the transformation
of this vector? So the transformation of vector
a plus vector b, we could write it like this. That would be the same thing as
the transformation of this vector, which is just a1
plus b1 and a2 plus b2. Which we know it equals
a vector. It equals this vector. Or what we do is for the first
component here, we add up the two components on this side. So the first component here
is going to be these two guys added up. So it's a1 plus a2
plus b1 plus b2. And then the second component
by our transformation or function definition is just 3
times the first component in our domain, I guess
you could say. So it's 3 times the first one. So it's going to be 3 times
this first guy. So it's 3a1 plus 3b1. Fair enough. Now what is the transformation
individually of a and b? So the transformation of a is
equal to the transformation of a -- let me write it this
way -- is equal to the transformation of a1
a2 in brackets. That's another way of
writing vector a. And what is that equal to? That's our definition of our
transformation right up here, so this is going to be equal to
the vector a1 plus a2 and then 3 times a1. It just comes straight out
of the definition. I essentially just replaced
an x with a's. By the same argument, what
is the transformation of our vector b? Well, it's just going to be the
same thing with the a's replaced by the b's. So the transformation of our
vector b is going to be -- b is just b1 b2 -- so it's
going to be b1 plus b2. And then the second component in
the transformation will be 3 times b1. Now, what is the transformation
of vector a plus the transformation
of vector b? Well, it's this vector
plus that vector. And what is that equal to? Well, this is just pure vector
addition so we just add up their components. So it's a1 plus a2
plus b1 plus b2. That's just that component
plus that component. The second component is 3a1 and
we're going to add it to that second component. So it's 3a1 plus 3b1. Now, we just showed you that if
I take the transformations separately of each of the
vectors and then add them up, I get the exact same thing as
if I took the vectors and added them up first and then
took the transformation. So we've met our
first criteria. That the transformation of the
sum of the vectors is the same thing as the sum of the
transformations. Now let's see if this works
with a random scalar. So we know what the transformation of a looks like. What does ca look like,
first of all? I guess that's a good
place to start. c times our vector a is going
to be equal to c times a1. And then c times a2. That's our definition of scalar multiplication time's a vector. So what's our transformation --
let me go to a new color. What is our -- let me do a color
I haven't used in a long time, white. What is our transformation
of ca going to be? Well, that's the same thing as
our transformation of ca1, ca2 which is equal to a new vector,
where the first term -- let's go to our definition
-- is you sum the first and second components. And then the second term is 3
times the first component. So our first term
you sum them. So it's going to be
ca1 plus ca2. And then our second term
is 3 times our first term, so it's 3ca1.   Now, what is this equal to? This is the same thing. We can view it as factoring
out the c. This the same thing as c times
the vector a1 plus a2. And then the second
component is 3a1. But this thing right here,
we already saw. This is the same thing as
the transformation of a. So just like that, you see that
the transformation of c times our vector a, for any
vector a in r2 -- anything in r2 can be represented this way
-- is the same thing as c times the transformation of a. So we've met our second
condition, that when you when you -- well I just stated it, so
I don't have to restate it. So we meet both conditions,
which tells us that this is a linear transformation. And you might be thinking,
OK, Sal, fair enough. How do I know that all
transformations aren't linear transformations? Show me something
that won't work. And here I'll do a very
simple example. Let me define my
transformation.   Well, I'll do it from r2
to r2 just to kind of compare the two. I could have done it from r to r
if wanted a simpler example. But I'm going to define
my transformation. Let's say, my transformation
of the vector x1, x2. Let's say it is equal to
x1 squared and then 0, just like that. Let me see if this is a
linear transformation. So the first question
is, what's my transformation of a vector a? So my transformation of a vector
a-- where a is just the same a that I did before--
it would look like this. It would look like a1 squared
and then a 0. Now, what would be my
transformation if I took c times a? Well, this is the same thing as
c times a1 and c times a2. And by our transformation
definition -- sorry, the transformation of c times this
thing right here, because I'm taking the transformation
on both sides. And by our transformation
definition this will just be equal to a new vector that
would be in our codomain, where the first term is
just the first term of our input squared. So it's ca1 squared. And the second term is 0. What is this equal to? Let me switch colors. This is equal to c squared
a1 squared and this is equal to 0. Now, if we can assume that c
does not equal 0, this would be equal to what? Actually, it doesn't
even matter. We don't even have to make
that assumption. So this is the same thing. This is equal to c squared times
the vector a1 squared 0. Which is equal to what? This expression right here
is a transformation of a. So this is equal to c squared
times the transformation of a. Let me do it in the
same color.   So what I've just showed
you is, if I take the transformation of a vector being
multiplied by a scalar quantity first, that that's
equal to -- for this T, for this transformation that I've
defined right here -- c squared times the transformation
of a. And clearly this statement right
here, or this choice of transformation, conflicts with
this requirement for a linear transformation. If I have a c here I should
see a c here. But in our case, I have
a c here and I have a c squared here. So clearly this negates
that statement. So this is not a linear
transformation. And just to get a gut feel
if you're just looking at something, whether it's going to
be a linear transformation or not, if the transformation
just involves linear combinations of the different
components of the inputs, you're probably dealing with
a linear transformation. If you start seeing things where
the components start getting multiplied by each
other or you start seeing squares or exponents, you're
probably not dealing with a linear transformation. And then there's some functions
that might be in a bit of a grey area, but it
tends to be just linear combinations are going to lead
to a linear transformation. But hopefully that gives you
a good sense of things. And this leads up to what I
think is one of the neatest outcomes, in the next video.  ",Linear transformations | Matrix transformations | Linear Algebra | Khan Academy,"Introduction to linear transformations

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/matrix-vector-products-as-linear-transformations?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/vector-transformations?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,4PCktDZJH8E
Diracdeltafunction_Laplacetransform_DifferentialEquations_KhanAcademy-4qfdCwys2ew.en.csv,"When I introduced you to the
unit step function, I said, you know, this type of function,
it's more exotic and a little unusual relative to
what you've seen in just a traditional Calculus course,
what you've seen in maybe your Algebra courses. But the reason why this was
introduced is because a lot of physical systems kind
of behave this way. That all of a sudden nothing
happens for a long period of time and then bam! Something happens. And you go like that. And it doesn't happen exactly
like this, but it can be approximated by the unit
step function. Similarly, sometimes you have
nothing happening for a long period of time. Nothing happens for
a long period of time, and then whack! Something hits you really hard
and then goes away, and then nothing happens for a very
long period of time. And you'll learn this in the
future, you can kind of view this is an impulse. And we'll talk about
unit impulse functions and all of that. So wouldn't it be neat if we had
some type of function that could model this type
of behavior? And in our ideal function,
what would happen is that nothing happens until we get
to some point and then bam! It would get infinitely strong,
but maybe it has a finite area. And then it would go back to
zero and then go like that. So it'd be infinitely high right
at 0 right there, and then it continues there. And let's say that the area
under this, it becomes very-- to call this a function is
actually kind of pushing it, and this is beyond the math of
this video, but we'll call it a function in this video. But you say, well, what good
is this function for? How can you even
manipulate it? And I'm going to make one more
definition of this function. Let's say we call this function
represented by the delta, and that's what we do
represent this function by. It's called the Dirac
delta function. And we'll just informally say,
look, when it's in infinity, it pops up to infinity
when x equal to 0. And it's zero everywhere else
when x is not equal to 0. And you say, how do
I deal with that? How do I take the integral
of that? And to help you with that, I'm
going to make a definition. I'm going to tell you what
the integral of this is. This is part of the definition
of the function. I'm going to tell you that if I
were to take the integral of this function from minus
infinity to infinity, so essentially over the entire real
number line, if I take the integral of this function,
I'm defining it to be equal to 1. I'm defining this. Now, you might say, Sal, you
didn't prove it to me. No, I'm defining it. I'm telling you that this delta
of x is a function such that its integral is 1. So it has this infinitely
narrow base that goes infinitely high, and the area
under this-- I'm telling you-- is of area 1. And you're like, hey, Sal,
that's a crazy function. I want a little bit better
understanding of how someone can construct a function
like this. So let's see if we can satisfy
that a little bit more. But then once that's satisfied,
then we're going to start taking the Laplace
transform of this, and then we'll start manipulating
it and whatnot. Let's see, let me complete
this delta right here. Let's say that I constructed
another function. Let's call it d sub tau And this
is all just to satisfy this craving for maybe a better
intuition for how this Dirac delta function
can be constructed. And let's say my d sub tau of--
well, let me put it as a function of t because everything
we're doing in the Laplace transform world,
everything's been a function of t. So let's say that it equals 1
over 2 tau, and you'll see why I'm picking these numbers
the way I am. 1 over 2 tau when t is
less then tau and greater than minus tau. And let's say it's 0
everywhere else. So this type of equation,
this is more reasonable. This will actually look like
a combination of unit step functions, and we can actually
define it as a combination of unit step functions. So if I draw, that's
my x-axis. And then if I put my
y-axis right here. That's my y-axis. Sorry, this is a t-axis. I have to get out
of that habit. This is the t-axis, and, I mean,
we could call it the y-axis or the f of t-axis, or
whatever we want to call it. That's the dependent variable. So what's going to
happen here? It's going to be zero everywhere
until we get to minus t, and then at minus
t, we're going to jump up to some level. Just let me put that
point here. So this is minus tau, and
this is plus tau. So it's going to be zero
everywhere, and then at minus tau, we jump to this level, and
then we stay constant at that level until we
get to plus tau. And that level, I'm saying
is 1 over 2 tau. So this point right here on the
dependent axis, this is 1 over 2 tau. So why did I construct this
function this way? Well, let's think about it. What happens if I take
the integral? Let me write a nicer
integral sign. If I took the integral from
minus infinity to infinity of d sub tau of t dt, what is this
going to be equal to? Well, if the integral is just
the area under this curve, this is a pretty straightforward thing to calculate. You just look at this, and you
say, well, first of all, it's zero everywhere else. It's zero everywhere else, and
it's only the area right here. I mean, I could rewrite this
integral as the integral from minus tau to tau-- and we don't
care if infinity and minus infinity or positive
infinity, because there's no area under any of those
points-- of 1 over 2 tau d tau. Sorry, 1 over 2 tau dt. So we could write it this
way too, right? Because we can just take the
boundaries from here to here, because we get nothing whether t
goes to positive infinity or minus infinity. And then over that boundary, the
function is a constant, 1 over 2 tau, so we could just
take this integral. And either way we evaluate it. We don't even have to know
calculus to know what this integral's going
to evaluate to. This is just the area under
this, which is just the base. What's the base? The base is 2 tau. You have one tau here and
then another tau there. So it's equal to 2 tau
times your height. And your height, I just
said, is 1 over 2 tau. So your area for this function,
or for this integral, is going to be 1. You could evaluate this. You could get this is going to
be equal to-- you take the antiderivative of 1 over 2 tau,
you get-- I'll do this just to satiate your curiosity--
t over 2 tau, and you have to evaluate this
from minus tau to tau. And when you would put tau in
there, you get tau over 2 tau, and then minus minus tau over
2 tau, and then you get tau plus tau over 2 tau, that's
2 tau over 2 tau, which is equal to 1. Maybe I'm beating
a dead horse. I think you're satisfied that
the area under this is going to be 1, regardless
of what tau was. I kept this abstract. Now, if I take smaller and
smaller values of tau, what's going to happen? If my new tau is going to be
here, let's say my new tau is going to be there, I'm just
going to pick up my new tau there, then my 1 over
2 tau, the tau is now a smaller number. So when it's in the denominator,
my 1 over 2 tau is going to be something
like this, right? I mean, I'm just saying, if I
pick smaller and smaller taus. So then if I pick an even
smaller tau than that, then my height is going to be
have to be higher. My 1 over 2 tau is going
to have to even be higher than that. And so I think you see where
I'm going with this. What happens as the limit
as tau approaches zero? So what is the limit as tau
approaches zero of my little d sub tau function? What's the limit of this? Well, these things are going
to go infinitely close to zero, but this is the limit. They're never going to
be quite at zero. And your height here is going to
go infinitely high, but the whole time, I said no matter
what my tau is, because it was defined very arbitrarily,
was my area is always going to be 1. So you're going to end up with
your Dirac delta function. Let me write it now. I was going to write
an x again. Your Dirac delta function is a
function of t, and because of this, if you ask what's the
limit as tau approaches zero of the integral from minus
infinity to infinity of d sub tau of t dt, well, this should
still be 1, right? Because this thing right here,
this evaluates to 1. So as you take the limit as tau
approaches zero-- and I'm being very generous with
my definitions of limits and whatnot. I'm not being very rigorous. But I think you can kind of
understand the intuition of where I'm going. This is going to
be equal to 1. And so by the same intuitive
argument, you could say that the limit from minus infinity to
infinity of our Dirac delta function of t dt is also
going to be 1. And likewise, the Dirac delta
function-- I mean, this thing pops up to infinity at
t is equal to 0. This thing, if I were to draw my
x-axis like that, and then right at t equals 0, my
Dirac delta function pops up like that. And you normally draw
it like that. And you normally draw it so
it goes up to 1 to kind of depict its area. But you actually put an arrow
there, and so this is your Dirac delta function. But what happens if you
want to shift it? How would I represent my--
let's say I want to do t minus 3? What would the graph
of this be? Well, this would just be
shifting it to the right by 3. For example, when t equals 3,
this will become the Dirac delta of 0. So this graph will just
look like this. This will be my x-axis. And let's say that this
is my y-axis. Let me just make that 1. And let me just draw some points
here, so it's 1, 2, 3 That's t is equal to 3. Did I say that was the x-axis? That's my t-axis. This is t equal to 3. And what I'm going to do here is
the Dirac delta function is going to be zero everywhere. But then right at 3, it
goes infinitely high. And obviously, we don't have
enough paper to draw an infinitely high spike
right there. So what we do is we
draw an arrow. We draw an arrow there. And the arrow, we usually draw
the magnitude of the area under that spike. So we do it like this. And let me be clear. This is not saying that the
function just goes to 1 and then spikes back down. This tells me that the
area under the function is equal to 1. This spike would have to be
infinitely high to have any area, considering it has an
infinitely small base, so the area under this impulse function
or under this Dirac delta function. Now, this one right here is t
minus 3, but your area under this is still going to be 1. And that's why I made
the arrow go to 1. Let's say I wanted to graph--
let me do it in another color. Let's say I wanted to graph
2 times the Dirac delta of t minus 2. How would I graph this? Well, I would go to t minus 2. When t is equal to 2, you get
the Dirac delta of zero, so that's where you would
have your spike. And we're multiplying it by 2,
so you would do a spike twice as high like this. Now, both of these go to
infinity, but this goes twice as high to infinity. And I know this is all being
a little ridiculous now. But the idea here is that the
area under this curve should be twice the area under
this curve. And that's why we make the arrow
go to 2 to say that the area under this arrow is 2. The spike would have to
go infinitely high. So this is all a little
abstract, but this is a useful way to model things that are
kind of very jarring. Obviously, nothing actually
behaves like this, but there are a lot of phenomena in
physics or the real world that have this spiky behavior. Instead of trying to say,
oh, what does that spike exactly look like? We say, hey, that's a Dirac
delta function. And we'll dictate its impulse
by something like this. And just to give you a little
bit of motivation behind this, and I was going to go here in
the last video, but then I kind of decided not to. But I'm just going to show it,
because I've been doing a lot of differential equations and
I've been giving you no motivation for how this applies
in the real world. But you can imagine, if I have
just a wall, and then I have a spring attached to some mass
right there, and let's say that this is a natural state
of the spring, so that the spring would want to be here,
so it's been stretched a distance y from its kind of
natural where it wants to go. And let's say I have some
external force right here. Let's say I have some external
force right here on the spring, and, of course, let's
say it's ice on ice. There's no friction
in all of this. And I just want to show you
that I can represent the behavior of this system with
the differential equation. And actually things like the
unit step functions, the Dirac delta function, actually start
to become useful in this type of environment. So we know that F is equal to
mass times acceleration. That's basic physics
right there. Now, what are all
of the forces on this mass right here? Well, you have this
force right here. And I'll say this is a positive
rightward direction, so it's that force, and then
you have a minus force from the spring. The force from the spring
is Hooke's Law. It's proportional to how far
it's been stretched from its kind of natural point, so its
force in that direction is going to be ky, or you could
call it minus ky, because it's going in the opposite direction
of what we've already said is a positive
direction. So the net forces on this is F
minus ky, and that's equal to the mass of our object times
its acceleration. Now, what's its acceleration? If its position is y, so if y
is equal to position, if we take the derivative of y with
respect to t, y prime, which we could also say dy dt, this
is going to be its velocity. And then if we take the
derivative of that, y prime prime, which is equal to d
squared y with respect to dt squared, this is equal
to acceleration. So instead of writing a, we
could right y prime prime. And so, if we just put this
on the other side of the equation, what do we get? We get the force-- this force,
not just this force; this was just F equals ma-- but this
force is equal to the mass of our object, times the
acceleration of the object plus whatever the spring
constant is for the spring plus k times our position,
times y. So if you had no outside force,
if this was zero you'd have a homogeneous differential
equation. And in that case, the spring
would just start moving on its own. But now this F, all of a
sudden, it's kind of a non-homogeneous term, it's what
the outside force you're applying to this mass. So if this outside force was
some type of Dirac delta function-- so let's say it's t
minus 2 is equal to our mass times y prime prime plus our
spring constant times y, this is saying that at time is equal
to 2 seconds, we're just going to jar this thing
to the right. And it's going to have an-- and
I'll talk more about it-- it's going to have
an impulse of 2. It's force times time is going
to be-- or its impulse is going to have 1. And I don't want to get too much
into the physics here, but its impulse or its change in
momentum, is going to be of magnitude 1, depending on
what our units are. But anyway, I just wanted to
take a slight diversion, because you might think Sal is
introducing me to these weird, exotic functions. What are they ever going
to be good for? But this is good for the idea
that sometimes you just jar this thing by some magnitude
and then let go. And you do it kind of infinitely
fast, but you do it enough to change the momentum of
this in a well-defined way. Anyway, in the next video, we'll
continue with the Dirac delta function. We'll figure out its Laplace
transform and see what it does to the Laplace transforms
of other functions.",Dirac delta function | Laplace transform | Differential Equations | Khan Academy,"Introduction to the Dirac Delta Function

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-of-the-dirac-delta-function?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/inverse-laplace-examples?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,4qfdCwys2ew
RuleofSarrusofdeterminants_Matrixtransformations_LinearAlgebra_KhanAcademy-4xFIi0JF2AM.en.csv,"I don't want to beat a dead
horse by showing you all of the different ways to find a
determinant, but it might be useful to beat this dead horse
because you'll see it done in different ways, in different
context. And I thought I would at least
show you that what we have been covering, so far, is very
consistent with a way of determining, or finding
determinants, that you might have been exposed to in your
Algebra Two class. It's called the rule
of Sarrus. Let me just prove it for you. Let's say we want to
find a determinant. Let's say you want to find
this determinant. So our matrix is a, b,
c, d, e, f, g, h, i. We know how to do this. This is equal to, let's just
go down that first row, a times the determinant of e,
f, h, i minus b times the determinant of d, g, f,
i plus c times the determinant of d, e, g, h. And what are these equal to? This is going to be equal to
a, so let me write this, a times ei minus fh. And this is going to be minus
b times dI minus fg. This is going to be plus c times
dh minus eg and if we multiplied this out we get this
is equal to aei minus afh minuses bdi plus right, minus
times a minus, plus bfg plus cdh minus ceg. Now let me group the positive
and the negative terms. So this term is positive, this
term is positive and that term is positive. So we have this being equal
to aei plus bfg plus cdh. Those are our positive terms. And then our negative
terms are here. We have that term, that
term, and that term. So we have minus afh minus
bdi minus ceg. So this is a formula for the
determinant of this matrix right here. Let's see what it actually
looks like. Let me rewrite it. Let me rewrite our matrix. We do it in green. So we have a, b, c,
d, e, f, g, h, i. We wanted to find
its determinant. So let me show you something
interesting here. aei is what? aei is a product of this guy,
this guy, and that guy. So, you're essentially
going along that diagonal right there. Now what is bfg? You're going this guy, this guy,
and then you're going all the way down to this guy. So it's like if you imagine that
when you come out of this side, you come out
of this side. There's some video games where
you go out one end and you end up showing up on the other
end like that. It would also be a diagonal. Or even a better way to
visualize it, let me redraw these two columns. Let me augment this
determinant. It's not official terminology,
but I think you'll get what I'm trying to do. So if I write these first
two columns again. a, d, g, and b, e, h. This guy right here bfg, it's
this one right here, this diagonal right there. And then you might guess
what's about to happen. Where is cdh? It's this diagonal. It's that diagonal
right there. So you take this product, add it
to this product, add it to this product. And then you subtract
these guys. Now what are these guys? Where is the afh? That one right there. So you subtract out afh, and
then you subtract out bdi. bdi is that one right there. And then you have ceg, which
is this one right there. So the Rule of Sarrus, sounds
like something in The Lord of the Rings. The Rule of Sarrus is
essentially a quick way of memorizing this little
technique. You write the two columns
again, you say, ok, this product plus this product plus
this product, minus this product minus this product
minus that product. Let's actually do it with the 3
by 3 matrix to make it clear that the Rule of Sarrus
can be useful. So let's say we have the
matrix, we want the determinant of the matrix, 1, 2,
4, 2, minus 1, 3, and then we have 4, 0, minus 1. We want to find that
determinant. So by the Rule of Sarrus,
we can rewrite these first two columns. So 1, 2, 2, minus 1, 4, 0. We rewrote those first
two columns. And to figure out this
determinant we take this guy. What is this going to be? 1 times minus 1 times minus 1. That is just a 1. Right, the minuses cancel out. Plus this guy, plus this
product right here. I should draw a little
bit neater. So what is this? 2 times 3 times 4. 2 two times 3 is 6. 6 times 4 is 24, plus 24. And then we take this
guy right here. 4 times 2 times 0, anything
times 0 is a 0. So that's going to be plus 0. And then we subtract
out these guys. So you have 4 times
4, times minus 1. That's minus 16. It's minus 16, but we're
going to be on the minus side of things. So it's 4 times minus 1
times 4, is minus 16. But since were going to
do a minus on it, it's going to be plus 16. So it's 16. Then you have a 0
times 3 times 1. That of course is
going to be 0. Would be a minus 0, but
we can ignore it. So we can say plus 0 or
minus 0 same thing. Then you have a minus
1 times 2 times 2. So that's 4 times minus
1 which is minus 4. When you go in this direction,
from the top right to the bottom left, you are
subtracting. So this would be a minus 4 but
since we're subtracting, this becomes a plus 4. So the value of our determinant
is equal to, by the Rule of Sarrus, we're
going to have 16 plus 4 is a 20. 20 plus 25 which
is equal to 45. So that actually is, I'd have
to say, a faster way of computing this 3 by
3 derivative. And I just want to show you this
is completely equivalent to the definition that I
introduced you to a couple videos ago.",Rule of Sarrus of determinants | Matrix transformations | Linear Algebra | Khan Academy,"A alternative ""short cut"" for calculating 3x3 determinants (Rule of Sarrus)

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-determinant-when-row-multiplied-by-scalar?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-determinants-along-other-rows-cols?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,4xFIi0JF2AM
Definingtheanglebetweenvectors_Vectorsandspaces_LinearAlgebra_KhanAcademy-5AWob_z74Ks.en.csv,"A couple of videos ago we
introduced the idea of the length of a vector. That equals the length. And this was a neat idea because
we're used to the length of things in two- or
three-dimensional space, but it becomes very abstract when
we get to n dimensions. If this has a hundred
components, at least for me, it's hard to visualize a hundred
dimension vector. But we've actually defined
it's notion of length. And we saw that this is actually
a scalar value. It's just a number. In this video, I want to attempt
to define the notion of an angle between vectors. As you can see, we're building
up this mathematics of vectors from the ground up, and we can't
just say, oh, I know what an angle is because
everything we know about angles and even lengths, it
just applies to what we associate with two- or
three-dimensional space. But the whole study of linear
algebra is abstracting these ideas into multi-dimensional
space. And I haven't even defined what
dimension is yet, but I think you understand that idea
to some degree already. When people talk about one or
two or three dimensions. So let's say that I have some
vector-- let's say I have two vectors, vectors a and b. They're nonzero and they're
members of Rn. And I don't have a notion of
the angle between them yet, but let me just draw them out. Let me just draw them as if
I could draw them in two dimensions. So that would be vector
a right there. Maybe that's vector
b right there. And then this vector right
there would be the vector a minus b. And you can verify that just the
way we've learned to add and subtract vectors. Or you know, this is
heads to tails. So b plus a minus b is of
course, going to be vector a. And that all just
works out there. To help us define this notion
of angle, let me construct another triangle that's going
to look a lot like this one. But remember, I'm just doing
this for our simple minds to imagine it in two dimensions. But these aren't necessarily
two-dimensional beasts. These each could have a
hundred components. But let me make another
triangle. Well, it should look similar. Say it looks like that. And I'm going to define the
sides of the triangles to be the lengths of each
of these vectors. Remember, the lengths of each of
these vectors, I don't care how many components there
are, they're just going to be your numbers. So the length of this side right
here is just going to be the length of a. The length of this side right
here is just going to be the length of vector a
minus vector b. And the length of this side
right here is going to be the length of vector b. Now the first thing we want to
make sure is that we can always construct a triangle
like that. And so under what circumstances
could we not construct a triangle
like this? Well we wouldn't be able
construct a triangle like this if this side. if b, if the magnitude-- so
let me write this down. It's kind of a subtle
point, but I want to make this very clear. In order to define an angle, I
want to be comfortable that I can always make this
construction. And I need to make sure that--
let me write reasons why I couldn't make this
construction. Well what if the magnitude of
b was greater than, or the length of vector b was greater
than the length of vector a plus the length of
vector a minus b? In two dimensions, I could never
draw a triangle like that then because you would
have this length plus this length would be shorter than
this thing right here. So you could never
construct it. And I could do with
all the sides. What if this length was larger
than one of these two sides? Or what if that length
was larger than one of those two sides? I could just never draw
a two-dimensional triangle that way. So what I'm going to do is I'm
going to use the triangle-- the vector triangle inequality
to prove that each of these sides is less than or equal to
the sum of the other sides. I could do the same thing. Let me make the point clear. I could show that if a, for
whatever reason, was greater than the other sides plus b,
then I wouldn't be able to create a triangle. And the last one of course is
if a minus b, for whatever reason, was greater than the
other two sides, I just wouldn't be able to draw
a triangle in a plus b. So I need to show that for any
vectors, any real vectors-- nonzero, real vectors that are
members of Rn-- that none of these can ever happen. I need to prove that none
of those can happen. So what does the triangle
inequality tell us? The triangle inequality tells
us that if I have the sum of two vectors, if I take the
length of the sum of two vectors, that that is always
going to be less than-- and these are nonzero vectors. This is always going to be less
than or equal to the sum of each of their individual
lengths. So let's see if we can
apply that to this triangle right here. So what is the magnitude,
the length of a? Well I can rewrite vector a. What is vector a equal to? Vector a is equal to vector
b plus vector a minus b. I mean I'm just rewriting
the vector here. I'm just rewriting a here as a
sum of the other two vectors. Nothing fancy there. I haven't used the triangle
inequality or anything. I've just used my definition
of vector addition. But here now, if I put little
parentheses here, now I can apply the triangle inequality. And I say, well,
you know what? This is going to be, by the
triangle inequality, which we've proved, it's going to be
less than or equal to the lengths of each of
these vectors. Vector b plus the length
of vector a minus b. So we know that the length of a
is less than the sum of that one and that one. So we don't have to worry about
this being our problem. We know that that is not true. Now let's look at b. So is there any way that I can
rewrite b as a sum of two other vectors? Well sure. I can write it as a sum of a
plus, let me put it this way. If that vector right there is a
minus b, the same vector in the reverse direction is going
to be the vector b minus a. So a plus the vector
b minus a. That's the same thing as b. And you can see it right here. The a's would cancel
out and you're just left with the b there. Now by the triangle inequality,
we know that this is less than or equal to the
length of vector a plus the length of vector b minus a. Now you're saying hey, Sal,
you're dealing with b minus a. This is the length
of a minus b. And I can leave this for you
to prove it based on our definition of vector lengths,
but the length of b minus a is equal to minus 1 times
a minus b. And I'll leave it to you
to say that look, these lengths are equal. Because essentially-- I could
leave that, but I think you can take that based on just the
visual depiction of them that they're the exact same
vectors, just in different directions. And I have to be careful with
length because it's not just in two dimensions. But I think you get the idea and
I'll leave that for you to prove that these lengths
are the same thing. So we know that b is less
than the length of those two things. So we don't have to worry about
that one right there. Finally, a minus b. The magnitude or the length
of vector a minus b. Well I can write that as the
length of-- or I can write that as vector a plus
vector minus b. If we just put a minus b right
there and go in the other directions, we could say minus
b, which would be in that direction plus a would give
us our vector a minus b. Actually, I don't even
have to go there. That's obvious from this. I just kind of put the negative
in the parentheses. Well the triangle inequality,
and this might seem a little mundane to you, but it really
shows us that we can always define a regular planar triangle
based on these vectors in this way. It tells us this is less than or
equal to the length of our vector a plus the length
of minus b. And I just said and you could
prove it to yourself, that this is the same thing
as the length of b. So we just saw that
this is definitely less than those two. This is definitely less
than those two. And that is definitely
less than those two. None of the reasons that would
keep us from constructing a triangle are valid. So we can always construct a
triangle in this way from any arbitrary nonzero
vectors in Rn. We can always construct this. Now, to define an angle, let
me redraw it down here. Let me redraw the vectors, maybe
a little bit bigger. That's vector a. This is vector b. And then let me just
draw it this way. This is the vector
right there. That is the vector a minus b. And we said we're going to
define a corresponding regular, run of the mill,
vanilla triangle whose lengths are defined by the lengths
of the vectors, by the vector lengths. So this is the length
of b, that side. This is the length
of a minus b. And then this is the
length of a. Now that I know that I can
always construct a triangle like this, I can attempt to
define-- or actually, I will define my definition of an angle
between two vectors. So we know what an angle
means in this context. This is just a regular, run of
the mill, geometric triangle. Now, my definition of an angle
between two vectors I'm going to say-- so this is what
I'm trying to define. This is what I'm going
to define. These can have arbitrary number
of components, so it's hard to visualize. But I'm going to define this
angle as the corresponding angle in a regular, run of the
mill triangle where the sides of the run of the mill triangle
are the two vectors and then the opposite side is
the subtraction, is the length of the difference between
the two vectors. This is just the definition. I'm defining this, the angle
between two vectors in Rn that could have an arbitrary number
of components, I'm defining this angle to be the same as
this angle, the angle between the two sides, the two lengths
of those vectors in just a regular, run of the
mill triangle. Now, what can I do with this? Well, can we find a relationship
between all of these things right here? Well sure. If you remember from your
trigonometry class, and if you don't, I've proved it
in the playlist. You have the law of cosines. And I'll do it with an arbitrary
triangle right here just because I don't want
to confuse you. So if this is side a, b, and c
and this is theta, the law of cosines tells us that c squared
is equal to a squared plus b squared minus 2ab
cosine of theta. I always think of it as kind
of a broader Pythagorean theorem because this
thing does not have to be a right angle. It accounts for all angles. If this becomes a right angle,
then this term disappears and you're just left with the
Pythagorean theorem. But we've proven this. This applies to just regular,
run of the mill triangles. And lucky for us, we have a
regular, run of the mill triangle here. So let's apply the law
of cosines to this triangle right here. And the way I drew it,
they correspond. The length of this
side squared. So that means the length
of a minus b squared. Length of vector a minus vector
b, that's just the length of that side. So I'm just squaring
that side. It equals the length of vector
b squared plus the length of vector a squared minus 2 times
the length of-- I'll just write two times length of vector
a times the length of vector b times the cosine of
this angle right here. Times the cosine
of that angle. And I'm defining this angle
between these two vectors to be the same as this
angle right there. So if we know this angle, by
definition, we know that angle right there. Well, we know that the square
of our lengths of a vector when we use our factor
definition of length, that this is just the same thing as
a vector dotted with itself. So that's a minus
b dot a minus b. It's all going to be equal to
this whole stuff on the right-hand side. But let me simplify
the left-hand side of this equation. a minus b dot a minus b, this is
the same thing as a dot a-- those two terms--
minus a dot b. And then I have minus b dot a. Those two terms right there. And then you have the
minus b dot minus b. That's the same thing
as a plus b dot b. Remember, this is just a
simplification of the left-hand side. And I can rewrite this. a dot a, we know that's just
the length of a squared. a dot b and b dot a are
the same thing, so we have two of these. So this right here, this term
right there will simplify to minus 2 times a dot b. And then finally, b dot b. We know that that's just the
length of b squared. I just simplified or maybe I
just expanded-- that's a better word. When you go from one term here
to three terms, you can't say you simplified it. But I expanded just the
left-hand side and so this has to be equal to the right-hand
side by the law of cosines. So that is equal to-- I almost
feel like instead of rewriting it, let me just copy
and paste it. What did I just do? Copy, edit. Copy and paste. There you go. I don't know it that
was worth it. But maybe I saved a little
bit of time. So that is equal to
that right there. And then we can simplify. We have a length of a
squared here, length of a squared there. Subtract it from both sides. The length of b squared here,
length of b squared there. Subtract it from both sides. And then, what can we do? We can divide both sides by
minus 2 because everything else has disappeared. And so that term and that term
will both become 1's. And all we're left with is the
vector a dot the vector b. And this is interesting because
all of a sudden we're getting a relationship
between the dot products of two vectors. We've kind of gone away from
their definition by lengths. But the dot product of two
vectors is equal to the product of their lengths,
their vector lengths. And they can have an arbitrary
number of components. Times the cosine of the
angle between them. Remember, this theta, I said
this is the same as when you draw this kind of analogous,
regular triangle. But I'm defining the angle
between them to be the same as that. So I can say that this is
the angle between them. And obviously, the idea of
between two vectors, it's hard to visualize if you go beyond
three dimensions. But now we have it at least,
mathematically defined. So if you give me two vectors we
can now, using this formula that we've proved using this
definition up here, we can now calculate the angle between
any two vectors using this right here. And just to make it clear, what
happens if a is a-- and maybe it's not clear from that
definition, so I'll make it clearer here that by definition,
if a is equal to some scalar multiple of b where
c is greater than 0, we'll define theta
to be equal to 0. And if c is less than 0, so a is
collinear, but goes in the exact opposite direction, we'll
define theta to be equal to 180 degrees. And that's consistent with what
we understand about just two-dimensional vectors. If they're collinear and
kind of the scalar multiples the same. That means a looks something
like that and b looks something like that. So we say oh, that's
a 0 angle. And if they go the other way,
if a looks something like-- this is the case where a is
just going in the other direction from b. a goes like that and b goes like
that, we define the angle between them to be
180 degrees. But everything else is pretty
well defined by the triangle example. I had to make the special case
of these because it's not clear you really get a triangle
in these cases because the triangle
kind of disappears. It flattens out if a and b are
on top of each other or if they're going in the exact
opposite direction. So that's why I wanted to make
a little bit of a side note right there. Now, using this definition of
the angle between the vectors, we can now define the idea
of perpendicular vectors. So we can now say perpendicular
vectors-- this is another definition-- and
this won't be earth shattering, but it kind of is
because we've generalized this to vectors that have an
arbitrary number of components. We're defining perpendicular
to mean the theta between-- two vectors a and b are
perpendicular if the angle between them is 90 degrees. And we can define that. We can take two vectors,
dot them. Take their dot product. Figure out their two lengths and
then you could figure out the angle between them. And if it's 90 degrees. you can say that they are
perpendicular angles. And I want to be very clear here
that this is actually not defined for the 0 vector
right here. So this situation right here,
not defined for the 0 vector. Because if you have the 0
vector, then this quantity right here is going to be 0 and
then this quantity right here is going to be 0. And there's no clear definition
for your angle. If this is 0 right here, you
did 0 is equal to 0 times cosine of theta. And so if you wanted to solve
for theta you'd get cosine of theta is equal to 0/0,
which is undefined. But what we can do is create a
slightly more general word than the word perpendicular. So you have to have a defined
angle to even talk about perpendicular. If the angle between two vectors
is 90 degrees, we're saying by definition, those two
vectors are perpendicular. But what if we made the
statement and we can-- if you look at them, if the angle
between two vectors is 90 degrees, what does that mean? So let's say that theta
is 90 degrees. Let me draw a line here. Let's say that theta
is 90 degrees. Theta is equal to 90 degrees. What does this formula
tell us? It tells us that a dot b is
equal to the length of a times the length of b times cosine
of 90 degrees. What's cosine of 90 degrees? It's 0. You can review your unit circle
if that doesn't make a lot of sense. But that is equal to 0, so this
whole term is going to be equal to 0. So if theta is equal to
90 degrees, then a dot b is equal to 0. And so this is another
interesting takeaway. If a and b are perpendicular,
then their dot product is going to be equal to 0. Now if their dot product is
equal to 0, can we necessarily say that they are
perpendicular? Well what if a or b
is the 0 vector? The 0 vector-- let me call
it z for 0 vector. Or I could just draw. The 0 vector dot anything is
always going to be equal to 0. So does that mean that the 0
vector is perpendicular to everything? Well no. Because the 0 vector I said, we
have to have the notion of an angle between things in
order to use the word perpendicular. So we can't use the 0 vector. We can't say just because two
vectors dot products are equal to 0 that they are
perpendicular. And that's because the 0 vector
would mess that up because the 0 vector
is not defined. But if we say, and we have been
saying, that a and b are nonzero, if they are nonzero
vectors, then we can say that if a and b are nonzero and their
dot product is equal to 0, then a and b are
perpendicular. So now it goes both ways. But what if we just have this
condition right here? What if we just have the
condition that a dot b is equal to 0? It seems like that's kind of
just a simple, pure condition. And we can write a
word for that. And these words are often used
synonymously, but hopefully you understand the
distinction now. We can say that if two vectors
dot product is equal to 0, we will call them orthogonal. As I always say, spelling
isn't my best subject. But this is kind
of a neat idea. This tells us that-- well, that
all perpendicular vectors are orthogonal. And it also tells us that the
0 vector is orthogonal to everything else. To everything, even to itself. The 0 dot 0 vector
you still get 0. So by definition,
it's orthogonal. So for the first time probably
in your mathematical career, you're seeing that the words--
you know, every time you first got exposed to the words
perpendicular and orthogonal in geometry or maybe in physics
or wherever else, they were always kind of
the same words. But now I'm introducing a nice,
little distinction here and you can kind of be a little smart aleck with teachers. Oh, you know, it's perpendicular
only is the vectors aren't-- if neither
of them are 0 vector. Otherwise, if their dot product
is 0, you can only say that they're orthogonal. But if they're nonzero you
could say that they're orthogonal and perpendicular. But anyway, I thought that I
would introduce this little distinction for you in case you
have someone that likes to trip you up with words. But it also I think highlights
that we are building a mathematics from the ground up
and we have to be careful about the words we use. And we have to be very precise
about our definitions. Because if we're not precise
about our definitions and we build up a bunch of mathematics
on top of this and do a bunch of proofs, one day we
might scratch our heads and read some type of
weird ambiguity. And it might have all came out
of the fact that we weren't precise enough in defining what
some of these terms mean. Well anyway, hopefully you
found this useful. We can now take the angle or we
can now determine the angle between vectors with an
arbitrary number of components.",Defining the angle between vectors | Vectors and spaces | Linear Algebra | Khan Academy,"Introducing the idea of an angle between two vectors

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/defining-a-plane-in-r3-with-a-point-and-normal-vector?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/linear-algebra-vector-triangle-inequality?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,5AWob_z74Ks
InorderSuccessorinabinarysearchtree-5cPbNCrdotA.en.csv,"In this lesson, we're going to solve
another interesting problem on binary search tree and the problem is, given a node in a
binary search tree we need to find its inorder successor
i.e. the node that would come immediately after the given node in
inorder traversal of the binary search tree. As we know, in inorder traversal of a
binary tree we first visit the left subtree then
that root and then the right subtree. Left and
right subtrees are visited recursively in same manner. So for each node, we
first visit its left subtree then the node itself and then its right
subtree. We have already thiscussed inorder
traversal in detail in a previous lesson in the series. You can check the description of the
video of a link to it. Inorder implementation will basically
be a recursive function something like what I'am showing in right
here. There are two recursive calls in this function. One to visit the left subtree had
another to visit the right subtree. Time complexity of inorder traversal is
O(N) where n is number of nodes in the tree. We visit each not exactly once. So time taken is proportional to a
number of nodes in the tree. I have drawn a binary search tree of
integers here. Binary search tree, as we know is a
binary tree in which for each node value of nodes and
left his lesser and value of nodes in right is greater.
Let's quickly see what will be the inorder traversal for this binary
search tree. We will start at root of the tree. Now for any node, we first need to visit all nodes in its left and then only we
can visit that node so we'll have to go left. Basically, we will make a recursive calls to
go to left child of this node. For this guy once again we have
something left, so we will make another recursive call and
go to its left child. Now we are at this node with value 8 and they will have to go left one more
time and now for this node with value 6 which
is a leaf node we have nothing left. So they can
simply say that it's left subtree is done and hence we can visit the guy. Visiting
for me is reading the data in that node. I'll
write to data here and now for this node, there is nothing in right
as well so we can simply say that it's right is also
done and now we're completely done for this guy. So recursive call corresponding to
this node will finish and we will go back to call corresponding to its parent. If we will come back to a node from its
left child then it would be unvisited because
we can't visit a node until its left is done. So when you coming back to 8, 8 is
unvisited so we can simply visit this node that is read the data in this node. When I'll 
visit a node, I'll paint it in yellow and now there's
nothing in right of this node so we can simply say that right is done.
Now we are done with this nodes, so call corresponding to this node will
finish and we will go back to its parent. Once again we're
coming back to the parent from the left, so the parent that
is this node with value 10 is unvisited. If we would come back to a node from
right then it would already be visited, so I'm visiting 10 and now we can go
to right of 10. So far we have visited 3 nodes. We first visited node with value 6 and
then be visited node to value 8, so 8 is successor of 6 and then 10 is successor of 8. Now let's see what will be the successor
of 10. For nodes with values 6 and 8 there was nothing in right, so we were unwinding and going to the 
parent but for a node if there would be something in right that is if there
would be a right subtree and then its successor would definitely
be in its right subtree because after visiting that node
we will go right. Now at the stage, we are at this node with value 12. For this guy we will first go left and now we are
at node with value 11 which is a leaf node. There's nothing left so we
can simply say that left is done and we can print the data that is visit
this node so inorder successor of 10 is 11. Now
for node with value 11, there is nothing in right. So we will go back to this parent and
now we can visit this guy. So after 11, we have 12. There's nothing
in right of 12 so called for this guy will finish and we
will go to its parent. Now we're coming back to 10 again but
this time from right so this guy is already visited. So we need not do anything. We can simply go to
its parent and now we are at this node with value 15. We are coming from left. This
guy is unvisited so we can visit it and now
we can go to its right. We will go on like this.Successor of 15
would be 16 and after 16 we will print 17 and then after 17 we will print 20 then 25 and the last element would be 27. So this is an inorder traversal of this
binary search tree. Noticed that we have printed the
integers in sorted order. When we perform inorder traversal on
a binary search tree then elements are visited in sorted
order. Now the problem is that we want to solve this given a value in the tree, we want to find
its inorder successor. In a binary search
tree, it would be the next higher value in the
tree but what's the big deal here.
Can't we just perform inorder traversal and while performing the traversal
figure out the successor. Well we can do so but it will be
expensive. Running time of inorder is 
O(N) and we may want to do better. Finding
next and previous element in some data could be a frequently performed
operation and good thing about binary search tree is that frequently performed
operations like insertion and deletion and search happen
in O(H) where H is height of the tree. So it
would be good if we are able to find a successor and predecessor in O(H). We always
try to keep a tree balanced to minimize its height.
Height of up balanced binary tree is log N to base 2 and O(log N) running time for any operation is
almost the best running time that we can have.
So can we find inorder successor in O(H). I have redrawn example tree here.
Let's see what we can to do in various cases. What node would we visit after this
node with value 10. Can we deduced this logically. Well, if
you remember the simulation of inorder traversal that we had done earlier and then if we have already visited this
node then we are done with its left subtree and
we have read the data in this node and we need to
go right. Now in the right subtree, we will have
to go left as long as it's possible to go and if we
can't go left anymore like here, there's nothing left of this
node with value 11 then this is the node that I am visiting next.
So for a node if there is rightsubtree then inorder successor
would be to left most node in its right subtree. In a BST it would be the node with minimum value in its right
subtree. I would say this is case one. In this case, all we need to do is we
need to go as left as possible in right subtree. In a BST it will also mean finding the
minimum in right subtree left most node will also be the minimum
in the subtree. Now this is one case our node here has
right subtree. What would be the successor if there
would be no right subtree. What node would we visit after this
node with value 8. This guy does not have right
subtree. If we have already visited this guy,
then we have already visited its left and this node itself and there is
nothing in right, so we can see that right is also visited but we have not found a successor yet.
Now where do we go from here. Well, if you remember the simulation that
we had done earlier. We need to go to the parent of
this node and if we are going to the parent from
left which is the case here then the
parent would be unvisited. For this node with value 10, we just
finished its left subtree and we're coming back. So now we can visit to node. So this
is my successor. Let's now pick another node with no
right subtree. What would be inorder successor of this
node that value 12. What node would be visit next. Now here,
once again we donot have a right subtree for this
node so we must go back to its parent and see
if it's unvisited. But if we're going to
the parent from right, if the node that we just visited is
the right child which is the case here, then the 
parent would already be visited because we are coming back after
visiting its right subtree. This node must have been visited before
going right. So what should we do. Now the recursion
will rollback further and we need to go to
parent of 10 and now we're going to 15 from left. So
this guy is unvisited. So we can visit this node
and this is my successor. If the node does not have the right
subtree, we need to go to the nearest ancestor for which given node would be in its left subtree. Here for 12 the first went to 10 but 12 is in right
subtree of 10 so we went the next ancestor 15 and 12 is in left of 15, so this is the nearest ancestor for a
which 12 is in left and hence this is my inorder
successor. This algorithm works fine but there is an
issue. how do we go from a node to its parent. Well, we can design a tree such that node
can have reference to its parent. So far in most
lessons, we have defined node as a structure with 3 fields
something like this. This is how we would define node in C or
C++. We have one field to store data and we
have two pointers to node to store reference or addresses of left and right children. Often it
makes a lot of sense to have one more feed to store the address of parent. We can design a tree like this
and then they will not have problem walking the tree up using parent
link. We can easily go to the ancestors but
what if there is no link to parent. In this case what we can do is we can
start at root and walk the tree from root to the given
node. In a BST this is really easy. For 12
we will start at root. 12 is lesser than value in root so we 
need to go left and now we are 10. Now 12 is greater
than 10, so we need to go right and now we are 12. If we will walk the
tree from root to the given node. We will go through
all the ancestors of two given node. Inorder successor would be the deepest
node or deepest ancestors in this path for which given node would be in left
subtree. 12 has only two ancestors. We have 10 but 12 is in right of 10 and then the
15 and 12 is in left of 15 so 15 as my successor. Now let's use this
technique to find successor of 6. We will first walk down from root to
this node. 6 is in left for all the ancestors but the
deepest ancestor for which 6 in left is this node with value 8. So this is my
successor. Remember we need to look at ancestors only if the is no right subtree. For 6
that is no right subtree. Okay so algorithm looks good. Let's now
write code for this. In my C++ code here, I am going
to write a function named Getsuccessor that will take address of
root node and address of another node for
which we need to find a successor and this function will return address of the successor node. We could
design this function differently. Instead of taking pointer to the node
for which we want to find a successor as argument, we could just take that data as argument and
for this data for this element we can find a successor
node and return its address and that's why the
return type here is struct node* because we will be returning address in a pointer or what
we can also do is, we can return the element itself the successor element
itself. We can implement with to any of these
signatures. Let's implement this one. We will pass the data in current node
and we will return back to address of the successor. Now the first thing that we need to do
is, we need to search the node with this data. I'm going to make call to a function
named Find that will take address of the root node
and the data and return me pointer to the node with this data. If
this function returns me null that is if the data not found in the
tree. We can simply return null else we have address of the current node in this pointer to node
that we have named current. Now in a BST this search operation will
cost us O(H) where H is height of the tree. Search in a BST is not very expensive. We could have avoided this search if
we would have passed address of the current node instead of
passing the data as to second argument but let's go
with this. Let's now find the successor of this node.
If this node has right subtree that is if right subtree is not null, we
need to go to the left most node in the right subtree. I have
declared a temporary pointer to node here and initially, I have set it to
current-&gt;right and with this while loop I'll you go to the leftmost node. While there is something in the left
keep going and finally when I'll come out of this
loop, I'll have address of left most node in the right subtree and I can return this
address. This particular node will also be the node
with minimum value in right subtree. I'll move this code in another function. I
have written this function name FindMin that will return node with minimum
value in a tree or subtree. In Getsuccessor function, I'll simply
say return FindMin and I'll pass the address of right child of current node. So basically, I'm passing the right
subtree here. Okay now let's talk about case 2. If they're is no right subtree, what we need
to do is we need to walked the tree from root till
current node and we need to find the deepest
ancestor for which current node will be in its left
subtree. What I'm going to do here is, I'm going to declare a pointer to node named successor and initially I'll set it as null and I'll have another pointer to node
named ancestor and initially as set this as root, and
with this while loop we will walked a tree till we have not reached the current
node. To walk the tree, we will use the property of binary search tree that for each node value of nodes in left is lesser
and value of nodes right is greater. If data in current node is less than
the data in ancestor then first of all this ancestor may be
my inorder successor because the current node is in its left.
So what we can do is, we can set the guy as
successor and we can go left. While traversing if we will find a
deeper node with this property that current node
will be in its left subtree then successor will be updated else
if the current node lies in right, we simply need to move right.
When will come out of this while loop, successor
will either been null or it will the address of some node. Not
all nodes in the tree will have a successor. Node with maximum value will not have a
successor. After coming out this while loop, we can
return the successor. So this is my get successor function and
I think this should work. You can find link
to complete source code and description of this video. Overall time complexity of this function
will be O(H) and this is what you wanted. We
wanted to find successor in O(H). Here we're already performing the
search in O(H). Finding minimum will also take 
O(H) and walking the tree from root to a node in BST will also take
O(H). So, overall this is O(H). If you have understood this code
this logic it then it should be very easy for you writing function to find inorder predecessor. I encourage you to write it.
I'll stop here. Incoming lessons, we will solve some more interesting
problems on binary trees and binary search trees. Thanks for watching.",Inorder Successor in a binary search tree,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have discussed efficient algorithm to find Inorder successor of a Node in binary search tree. 

See source code here:
https://gist.github.com/mycodeschool/6515e1ec66482faf9d79

See video on Inorder Traversal here:
https://www.youtube.com/watch?v=gm8DUJJhmY4

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,5cPbNCrdotA
Derivingamethodfordetermininginverses_Matrixtransformations_LinearAlgebra_KhanAcademy-6DpzCKJBsz0.en.csv,"I have this matrix A here that I
want to put into reduced row echelon form. And we've done this
multiple times. You just perform a bunch
of row operations. But what I want to show you in
this video is that those row operations are equivalent to
linear transformations on the column vectors of A. So let me show you by example. So if we just want to put A into
reduced row echelon form, the first step that we might
want to do if we wanted to zero out these entries right
here, is-- let me do it right here-- is we'll keep our
first entry the same. So for each of these column
vectors, we're going to keep the first entry the same. So they're going to be
1, minus 1, minus 1. And actually, let me
simultaneously construct my transformation. So I'm saying that my row
operation I'm going to perform is equivalent to a linear
transformation on the column vector. So it's going to be a
transformation that's going to take some column vector,
a1, a2, and a3. It's going to take each of these
and then do something to them, do something to them
in a linear way. They'll be linear
transformations. So we're keeping the
first entry of our column vector the same. So this is just going
to be a1. This is a line right here. That's going to be a1. Now, what can we do if
we want to get to reduced row echelon form? We'd want to make
this equal to 0. So we would want to replace our
second row with the second row plus the first row, because
then these guys would turn out to be 0. So let me write that on
my transformation. I'm going to replace the second
row with the second row plus the first row. Let me write it out here. Minus 1 plus 1 is 0. 2 plus minus 1 is 1. 3 plus minus 1 is 2. Now, we also want
to get a 0 here. So let me replace my third
row with my third row minus my first row. So I'm going to replace my third
row with my third row minus my first row. So 1 minus 1 is 0. 1 minus minus 1 is 2. 4 minus minus 1 is 5,
just like that. So you see this was just a
linear transformation. And any linear transformation
you could actually represent as a matrix vector product. So for example, this
transformation, I could represent it. To figure out its transformation
matrix, so if we say that T of x is equal to,
I don't know, let's call it some matrix S times x. We already used the matrix A. So I have to pick
another letter. So how do we find S? Well, we just apply the
transformation to all of the column vectors, or the standard
basis vectors of the identity matrix. So let's do that. So the identity matrix-- I'll
draw it really small like this-- the identity matrix looks
like this, 1, 0, 0, 0, 1, 0, 0, 0, 1. That's what that identity
matrix looks like. To find the transformation
matrix, we just apply this guy to each of the column
vectors of this. So what do we get? I'll do it a little
bit bigger. We apply it to each of
these column vectors. But we see the first row
always stays the same. So the first row is always going
to be the same thing. So 1, 0, 0. I'm essentially applying it
simultaneously to each of these column vectors, saying,
look, when you transform each of these column vectors, their
first entry stays the same. The second entry becomes
the second entry plus the first entry. So 0 plus 1 is 1. 1 plus 0 is 1. 0 plus 0 is 0. Then the third entry gets
replaced with the third entry minus the first entry. So 0 minus 1 is minus 1. 0 minus 0 is 0. 1 minus 0 is 1. Now notice, when I apply this
transformation to the column vectors of our identity matrix,
I essentially just performed those same
row operations that I did up there. I performed those exact same
row operations on this identity matrix. But we know that this is
actually the transformation matrix, that if we multiply
it by each of these column vectors, or by each of these
column vectors, we're going to get these column vectors. So you can view it this way. This right here, this
is equal to S. This is our transformation
matrix. So we could say that if we
create a new matrix whose columns are S times this column
vector, S times 1, minus 1, 1. And then the next column is S
times-- I wanted to do it in that other color-- S times
this guy, minus 1, 2, 1. And then the third column is
going to be S times this third column vector, minus 1, 3, 4. We now know we're applying this
transformation, this is S, times each of these
column vectors. That is the matrix
representation of this transformation. This guy right here will
be transformed to this right here. Let me do it down here. I wanted to show that stuff that
I had above here as well. Well, I'll just draw an arrow. That's probably the
simplest thing. This matrix right here
will become that matrix right there. So another way you could
write it, this is equivalent to what? What is this equivalent to? When you take a matrix and you
multiply it times each of the column vectors, when you
transform each of the column vectors by this matrix, this
is the definition of a matrix-matrix product. This is equal to our matrix S--
I'll do it in pink-- this is equal to our matrix S, which
is 1, 0, 0, 1, 1, 0, minus 1, 0, 1, times our matrix
A, times 1, minus 1, 1, minus 1, 2, 1, minus 1, 3, 4. So let me make this
very clear. This is our transformation
matrix S. This is our matrix A. And when you perform this
product you're going to get this guy right over here. I'll just copy and paste it. Edit, copy, and let
me paste it. You're going to get that
guy just like that. Now the whole reason why I'm
doing that is just to remind you that when we perform each of
these row operations, we're just multiplying. We're performing a linear
transformation on each of these columns. And it is completely equivalent
to just multiplying this guy by some matrix S. In this case, we took the
trouble of figuring out what that matrix S is. But any of these row operations
that we've been doing, you can always represent
them by a matrix multiplication. So this leads to a very
interesting idea. When you put something in
reduced row echelon form, let me do it up here. Actually, let's just finish what
we started with this guy. Let's put this guy in reduced
row echelon form. Let me call this first S. Let's call that S1. So this guy right here
is equal to that first S1 times A. We already showed that
that's true. Now let's perform another
transformation. Let's just do another set of
row operations to get us to reduced row echelon form. So let's keep our middle
row the same, 0, 1, 2. And let's replace the first row
with the first row plus the second row, because I
want to make this a 0. So 1 plus 0 is 1. Let me do it in another color. Minus 1 plus 1 is 0. Minus 1 plus 2 is 1. Now, I want to replace the third
row with, let's say the third row minus 2 times
the first row. So that's 0 minus 2,
times 0, is 0. 2 minus 2, times 1, is 0. 5 minus 2, times 2, is 1. 5 minus 4 is 1. We're almost there. We just have to zero out
these guys right there. Let's see if we can get this
into reduced row echelon form. So what is this? I just performed another
linear transformation. Actually, let me write this. Let's say if this was our first
linear transformation, what I just did is I performed
another linear transformation, T2. I'll write it in a different
notation, where you give me some vector, some column
vector, x1, x2, x3. What did I just do? What was the transformation
that I just performed? My new vector, I made the top
row equal to the top row plus the second row. So it's x1 plus x2. I kept the second
row the same. And then the third row, I
replaced it with the third row minus 2 times the second row. That was a linear transformation
we just did. And we could represent this
linear transformation as being, we could say T2 applied
to some vector x is equal to some transformation vector
S2, times our vector x. Because if we applied this
transformation matrix to each of these columns, it's
equivalent to multiplying this guy by this transformation
matrix. So you could say that this guy
right here-- we haven't figured out what this is, but
I think you get the idea-- this matrix right here is going
to be equal to this guy. It's going to be equal
to S2 times this guy. What is this guy right here? Well, this guy is equal
to S1 times A. It's going to be S2
times S1, times A. Fair enough. And you could have gotten
straight here if you just multiplied S2 times S1. This could be some
other matrix. If you just multiplied it by
A, you'd go straight from there to there. Fair enough. Now, we still haven't gotten
this guy into reduced row echelon form. So let's try to get there. I've run out of space below
him, so I'm going to have to go up. So let's go upwards. What I want to do is, I'm going
to keep the third row the same, 0, 0, 1. Let me replace the second row
with the second row minus 2 times the third row. So we'll get a 0, we'll get a 1
minus 2, times 0, and we'll get a 2 minus 2, times 1. So that's a 0. Let's replaced the first
row with the first row minus the third row. So 1 minus 0 is 1. 0 minus 0 is 0. 1 minus 1 is 0, just
like that. Let's just actually write what
our transformation was. Let's call it T3. I'll do it in purple. T3 is the transformation of some
vector x-- let me write it like this-- of some
vector x1, x2, x3. What did we do? We replaced the first row with
the first row minus the third row, x1 minus x3. We replaced the second row with
the second row minus 2 times the third row. So it's x2 minus 2 times x3. Then the third row just
stayed the same. So obviously, this could
also be represented. T3 of x could be equal to some
other transformation matrix, S3 times x. So this transformation, when
you multiply it to each of these columns, is equivalent to
multiplying this guy times this transformation matrix,
which we haven't found yet. We can write it. So this is going to be equal to
S3 times this matrix right here, which is S2, S1, A. And what do we have here? We got the identity matrix. We put it in reduced
row echelon form. We got the identity matrix. We already know from previous
videos the reduced row echelon form of something is the
identity matrix. Then we are dealing with an
invertible transformation, or an invertible matrix. Because this obviously could be
the transformation for some transformation. Let's just call this
transformation, I don't know, did I already use T? Let's just call it Tnaught for
our transformation applied to some vector x, that might
be equal to Ax. So we know that this
is invertible. We put it in reduced
row echelon form. We put its transformation
matrix in reduced row echelon form. And we got the identity
matrix. So that tells us that
this is invertible. But something even more
interesting happened. We got here by performing
some row operations. And we said those row operations
were completely equivalent to multiplying this
guy right here by multiplying our original transformation
matrix by a series of transformation matrices that
represent our row operations. And when we multiplied all this,
this was equal to the identity matrix. Now, in the last video we said
that the inverse matrix, so if this is Tnaught, Tnaught inverse
could be represented-- it's also a linear
transformation-- It can be represented by some inverse
matrix that we just called A inverse times x. And we saw that the inverse
transformation matrix times our transformation matrix is
equal to the identity matrix. We saw this last time. We proved this to you. Now, something very
interesting here. We have a series of matrix
products times this guy, times this guy, that also got me
the identity matrix. So this guy right here, this
series of matrix products, this must be the same thing as
my inverse matrix, as my inverse transformation matrix. And so we could actually
calculate it if we wanted to. Just like we did, we actually
figured out what S1 was. We did it down here. We could do a similar operation
to figure out what S2 was, S3 was, and then
multiply them all out. We would have actually
constructed A inverse. I guess, something more
interesting we could do instead of doing that, what if
we applied these same matrix products to the identity
matrix. So the whole time we did
here, when we did our first row operation. So we have here, we
have the matrix A. Let's say we have an identity
matrix on the right. Let's call that I,
right there. Now, our first linear
transformation we did-- we saw that right here-- that
was equivalent to multiplying S1 times A. The first set of row operations
was this. It got us here. Now, if we perform that same set
of row operations on the identity matrix, what
are we going to get? We're going to get
the matrix S1. S1 times the identity
matrix is just S1. All of the columns of anything
times the identity times the standard basis columns, it'll
just be equal to itself. You'll just be left
with that S1. This is S1 times I. That's just S1. Fair enough. Now, you performed your next row
operation and you ended up with S2 times S1, times A. Now if you performed that same
row operation on this guy right there, what
would you have? You would have S2 times S1,
times the identity matrix. Now, our last row operation we
represented with the matrix product S3. We're multiplying it by the
transformation matrix S3. So if you did that, you
have S3, S2, S1 A. But if you perform the same
exact row operations on this guy right here, you have
S3, S2, S1, times the identity matrix. Now when you did this, when
you performed these row operations here, this got you
to the identity matrix. Well, what are these going
to get you to? When you just performed the same
exact row operations you performed on A to get to the
identity matrix, if you performed those same exact row
operations on the identity matrix, what do you get? You get this guy right here. Anything times that identity
matrix is going to be equal to itself. So what is that right there? That is A inverse. So we have a generalized way
of figuring out the inverse for transformation matrix. What I can do is, let's
say I have some transformation matrix A. I can set up an augmented
matrix where I put the identity matrix right there,
just like that, and I perform a bunch of row operations. And you could represent them
as matrix products. But you perform a bunch of row
operations on all of them. You perform the same operations
you perform on A as you would do on the
identity matrix. By the time you have A as an
identity matrix, you have A in reduced row echelon form. By the time A is like that, your
identity matrix, having performed the same exact
operations on it, it is going to be transformed into
A's inverse. This is a very useful tool for
solving actual inverses. Now, I've explained
the theoretical reason why this works. In the next video we'll
actually solve this. Maybe we'll do it for the
example that I started off with in this video.",Deriving a method for determining inverses | Matrix transformations | Linear Algebra | Khan Academy,"Determining a method for constructing inverse transformation matrices

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-example-of-finding-matrix-inverse?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/linear-algebra-showing-that-inverses-are-linear?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,6DpzCKJBsz0
Firstorderhomogeneousequations2_Firstorderdifferentialequations_KhanAcademy-6YRGEsQWZzY.en.csv,"Let's do one more homogeneous
differential equation, or first order homogeneous
differential equation, to differentiate it from the
homogeneous linear differential equations
we'll do later. But anyway, the problem
we have here. It's the derivative of y with
respect to x is equal to-- that x looks like a
y-- is equal to x squared plus 3y squared. I'm writing it a little
bit small, so that I don't run out of space. Divided by 2xy. So in all of these homogeneous
equations-- and obviously, we don't know it's homogeneous
yet. So we have to try to write
it as a function of y divided by x. So it looks like we could do
that, if we divide the top and the bottom by x squared. So if we just multiply-- let
me do it in a different color-- 1 over x squared,
or x to the negative 2, over 1 over x squared. We're essentially just
multiplying by 1. And then, that is
equal to what? 1 plus 3y squared over x squared
divided by 2-- if you divide x, divide by x squared,
you just get a 1 over x-- so 2 times y over x. Or we could just rewrite the
whole thing, and this is just equal to 1 plus 3y over
x squared divided by 2 times y over x. So yes, this is a homogeneous
equation. Because we were able to write
it as a function of y divided by x. So now, we can do the
substitution with v. And hopefully, this is starting
to become a little bit of second nature to you. So we can make the substitution
that v is equal to y over x, or another way of
writing that is that y is equal to xv. And then, of course, the
derivative of y with respect to x, or if we take the
derivative with respect to x of both sides of this, that's
equal to the derivative of x is 1 times v, this is just the
product rule, plus x times the derivative of v with
respect to x. And now, we can substitute the
derivative of y with respect to x is just this. And then the right hand side
of the equation is this. But we can substitute
v for y over x. So let's do that. And so we get v plus x. Instead of dv [? dv ?] x, I'll write v prime for now,
just so that I don't take up too much space. v prime is equal to 1 plus 3v
squared, we're making the substitution v is equal
to y over x. All of that over 2v. Now, let's see what we can do. This is where we just get our
algebra hat on, and try to simplify until it's a separable
equation in v. So let's do that. So let's multiply both sides
of this equation by 2v. So we'll get 2v squared plus 2xv
v prime-- 2v times x, yep, that's 2xv v prime-- is equal
to 1 plus 3v squared. Now let's see, let's subtract
2v squared from both sides of this. And we will be left with 2xv v
prime is equal to 1 plus-- let's see, we're subtracting
2v squared from both sides. So we're just left with a 1 plus
v squared here, right? 3v squared minus 2v squared
is just v squared. And let's see, we want it to be
separable, so let's put all the v's on the left hand side. So we get 2xv v prime
divided by 1 plus v squared is equal to 1. And let's divide both
sides by x. So we get the x's on
the other side. So then we get 2v-- and
I'll now switch back to the other notation. Instead of v prime,
I'll write dv dx. 2v times the derivative of v
with respect to x divided by 1 plus v squared is equal to-- I'm
dividing both sides by x, notice I didn't write the x on
this side-- so that is equal to 1 over x. And then, if we just multiply
both sides of this times dx, we've separated the two
variables and we can integrate both sides. So let's do that. Let's go up here. I'll switch to a different
color, so you know I'm working on a different column now. So multiply both sides by dx. I get 2v over 1 plus v squared
dv is equal to 1 over x dx. And now we can just integrate
both sides of this equation. This is a separable equation
in terms of v and x. And what's the integral
of this? At first, you might think, oh
boy, this is complicated. This is difficult, maybe some
type of trig function. But you'll see that it's
kind of just the reverse chain rule. We have a function here,
1 plus v squared, an expression here. And we have its derivative
sitting right there. So the antiderivative of this,
and you can make a substitution if you like. You could say u is equal to 1
plus v squared, then du is equal to 2v dv. And then, well, you would
end up saying that the antiderivative is just
the natural log of u. Or, in this case, the
antiderivative of this is just the natural log of
1 plus v squared. We don't even have to write
an absolute value there. Because that's always going
to be a positive value. So the natural log of
1 plus v squared. And I hope I didn't
confuse you. That's how I think about it. I say, if I have an expression,
and I have its derivative multiplied there,
then I can just take the antiderivative of the
whole expression. And I don't have to worry about
what's inside of it. So if this was a 1 over an x,
or 1 over u, it's just the natural log of it. So that's how I knew that this
was the antiderivative. And if you don't believe me,
use the chain rule and take the derivative of this,
and you'll get this. And hopefully, it will make
a little bit more sense. But anyway, that's the left
hand side, and then that equals-- Well, this
one's easy. That's the natural log, the
absolute value of x. We could say, plus c, but just
so that we can simplify it a little bit, an arbitrary
constant c, we can really just write that as the natural log of
the absolute value of some constant c. I mean, this is still some
arbitrary constant c. So we can rewrite this whole
equation as the natural log of 1 plus v squared is equal to--
when you add natural logs, you can essentially just multiply
the two numbers that you're taking the natural log of-- the
natural log of, we could say, the absolute value of cx. And so the natural log of
this is equal to the natural log of this. So we could say that 1 plus
v squared is equal to cx. And now we can unsubstitute
it. So we know v is equal to y
over x, so let's do that. So we get 1 plus y over x
squared is equal to cx. Let me scroll this down
a little bit. Let's multiply both sides of the
equation times x squared. We could rewrite this as y
squared over x squared. So we multiply both sides times
x squared, you get x squared plus y squared is equal
to cx to the third. And we're essentially done. If we want to put all of the
variable terms on left hand side, we could say that this is
equal to x squared plus y squared minus cx to the
third is equal to 0. And this implicitly defined
function, or curve, or however you want to call it, is the
solution to our original homogeneous first order
differential equation. So there you go. I will see you in
the next video. And now, we're actually
going to do something. We're going to start embarking
on higher order differential equations. And actually, these are more
useful, and in some ways, easier to do than the
homogeneous and the exact equations that we've
been doing so far. See you in the next video.",First order homogeneous equations 2 | First order differential equations | Khan Academy,"Another example of using substitution to solve a first order homogeneous differential equations.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/linear-homogeneous-2nd-order/v/2nd-order-linear-homogeneous-differential-equations-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/homogeneous-equations/v/first-order-homegenous-equations?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,6YRGEsQWZzY
Particularsolutiongiveninitialconditionsforpopulation_KhanAcademy-6jqx5uEBs5U.en.csv,"- [Voiceover] In the last
video, we established that if we say the rate of
change of a population with respect to time is
going to be proportional to the population, we were able to solve that differential equation,
find a general solution, which involves an exponential. That the population is going
to be equal to some constant times e to some other
constant, times time. And in the last video we
assumed time was days. So let's just apply
this, just to feel good that we can truly model
population this way. So let's use it with
some concrete numbers. Once again, you've
probably done that before. You've probably started
with the assumption that you can model with
an exponential function, and then you used some
information, some conditions, to figure out what the constants are. You probably did this earlier in pre-calculus or algebra class. Let's just do it again,
just so that we can feel that this thing right over here is useful. So let's give you some information. Let's say, that at time equals zero, the population is equal to 100 insects or whatever we're measuring
the population of. And let's say that at time
equals 50, the population, so after 50 days, the
population is at 200. So notice it doubled after 50 days. So given this information,
can we solve for C and k? I encourage you to pause the video and try to work through it on your own. So this first initial
condition's pretty straighforward to you, because when t is
equal to zero, P is 100. So we could say, based on this
first piece of information, we could say that 100 must be equal to C times e to the k times zero. Well that's just going
to be e to the zero. Well e to the zero is just one. So this is just the same
thing as C times one, and just like that we have
figured out what C is. We can now write that the population is going to be equal to 100e to the kt. So you can see, expressed this way, our C is always going to
be our initial population. So, e to the kt. And now, we can use this
second piece of information. So our population is 200,
let's write that down. So our population is 200,
when time is equal to 50. After 50 days. So 200 is equal to 100e
to the k times 50, right? t is now 50. Let me just write that. k times 50. Now we can divide both sides by 100, and we will get, two is
equal to e to the 50k. Then we can take the
natural log of both sides. Natural log on the left hand side, we get the natural log of two. And on the right hand side, the
natural log of e to the 50k, well that's just going
to be, that's the power that you need to raise e
to, to get e to the 50k. Well that's just going to be 50k. All you did was took the
natural log of both sides. Notice, that this equation
that I've just written expresses the same thing. Natural log of two is equal to 50k, that means e to the 50k is equal to two, which is exactly what
we had written there. And now we can solve for k. Divide both sides by 50,
and we are left with, k is equal to the natural
log of 2, over 50. And we're done. We can now write the particular solution that meets these conditions. So we can now write that our population, and I can even write our
population as a function of time, is going to be equal
to 100 times e to the, now k is natural log of two
over 50, so I'll write that. So, natural log of two over
50, and then that times t. If you assume rate of change of population is going to be proportional to population, you assume this information
right over here, this function is what is going to describe your growth of population.",Particular solution given initial conditions for population | Khan Academy,"Another separable differential equation example.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/modeling-with-differential-equations/v/newtons-law-of-cooling?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/modeling-with-differential-equations/v/modeling-population-with-simple-differential-equation?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,6jqx5uEBs5U
Differentialequationintroduction_Firstorderdifferentialequations_KhanAcademy-6o7b9yyhH7k.en.csv,"- [Voiceover] Let's
now introduce ourselves to the idea of a differential equation. And as we'll see, differential equations are super useful for
modeling and simulating phenomena and understanding
how they operate. But we'll get into that later. For now let's just think
about or at least look at what a differential equation actually is. So if I were to write, so
let's see here is an example of differential equation,
if I were to write that the second derivative of y plus two times the first derivative of y
is equal to three times y, this right over here is
a differential equation. Another way we could write it if we said that y is a function of
x, we could write this in function notation. We could write the second
derivative of our function with respect to x plus two
times the first derivative of our function is equal to
three times our function. Or if we wanted to use
the Leibniz notation, we could also write, the
second derivative of y with respect to x plus two
times the first derivative of y with respect to x is
equal to three times y. All three of these equations
are really representing the same thing, they're saying
OK, can I find functions where the second
derivative of the function plus two times the first
derivative of the function is equal to three times
the function itself. So just to be clear,
these are all essentially saying the same thing. And you might have just
caught from how I described it that the solution to a
differential equation is a function, or a class of functions. It's not just a value or a set of values. So the solution here, so the solution to a differential equation is a function, or a set of functions,
or a class of functions. It's important to contrast this relative to a traditional equation. So let me write that down. So a traditional equation,
maybe I shouldn't say traditional equation,
differential equations have been around for a while. So let me write this as
maybe an algebraic equation that you're familiar with. An algebraic equation
might look something like, and I'll just write up a simple quadratic. Say x squared plus three x
plus two is equal to zero. The solutions to this algebraic equation are going to be numbers,
or a set of numbers. We can solve this, it's
going to be x plus two times x plus one is equal to zero. So x could be equal to
negative two or x could be equal to negative one. The solutions here are
numbers, or a set of values that satisfy the equation. Here it's a relationship
between a function and its derivatives. And so the solutions, or the solution, is going to be a function
or a set of functions. Now let's make that a
little more tangible. What would a solution to
something like any of these three, which really represent the same thing, what would a solution actually look like? Actually let me move
this over a little bit. Move this over a little bit. So we can take a look at what some of these solutions could look like. Let me erase this a little. This little stuff that
I have right over here. So I'm just gonna give you
examples of solutions here. We'll verify that these
indeed are solutions for I guess this is really
just one differential equation represented in different ways. But you'll hopefully
appreciate what a solution to a differential equation looks like. And that there is often
more than one solution. There's a whole class of functions
that could be a solution. So one solution to this
differential equation, and I'll just write it as our first one. So one solution, I'll call it y one. And I could even write it as y one of x to make it explicit that
it is a function of x. One solutions is y one of x is equal to e to the negative three x. And I encourage you to
pause this video right now and find the first derivative of y one, and the second derivative of
y one, and verify that it does indeed satisfy this differential equation. So I'm assuming you've had a go at it. So let's work through this together. So that's y one. So the first derivative of y one, so we just have to do the chain rule here, the derivative of negative
three x with respect to x is just negative three. And the derivative of e
to the negative three x with respect to negative three x is just e to the negative three x. And if we take the second
derivative of y one, this is equal to the same exact idea, the derivative of this is
three times negative three is going to be nine e
to the negative three x. And now we could just
substitute these values into the differential
equation, or these expressions into the differential
equation to verify that this is indeed going to be
true for this function. So let's verify that. So we first have the
second derivative of y. So that's that term right over there. So we have nine e to the negative three x plus two times the first derivative. So that's going to be two
times this right over here. So it's going to be minus
six, I'll just write plus negative six e to
the negative three x. Notice I just took this two
times the first derivative. Two times the first derivative
is going to be equal to, or needs to be equal to, if
this indeed does satisfy, if y one does indeed satisfy
the differential equation, this needs to be equal to three times y. Well three times y is three
times e to the negative three x. Three e to the negative three x. Let's see if that indeed is true. So these two terms right over here, nine e to the negative three x, essentially minus six e
to the negative three x, that's gonna be three e
to the negative three x. Which is indeed equal to three
e to the negative three x. So y one is indeed a solution
to this differential equation. But as we'll see, it is
not the only solution to this differential equation. For example, let's say y
two is equal to e to the x is also a solution to this
differential equation. And I encourage you to
pause the video again and verify that it's a solution. So assuming you've had a go at it. So the first derivative of this
is pretty straight-forward, is e to the x. Second derivative, one
of the profound things of the exponential function,
the second derivative here is also e to the x. So the second derivative,
let me just do it in those same colors. So the second derivative
is going to be e to the x plus two times e to the x is indeed going to be equal
to three times e to the x. This is absolutely going to be true. E to the x plus two e to the
x is three e to the x. So y two is also a solution
to this differential equation. So that's a start. In the next few videos,
we'll explore this more. We'll start to see what
the solutions look like, what classes of solutions are, techniques for solving them, visualizing solutions to
differential equations, and a whole toolkit for
kind of digging in deeper.",Differential equation introduction | First order differential equations | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/differential-equations-intro/e/introduction-to-differential-equations-and-initial-value-problems?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/differential-equations-intro/v/finding-particular-linear-solution-to-differential-equation?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,6o7b9yyhH7k
Complexrootsofthecharacteristicequations1_Secondorderdifferentialequations_KhanAcademy-6xEO4BeawzA.en.csv,"We learned in the last several
videos, that if I had a linear differential equation with
constant coefficients in a homogeneous one, that had the
form A times the second derivative plus B times the
first derivative plus C times-- you could say the
function, or the 0 derivative-- equal to 0. If that's our differential
equation that the characteristic equation of that
is Ar squared plus Br plus C is equal to 0. And if the roots of this
characteristic equation are real-- let's say we have
two real roots. Let me write that down. So the real scenario where the
two solutions are going to be r1 and r2, where these
are real numbers. Then the general solution of
this differential equation-- and watch the previous videos if
you don't remember this or if you don't feel like it's
suitably proven to you-- the general solution is y is equal
to some constant times e to the first root x plus some other
constant times e to the second root times x. And we did that in the
last several videos. We even did some examples. Now my question to you is, what
if the characteristic equation does not
have real roots, what if they are complex? And just a little bit
of review, what do I mean by that? Well, if I wanted to figure out
the roots of this and if I was lazy, and I just want to do
it without having to think, can I factor it, I would just
immediately use the quadratic equation, because that
always works. I would say, well the roots of
my characteristic equation are negative B plus or minus
the square root of B squared minus 4AC. All of that over 2A. So what do I mean by
non-real roots? Well, if this expression right
here-- if this B squared minus 4AC-- if that's a negative
number, then I'm going to have to take the square root
of a negative number. So it will actually be an
imaginary number, and so this whole term will actually
become complex. We'll have a real part and
an imaginary part. And actually, the two roots are
going to be conjugates of each other, right? We could rewrite this in the
real and imaginary parts. We could rewrite this as the
roots are going to be equal to minus B over 2A, plus or minus
the square root of B squared minus 4AC over 2A. And if B squared minus 4AC is
less than 0, this is going to be an imaginary number. So in that case, let's just
think about what the roots look like generally and then
we'll actually do some problems. So let me
go back up here. So then the roots aren't
going to be two real numbers like that. The roots, we can write them
as two complex numbers that are conjugates of each other. And I think light blue is a
suitable color for that. So in that situation, let me
write this, the complex roots-- this is a complex roots
scenario-- then the roots of the characteristic
equation are going to be, I don't know, some number--
Let's call it lambda. Let's call it mu, I think that's
the convention that people use-- actually let me see
what they tend to use, it really doesn't matter--
let's say it's lambda. So this number, some constant
called lambda, and then plus or minus some imaginary
number. And so it's going to be
some constant mu. That's just some constant, I'm
not trying to be fancy, but this is I think the convention
used in most differential equations books. So it's mu times i. So these are the two
roots, and these are true roots, right? Because we have lambda plus mu
i, and lambda minus mu i. So these would be the two roots,
if B squared minus 4AC is less than 0. So let's see what happens when
we take these two roots and we put them into our general
solution. So just like we've learned
before, the general solution is going to be-- I'll stay in
the light blue-- the general solution is going to be y is
equal to c1 times e to the first root-- let's make that
the plus version-- so lambda plus mu i. All of that times x, plus c2
times e to the second root. So that's going to be lambda
minus mu i times x. Let's see if we can do some
simplification here, because that i there really kind of
makes things kind of crazy. So let's see if we can do
anything to either get rid of it or simplify it, et cetera. So let's multiply the x out. Just doing some algebraic
manipulation. I'm trying to use as much
space as possible. So we get y is equal to
c1 e to the what? Lambda x-- just distributing
that x-- plus mu xi, plus c2 times e to the lambda
x minus mu xi. Just distributed the x's
in both of the terms. And let's see what we can do. Well, when you add exponents,
this is the exact same thing as y is equal to c1 e to
the lambda x, times e to the mu xi, right? If you have the same base and
you're multiplying, you could just add exponents, so this
is the same thing as that. Plus c2 times e to the lambda x,
times e to the minus mu xi. Now let's see, we have an e to
the lambda x in both of these terms, so we can
factor it out. So we get y is equal to-- let
me draw a line here, I don't want you to get confused with
all this quadratic equation stuff-- y is equal to e to the
lambda x times c1 e to the mu xi-- that's an i-- plus c2 times
e to the minus mu xi. Now what we can we do? And this is where it gets fun. If you watched the calculus
playlist, especially when I talk about approximating
functions with series, we came up with what I thought was the
most amazing result in calculus, just from a-- or in
mathematics-- just from a metaphysical point of view. And now we will actually use it
for something that you'll hopefully see is
vaguely useful. So here we have two terms that
have something times e to the something times i. And we learned before,
Euler's formula. And what was Euler's formula? I'll write that in purple. That e to the i theta, or we
could write e to the ix, is equal to cosine of x
plus i sine of x. And what's amazing about that
is, if you put negative 1 in here, then you get e to the-- oh
no, actually if you put pi in here-- so e to the i pi is
equal to negative 1, right? If you substituted this because
sine of pi is 0. So I thought that was amazing,
where you could write e to the i 2 pi is equal to 1. That's pretty amazing as well. And in one equation you have all
of the fundamental numbers of mathematics. That's amazing, but let's
get back down to earth and get practical. So let's see if we can use this
to simplify Euler's-- This is actually a definition,
and the definition makes a lot of sense, because when you
do the power series approximation, or the
Maclaurin series approximation, of e to the x, it
really looks like cosine of x plus i times the power series
approximation of x. But anyway, we won't
go into that now. I have like six or seven
videos on it. But let's use this to simplify
this up here. So we can rewrite that as y is
equal to e to the lambda x times-- let's do the
first one-- c1. It's e to the mu xi,
so instead of an x we have a mu x. That will be equal to cosine of
whatever is in front of the i, so cosine of mu x plus
i sine of mu x. And then plus c2 times what? Times cosine of minus mu x plus
i sine of minus mu x. And let's see if we can
simplify this further. So one thing that you might--
So let's distribute the c's. So now we get-- I'll do it in
a different color-- actually I'm running out of time,
so I'll continue this in the next video. See you soon.",Complex roots of the characteristic equations 1 | Second order differential equations | Khan Academy,"What happens when the characteristic equations has complex roots?!

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/complex-roots-characteristic-equation/v/complex-roots-of-the-characteristic-equations-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/linear-homogeneous-2nd-order/v/2nd-order-linear-homogeneous-differential-equations-4?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,6xEO4BeawzA
Preimageandkernelexample_Matrixtransformations_LinearAlgebra_KhanAcademy-6yrPU8rYOhs.en.csv,"Let's say I have some
transformation from R2 to R2. And it's essentially just a
multiplication times a matrix. And we know that all linear
transformations can be expressed as a multiplication
of a matrix, but this one is equal to the matrix 1, 3, 2, 6
times whatever vector you give me in my domain. Times x1, x2. Now let's say I have some
subset in my codomain. So let me draw this
right here. So my domain looks like that. It's R2. And of course my function or
my transformation maps elements of R2 into elements
of its codomain which also happens to be R2. I could show it mapping into
itself, but for the sake of simplicity let's draw
my codomain here. And our transformation of course
maps, for any element here, the transformation of that
will be an association or a mapping into R2. Now what if we take some subset
of R2, and let's just say it's a set of two vectors,
the zero vector in R2, and the vector 1, 2. So it's literally, let's
say it's this point. Let me do it in a
different color. Let's say this is my
zero vector in R2. I'm not plotting them. I'm just showing that they're
in this, they're in R2. That's my zero vector,
and let's say the vector 1,2 is here. 1,2. What I want to know is, what are
all of the vectors in my domain whose transformations
map to this subset? Map to this point? So I want to know, I'm
essentially, I want to know the preimage of S. So the preimage of S, let
me be careful, the preimage of S under T. And I said be careful because
when you say preimage of something without saying under
something else, it implies that you're taking. Well when you say image of
something, it implies you're taking the image of an entire
transformation like I showed you, I think, two videos ago. But when you're taking the image
or preimage of a set, you make sure you say under
what transformation. So we want to know the preimage
of this subset of our codomain under the
transformation T. Let me write this as
T inverse of S. And we saw in the last video
this is all of the x, all of the elements in our domain where
the transformation of those x's is a member of the
subset of our codomain that we're trying to find
the preimage of. Right? Now what is another way
of writing this? Well this is, you can write this
as, we're trying to look for all of the x's in our domain
such that this, let's call this A, that matrix A. Such that A times x
is a member of S. So that means A times x has to
be equal to this or has to be equal to that. So that means A times our vector
x has to be equal to the zero vector. Or A times our vector x has to
be equal to this vector 1,2. This is the exact same
statement as this one right here. I just made it a little bit more
explicit in terms of our actual transformation,
A times x. And in terms of what
our actual set is. Our set is just two vectors. So if we want to determine
the preimage of S. So we write that the preimage
of S under T. That set there. We essentially have to just
find all of the x's that satisfy these two equations
right there. So this equation, so we have
to find all of the x's that satisfy, the first one right
here is the matrix 1, 3, 2, 6 times x1, x2 is equal
to the zero vector. That's this equation
right there. We need to find all of the
solutions to that. And you might already
recognize it. All of the solutions to this,
all of the x's that satisfy this, is the null space
of this matrix. I just thought I'd point
that out on the side. Now, that's not the only one. We also have to solve
this guy over here. I'll do that in blue. So the preimage of S under
T is going to be all the solutions to this plus all of
the solutions to 1, 3, 2, 6 times x1, x2 is equal to 1, 2. Now we can just solve this
with an augmented matrix. So my augmented matrix would
look like 1, 3, 2, 6, 0, 0. And here my augmented matrix
would be 1, 3, 2, 6, 1, 2. Let's put this in reduced
row echelon form. So let's replace our second row
with our second row minus 2 times the first row. So what do we get? Our first row stays the same. 1, 3, 0. Let me do them simultaneously. Let me solve these systems
in parallel. So my first system stays, first
row stays the same. 1, 3, 1. And in both cases, because I
just want to get the left hand side of my augmented matrix into
reduced row echelon form, I can apply the same
row operation. So I'm replacing my second row
with 2 times my first row. So 2 minus 2 times 1 is 0. 6 minus 2 times 3 is 0. And of course 0 minus
2 times 0 is 0. Here 2 minus 2 times 1 is 0. 6 minus 2 times 3 is 0. And 2 minus 2 times 1 is 0. So we get all these zeroes,
and we're actually done. We have both of these augmented
matrices in reduced row echelon form. And how do we go back to solve
all of the x1's and x2's that satisfy these? Well you recognize that our
first columns right here are pivot columns. And these are associated with
our variable x1, so we know that x1 is a pivot variable. And we know that the second
column is a non pivot column. Because it has no 1's in it. And so it's associated
with x2. And since x2 isn't a pivot
column, we know that x2 is a free variable. Which essentially means we can
set x2 to be anything. So let's just set x2. x2 is equal to t, where t is
a member of the reals. In this case what is x1
going to be equal to? So here this top equation
says, let me write it. If we just kind of go back to
this world right here, this means that x1 plus 3x2 is
equal to this 0 here. This top line right here says
x1 plus 3x2 is equal to 1. And so if we say x2 is equal to
t, this equation becomes x1 plus 3t is equal to 0. Subtract 3t from both
sides, you get x1 is equal to minus 3t. And then this equation, you
get x1 is equal to, if we substitute x2 with t, is x1
is equal to 1 minus 3t. Now if we wanted to write the
solution sets in kind of vector notation. The solution set for this guy
right here, for this first equation right there, is going
to be x1, x2 is equal to what? It's going to be equal to, you
have your, well, x2 is just going to be equal to t times. It's just going to
be equal to t. So let me just write it there. x2 is just t times 1. It's just equal to t. I made that definition
up here. And then what's x1 equal to? It's equal to minus 3 times t. If I put a t out here as
a scalar, it's just minus 3 times t. So this is a solution for
this first equation. Some, where t is a member of the
reals, So it's just scalar multiples of the vector
minus 3, 1. And if we think of this position
vector, this'll be a line in R2. And I'll draw that
in a second. So that's a solution for
this first equation. And then the solution for the
second equation, how can we set this up? It's going to be, make sure you
can see it, It is x1, x2, and let's see. x2 once again is
just t times 1. Let me just write
it like this. So it's t times 1. That's x2. Now what's x1? x1 is equal to 1 minus
3 times t. So if we do a minus 3 that give
us our minus 3 times t. But we need to do
1 minus that. Or 1 plus minus 3 times t. So what we can do is, we could
say that all the solution set here is equal to the vector 1,
here, so now we have 1 plus minus 3 times t for x1. And here we could say is 0. x2 is equal 0 plus t. Or x2 is equal to t. So this is the solution set
for the second equation. So our preimage of S. Remember S was just these two
points in our codomain. The preimage of S under T is
essentially all of the x's that satisfy these
two equations. And let's actually
graphs those. Let me turn on my graphs. That makes it look a little
bit messy, but let me graph it down here. Let me copy and paste
my two results. Then I want to paste it. So those are my two results. Put my pen back on. And now what I can do is I
can graph it right here. So let's see. The solution set for that first
equation is all the multiples of the vector
minus 3, 1. So the vector minus 3,
1 looks like this. Looks like that. That's the vector minus 3, 1. But my solution set
is all the scalar multiples of minus 3, 1. This is a comma right here. Right? So if I just take all the scalar
multiples of minus 3, 1, it's going to
look like this. So if you take 2 times
it, you're going to have minus 6, 2. So you're going to
get like that. So it's going to be all of
these points right here. I wish I could draw a little
bit neater, but I think you get the idea. It's going to be a
line like that. That is that solution
set right there. And then what is this solution
set right here? It's the vector 1, 0. So we go out 1 and 0,
so that's there. Plus scalar multiples
of minus 3, 1. So plus scalar multiples
of this. So if we just had 1 scalar
multiple of minus 3, 1 we'll end up right there. But we want to put all the
scalar multiples of it, because we have this
t right here. So we're going to end up with
another line with the same slope essentially, that's just
shifted a little bit. It's shifted 1 to the right. Now what why did we
do all of this? Remember what we wanted to find
out is, what were all of the vectors, let me turn off the
graph paper, in our domain that when we apply the
transformation, map to vectors within our subset
of our codomain. Map to either 0, 0 or
the vector 1, 2. And we've figured all of those
vectors out by solving these two equations. And we are able to see that
these two lines, so when I turn my graph paper on, they
map to the points. So when these guys, when you
apply the transformation, I'll draw it all on the same graph. They map, when you apply the
transformation, to the point 0, 0 and to the point 1, 2. Which was right here. So all of these points, when you
apply the transformation, and actually all the ones in
the blue, they map to 0, 0. Because we solved this
top equation. And all the ones in orange,
when you apply the transformation, map
to the point 1, 2. Now this blue line right here. This has a special
name for it. And I actually touched on is it
a little bit before, right? Everything in this
blue line, right? If I call this set right here,
I don't know, let's call it B for blue. This is the blue line. That's this set of vectors
right here. Everything there, when I apply
my transformation of those blue vectors, or if I take the
image of my blue set under T, it all maps to the
zero vector. It equals the set of the zero
vector right there. We saw that right there. And I remember when, well
earlier in the video I pointed out that, look , this
set right here. This is equivalent to the
null space, right? The null space of a matrix is
all the vectors that if you multiply it by that
matrix, you get 0. So this is a similar
idea here. This transformation is
defined by a matrix. And we're saying, what are all
of the x's that when you transform them you get
the zero vector? And so this idea, this blue
thing right here, it's called the kernel of T. Sometimes it's written just
shorthand K-E-R of T. And this literally is all of the
vectors that if you apply the transformation, let
me write it this way. It's all of the vectors in our
domain, which was R2, such that the transformation of those
vectors is equal to the zero vector. There this is the definition
of the kernel. And if the transformation is
equal to some matrix times some vector, and we know that
any linear transformation can be written as a matrix vector
product, then the kernel of T is the same thing as the
null space of A. And we saw that earlier
in the video. Anyway, hopefully you found
that reasonably useful.",Preimage and kernel example | Matrix transformations | Linear Algebra | Khan Academy,"Example involving the preimage of a set under a transformation. Definition of kernel of a transformation.

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/sums-and-scalar-multiples-of-linear-transformations?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/preimage-of-a-set?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,6yrPU8rYOhs
Proof-Invertibilityimpliesauniquesolutiontof(x)=y_LinearAlgebra_KhanAcademy-7GEUgRcnfVE.en.csv,"I've got a function f and it's
a mapping from the set x to the set y. And let's just say for the sake
of argument, let's say that f is invertible. What I want to know is what
does this imply about this equation right here. The equation f of
x is equal to y. I want to know that for every
y that's a member of our co-domains. So for every y, let me write
this down, for every y that's a member of my co-domain is
there a unique, in all caps UNIQUE, solution x that's
a member of our domain. Such that, and I could write
such that well, I'll just write it out. I was going to write the mathy
way, but I think it's nicer to write in the actual
words sometimes. Such that f of x
is equal to y. So if we just, let me
just draw everything out a little bit. We have our set x right here. This is x. We have our co-domain y here. We know that f, if you take some
point here, let's call that a, it's a member of x and
you apply the function f to it, it will map you to some
element in set y. So that's f of a right there. This is, so far, what
this tells us. Now I want to look at this
equation here, and I want to know that if I can pick any y
in this set any lower-case y in this set y. So let's say I pick
something here. Let's say that's b. I want to know is there a
unique solution to the equation f of x is equal to b. Is there a unique solution? So one, I guess, you have to
think, is there a solution. So is there a solution to
saying, look is there some x here that if I apply the
transformation f to it that I get there, and I also want
to know is it unique. For example, if this is the only
one that is unique, but it's not unique if there's some
other guy, if there is more than one, solution. If there is some other guy
in x that if I apply the transformation I also go to b. This would make it non-unique,
not unique. So what I want to concern
ourselves with in this video is somehow, is invertibility
related to the idea of a unique solution to this for
any y in our co-domain. So let's just work through our
definitions of invertibility and see if we can get anywhere
constructive. So by definition, f is
invertible implies that there exists this little backward
looking, three-looking thing, this means there exists. I think it's nice to be exposed
sometimes to the mathy notations Let me just
write that. That means there exists some
function, let's call it f inverse, that's a mapping from
y to x, such that, and actually the colons are also the
shorthand for such that, but I'll write it out. Such that the composition of f
inverse with f is equal to the identity on x. So, essentially, it's saying
look, if I apply f to something in x then I apply f
inverse to that, I'm going to get back to that point which is,
essentially, equivalent. Or it isn't just essentially
equivalent, it is equivalent to just applying the identity
function, So that's i x. So you just get what
you put into it. Such that this inverse function,
the composition of the inverse with the function,
is equal to the identity function. And that the composition of the
function with the inverse function is equal to the
identity function on y. So if you started y and you
apply the inverse, then you apply the function to that,
you're going to end up back at y at that same point. And that's equivalent
to just applying the identity function. So this is what invertibility
tells me, this is how I defined invertibility
in the last video. Now we concerned ourselves-- so
we are concerned with this equation up here. We're concerned with the
equation, I will write it in pink, f of x is equal to y. And what we want to know for
any y, or any lower-case cursive y in our big set
y, is there a unique x solution to this. So, what we can do is we know
that f is invertible. I told you that from
the get-go. So given that f is invertible,
we know that there is this f inverse function, and I can
apply that f inverse function. It's a mapping from y to x. So, I can apply it to
any element in y. So for any y, let's say that
this is my y right there. So I can apply my f
inverse to that y. And I'm going to go over here
and, of course, y is equal to f of x. These are the exact
same points. So let's apply our f inverse
function to this. So if I apply the f inverse
function to both sides of the equation, this right here's an
element in y, and this is the same element in y. Right? They are the same element. Now, if I apply the mapping, the
inverse mapping, to both of that, that's going to take
me to some element in x. So let's do that. So, if I take the inverse
function on both sides of this equation, where some element
over here in y, and I'm taking the inverse function to get to
some element in x, what's this going to be equal to? Well, on the right-hand side,
we could just write the f inverse of y. That's going to be some
element over here. But what does the left-hand
side of this equation translate to? The definition of this inverse
function is that when you take the composition with f, you're
going to end up with the identity function. This is going to be equivalent
to-- let me write it this way. This is equal to the composition
of f inverse with f of x, which is equivalent to
the identity function being applied to x. And then the identity function
being applied to x is what? That's just x. This thing right here
just reduces to x. This reduces to x. So, we started with the idea
that f is invertible. We use the definition of
invertibility that there exists this inverse function
right there. And then we essentially apply
the inverse function to both sides of this equation and say,
look you give me any y, any lower-case cursive y in this
set y, and I will find you a unique x. This is the only x that
satisfies this equation. Remember how do I know
it's the only x? Because this is the only
possible inverse function. Only one inverse function
which is true. I proved that to you
in the last video. That if f is invertible,
it only has one unique inverse function. We tried before to have maybe
two inverse functions, but we saw they have to be
the same thing. So since we only have one
inverse function and it applies to anything in this big
upper-case set y, we know we have a solution. And because it's only one
inverse function, and functions only map to one value
in this case, then we know this is a unique
solution. So let's write this down. So we've established that if f
is invertible, I'll do this in orange, then the equation f of
x is equal to y for all. That little v that it looks
like it's filled up with something, for all y, the member
of our set y, has a unique solution. And that unique solution, if you
really care about it, is going to be the inverse
function applied to y. It might seem like a bit of a
no brainer, but you can see you have to be a little bit
precise about it in order to get to the point you want. Let's see if the opposite
is true. Let's see if we assume-- let's
see if we start from the assumption, that for all y that
is a member of our set Y, that the solution, that the
equation f of x, is equal to y has a unique solution. Let's assume this and see if it
can get us the other way. If given this, we can
prove invertibility. So let's think about
the first way. So we're saying that for any y--
let me draw my sets again. So this is my set X and this
is my set Y right there. Now we're working for the
assumption that you can pick any element in Y right here,
and then the equation right here has a unique solution. Let's call that unique
solution. Well, we could call
it whatever. But a unique solution x. So you can pick any point here,
and I've given you, we're assuming now, that, look,
you pick a point in Y, I can find you some point
in X such that f of x is equal to y. And not only can I find
that for you, that is a unique solution. So given that, let me define
a new function. Let me define the function s. The function s is a mapping
from y to x. It's a mapping from y to x and s
of, let's say s of y, where, of course, y is a member
of our set capital-Y. s of y is equal to the unique
solution in x to f of x is equal to y. Now, you're saying, hey, Sal, it
looks a little convoluted. But think about it. This is a completely valid
function definition. Right? We're starting with the idea
that you give me any y here. You give me any member of this
set, and I can always find you a unique solution to
this equation. Well OK, so that means that any
guy here can be associated with a unique solution in the
set X, where the unique solution is the unique
solution to this equation here. So, why don't I just define a
function that says, look I'm going to associate every member
y with its unique solution to f of x
is equal to y. That's how I'm defining this
function right here. And, of course, this is
a completely valid mapping from y to x. And we know that this only has
one legitimate value because this, any value y, any
lower-case value y, in this set has a unique solution
to f of x is equal to y. So this can only equal
one value. So it's well defined. So let's apply, let's take some
element here, let me do a good color, let's
say this is b. And b is a member of y. So let's find, so let's just map
it using our new function right here. So let's take it, and map it,
and this is s of b right here. s of b which is a member of x
Now, we know that s of b is a unique solution by definition. I know it seems a little
circular, but it's not. We know that s of
b is a solution. So we know that s of b is the
unique solution to f of x is equal to b. Well, if this is the case, if
this is good, we just got this because this is what
this function does. It maps every y to the unique
solution to this equation. Because we said that every
y has a unique solution. So, if this is the case,
then what happens if I take f of s of b. Well, I just said this is the
unique solution to this. So if I put this guy in here,
what am I going to get? I'm going to get b. Or other way of saying this is
that the composition of f with s applied to b is equal to b. Or another way to say it, is
that we take the composition of f with s, this is the same
thing, because if I apply s to b, and then I apply f back to
that, that's the composition, I just get back to b. That's what's happening here. So this is the same thing as
the identity function on y being applied to b. So it's equal to b. So we can say that the
composition-- we can say that there exists, and we know that
this function exists, or that we can always construct this. So we already know
that this exists. This existed by me constructing
it, but I've, hopefully, shown you that
this is well defined. That from our assumption that
this always has a unique solution in x for any y here, I
can define this in a fairly reasonable way. So it definitely exists. And not only does it exist,
but we know that the composition of f with this
function that I just constructed here is equal to
the identity function on y. Now let's do another
little experiment. Let's take a particular-- let
me just draw sets again. This is our set X. Let me take some member
of set X, call it a. Let me take my set
Y right there. And so we can apply the function
to a and we'll get a member of set Y. Let's call that right there. Let's call that f of
a right there. Now, if I apply my magic
function here that always, I can give you any member of set Y
and I'll give you the unique solution in X to
this equation. So, let me apply that to this. Let me apply s to this. So, if I apply s to this it'll
give me the unique solution. So, let me write this down. So if I apply s to this, I'm
going to apply s to this-- and maybe I shouldn't point it back
at that, I don't want to imply that it necessarily
points back at that. So, let me apply s
that, s to this. So what is this going
to point to? What is that point going
to be right there? So that's going to be s of this
point, which is f of a, which we know is the
unique solution. So, this is equal to the
unique solution to the equation f of x is equal
to this y right here. Or this y right here is
just called f of a. Right? Remember, the mapping s just
mapped you from any member of a to the unique solution
to the equation f of x is equal to that. So this is the mapping from f of
a to the unique, so this s of f of a is going to be a
mapping to the-- or this right here, is going to be the
unique solution to the equation f of x is equal
to this member of y. And what's the remember
y I called? It's called f of a. Well, you could go say this in
a very convoluted way, but if I were to just, before you
learned any linear algebra, if I said look if I have the
equation f of x is equal to f of a. What is the unique solution
to this equation? What does x equal? x would have to be equal to a. So the unique solution to the
equation f of x is equal to f of a is equal to a. And we know that there's only
one solution to that because that was one of our starting
assumptions. So this thing is equal to a. Or we could write s of
f of a is equal to a. Or that the composition of s
with f is equal or applied to a is equal to a. Or that the composition of s
with f is just the identity function on the set x. Right? This is a mapping right
here from x to x. So we could write that the
composition of s with f is the identity on x. So, what have we done so far? We started with the idea that
you pick any y in our set capital-Y here and we're going
to have a unique solution x such that this is true. Such that f of x
is equal to y. That's what the assumption
we started off with. We constructed this function
s that immediately maps any member here with its unique
solution to this equation. Fair enough. Now from that, we said this
definitely exists. Not only does it exist, but
we figured out that the composition of f with our
constructed function is equal to the identity on the set y. And then we also learned that
s-- the composition of s with f is the identity
function on x. Let me write this. So we learned this, and we
also learned that the composition f with s is equal
to the identity on y. And s clearly exists because I
constructed it, and we know it's well defined because every
y-- for every y here there is a solution to this. So given that I was able to find
for my function f, I was able to find a function that
these two things are true. This is by definition. What it means to
be invertible. Remember, so this means
that f is invertible. Remember f being invertible,
in order for f to be invertible, that means there
must exist some function from, so if f is a mapping from to x
to y, invertibility means that there must be some function f
inverse that is a mapping from y to x such that, so I can write
there exists a function, the inverse function composed
with our function should be equal to the identity on x. And the inverse and the function
in the composition of the function, with the inverse
function, should be the identity on y. Well, we just found
a function. It exists, and that
function is s. Where both of these
things are true. We can say that s is
equal to f inverse. So f is definitely invertible. So, hopefully, you found
this satisfying. This proof is very subtle and
very nuanced because we keep bouncing between our
sets X and Y. But what we've shown is that if
f, in the beginning part of this video, we show that if f
is invertible then there is for any y a unique solution to
the equation f of x equals y. And the second part of the
video, we showed that the other way is true, That if-- let
me put it this way, that if for all Y, a member of
capital Y, there is a unique solution to f of x is equal to
x, then f is invertible. So the fact that both of these
assumptions imply each other, we can write our final
conclusion of the video. That f being invertible, if f,
which is a mapping from x to y is invertible, this is true if
and only if, and we could write that either as
a two-way arrow. Or we could write if for if and
only if so both of these statements imply each other. If and only if for all y, for
every y that is a member of our set y there exists a
unique-- I can actually write that like that means there's
exists a unique x for the-- or let me write this way there
exists a unique solution to the equation f of
x is equal to y. So that was our big takeaway
in this video. That invertibility of a function
implies there's a unique solution to this equation
for any y that's in the co-domain of our function.",Proof: Invertibility implies a unique solution to f(x)=y | Linear Algebra | Khan Academy,"Proof: Invertibility implies a unique solution to f(x)=y for all y in co-domain of f.

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/surjective-onto-and-injective-one-to-one-functions?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/linear-algebra-introduction-to-the-inverse-of-a-function?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,7GEUgRcnfVE
Proof-Relationshipbetweencrossproductandsinofangle_LinearAlgebra_KhanAcademy-7MKA2QlKvHc.en.csv,"The goal of this video is to
start with our definition of the cross product and the result
that we started off with or that we got to in a
different video-- I think it was three videos ago-- where
we found out that the dot product of two nonzero vectors,
a dot b, is equal to the product of their lengths. So the product of the length
of a with the length of b times the cosine of the
angle between them. We're going to start with
these two things. This definition of a cross
product in R3, the only place it really is defined, and
then this result. And we want to get to the result
that the length of the cross product of two vectors. And so obviously, when
you take a cross product you get a vector. But if you take its length you
get a number again, you just get a scalar value, is equal to
the product of each of the vectors' lengths. It's the product of the length
of a times the product of the length of b times the sin of
the angle between them. Which is a pretty neat outcome
because it kind of shows that they're two sides of
the same coin. Dot product has cosine,
cross product has sin. I'm sure you've seen
this before. Well you definitely have seen
it if you've watched my physics playlist. And I even do
a whole video where I talk about the intuition behind
what this really means. And I encourage you to re-watch
that, and I'll probably do that again in the
linear algebra context. But the point of this video
is to prove this to you. Is to prove that with this and
this, I can get to this. Now if you're just believe me,
and you just say, oh I've seen that before. And I just think it definitely
is the case, then you don't have to watch the rest of this
video because I'll tell you right now, it's going
to get dirty. It's going to be a hairy,
hairy proof. But if you're willing to watch
and bear with me, let's start proving this result. So the place I'm going to start
is with the idea of taking the length of
a cross b squared. That's a cross b right there. So I'm essentially taking the
length of this vector squared. And we saw in many videos and
I've used this idea multiple times, that if I just have some
arbitrary vector, let me just say some arbitrary
vector. And I take its length squared,
that's just equal to that vector dotted with itself or
the square of each of its terms summed up all the
way to xn squared. So what will this be equal to? Well this is just equal
to that vector. And we only have three
components, so it's equal to the sum of the squares of each
of these components. Let me write this down. It's equal to this
term squared. So let me write that down. a2 b3 minus a3 b2 squared. Plus this term squared. So plus a3 b1 minus
a1 b3 squared. And then finally, plus
that term squared. So plus a1 b2 minus
a2 b1 squared. And what is this equal to? Well let's just expand it out. Let's expand that out. So this term right here, we're
just going to have to do our expansion of the square
of a binomial. And we've done this
multiple times. So this is going to be equal
to a2 squared b3 squared. And then we're going to have
these two multiplied by each other twice. So minus 2. I'm just multiplying this out. Minus 2 times a2 a3 b2 b3. I'm just rearranging them
to get the order right. Plus a3 squared b2 squared. That term squared. Then I have to add this term. So plus a3 squared b1 squared
minus 2 times both of these terms multiplied. Minus 2 times a1 a3 b1 b3. Plus that term squared. a1 squared b3 squared. And then finally, this
term squared. So plus a1 squared b2 squared
minus 2 times a1 a2 b1 b2. Plus a2 squared b1 squared. So there you go. And let's see if we can write
this in a form-- well, I'm going to write this in
a form that I know will be useful later. So what I'm going to do is I'm
going to factor out the a2, a1, a3 squared terms. So I could
write this as-- let me pick a new neutral color. So this is equal to, if I just
write a1 squared, where's my a1 squared terms? I got that one right there and
I have that one right there. So a1 squared times b2 squared
plus b3 squared. This would be 3 squared. Good enough. Now where are my a2
squared terms? a plus a2 squared times-- I have
that one and that one. So times b1 squared. That's that. Plus b3 squared. And then finally, let me
pick another new color. I can go back to yellow. Plus a3 squared times--
well that's that term and that term. So b1 and b2. So b1 squared plus b2 squared. And obviously, I can't forget
about all of that mess that I have in the middle, all of
this stuff right here. So plus, or maybe I should write
minus 2 times all of this stuff. Let me just write it real fast.
So it's a2 a3 b2 b3 plus a1 a3 b1 b3. Plus a1 a2 b1 b2. There you go. Now let's put this aside
for a little bit. Let me put this on the side
for a little bit. We'll let that equation rest
for a little while. And remember, this is just an
expansion of the length of a cross b squared. That's all this is. So just remember that. And now, let's do another
equally hairy and cumbersome computation. Let's take this result
up here. We know that the magnitude or
the length of a times the length of b times the angle
between them is equal to a dot b. Which is the same thing as
if we actually do the dot product, a1 times b1 plus a2
times b2 plus a3 times b3. Now, just to kind of make sure
that I get to do the hairiest problem possible, let's take
the square of both sides. If we square this side,
you get a squared b squared cosine squared. Then you got a dot b
squared or you get this whole thing squared. So what's this whole
thing squared? For me, it's easier to just
write out the thing again. Instead of writing a square,
just multiply that times a1 b1 plus a2 b2 plus a3 b3. And let's do some polynomial
multiplication. So first, let's multiply this
guy times each of those guys. So you have a1 b1 times--
well there a1 b1. I'm going to do it right here. You get a1 squared b1 squared
plus a1-- plus this guy times this guy. Plus a1 a2 times b1 b2. Plus this guy times that guy. Plus a1 a3 times b1 b3. Fair enough. Now let's do the second term. We have to multiply this guy
times each of those guys. So a2 b2 times a1 b1. Well that's this
one right here. a2 b2 times a1 b1. I wrote it right here because
this is really the same term and eventually, we want
to simplify that. So that's that times that guy. Then we have this guy times
that over there. So let me write it over here. So that's a2 squared
b2 squared. Put a plus right there. And then finally, this middle
guy times this third guy. So let me write it over here. Plus-- so a2 a3 b2 b3. Now, we only have one left. Maybe I'll do it in
this blue color. I have to multiply this guy
times each of those guys. So a3 b3 times a1 b1. That's the same thing as
this term right here. Because you have a3. Let me write it right here. You have a3 b3 times a1 b1. Then you have this guy times
that guy, which is this because it's a3 b3
times a2 b2. Let me put a little
plus sign there. And then finally, you have
this guy times himself. So you have a3 squared
b3 squared. And so if you add up all
of this business here what do you get? I'll switch to another color. You have a1 squared
b1 squared. Plus, and I'm doing these colors
in a certain way on purpose, plus a2 squared
b2 squared. Plus a3 squared b3 squared. Plus, and let me do it in this,
I'll do it in white. Plus, what do you have here? You have this term times 2. You have this term times 2. And then you have this
term times 2. So plus 2 times a1-- let
me write that down. Plus 2 times a1 a2 b1 b2--
that's that term. Plus this one right here. Plus a1 a3 b1 b3. Finally, plus this one. a2 a3 plus b2 b3. And you might have noticed
something interesting already. If you compare this term right
here, if you compare that guy right there to this guy right
there, they're the same thing. You have an a1 a2 b1
b2, a1 a2 b1 b2. This term and that term
are the same. Let's look at the other terms.
Let me pick a nice color. a1 a3 b1 b3, a1 a3 b1 b3. That term and that
term is the same. And then finally, if you
compare a2 a3 b2 b3. This shouldn't be a plus. This is just this one. So a2 a3-- they're
all multiplied. a2 a3 b2 b3, a2 a3 b2 b3. This term and this
term is the same. And in this expression, when we
expanded it out, we have 2 times this, positive
2 times this. And this term right here when
we expanded it out, we have minus 2 times this. So let's see if we can simplify
things a little bit. So what happens if we add
this guy to this guy? Let's do it. So it's a little exciting. So we get a cross b, the
length of that squared. And we're going to add to that
this expression right here, so plus the length of a squared
times the length of b squared times the cosine of the angle
between them squared. What's that going to equal? It's going to be equal to this
thing plus this thing. Let's do a simplification. What's this thing
plus this thing? Well we already said this is
the minus 2 times this. This is the plus 2 times this. So this guy-- let me
be very clear. This right here is going
to cancel out. When we add the two terms
it's going to cancel out with this guy. These guys are going
to cancel out. Thank God. Cancel out. Makes our life a little
bit easier. And what are we left with? We're left with this right here
plus that right there. Then we see we have an a1
squared term, so we just add the coefficients on
the a1 squared. We add the coefficients
of the a2 squared. We add the coefficients
of the a3 squared, and what do we get? We get a1 squared times this
coefficient plus this coefficient. So you get b1 squared plus b2
squared plus b3 squared. Things are starting to
look a little bit orderly all of a sudden. And then you have plus a2
squared times all of their coefficients added up. So b1 squared plus b2 squared
plus b3 squared. And then finally, in yellow,
you have plus a3-- sorry, I was trying to do
that in yellow. You have a3 squared
and you have that. You have b1 squared, b2 squared
and b3 squared. So b1 squared plus b2 squared
plus b3 squared. And as you see, we're
multiplying all of these things by this b1 squared plus
b2 squared plus b3 squared, so we can actually factor that out
and we get something very interesting. So this is equal to, if we
factor this thing out of all the terms, we get b1 squared
plus b2 squared plus b3 squared times my a squared
terms. Times a1 squared plus a2 squared plus a-- I'm getting
excited, the home stretch is here-- a3 squared. So these two things are
equal to each other. But what's this thing? What's another way I
could write this? This is the same thing as b
dot b or the length of my vector b squared. And what's that? That's the length of my
vector a squared. This is my length of my
vector a squared. That's just a dot a. Let me rewrite everything. So we have the length of a--
that's a darker green. a cross b squared
plus this thing. Plus the length of-- plus,
let me actually just copy and paste it. It gets monotonous. Plus that thing right there. Why isn't it? If I control, copy and paste. So it's not working. All right, so plus that thing. The length of a squared times
the length of b squared times the cosine of the angle
squared between them is equal to that. Now what if we subtract
this from both sides? What do we get? We get the length of a cross
b squared is equal to this minus this. And we can factor-- so
let me write that. Actually, let me just subtract
this on this line. So if I subtract it from both
sides, I could get that out there and I'll put the minus the
length of a squared times the length of b squared times
the cosine squared of the angle between them. And we can factor this a squared
b squared, the lengths of the two vectors out, right? I'm just switching the order. So this is equal to the lengths
of a squared times the length of b squared times-- and
this is exciting-- time, when you factor this out of
this, you just get a 1, minus cosine squared of theta. And what is 1 minus cosine
squared of theta? Well, sin squared of theta plus
cosine-- this is the most basic trig identity. Sin squared of theta plus cosine
squared of theta is equal to 1. So if you subtract cosine
squared from both sides you get sin squared of theta is
equal to 1 minus cosine squared of theta. So this is sin squared
of theta. And then what happens if
you take the square root of both sides? This is really exciting. You get the length of vector a
crossed with vector b is equal to the length of vector a times
the length of vector b times the sin of the
angle between them. I just took the square root
of both sides of this. And we finally get our result. I never thought I
would get here. And so hopefully you're
satisfied. You never have to take
this as kind of a leap of faith anymore. And hopefully you're satisfied
with this. And I'm going to stop recording
this video before I make a careless mistake or the
power goes out; that would ruin everything.",Proof: Relationship between cross product and sin of angle | Linear Algebra | Khan Academy,"Proof: Relationship between the cross product and sin of angle between vectors

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/dot-and-cross-product-comparison-intuition?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/linear-algebra-cross-product-introduction?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,7MKA2QlKvHc
Matrixvectorproducts_Vectorsandspaces_LinearAlgebra_KhanAcademy-7Mo4S2wyMg4.en.csv,"In the last couple of videos,
I already exposed you to the idea of a matrix, which is
really just an array of numbers, usually a 2-dimensional
array. Actually it's always
a 2-dimensional array for our purposes. So if I have an m by n matrix,
the m is just the number of rows, and then the n is just
the number of columns. So let me write out
the m by n matrix. So I'll just specify, let's have
the m by n matrix A, it's a capital bold A. And it is equal to, I'll be as
general as possible, first entry is in, I'll just call that
lowercase a, it's in row 1 column 1. The next entry is
row 1 column 2. And you go all the way
to row 1 column n, you have n columns. And then when you go down, you
go to the next row, it will be row 2 column 1. And then you keep going
all the way down to row m column n. And then of course, what? This entry is going to be, row
2, let me write that a little smaller, row 2 column 2. And you go all the way, and
you're going to have row m column n. And so if you think about it,
you're going to have how many total entries here? You're going to have m entries
this way, n that way. So you're going to m times
n total entries. And I think you're pretty
familiar with this idea already of a matrix, you
probably saw this in your Algebra II classes. So what we want to do now in
this video is relate our notion of a matrix to everything
we already know about vectors. Or maybe introduce some
operations that allow matrix and vectors to interact
with each other. And maybe the most natural one
is multiplication, or taking the product. So what I'm going to do in this
video is define what it means when we take the product
of our matrix A, of any matrix A, I've written this as
general as possible, with some vector x. And our definition will only
work if x, the vector we're multiplying A by, has
the same number of components as A has columns. So this is only valid for an x
that looks like this: x1, x2, all the way down to x n. So let me be very clear with
this, this vector, I guess you could do it a different height
than this vector. What matters is that the same
number of A's you have in this direction, you have n A's
here, then you have n components of this vector
right here. And if you have that constraint,
if the length of your vector, or the number of
components in vector is equal to the number of columns in your
matrix, then we define this product to be equal to --
so this is my vector x -- so this is a definition. There's nothing in nature that
told us it had to be defined this way. It's just human beings, or
mathematicians, decided that this is a useful convention to
the define the multiplication, or the product, of a matrix
and a vector. So we'll define A times
our vector x. These are both bold, this is
a matrix, that's a vector. And the convention, if I didn't
draw the little vector symbol, your textbooks would
just bold out the x, so that it'll be a lowercase x. Lower case is vector, uppercase
is matrix, both of them are bolded. That tells you that you're
not just dealing with regular numbers. So we're defining this to be
equal to -- let me write it out fairly large. You're going to take each row,
and we're going to show you that there's multiple ways to
kind of visualize this, but it's going to a11 times x1,
let me write that down. So a11 times x1 plus a12 times
x2, all the way to plus a1n times xn. So the product of this matrix,
this m by n matrix and this n component vector, will be a new
vector, the first entry of which is essentially each
of these entries times a corresponding entry here,
and you add them all up. And as you can see, that's
already looking fairly similar to a dot product, and I'll
discuss that in a second. But let me finish my definition
before I start talking about what it
means, or what it might be related to. So that was that first row
right there, it'll just look like that. We just multiply that
times this thing to get that row there. Now the second row -- I want to
do it in a different color -- remember this is
a definition. Human beings came
up with this. Nothing about nature said we
had to do it this way, but it's just nice and convenient. So our second row will have a21
times x1, we'll just do the whole thing over again,
but this time we're multiplying this row times
this column vector. So a21 times x1 plus a22 times
x2 all the way until we get to -- I wanted to do that in
magenta -- a2n times xn. So we multiplied this entire row
times that entire column. This term times that term, plus
this term plus this term. All the way down to plus
this last term times that last term. And we keep doing this for every
row until we get to the m-th row, and then the
m-th row will be am1. This is the m-th row
first column. am1 times x1 plus -- it's hard
to keep switching colors -- plus am2 times x2, all the way
until we get to amn times xn. So what is this vector
going to look like? It's essentially going to have
-- let's say we call this vector-- Let's say it's
equal to vector b. What does vector b look like? How many entries is
it going to have? Well it has an entry for each
row of this, right? We're taking each row and we're
essentially taking the dot product of this row vector
with this column vector. And I'll be a little bit
more formal with the notation in a second. But I think you understand that
this is a dot product. The first component times the
first component plus the second component times the
second component plus the third component times the third
component, all the way to the n-th component plus
the n-th component times the n-th component. So this is essentially the dot
product of this row vector. We've been writing all of our
vectors as columns, so we could call them column vectors,
you're just writing them as rows. And we can be a little bit
more specific with the notation in a second, but what's
this going look like? Well we're doing this
m times, so we're going to have m entries. You're going to b1 b2
all the way to bn. If you viewed these all as
matrices, you can kind of view it as -- and this will
eventually work for the matrix math we're going to learn --
this is an m by n matrix and we're multiplying it by -- how
many rows does this guy have? He has n rows. He has n components, and
he has 1 column. So m by n times an n by 1, you
essentially can ignore these middle two terms, and they'll
result with -- how many rows does this guy have? He has m rows, and 1 column. These middle two terms have to
be equal to each other just for the multiplication to be
defined, and then you're left with an m by 1 matrix. So this was all abstract, let
me actually apply it to some actual numbers. But it's important to actually
set the definition. Now that we have the definition
we can apply it to some actual matrices
and vectors. So let's say we have
the matrix. Let's say I want to multiply the
matrix minus 3, 0, 3, 2. Now I'll do this
one in yellow. 1, 7, minus 1, 9. And I want to multiply
that by the vector. Now how many components,
or rows, does this vector have to have? Well my matrix times vector
product, or multiplication, is only defined if my vector has
as many components as this matrix has columns. So we have 1, 2, 3, 4 columns. So this guy's going to have 4
components for us even to be able to multiply
them, otherwise it wouldn't be defined. So let me put 4 entries here. Let's say it's 2, minus 3,
4, and then minus 1. So what is this going
to be equal to? The first term of this is going
to be the dot product of this first row with
this vector. And then the second entry is
going to be the dot product of this row vector with
this column. So let's do it. So it's going to be minus 3
times 2, I'm not going to color code it, minus 3 times 2
plus 0 times minus 3 plus 3 times 4 plus 2 times minus 1. And now my second row, or I
guess my second component in this vector, is going to be 1
times 2 plus 7 times negative 3 plus minus 1 times 4
plus 9 times minus 1. And so what does this
simplify to? This is equal to minus 3 times
2 is minus 6 plus 0 plus 12. This is 12. Minus 2. And then this is simplified to
2 minus 21 minus 4 minus 9. So this is equal to this top
term, let's see, I have a minus 6 plus 12 is
6 minus 2 is 4. And then I have 2 minus
21 is minus 19. I want to make sure I get
the math right here. Minus 21 minus 9 is minus 30 and
I have a minus 34 and then I have a plus 2, so minus 32. So that's my product
right there. And let me be very
clear right here. Everything we've been used to
right now, we've been writing our vectors as column vectors. But you can view each of these
right here as a row vector. But let me be even better. Let's say that vector, let
me call vector a, a1. So let me define vector a1 is
equal to minus 3, 0, 3, 2. And let me define vector a2 to
be equal to 1, 7, minus 1, 9. So all I did is I wrote these
guys, but I wrote them in our standard vector form. I wrote them as column
vectors. So what we can define to turn
these guys into row vectors is the transpose function. In transpose, you just turn the
rows into columns and the columns into rows. So if this is a1, then a1
transpose will just be the row version of this. So it's minus 3, 0, 3, 2. And then a2 transpose would be
equal to 1, 7, minus 1, and 9. And then this multiplication
right here, we can rewrite it as -- we have vector a1
transpose for the first row. These are vectors now,
row vectors. And then this is a2 transpose. The transpose should be
the super script. This vector can be written
exactly like this because this is the first row, this
is the second row. Times the vector, let me just
call this vector x, that right there is vector x. We can now rewrite the
definition as this would be equal to what? This first row right here
that we wrote out, this was a1 dot x. You know all about
the dot products. The first row was a1 dot x. It's minus 3 times 2 plus 0
times minus 3 plus 3 times 4. It's a1 dot x. And this is useful because
when I defined the dot product, I only defined it with
column vectors like this. And I'm dotting 2
column vectors. I haven't formally defined
a row vector times a column vector. So now I can say if this is just
a standard column factor, like we've been working with, I
can write my matrix as each row is the transpose
of a column vector, or it's a row vector. Then I can write this product
as just the dot products of each of these transpose, or
I guess you could say the inverse transpose, with this
vector right here. And then obviously the second
row is going to be a2 dot x. The second row is a2 dot x, is 1
times 2 plus 7 times minus 3 minus 1 times 4 plus
9 times minus 1. So just like that. So this is one way to view it. Matrix times the vector is just
like the transpose of its rows dotted with the vector
you're ds it by. This is one way to perceive
matrix multiplication. Now the other way to perceive
it -- let me do it with a different example. Those numbers are getting
a little bit tiresome. Let's say I have the matrix A,
nice and bold, is equal to 3, 1, 0, 3, 2, 4, 7, 0, minus
1, 2, 3, and 4. And I need to multiply this
times a 4 component vector. So let me call vector x is equal
to x1, x2, x3, and x4. Now instead of viewing these as
row vectors, we could view A as a set of column vectors. We could call this thing
right here vector 1. We call this thing right
here vector 2. We call this thing right
here vector 3. And we call this thing
right here vector 4. Then we could rewrite our matrix
A as being equal to just a bunch of column
vectors. So we could rewrite it vector
1, vector 2, vector 3, and vector 4. So how can the matrix
multiplication be interpreted in this context? Well what did we do? When we multiply these guys,
all of the elements in here always get multiplied by x1. Let me start some of the
multiplication here, just from our definition. So if I multiply A times x,
I'll start it off, maybe I won't do the whole thing. I just want you to
see the pattern. It's 3 times x1 plus 1 times
x2 plus 0 times x3 plus 3 times x4. That's the first entry. And then you have 2 times x1
plus 4 times x2 all the way. And then you finally have
minus 1 times x1 plus 2 times x2. You get the idea. But what's happening here? This first vector is always
being multiplied by the scalar x1. In fact you can view this part
of the entries right here. We're just multiplying this guy
times the scalar of x1 in every case. You have 3, 2, minus
1, 3, 2, minus 1. We're multiplying by
the scalar of x1. And then we're adding that to
this guy times the scalar x2 and then we're adding that to
this guy times the scalar x3. So we can rewrite A times x as
being equal to the scalar x1 times the vector v1 plus
the scalar x2. This is the scalar x1 times the
vector v1 plus the scalar x2 times the vector v2. I want to do that in yellow. Plus x3 times the vector
v3 plus the scalar x4 times the vector v4. And obviously if we had n terms
here, we'd have to have n vectors here, and we
could just make this more general to n. But what's interesting here is
now the product Ax can be interpreted as a linear
combination. These are just arbitrary numbers
depending on what our vector x is. So depending on our vector
x, we're taking a linear combination of the column
vectors of A. So this is a linear
combination of column vectors of A. So this is really interesting. I'm sure you've been exposed
to matrix multiplication in the past. But I really want you
to absorb these two ways of interpreting it, because
they'll be important when we talk about column spaces
and things like that in the future. Actually there's other ways
you can actually interpret that as a transformation
of this vector x. But I won't cover that in this
video just for brevity. But you can interpret it as a
weighted combination, or a linear combination of the column
vectors of A, where the matrix X dictates what
the weights on each of the columns are. Or you can interpret it as,
essentially, the dot product of the row vectors, or you could
define the row vectors as a transpose of
column vectors. The dot product of those column
vectors, each of the corresponding column vectors,
with your matrix X. So these are both completely
valid interpretations, and hopefully this video at least
gives you a working knowledge of what matrix multiplication
is. And even better, gives you a
little bit deeper sense of all of the different ways that
it can be interpreted.",Matrix vector products | Vectors and spaces | Linear Algebra | Khan Academy,"Defining and understanding what it means to take the product of a matrix and a vector

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/introduction-to-the-null-space-of-a-matrix?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/matrices_elimination/v/matrices-reduced-row-echelon-form-3?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,7Mo4S2wyMg4
Pointdistancetoplane_Vectorsandspaces_LinearAlgebra_KhanAcademy-7rIFO8hct9g.en.csv,"What I want to do
in this video is start with some point
that's not on the plane, or maybe not necessarily
on the plane. So let me draw a
point right over here. And let's say the coordinates
of that point are x 0 x sub 0, y sub 0, and z sub 0. Or it could be specified
as a position vector. I could draw the position
vector like this. So the position vector-- let
me draw a better dotted lines. The position vector for this
could be x0i plus y0j plus z0k. It specifies this
coordinate right over here. What I want to do
is find the distance between this point
and the plane. And obviously, there could
be a lot of distance. I could find the distance
between this point and that point, and this
point and this point, and this point this point. And when I say I want
to find the distance, I want to find the
minimum distance. And you're actually going to
get the minimum distance when you go the perpendicular
distance to the plane, or the normal
distance to the plane. And we'll, hopefully,
see that visually as we try to figure out how
to calculate the distance. So the first thing we can
do is, let's just construct a vector between
this point that's off the plane and some
point that's on the plane. And we already have a point
from the last video that's on the plane, this x
sub p, y sub p, z sub p. So let's construct
a vector here. Let's construct this
orange vector that starts on the plane, it's
tail is on the plane, and it goes off the plane. I want to do that in orange. It goes off the plane to
this vector, to this position x0 y0 z0. So how could we specify this
vector, right over here? Well, that vector, let
me call that vector, well, I'll just call that
vector, what letters have I'm not used yet? Let me call that vector f. Vector f is just going to
be this yellow position vector, minus this
green position vector. So it's going to
be, this x component is going to be the difference
of the x-coordinates, it's y-coordinate is going the
difference of the y-coordinate. S So it's going to
be x0 minus x sub p. I subtracted the
x-coordinates, i. Plus y0 minus ypj plus-- we'll
go to the next line-- plus z0 minus zp minus zpk. So fair enough. That's just some vector
that comes off of the plane and onto this point. But what we want to find
out is this distance. We want to find out
this distance in yellow, the distance that if I were
take a normal off of the plane and go straight to
the point, that's going to be the
shortest distance. And actually, you can
see it visually now. Because if look at-- we can
actually form a right triangle here-- so this base of the right
triangle is along the plane. This side is normal
to the plane. So this is a right angle. And you can see, if I take
any point, any other point on the plane, it will form a
hypotenuse on a right triangle. And obviously the shortest
side here, or the shortest way to get to the
plane, is going to be this distance, right here,
as opposed to the hypotenuse. This side will always be
shorter than that side. So given that we know
this vector here, how can we figure
out this length here? How can we figure out
this length here in blue? Well, we could figure out
the magnitude of this vector. So the length of
this side right here is going to be the
magnitude of the vector, so it's going to be the
magnitude of the vector f. That'll just give
us this length. But we want this blue length. Well, we could think about it. If this was some angle-- I know
the writing is getting small. If this was some angle theta, we
could use some pretty straight up, pretty straightforward
trigonometry. If the distance
under question is d, you could say cosine of theta
is equal to the adjacent side over the hypotenuse. Or is is equal to d-- d
is the adjacent side-- is equal to d over the hypotenuse. Well, the hypotenuse is the
magnitude of this vector. It's the magnitude
of the vector f. Or we could say the
magnitude of the vector f times the cosine of
theta-- I'm just multiplying both sides times the magnitude
of vector x-- f is equal to d. But still you might say, OK,
well Sal, we know what f is. We can figure that out. We can figure out its magnitude. But we don't know what theta is. How do we figure out what theta? And to do that, let's just
think about it a little bit. This angle, this angle of
theta, is the same angle. So this distance here
isn't necessarily the same as the length
of the normal vector. But it's definitely going
in the same direction. So this angle here, is
really the same thing as the angle between this
vector and the normal vector. And so you might remember
from earlier linear algebra, when we talk about the dot
product of two vectors, it involves something
with the cosine of the angle between them. And to make that fresh
in your mind, let's multiply and divide both sides. Let me multiply and divide
the left side of this equation by the magnitude of
the normal vector. So I'm obviously not
changing its value. I'm multiplying and
dividing by the same number. So I'm going to multiply by the
magnitude of the normal vector. And I'm going to divide by the
magnitude of the normal vector. So I'm just essentially
multiplying by 1. So I have not changed this. But when you do it in
this, it might ring a bell. This expression up here,
this expression right here, is the dot product of the
normal vector and this vector right here, f. So this right here
is the dot product. This is n dot f, up there. It's equal to the product
of their magnitudes times the cosine of
the angle between them. So the distance, that shortest
distance we care about, is a dot product between this
vector, the normal vector, divided by the magnitude
of the normal vector. So let's do that. Let's take the dot product
between the normal and this. And we already figured
out, in the last video, the normal vector, if you
have the equation of a plane, the normal vector is
literally, its components are just the coefficients
on the x, y, and z terms. So this is a normal
vector right over here. So let's literally
take the dot product. So n dot f is going to be
equal to A times x0 minus xp. I'll do that in pink. So it'll be Ax0 minus Axp. And then plus B times
the y component here. So plus By0. I'm just distributing
the B, minus Byp. And then plus-- I'll
do another color here, that's too close of a color--
plus C times the z component. So plus Cz0 minus Czp. And all of that over the
magnitude of the normal vector. So what's the magnitude of
the normal vector going to be? It's just the square
root of the normal vector dotted with itself. So it's just each of these
guys squared added to themself, and you're taking
the square root. So it's the square
root-- maybe I can do a nicer looking radical
sign than that-- of A squared plus B squared plus C squared. Now, what is this up
here simplified to? Let me just rewrite this. So this is the
distance in question. This right here is
equal to the distance. But let's see if
we can simplify it. So first, we can take all
of the terms with the x0. These involve the point
that sits off the plane. Remember, x0, y0, z0
sat off the plane. So this is Ax0
plus By0 plus Cz0. And then what are
these terms equal to? What are these terms? Negative Axp minus
Byp minus Czp? Well, if you remember
here, D in the equation of in the equation
of a plane, D, when we started
in the last video when we tried to figure out
what the normal to a plane is, D is-- if this point
xp sits on the plane-- D is Axp plus Byp plus Czp. Or another way you
could say it is, negative D would be
negative A-- and it's just the difference between lowercase
and uppercase here, right? We're saying that lowercase is
the same as this uppercase A. So it's negative Axp
minus Byp minus Czp. I'm just using what we
got from the last video. This is what D is so negative
D will be this business. And that's exactly
what we have over here. We have negative Axp
negative Byp negative Czp. So all of this term,
this term, and this term simplifies to a minus D. And
remember, this negative capital D, this is the D from the
equation of the plane, not the distance d. So this is the numerator
of our distance. And then the denominator
of our distance is just the square root of A
squared plus B squared plus C squared. And we're done. This tells us the distance
between any point and a plane. And this is a pretty
intuitive formula here. Because all we're
doing, if I give you-- let me give
you an example. Let's say I have the plane. If I have the plane 1x minus
2y plus 3z is equal to 5. So that's some plane. And let me pick some point
that's not on the plane. So let's say I have the point,
I don't know, let me say I have the 2, 2, 3. And let me make sure
it's not on the plane. So it's 2 minus 6 is
negative-- yeah, so this won't. Let me just pick a random 1. So this definitely
is not on the plane, because we have
2 minus 6 plus 3. That gives us negative
1, which is not 5. So this is definitely
not on the plane. We can find the distance
between this point and the plane using the formula
we just derived. We literally just evaluate at--
so this will just be 1 times 2. Let me use that same color. 1 times 2 minus 2
times-- I'm going to fill it in-- plus 3
times something, minus 5. All of that over, and I
haven't put these guys in. Let me do that right now. So 1 times 2 minus 2
times 3 plus 3 times 1. This 1 minus 5, you're
kind of bringing it over to the left hand side. All of that over
the square root of 1 squared, which is
1, plus negative 2 squared, which is 4, plus
3 squared, which is 9. So it's going to be equal to,
let's see, this is 2 minus 6, or negative 6. And then you have plus 3. And then minus 5. So this is what? This is 5. 2 plus 3 is 5 minus 5. So those cancel out. So this is negative 6. So it's equal to negative
6 over the square root of 5 plus 9 is 14. Over the square root of 14. And you're done. So hopefully, you
find that useful. And hopefully, we can apply this
in the other example problems.",Point distance to plane | Vectors and spaces | Linear Algebra | Khan Academy,"Distance between a point and a plane in three dimensions

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/distance-between-planes?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/normal-vector-from-plane-equation?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,7rIFO8hct9g
Binarytree-LevelOrderTraversal-86g8jAQug04.en.csv,"In this lesson, we are going to write code
for level order traversal of a binary tree. As we had discussed in our previous lesson,
in level order traversal, we visit all nodes at a particular depth or level before visiting
the nodes at next deeper level. For this binary tree that I am showing here,
if I have to traverse the tree and print the data in nodes in level order, then this is
how we will go. We will start at level 0 and print F and now
we are done with level-0, so we can go to level 1 and we can visit the nodes at level
1 from left to right. From F we will go to D and from D we will
go to J. Now level 1 is done, so we can go to level 2. So, we will go like B, E, G and then K and
now we can go to next level. A, C, I and finally we will be done at H.
his is the order in which we should visit the nodes, but the question is, how can we
visit the nodes in this order in a program. Like linked list, we can't just have one pointer
and keep moving it. If I'll start with a pointer at root, lets
say I have a pointer named current to point to the current node that I am visiting, then
its possible for me to go from F to D using this pointer because there is a link. So, I can go left to D. But from D, I cannot
go to J because there is no link from D to J. The only way we can go to J is from F and
once we have moved the pointer to D, we can't even go back to F because there is no backward
link from D to F. So, what can we do to traverse the nodes in level order. Clearly, we cant go with just one pointer. What we can do is, as we visit a node, we
can reference or address of all its children in a queue, so we can visit them later. A node in the queue can be called discovered
node whose address is known to us, but we have not visited it yet. Initially, we can start with address of root
node in the queue to mean that initially this is the only discovered node. Lets say for this example tree, address of
the root node is 400. And I'll assume some random addresses for
other nodes as well. I will mark a discovered node in yellow. Ok, now initially I am enqueuing the root
node and by storing a node in the queue, I'll mean storing the address of the node in the
queue. So, initially, we are starting with one discovered
node. Now as long as the queue has some discovered
node, at least one discovered node i.e as long as the queue is not empty, we can take
out a node from the front, visit it and then enqueue its children. Visiting a node for us is printing the value
in that node, so I'll write F here. And now, I'll enqueue the children of this
root node. First I'll enqueue the left child and then
the right child. I'll mark visited node in another color. Ok, now we have one visited node and 2 discovered
nodes. And now once again, we can take out the node
at front of the queue, visit it and enqueue its children. By using a queue, we are doing 2 things here. First of all, as we are moving from a node,
we are not loosing reference to its children because we are storing the references and
then because queue is a first in first out structure, so a node that is discovered first,
that is inserted first will be visited first. So, we will get this order that we are desiring. Give this some thought and its not very difficult
to see. Ok, so now we can dequeue and visit this node
at address 200. And once again, before I move on from this
node, I need to enqueue its children. So, now at this stage we have 2 visited nodes,
3 discovered nodes and 6 undiscovered nodes. And now we can take out the next node from
front of queue. We'll visit it and enqueue its children. If we will go on like this, all the nodes
will be visited in the order that we are desiring. At this stage, we can dequeue node at 120,
visit it and enqueue its children. So, we will go on like this until all the
nodes are visited and the queue is empty. After B, we will have E here. Nothing will go into the queue this time. Next we will have G here and the address of
I will go into the queue. Now, K will be visited. Now at this stage, we have reference to 3
Nodes in the queue. Now, we will visit this node at 320 with value
A. Then we have C and now we will print I and the node with value H, the node with data
H will go into the queue. Finally, we will visit this node and now we
are done with all the nodes, the queue is empty. Once the queue is empty, we are done with
our traversal. So, this is the algorithm for level order
traversal of a binary tree. As you saw, in this approach, at any time,
we are keeping a bunch of addressees in the memory, in the queue instead of using just
one pointer to move around. So, of course we are using a lot of extra
memory and I'll talk about the space complexity of this algorithm in some time. I hope you got the core logic right. Lets now write code for this algorithm. I am going to write C++ here. This is how I am defining node for my binary
tree. I have a structure here with 3 fields, one
to store data and the data-type is character this time, because in the example tree that
we were showing earlier, data type was character and we have 2 more fields that are pointers
to node - one to store the address of left child and another to store the address of
right child. Now, what I want to do here is I want to write
a function named LevelOrder that should take address of the root node as argument and print
the data in the nodes in level order. Now, to test this function, I'll have to write
a lot of code to create and insert nodes in a binary tree. I'll have to write some more functions. I'll skip writing all that code. You can pick the code for creation and insertion
from previous lessons. All I'll write is this function LevelOrder. Now, in this function here, I'll first take
care of one corner case. If the tree is empty i.e if root is NULL,
we can simply return, else if the tree is not empty, we need to create a queue. I'm not going to write my own implementation
of queue here. In C++, we can use the queue in standard template
library and to use it, first we will have to write a statement like #include&lt;queue&gt;
here. And now, I can create a queue of any type. In this function, I'll create a queue of pointer
to node with a statement like this. Now, as we had discussed earlier, initially,
we start with one discovered node in the queue. The only node known to us initially is the
root node. With this statement, queue.push(root), I have
inserted the address of root node in the queue. And now, I will run this while loop for which
the condition is that queue should not be empty and what I really mean here is that
while there is at least one discovered node, we should go inside the loop and inside the
loop, we should take out a node from the front. This function front returns the element at
front of the queue and because the data-type is pointer to node, I'm collecting the return
of this function in this pointer to node named current. Now, I can visit this node being pointed by
current and by visiting, we mean reading the data in that node. I'll simple print the data. And now, we want to push the addresses of
children of this node into the queue. So, I'll say that if the left child is not
NULL, insert it into the queue and similarly, if right child is not NULL, push it into the
queue or rather push its address into the queue. And I'll write one more statement to remove
the element from front of the queue. With call to front, the element is not removed
from the queue. With this call pop, we are removing the element. Ok, so this is implementation of level order
traversal in C++. You can check the description of this video
for link to source code and there you can also find all the extra code to test this
function. Lets now talk about time and space complexity
of level order traversal. If there are n Nodes in the tree and in this
algorithm, visit to a node is reading the data in that node and inserting its children
in the queue, then a visit to a node will take constant time and each node will be visited
exactly once. So, time taken will be proportional to the
number of nodes. Or in other words, we can say that the time
complexity is big-oh of n. For all cases, irrespective of the shape of
the tree, time complexity of level order traversal will be big-oh of n. Now lets talk about space complexity. Space complexity, as we know is the measure
of rate of growth of extra memory used with input size. We are not using constant amount of extra
memory in this algorithm. We have this queue that will grow and shrink
while executing this algorithm. Assuming that the queue is dynamic, maximum
amount of extra memory used will depend upon maximum number of elements in the queue at
any time. We can have couple of cases. In some cases, extra memory used will be lesser
and in some cases, extra memory used will be greater. For a tree like this where each node has only
one child, we will have maximum one element in the queue at any time. During each visit, one node will be taken
out from the queue and one node will be inserted. So, the amount of extra memory taken will
not depend upon the number of nodes. Space complexity will be big-oh of 1. But for a tree like this, the amount of extra
memory used will depend upon number of nodes in the tree. This is a perfect binary tree. All the levels are full. If you can see, as the algorithm will execute,
at some point for each level, all the nodes in that level will be in the queue. In a perfect binary tree, we will have n/2
nodes at the deepest level. So, maximum number of nodes in the queue is
going to be at least n/2. So, basically extra memory used is proportional
to n - the number of nodes. So, space complexity will be big-oh of n for
this case. I'm not going to prove it, but for average
case, space complexity will be O(n). So, for both worst and average cases, we will
be big-oh of n in terms of space complexity and when we are saying best, average and worst
cases here, its only going by space complexity. Time complexity will be big-oh of n for all
cases. So, this is time and space complexity analysis
of level order traversal. I'll stop here now. In next lesson, we will discuss depth first
traversal algorithms - Preorder, Inorder and PostOrder. This is it for this lesson. Thanks for watching !",Binary tree: Level Order Traversal,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have discussed level order traversal algorithm for binary tree.

See source code here:
https://gist.github.com/mycodeschool/9507131

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,86g8jAQug04
Creatingaslopefield_Firstorderdifferentialequations_KhanAcademy-8Amgakx5aII.en.csv,"- [Voiceover] Let's say that we have the differential equation
dy dx or the derivative of y with respect to x is
equal to negative x over y. Let's say we don't know how
to find the solutions to this, but we at least want to get a sense of what the solutions might look like. And to do that what we
could do is we could look at a coordinate plane, so
let me draw some axes here. So let me draw relatively
straight line alright. So that's my y-axis and this is my x-axis. Let me mark this as one, that's
two, that's negative one, negative two, one, two,
negative one, and negative two. And what I could do is since
this differential equation is just in terms of xs and
ys and first derivatives of y with respect to x, I
could sample points on the coordinate plane, I could look
at the x and y coordinates substitute them in here, figure out what the slope is going to be. And then I could visualize
the slope if a solution goes through that point what
the slope needs to be there and I can visualize that
with a line segment, a little small line segment that has the same slope as the slope in question. So let's actually do that. So let me setup a little table here. I'm going to do a little table here to do a bunch of x and y values. Once again I'm just sampling some points on the coordinate plane
to be able to visualize. So x, y and this is dy dx. So let's say when x is zero and y is one, what is the derivative
of y with respect to x? It's going to be negative zero over one so it's just going to be zero. And so at the point zero one
if a solution goes through this point its slope is going to be zero. And so we can visualize
that by doing a little horizontal line segment right there. So let's keep going. What about when x is one and y is one? Well then dy dx, the derivative
of y with respect to x is negative one over one, so
it's going to be negative one. So at the point one comma
one if a solution goes through that point, it would
have a slope of negative one. And so I draw a little line segment that has a slope of negative one. Let me do this in a new color. What about when x is one and y is zero? Well then it's negative one over zero, so this is actually
undefined, but it's a clue that maybe the slope there
if you had a tangent line at that point, maybe it's vertical. So I'll put that as a
question mark, vertical there. So maybe it's something
like that if you actually did have, I guess it
wouldn't be a function, if you had some kind of
relation that went through it, but let's not draw that just yet. But let's try some other points. Let's try the point
negative one negative one. So now we have negative negative one, which is one, over negative one. Well you'd have a slope
of negative one here. So negative one negative one you'd have a slope of negative one. What about if you had one negative one? Well now it's negative one over negative one, your slope is now one. So one negative one, if a
solution goes through this its slope would look like that. And we could keep going, we
could even do two negative two. That's going to have a
slope of one as well. If you did positive two positive two, that would be negative two over two. You'd have a slope of
negative one right over here. And so we could do a bunch
of points, just keep going. Now I'm just doing them in my head, I'm not going on the table. But you get a sense of
what's going on here. Here you're slope, what if
it was negative one one? It's going to have a slope of one. So at this point your
slope negative one one so negative negative one is one over one, so you're going to have a slope like that. At negative two two same exact idea, it would look like that. And so when you keep
drawing these line segments over these kind of sample
points in the cartesian or in the x-y plane, you
start to get a sense of well what would a solution have to do. And you can start to visualize
that hey maybe a solution would have to do something like this. This would be a solution,
so maybe it would have to do something like this. Or if we're looking only at
functions and not relations I'll make it so it's very clear. So maybe it would have to
do something like this. Or if the function started
here based on what we've seen so far maybe it would
have to do something like this. Or if this were a point
on the function over here, it would have to do something like this. And once again I'm doing this based on what the slope field is telling me. So this field that I'm
creating where I'm sampling a bunch of points and I'm visualizing the slope with a line segement. Once again this is called a slope field. So hopefully that gives you kind of the basic idea of what a slope field is. And the next two videos we'll
explore this idea even deeper.",Creating a slope field | First order differential equations | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/differential-equations-intro/e/slope-fields?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/differential-equations-intro/v/slope-field-to-visualize-solutions?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/differential-equations-intro/v/finding-particular-linear-solution-to-differential-equation?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,8Amgakx5aII
Addingvectors_Vectorsandspaces_LinearAlgebra_KhanAcademy-8QihetGj3pg.en.csv,"So I have two
2-dimensional vectors right over here,
vector a and vector b. And what I want to think
about is how can we define or what would be
a reasonable way to define the sum of
vector a plus vector b? Well, one thing that
might jump at your mind is, look, well, each of
these are two dimensional. They both have two components. Why don't we just add the
corresponding components? So for the sum, why don't
we make the first component of the sum just a sum of
the first two components of these two vectors. So why don't we just make
it 6 plus negative 4? Well, 6 plus negative
4 is equal to 2. And why don't we just
make the second component the sum of the two
second components? So negative 2 plus 4
is also equal to 2. So we start with two
2-dimensional vectors. You add them together,
you get another two 2-dimensional vectors. If you think about it in terms
of real coordinates bases, both of these are
members of R2-- I'll write this down here just
so we get used to the notation. So vector a and vector b
are both members of R2, which is just
another way of saying that these are both two tuples. They are both two-dimensional
vectors right over here. Now, this might make sense just
looking at how we represented it, but how does
this actually make visual or conceptual sense? And to do that, let's
actually plot these vectors. Let's try to represent
these vectors in some way. Let's try to visualize them. So vector a, we could
visualize, this tells us how far this vector
moves in each of these directions--
horizontal direction and vertical direction. So if we put the,
I guess you could say the tail of the vector
at the origin-- remember, we don't have to put
the tail at the origin, but that might make it a little
bit easier for us to draw it. We'll go 6 in the
horizontal direction. 1, 2, 3, 4, 5, 6. And then negative
2 in the vertical. So negative 2. So vector a could
look like this. Vector a looks like that. And once again,
the important thing is the magnitude
and the direction. The magnitude is represented
by the length of this vector. And the direction
is the direction that it is pointed in. And also just to emphasize,
I could have drawn vector a like that or I could
have put it over here. These are all
equivalent vectors. These are all equal to vector a. All I really care about is the
magnitude and the direction. So with that in mind,
let's also draw vector b. Vector b in the horizontal
direction goes negative 4-- 1, 2, 3, 4, and in the vertical
direction goes 4-- 1, 2, 3, 4. So its tail if we
start at the origin, if its tail is at
the origin, its head would be at negative 4, 4. So let me draw that
just like that. So that right over
here is vector b. And once again, vector b
we could draw it like that or we could draw it-- let me
copy and let me paste it-- so this would also be
another way to draw vector b. Once again, what I
really care about is its magnitude
and its direction. All of these green vectors
have the same magnitude. They all have the same
length and they all have the same direction. So how does the way that
I drew vector a and b gel with what its sum is? So let me draw
its sum like this. Let me draw its sum
in this blue color. So the sum based on this
definition we just used, the vector addition
would be 2, 2. So 2, 2. So it would look
something like this. So how does this make
sense that the sum, that this purple vector
plus this green vector is somehow going to be
equal to this blue vector? I encourage you
to pause the video and think about if
that even makes sense. Well, one way to think about
it is this first purple vector, it shifts us this much. It takes us from this
point to that point. And so if we were to add it,
let's start at this point and put the green
vector's tail right there and see where it
ends up putting us. So the green vector, we
already have a version. So once again, we
start the origin. Vector a takes us there. Now, let's start over
there with the green vector and see where green
vector takes us. And this makes sense. Vector a plus vector b. Put the tail of vector b
at the head of vector a. So if you were to
start at the origin, vector a takes you
there then if you add on what vector b takes you,
it takes you right over there. So relative to the
origin, how much did you-- I guess you could say-- shift? And once again,
vectors don't only apply to things
like displacement. It can apply to velocity. It can apply to
actual acceleration. It can apply to a
whole series of things, but when you
visualize it this way, you see that it does
make complete sense. This blue vector,
the sum of the two, is what results where
you start with vector a. At that point right over there,
vector a takes you there, then you take vector b's
tail, start over there and it takes you to
the tip of the sum. Now, one question you
might be having is well, vector a plus vector
b is this, but what is vector b plus vector a? Does this still work? Well, based on the
definition we had where you add the
corresponding components, you're still going to
get the same sum vector. So it should come out the same. So this will just be
negative 4 plus 6 is 2. 4 plus negative 2 is 2. But does that make visual sense? So if we start with vector b. So let's say you
start right over here. Vector b takes you
right over there. And then if you were
to go there and you were to start with vector
a-- so let's do that. So actually, let me make this
a little bit-- actually, let me start with a new vector b. So let's say that that's our
vector b right over there. And then-- actually,
let me give this a place where I'll have
some space to work with. So let's say that's my
vector b right over there. And then let me get a
copy of the vector a. That's a good one. So copy and let me paste it. So I could put vector a's
tail at the tip of vector b, and then it'll take
me right over there. So if I start right over
here, vector b takes me there. And now I'm adding to that
vector a, which starting here will take me there. And so from my original starting
position, I have gone this far. Now, what is this vector? Well, this is exactly
the vector 2, 2. Or another way of
thinking about it, this vector shifts you 2 in
the horizontal direction and 2 in the vertical direction. So either way, you're going
to get the same result, and that should, hopefully,
make visual or conceptual sense as well.",Adding vectors | Vectors and spaces | Linear Algebra | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/e/scaling_vectors?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/multiplying-vector-by-scalar?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/real-coordinate-spaces?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,8QihetGj3pg
Introductiontodatastructures-92S4zgXN17o.en.csv,"In this lesson and in this series of lessons, we will introduce you to the concept of data
structures. Data structure is the most fundamental and building block concept in computer
science and good knowledge of data structures is
a must to design and develop efficient software systems. Ok, so let's get started we deal with data all the time and how we store, organize and group our data together matters. Let's pick up some examples from our day to day life where organizing data in a particular structure helps us. We are able to search a word quickly and efficiently  in a language dictionary because the words in the dictionary are sorted. What if the words in the dictionary
were not sorted? It would be impractical and impossible to search for a word among millions of
words. So, dictionary is organized as a sorted list of words. Let's pick up another example. If we have something like a city map, the data, like position of the landmark
and road network connections, all this data is organized in the form of geometries. We show the map data in the form of
these geometries on a two-dimensional plane. So, map data needs to be structured like this so that we have scales and
directions and we are effectively able to search for a landmark and and get route from one place to
another and i will pick one more example for something like uh... daily cash in and cash out
statement of a business what we also call a cash book in accounts, it makes
most sense to organize and store the data in the form of a tabular schema it is very easy to aggregate data and extract information, if the data is organized in these columns, in these tables so different kind of structures are
needed to organize different kind of data now computers work with all kind of data computers work with texts, images, videos relational data geospatial data and
pretty much any kind of data that we have on this planet how we store organize and group data in computers matters
because computers deal with really really large data
even with the computational power of machines if we do not use the right kind of structures the right kind of logical structures then our software systems will not be
efficient Formal definition of data structure would be that - a data structures is a way to store and organize data in a computer so that the data can be used efficiently when we study data structures as ways
to store and organize data we study them in two ways so i'll say that we talk about data
structures as one we talk about them as mathematical
and logical models. when we talk about them as mathematical and logical models we
just look at an abstract view of them we just look at from a high level
what all features and what all operations define that particular data
structure example of uh... abstract view from
real-world can be something like the abstract view of a device named
television can be that it is an electrical device that can be
turned on and off it can receive signals for satellite programs and the audio video of the program and as long as i have a device like this i do not bother
how circuits are embedded to create this device or which company makes this
device so this is an abstract view so when we study data structures
as mathematical or logical models we just define their abstract view or
in other words we have a term for this we define them as abstract data types an example of abstract data type can be i want to define something called a
list that should be able to store a group of elements of a
particular datatype and we should be able to read the elements by their position in the list and we should be also able to modify element at a particular
position in the list i would say store a given number of
elements of any datatype so we are just defining a model now can
implement this uh... in a programming language in a
number of ways so this is uh... definition of an abstract data type we will also call abstract data type as adt if you see all the high level languages
already have a concrete implementation of such an adt in the form of arrays so arrays give us all these functionalities so arrays are data types which are concrete implementation so the second way of talking about data
structures is talking about that implementation so implementations would be some
concrete types and not an abstract data type we can implement the same adt in multiple ways in the same language for example in c or c++ we can
implement this list adt as a data structure named linked list and if you have not heard about it we
will be talking about them a lot we will be talking about linked list a lot
in the coming lessons okay, so lets define an abstract data type formally because this is one term that we will encounter quite often abstract data types are entities that
are definitions of data and operation but do not have implementations so they do not have any
implementation details we will be talking about a lot of data
structures in this course we will be talking about them as abstract data types and we will
also be looking at how to implement them some of the data structures that we will talk about are arrays linked list stack, queue, tree, graph and the list goes on there are many more to study so when we will study these data structures
we will study their logical view we will study what operations are available
to us with these data structures we will study the cost of these operations mostly in terms of time and then definitely we will study the implementation in a programming language so we will be studying all these data
structures in the coming lessons and this is all for this introductory
lesson thanks for watching",Introduction to data structures,"See complete series of videos in data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&feature=view_all
In this lesson, we will introduce you to data structures as ways to store and organize data in computer.

Feel free to drop your question, feedback or suggestion in comments section. 

You may also like us on facebook:
http://www.facebook.com/MyCodeSchool

About us:
http://blog.mycodeschool.com/2013/01/who-are-you-mycodeschool.html",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,92S4zgXN17o
GraphRepresentationpart02-AdjacencyMatrix-9C2cpQZVRBA.en.csv,"So in our previous lesson, we discussed
one possible way of storing and representing a graph in
which we used two list. One to store the vertices and another to store the edges. A record in vertex list here
is name of a node and a record in edge list is an
object containing references to the two endpoints of an edge and also the weight of that edge because this example graph that I am showing
you here is a weighted graph. We called this kind of
representation edge list representation but we realised that this kind of storage is not very
efficient in terms of time cost of most frequently performed
operations like finding nodes adjacent to a given
node or finding if two nodes are
connected are not. To perform any of these operations, we
need to scan the whole edge list. We need to perform a
linear search on the edge list. So the time complexity is big oh of number
of edges and we know that number of edges
in the graph can be really really large. In worst case it can be close to square of number of
vertices. In a graph, anything running in order
of number of edges is considered very costly. We
often want to keep the cost in order of number of vertices. So we
should think of some other efficient design. We should think of something better than
this. One more possible design is that we can store the edges in a
two-dimensional array or matrix. We can have a
two-dimensional matrix or array of size V*V where V is number of vertices. As you can see, I have drawn an 8*8 array here because number of vertices
in my sample graph here is 8. Let's name this array A. Now if we want to store a graph that is unweighted. Let's just remove the weights
from this sample graph here and now our graph is unweighted and if we
have of value or index between 0 and V-1 for each vertex which we have here if we are storing the vertices in a
vertex list than we have an index between 0 and V-1 for each vertex. We can say that A
is zeroth node, B is 1th node, C is
2th node and so on. We are picking up indices from vertex list. Okay
so if the graph is unweighted and each vertex has an
index between 0 and V-1, then in this matrix or 2d array. We can set ith row and jth column that is A[i][j] as 1 or boolean value true. if there is an edge from i to j 0 or false otherwise. If I have
to fill this matrix for this example graph here then I'll go vertex by vertex. Vertex 0 is connected to Vertex 1 2 and 3. Vertex 1 is connected to 0, 4 and 5. This is an undirected graph so if we
have and edge from 0 to 1, we also have an edge from 1 to 0
so 1th row and 0th column should also be
set as 1. Now let's go to nodes 2, it's connected
to 0 and 6, 3 is connected to 0 and 7, 4 is connected to 1 and 7, 5 once again is connected to 1 and 7,
6 is connected to 2 and 7 and 7 is connected to 3, 4, 5 and 6. All the remaining positions in
this array should be set as 0. Notice that this matrix is symmetric. For an undirected graph,
this matrix would be symmetric because A[i][j] would be equal to A[j][i]. We would have two positions filled for
each edge. In fact to see all the edges in the graph, we need to go through only one of these
two halves. Now this would not be true for our directed graph. Only one position will be
filled for each edge and we will have to go through
the entire matrix to see all the edges. Okay, now this kind of representation of a
graph in which edges or connections are stored in a
matrix or 2D array is called adjacency matrix representation. This particular matrix that
I have drawn here is an adjacency matrix. Now with this
kind of storage or representation, what do you think would be the time cost
of finding all nodes adjacent to a given node. Let's say
given this vertex list and adjacency matrix, we want to find all nodes adjacent to node named F. If we are given name of a node than
we first need to know it's index and to know the index, we will have to
scan the vertex list. There is no other way. Once we figured out
index like for F index is 5 then we can go to the row with that index
in the adjacency matrix and we can scan this complete row to
find all the adjacent nodes. Scanning the vertex
list to figure it out the index in worst case
will cost us time proportional to the number of vertices because in worst case we may have to
scan the whole list, and scanning a row in the adjacency matrix would once again
cost us time proportional to number of what vertices because in a row we would have exactly V columns where V is number of a
vertices. So overall time cost of this operation is big oh of V. Now most of the time
while performing operations, we must pass indices to avoid
scanning the vertex list all the time. If we know an index, we can figure out
the name in constant time, because in an array we can access element at any index in constant time but if we know
a name want to figure out index then it will
cost us big oh of V. We will have to scan the vertex list. wWe will have to perform linear search
on it. Okay moving on. Now what would be the time cost of
finding if 2 nodes are connected or not. Now once again the
two nodes can be given to us as indices or names. If the nodes
would be passed test as indices then we simply need to look at value in
a particular row and particular column. We simply need to look
at A[I][J] for some values of I and J and this will cost us constant time. You can look at Value in any cell in a two-dimensional array in constant time.
So if indices are given time complexity of
this operation would be big oh of 1 which simply means that we will
take constant time but if names are given then we also need
to do the scanning to figure out the indices which will
cost us big oh of V. Overall time complexity would be 
Big oh of V. The constant time access would not mean
anything. The scanning of vertex list all the
time to figure it out indices can be avoided. We can use
some extra memory to create a hash table with names and indices as key value pairs and then the time
cost of finding index from name would also be big oh of 1 that is constant. Hash table is
a data structure and I have not talked about it in any of
my lessons so far. If you do not know about hash table, just
search online for a basic idea of it. Okay, so as you can
see with adjacency matrix representation our time cost of some of the most
frequently performed operations is in order of number of vertices
and not in order of number of edges which can be as high as square of
number of vertices. Okay now if we want to store a weighted graph in adjacency matrix
representation then A[i][j] in the matrix can be set as weight of an edge. For non-existent ages we
can have a default value like a really large
or maximum possible integer value that is never expected to be an edge
weight. I have just filled in infinity have to mean that we can choose the default as infinity
minus infinity or any other value that would never
ever be a valid edge weight. Okay, now for further
discussion I'll come back to an unweighted graph.
Ajacency matrix looks really good so should we not use it
always. Well, with this design we have improved
on time, but we have gone really high on
memory usage instead of using memory units exactly
equal to the number of edges what we're doing with
edge list kind of storage. Here we're using exactly V square
units of memory. We are using big oh of V square space. We are not just storing the information
that these two nodes are connected, we are also storing not
of it that is these two nodes side not connected
which probably is redundant information. If a graph is
dense, if the number of edges is really close
to V square then this is good but if the graph is
sparse that is if number of edges is lot lessser
than V square then we are wasting a lot of
memory in storing the zeros. Like for this example graph that I have
drawn here, in the edge list we were consuming 10 units of memory we had ten rows
consumed in the edge list but here we are consuming 64 unit. Most graphs with really large number of vertices would
not be very dense, would not have number of edges anywhere
close to V sqaure like for example, Let's say we are modeling a social network like Facebook as a
graph such that a user in the network is a node and there is an undetected edge if two
users are friends. Facebook has a billion users but I'm
showing only a few in my example graph here because I'm short of space. Let's just assume that we have a billion
users in our network, so number of vertices in a graph is
10 to the power 9 which is billion. Now do you think number
of connections in our social network can ever be close
to square of number of users that will mean everyone in the network
is a friend of everyone else. A user of our social
network will not be friend to all other billion users. We can safely assume that a user on an average would not have more than
a thousand friends with this assumption we would have
10 to the power 12 edges in our graph. Actually, this is an
undirected graph so we should do a divide by 2 here. So
that we do not count an edge twice. So if average number of friends is 1000 then total
number of connections in my graph is 5 * 10 to power 11. Now this is lot lesser than a square of number
of vertices. So basically if you would use an adjacency
matrix for this kind of a graph, we would waste a hell lot of space
and moreover even if we are not looking in relative
terms 10 to the power 18 units of memory, even in absolute
sense is alot. 10 to the power 18 bytes would be about a 1000 petabytes. Now this really is a lot of space. This
much data would never ever fit on one physical disk. 5 into 10 to the power 11 byts on the other
hand it's just 0.5 terabytes. A typical
personal computer these days would have this much of storage. So as you can see for something like a
large social graph adjacency matrix
representation is not very efficient. Agency matrix is good when a graph is
dense that is when the number of edges is
close to square of number of vertices or sometimes when total number of
possible connection that is V square is so less that wasted space would not
even matter but most real-world graphs would be
sparse and adjacency matrix would not be a good
fit. Let's think about another example. Let's
think about world wide web as are directed graph. If you can think of web pages as nodes
in a graph and hyperlinks as directed edges then a webpage would not have linked to
all other pages and once again number of webpages
would be in order of millions. A webpage would have link to only
the a few other pages, so the graph would be
sparse. Most real world graphs would be sparse and adjacency matrix. Even though it's
giving us good running time for most frequently performed operations would not be a good fit because it's not very efficient in terms
of space so what should we do. Well there's
another representation that gives us similar or maybe even better running time than adjacency matrix and does not consume so
much space It's called adjacency list representation and we will talk about it
in our next lesson. This is it for this lesson. 
Thanks for watching",Graph Representation part 02 - Adjacency Matrix,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have talked about Adjacency Matrix representation of Graph and analyzed its time and space complexity of adjacency matrix representation. 

Previous Lesson: https://www.youtube.com/watch?v=ZdY1Fp9dKzs&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=40
 

Time Complexity analysis playlist:
https://www.youtube.com/playlist?list=PL2_aWCzGMAwI9HK8YPVBjElbLbI3ufctn

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,9C2cpQZVRBA
Binarytreetraversal-breadth-firstanddepth-firststrategies-9RHO6jU--GU.en.csv,"In this lesson, we're going to talk about
binary tree traversal. When we are working with trees, we may often
want to visit all the nodes in the tree. Now tree is not a linear data
structure like array or linked list. In a linear data
structure there would be a logical start and a logical end so we can start with a pointer at
one of the ends and keep moving it towards the other
end. For a linear data structure like linked list for each node or element we would have
only one next element but tree is not a linear data
structure. I have drawn a binary tree here datatype is character this time, I filled in
these characters in the nodes. Now for a tree at any time
if we are pointing to a particular node then we can have more than one possible
directions. We can have more than one possible next
nodes in this binary tree. For example if we will start with a pointer at
root node then we have two possible directions from 'F' we can either go left to 'D' or
we can go right to 'J' and of course if we will go in one
direction then we will somehow have to come back
and go  into the other direction later. So tree
traversal is not so straightforward and what we
are going to discuss in this lesson is algorithms for tree traversal. Tree
traversal can formally be defined as the process of visiting each node in the
tree exactly once in some order and by
visiting a node we mean reading or processing 
data in the node. For us in this lesson visit will mean
printing the data in the node based on the order in which nodes are visited,
tree traversal algorithms can broadly be classified into two categories: we can either go Breadth-first or we can go Depth-first. Breadth-first
traversal and Depth-first traversal at general techniques to traverse or search a graph. A graph
is a data structure and we have not talked about graph so far in the series we will discuss graph in later lessons for
now just know that tree is only a special kind of graph
and in this lesson we are going to discuss breadth-first and depth-first traversal in
context of trees. In a tree, in breadth-first
approach we would visit all the nodes at same
depth or level, before visiting the nodes at next level.
In this binary tree that I'm showing here. This node with value F which is the root
node is at level-0 (L-0). I'm writing L-0 here
for level-0 depth of a node is defined as number of
edges in path from root to that node. Root node would have
depth 'zero'. These two nodes 'D' and 'J' are at depth 1, so we can say that these nodes
are at level-1 (L-1). Now these four nodes are at level-2 (L-2),
these three nodes are at level-3 (L-3) and finally this node with value 'H' is at level-4 (L-4). So what we can do in breadth-first approach is that we can
start at L-0 we would have only one node at L-0,
the root node so we can visit the root node. I'll write
the value in the node as I'm visiting it, Now L-0 is done, now I can go to
L-1 and visit the nodes from left to right so
after 'F' we would visit  'D' and then we would visit 'J' and now
we are done with L-1 so we can go to L-2. We will go
like 'B' then 'E' then 'G' and then 'K' and now we can go to L-3. 'A', 'C' and 'I' and finally I can go to L-4.
This kind of breadth-first traversal in case of trees is called level order traversal and we will
discuss how we can do this program*** in some time but this is the order in
which we would visit the nodes we would go level by level from left to
right in breadth-first approach for any node we
visit all its children before visiting any of
its grandchildren in this tree first we are visiting 'F' and
then we are visiting 'D' and then we are not going to any child
of 'D' like 'B' or 'E' along the depth, next we are going to 'J' but in depth-first approach if we would go to a child,
we would complete the whole subtree of the child before going to the next child in this example tree here from 'F' the root
node if we are going left to 'D' then we should visit all the node in
this left subtree that is we should finish this left
subtree in its complete depth or in other words we should finish all
the grandchildren of 'F' along this path before going to right
child of  'F' -&gt; 'J' and once again when we will go to
'J' we will visit all the grandchildren
along this path so basically we will the complete
right subtree. In depth first approach the relative
order of visiting the left subtree, the right subtree and
the root node can be different for example we can first
visit the right subtree and then root and then
the left subtree, or we can do something like we can first
visit the root and then the left subtree and then the
right subtree, so the relative order can be different
but the core idea in depth-first strategy is that visiting a child is visiting
the complete subtree in that path and remember visiting a node is
reading, processing or printing the data in that node based on the relative order of left
subtree, right subtree and the root there are three popular depth-first strategies one way is that we can first visit
the root node, then the left subtree and then the right
subtree left and right subtrees will be visited
recursively in same manner such a traversal is called preorder
traversal. Another way is that we can first visit the
left subtree, then the root and then the right subtree such a traversal is called in-order
traversal and if root is visited after left and
right subtrees then such a traversal is called post-order traversal. In total
there are six possible permutations for left, right and root but
conventionally a left subtree is always visited before the
right subtree so these are the three strategies that we
use only the position of root is changing here if it's before left and right then its
pre-order if it's in between its in-order and if it's after left and
right subtrees then its post-order. There is an easy way
to remember these three depth-first algorithms. If we
can denote visiting a node or reading the data in that node with letter 'D' going to the left subtree
as 'L' and going to the right subtree as 'R' so if we can say D for Data, L for Left and
R for Right then in pre-order for each node we will go
DLR. First we will read the data in that
node then will go left and once the left subtree is done
we will go right. In in-order traversal first we will
finish the left subtree, then we will read the data in current
node and then we will go right. In post-order for each node first we will go
left, once left subtree is done we will go right and then we will read the data in current node, so pre-order is data,left &amp; right, in-order
is left,data &amp; right and post-order is
left,right &amp; then data pre-order, in-order and post-order
are really easy and intuitive to implement using recursion but we will discuss
implementation later. Let's now see what will be the pre-order
in-order and post-order traversal for this tree that I have drawn here. Let's first see
what will be the pre-order traversal for this binary tree. We need to start at root
node and for each node we first need to read
the data or in other words visit that node in
fact instead of DLR we could have said VLR here
V for visit, we can use any of these assumptions V
for visit or D for data. I will go with DLR here. So let's
start at the root for each node we first need to read the
data. I'm writing 'F' here the data that I just read and now I need
to go left and finish the complete left subtree and once all the nodes in the left subtree
are visited then only I can go to the right subtree, the
problem here is actually getting reduced in a self-similar or recursive manner. Now we need to focus
on this left subtree. Now we are at 'D' root of this left
subtree of 'F', once again for this node we will first read the data and now we can go left we will go towards 'E' only when these
three nodes A,B and C will be done. Now we are focusing
on this subtree comprising of these three nodes now we are at 'B' we can read the data and
now we can go left to 'A' there is nothing in left of 'A',
so we can say that for left for 'A' left subtree is done and there is
nothing in right as well, so we can say right is
also done. Now for 'B' left subtree is done so we can go
right to 'C' and left, and right of 'C'
is null and now for 'D' left subtree is done so we
can go right once again for 'E' left and right are null
and now at this stage for 'F' complete left subtree is visited
so we can go right. Now we need to go left of 'J' and
there's nothing left of 'G' so we can go right and now we can go
left of 'I'. For 'H' there is nothing in left
and right. Now at this stage left subtree of 'I' is
done and right subtree is null and now we
can go back to 'J' the left subtree for 'J' is done so we can go
to its right subtree finally we have 'K'
here and we're done with all the nodes. This is how we can perform a preorder
traversal manually, actual implementation would be a simple
recursion and we will discuss it later. Let's now see
what will be the in-order traversal for this binary tree.
In in-order traversal we will first finish visiting the left
subtree then visit the current node and then
go right once again we'll start at the root and
we will first go left. Now we will first finish this subtree once
again for 'D' we will first go left to 'B' and from 'B' we will go to 'E', now for 'A' there is nothing in left so we
can say that for this guy left subtree is done so we can read the
data and now we can go to its right but there
nothing in right as well. So this guy is done. Now for 'B' left
subtree is done, so we can read the data and now for 'B' we can go right for 'C'
once again there is nothing in left so we can read the data and there is nothing in right as well. Now left
of 'D' completely done so we can visit it, read the data here now we can go to
its right to 'E'. For 'E' once again left and right are
null. At this stage left subtree of 'F' is done
so we can read on the data and now we can go to right
of 'F' if we will go on like this, this finally will be my in-order traversal. This tree that I'm showing here is
actually a binary search tree for each node, the value of nodes in left
is lesser and the value of nodes in right is greater. So if we are printing in this order
left subtree and then the current node and then the right subtree
then we would get a sorted list in-order traversal of a binary search
tree would give you a sorted list. Okay now you should be able to figure
out the post-order traversal. This is what will get for post-order traversal
I leave it for you to see whether this is correct or not. I'll stop here now. In next lesson we will dicuss implementation of these tree traversal algorithms. Thanks for Watching!",Binary tree traversal - breadth-first and depth-first strategies,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have discussed algorithms for binary tree traversal. We have talked about breadth-first and depth-first strategies for tree traversal like level-order, preorder, inorder and postorder. 

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,9RHO6jU--GU
Firstorderhomogenousequations_Firstorderdifferentialequations_KhanAcademy-9Wfn-WWV1aY.en.csv,"I will now introduce you to
the idea of a homogeneous differential equation. Homogeneous is the same word
that we use for milk, when we say that the milk has been--
that all the fat clumps have been spread out. But the application here,
at least I don't see the connection. Homogeneous differential
equation. And even within differential
equations, we'll learn later there's a different type
of homogeneous differential equation. Those are called homogeneous
linear differential equations, but they mean something actually
quite different. But anyway, for this purpose,
I'm going to show you homogeneous differential
equations. And what we're dealing
with are going to be first order equations. What does a homogeneous
differential equation mean? Well, say I had just a regular
first order differential equation that could be
written like this. So dy dx is equal to some
function of x and y. And let's say we try to do this,
and it's not separable, and it's not exact. What we learn is that if it can
be homogeneous, if this is a homogeneous differential
equation, that we can make a variable substitution. And that variable substitution
allows this equation to turn into a separable one. But before I need to show you
that, I need to tell you, what does it mean to be
homogeneous? Well, if I can algebraically
manipulate this right side of this equation, so that I can
actually rewrite it. Instead of a function x and
y, if I could rewrite this differential equation so that
dy dx is equal to some function, let's call that G,
or we'll call it capital F. If I can rewrite it
algebraically, so it's a function of y divided by x. Then I can make a variable
substitution that makes it separable. So right now, it seems
all confusing. Let me show you an example. And I'll just show you the
examples, show you some items, and then we'll just do
the substitutions. So let's say that my
differential equation is the derivative of y with respect
to x is equal to x plus y over x. And you can, if you'd like,
you can try to make this a separable, but it's not
that trivial to solve. Or at least, I'm looking at an
inspection, and it doesn't seem that trivial to solve. And as we see right here,
we have the derivative. It's equal to some function
of x and y. And my question is to you, can
I just algebraically rewrite this so it becomes a function
of y over x? Well, sure, if we just divide
both of these top terms by x. This is the same thing as
x over x plus y over x. This equation is the same
thing as dy over dx is equal to this. Which is same thing as
rewriting this whole equation-- I'm going to switch
colors arbitrarily-- as this, dy over dx is equal to x divided
by x is equal to 1, if we assume x doesn't equal 0. Plus y over x. So you're probably wondering
what did I mean by a function of y over x? Well, you can see it here. When I just algebraically
manipulated this equation, I got 1 plus y over x. So if I said that y over x is
equal to some third variable, this is just a function of
that third variable. And actually, I'm going
to do that right now. So let's make a substitution
for y over x. Let's say that v-- and I'll do v
in a different color-- let's say that v is equal
to y over x. Or another way, if you just
multiply both sides by x, you could write that y
is equal to xv. And we're going to substitute v
for y over x, but we're also going to have to substitute
dy over dx. So let's figure out what
that is in terms of the derivatives of v. So the derivative of y with
respect to x is equal to-- what's the derivative of
this with respect to x? Well, if we assume that v is
also a function of x, then we're just going to use
the product rule. So the derivative of x is 1
times v plus x times the derivative of v with
respect to x. And now, we can substitute this
and this back into this equation, and we get--
so dy over dx, that is equal to this. So we get v plus x dv dx, the
derivative of v with respect to x, is equal to-- that's just
the left hand side-- it's equal to 1 plus y over x. But we're making this
substitution that v is equal to y over x. So we'll do 1 plus v. And now, this should be pretty
straightforward. So let's see, we can subtract
v from both sides of this equation. And then what do we have left? We have x dv dx is equal to 1. Let's divide both sides by x. And we get the derivative of
v with respect to x is equal to 1 over x. It should maybe start becoming
a little bit clearer what the solution here is, but let's
just keep going forward. So if we multiply both sides by
dx, we get dv is equal to 1 over x times dx. Now, we can take the
antiderivative of both sides, integrate both sides. And we're left with v is equal
to the natural log of the absolute value of x plus c. And we are kind of done, but it
would be nice to get this solution in terms of just y and
x, and not have this third variable v here. Because our original problem was
just in terms of y and x. So let's do that. What was v? We made the substitution that
v is equal to y over x. So let's reverse substitute it
now, or unsubstitute it. So we get y over x is equal to
the natural log of x plus c, some constant. Multiply both sides times x. And you get y is equal to
x times the natural log of x plus c. And we're done. We solved that seemingly
inseparable differential equation by recognizing that it
was homogeneous, and making that variable substitution
v is equal to y over x. That turned it into a separable equation in terms of v. And then we solved it. And then we unsubstituted
it back. And we got the solution to the
differential equation. You can verify it for yourself,
that y is equal to the x natural log of the
absolute value of x plus c. Oh, actually, I made
a mistake. y over x is equal to the natural
log of x plus c. If I multiply both sides of this
equation times x, what's the solution? It's not just x natural
log of x. I have to multiply this
times x, too, right? Distributive property-- that
was an amateur mistake. So the correct solution is y is
equal to x natural log of the absolute value of
x plus x times c. And if you want to figure out
c, I would have to give you some initial conditions. And then you could
solve for c. And that would be the particular
solution, then, for this differential equation. In the next video, I'll just
do a couple more of these problems. I'll see you then.",First order homogenous equations | First order differential equations | Khan Academy,"Introduction to first order homogenous equations.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/homogeneous-equations/v/first-order-homogenous-equations-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/integrating-factors-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,9Wfn-WWV1aY
Spanandlinearindependenceexample_Vectorsandspaces_LinearAlgebra_KhanAcademy-9kW6zFK5E5c.en.csv,"I want to bring everything we've
learned about linear independence and dependence,
and the span of a set of vectors together in one
particularly hairy problem, because if you understand what
this problem is all about, I think you understand what we're
doing, which is key to your understanding of linear
algebra, these two concepts. So the first question I'm going
to ask about the set of vectors s, and they're all
three-dimensional vectors, they have three components, Is
the span of s equal to R3? It seems like it might be. If each of these add new
information, it seems like maybe I could describe any
vector in R3 by these three vectors, by some combination
of these three vectors. And the second question I'm
going to ask is are they linearly independent? And maybe I'll be able to answer
them at the same time. So let's answer the first one. Do they span R3? To span R3, that means some
linear combination of these three vectors should be able to
construct any vector in R3. So let me give you a linear
combination of these vectors. I could have c1 times the first
vector, 1, minus 1, 2 plus some other arbitrary
constant c2, some scalar, times the second vector, 2, 1,
2 plus some third scaling vector times the third
vector minus 1, 0, 2. I should be able to, using some
arbitrary constants, take a combination of these vectors
that sum up to any vector in R3. And I'm going to represent any
vector in R3 by the vector a, b, and c, where a, b, and
c are any real numbers. So if you give me any a, b, and
c, and I can give you a formula for telling you what
your c3's, your c2's and your c1's are, then than essentially
means that it spans R3, because if you give me
a vector, I can always tell you how to construct that
vector with these three. So Let's see if I can do that. Just from our definition of
scalar multiplication of a vector, we know that c1 times
this vector, I could rewrite it if I want. I normally skip this
step, but I really want to make it clear. So c1 times, I could just
rewrite as 1 times c-- it's each of the terms times c1. Similarly, c2 times this is the
same thing as each of the terms times c2. And c3 times this is the
same thing as each of the terms times c3. I want to show you that
everything we do it just formally comes from our
definition of multiplication of a vector times a scalar,
which is what we just did, or vector addition, which is
what we're about to do. So vector addition tells us that
this term plus this term plus this term needs
to equal that term. So let me write that down. We get c1 plus 2c2 minus
c3 will be equal to a. Likewise, we can do the same
thing with the next row. Minus c1 plus c2 plus 0c3
must be equal to b. So we get minus c1 plus c2 plus
0c3-- so we don't even have to write that-- is going
to be equal to b. And then finally, let's
just do that last row. 2c1 plus 3c2 plus 2c3 is
going to be equal to c. Now, let's see if we can solve
for our different constants. I'm going to do it
by elimination. I think you might be familiar
with this process. I think I've done it in some of
the earlier linear algebra videos before I started doing
a formal presentation of it. And I'm going to review it again
in a few videos from now, but I think you
understand how to solve it this way. What I'm going to do is I'm
going to first eliminate these two terms and then I'm going
to eliminate this term, and then I can solve for my
various constants. If I want to eliminate this term
right here, what I could do is I could add this equation
to that equation. Or even better, I can replace
this equation with the sum of these two equations. Let me do that. I'm just going to add these two
equations to each other and replace this one
with that sum. So minus c1 plus c1, that
just gives you 0. I can ignore it. Then c2 plus 2c2, that's 3c2. And then 0 plus minus c3
is equal to minus c3. Minus c3 is equal to-- and I'm
replacing this with the sum of these two, so b plus a. It equals b plus a. Let me write down that first
equation on the top. So the first equation, I'm
not doing anything to it. So I get c1 plus 2c2 minus
c3 is equal to a. Now, in this last equation, I
want to eliminate this term. Let's take this equation and
subtract from it 2 times this top equation. You can also view it as let's
add this to minus 2 times this top equation. Since we're almost done using
this when we actually even wrote it, let's just multiply
this times minus 2. So this becomes a minus 2c1
minus 4c2 plus 2c3 is equal to minus 2a. If you just multiply each of
these terms-- I want to be very careful. I don't want to make
a careless mistake. Minus 2 times c1 minus 4 plus
2 and then minus 2. And now we can add these
two together. And what do we get? 2c1 minus 2c1, that's a 0. I don't have to write it. 3c2 minus 4c2, that's
a minus c2. And then you have your 2c3 plus
another 2c3, so that is equal to plus 4c3 is equal
to c minus 2a. All I did is I replaced this
with this minus 2 times that, and I got this. Now I'm going to keep my top
equation constant again. I'm not going to do anything
to it, so I'm just going to move it to the right. So I get c1 plus 2c2 minus
c3 is equal to a. I'm also going to keep my second
equation the same, so I get 3c2 minus c3 is
equal to b plus a. Let me scroll over a good bit. And then this last equation
I want to eliminate. My goal is to eliminate
this term right here. What I want to do is I want to
multiply this bottom equation times 3 and add it to this
middle equation to eliminate this term right here. So if I multiply this bottom
equation times 3-- let me just do-- well, actually, I don't
want to make things messier, so this becomes a minus 3 plus
a 3, so those cancel out. This becomes a 12 minus a 1. So this becomes 12c3 minus
c3, which is 11c3. And then this becomes a-- oh,
sorry, I was already done. When I do 3 times this plus
that, those canceled out. And then when I multiplied 3
times this, I get 12c3 minus a c3, so that's 11c3. And I multiplied this times 3
plus this, so I get 3c minus 6a-- I'm just multiplying
this times 3-- plus this, plus b plus a. So what can I rewrite this by? Actually, I want to make
something very clear. This c is different than these
c1's, c2's and c3's that I had up here. I think you realize that. But I just realized that I used
the letters c twice, and I just didn't want any
confusion here. So this c that doesn't have any
subscript is a different constant then all of these
things over here. Let's see if we can
simplify this. We have an a and a minus 6a,
so let's just add them. So let's get rid of that a and
this becomes minus 5a. If we divide both sides
of this equation by 11, what do we get? We get c3 is equal to 1/11
times 3c minus 5a. So you give me any a or
c and I'll already tell you what c3 is. What is c2? c2 is equal to-- let
me simplify this equation right here. Let me do it right there. So if I just add c3 to both
sides of the equation, I get 3c2 is equal to b
plus a plus c3. And if I divide both sides of
this by 3, I get c2 is equal to 1/3 times b plus a plus c3. I'll just leave it like
that for now. Then what is c1 equal to? I could just rewrite this top
equation as if I subtract 2c2 and add c3 to both sides,
I get c1 is equal to a minus 2c2 plus c3. What have I just shown you? You can give me any vector in
R3 that you want to find. So you can give me any real
number for a, any real number for b, any real number for c. And if you give me those
numbers, I'm claiming now that I can always tell you some
combination of these three vectors that will
add up to those. And I've actually already solved
for what I have to multiply each of those
vectors by to add up to this third vector. So you give me your a's, b's
and c's, I just have to substitute into the a's and
the c's right here. Oh, sorry. I forgot this b over here. There's also a b. It was suspicious that I didn't
have to deal with a b. So there was a b right there. So this is 3c minus 5a plus b. Let me write that. There's a b right there
in a parentheses. But I think you get
the general idea. You give me your a's,
b's and c's, any real numbers can apply. There's no division over here,
so I don't have to worry about dividing by zero. So this is just a linear
combination of any real numbers, so I can clearly
get another real number. So you give me your a's,
b's and c's, I'm going to give you a c3. Now, you gave me a's,
b's and c's. I got a c3. This is just going to be
another real number. I'm just going to take that with
your former a's and b's and I'm going to be able
to give you a c2. We were already able to solve
for a c2 and a c3, and then I just use your a as well,
and then I'm going to give you a c1. Hopefully, you're seeing that no
matter what a, b, and c you give me, I can give you
a c1, c2, or c3. There's no reason that any a's,
b's or c's should break down these formulas. We're not doing any division, so
it's not like a zero would break it down. I can say definitively that the
set of vectors, of these three vectors, does
indeed span R3. Let me ask you another
question. I already asked it. Are these vectors linearly
independent? We said in order for them to be
linearly independent, the only solution to c1 times my
first vector, 1, minus 1, 2, plus c2 times my second vector,
2, 1, 3, plus c3 times my third vector,
minus 1, 0, 2. If something is linearly
independent that means that the only solution to this
equation-- so I want to find some set of combinations of
these vectors that add up to the zero vector, and I did that
in the previous video. If they are linearly dependent,
there must be some non-zero solution. One of these constants, at least
one of these constants, would be non-zero for
this solution. You can always make them zero,
no matter what, but if they are linearly dependent,
then one of these could be non-zero. If they're linearly independent
then all of these have to be-- the only solution
to this equation would be c1, c2, c3. All have to be equal to
0. c1, c2, c3 all have to be equal to 0. Linear independence implies
this, this implies linear independence. Now, this is the exact same
thing we did here, but in this case, I'm just picking my a's,
b's and c's to be zero. This is a, this is b and
this is c, right? I can pick any vector in R3
for my a's, b's and c's. I'm now picking the
zero vector. So let's see what our c1's,
c2's and c3's are. So my a equals b is equal
to c is equal to 0. I'm setting it equal
to the zero vector. What linear combination of these
three vectors equal the zero vector? Well, if a, b, and c are all
equal to 0, that term is 0, that is 0, that is 0. You have 1/11 times
0 minus 0 plus 0. That's just 0. So c3 is equal to 0. Now, if c3 is equal to 0, we
already know that a is equal to 0 and b is equal to 0. C2 is 1/3 times 0,
so it equals 0. Now what's c1? Well, it's c3, which is 0. c2 is 0, so 2 times 0 is 0. So c1 is just going
to be equal to a. I just said a is equal to 0. So the only solution to this
equation right here, the only linear combination of these
three vectors that result in the zero vector are when you
weight all of them by zero. So I just showed you that c1, c2
and c3 all have to be zero. And because they're all zero,
we know that this is a linearly independent
set of vectors. Or that none of these vectors
can be represented as a combination of the other two. This is interesting. I have exactly three vectors
that span R3 and they're linearly independent. And linearly independent, in my
brain that means, look, I don't have any redundant
vectors, anything that could have just been built with the
other vectors, and I have exactly three vectors,
and it's spanning R3. So in general, and I haven't
proven this to you, but I could, is that if you have
exactly three vectors and they do span R3, they have to be
linearly independent. If they weren't linearly
independent, then one of these would be redundant. Let's say that that guy
was a redundant one. I always pick the third one, but
let's say this guy would be redundant, which means that
the span of this would be equal to the span of
these two, right? Because if this guy is
redundant, he could just be part of the span of
these two guys. And the span of two of vectors
could never span R3. Or the other way you could go,
if you have three linear independent-- three tuples, and
they're all independent, then you can also say
that that spans R3. I haven't proven that to you,
but hopefully, you get the sense that each of these
is contributing new directionality, right? One is going like that. They're not completely
orthogonal to each other, but they're giving just enough
directionality that you can add a new dimension to
what's going on. Hopefully, that helped you a
bit, and I'll see you in the next video.",Span and linear independence example | Vectors and spaces | Linear Algebra | Khan Academy,"Determining whether 3 vectors are linearly independent and/or span R3

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/subspace_basis/v/linear-subspaces?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/linear_independence/v/more-on-linear-independence?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,9kW6zFK5E5c
Unitvectornotation_Vectorsandspaces_LinearAlgebra_KhanAcademy-9ylUcCOTH8Y.en.csv,"We've already seen
that you can visually represent a vector as an arrow,
where the length of the arrow is the magnitude of the vector
and the direction of the arrow is the direction of the vector. And if we want to represent
this mathematically, we could just think
about, well, starting from the tail of
the vector, how far away is the head of the vector
in the horizontal direction? And how far away is it in
the vertical direction? So for example, in the
horizontal direction, you would have to
go this distance. And then in the
vertical direction, you would have to
go this distance. Let me do that in
a different color. You would have to go this
distance right over here. And so let's just say
that this distance is 2 and that this distance is 3. We could represent
this vector-- and let's call this vector v. We
could represent vector v as an ordered list or a
2-tuple of-- so we could say we move 2 in the
horizontal direction and 3 in the vertical direction. So you could represent
it like that. You could represent
vector v like this, where it is 2
comma 3, like that. And what I now want
to introduce you to-- and we could come up with
other ways of representing this 2-tuple-- is
another notation. And this really
comes out of the idea of what it means to
add and scale vectors. And to do that,
we're going to define what we call unit vectors. And if we're in
two dimensions, we define a unit vector for
each of the dimensions we're operating in. If we're in three dimensions,
we would define a unit vector for each of the three dimensions
that we're operating in. And so let's do that. So let's define a unit vector i. And the way that we denote
that is the unit vector is, instead of putting
an arrow on top, we put this hat on top of it. So the unit vector
i, if we wanted to write it in this
notation right over here, we would say it only goes 1 unit
in the horizontal direction, and it doesn't go at all
in the vertical direction. So it would look
something like this. That is the unit vector i. And then we can define
another unit vector. And let's call
that unit vector-- or it's typically
called j, which would go only in the
vertical direction and not in the horizontal direction. And not in the
horizontal direction, and it goes 1 unit in
the vertical direction. So this went 1 unit
in the horizontal. And now j is going to go
1 unit in the vertical. So j-- just like that. Now any vector, any
two dimensional vector, we can now represent as a sum of
scaled up versions of i and j. And you say, well,
how do we do that? Well, you could imagine
vector v right here is the sum of a vector
that moves purely in the horizontal direction
that has a length 2, and a vector that moves purely
in the vertical direction that has length 3. So we could say
that vector v-- let me do it in that
same blue color-- is equal to-- so if we want
a vector that has length 2 and it moves purely in
the horizontal direction, well, we could just scale
up the unit vector i. We could just
multiply 2 times i. So let's do that-- is equal
to 2 times our unit vector i. So 2i is going to
be this whole thing right over here or
this whole vector. Let me do it in
this yellow color. This vector right over
here, you could view as 2i. And then to that, we're going to
add 3 times j-- so plus 3 times j. Let me write it like this. Let me get that color. Once again, 3 times
j is going to be this vector right over here. And if you add this yellow
vector right over here to the magenta vector,
you're going to get-- notice, we're putting the tail
of the magenta vector at the head of
the yellow vector. And if you start at the
tail of the yellow vector and you go all the way to the
head of the magenta vector, you have now constructed
vector v. So vector v, you could represent it as a
column vector like this, 2 3. You could represent
it as 2 comma 3, or you could represent it as
2 times i with this little hat over it, plus 3 times j,
with this little hat over it. i is the unit vector in
the horizontal direction, in the positive
horizontal direction. If you want to go
the other way, you would multiply it by a negative. And j is the unit vector
in the vertical direction. As we'll see in future
videos, once you go to three dimensions,
you'll introduce a k. But it's very natural to
translate between these two things. Notice, 2, 3-- 2, 3. And so with that, let's actually
do some vector operations using this notation. So let's say that I
define another vector. Let's say it is vector b. I'll just come up with
some numbers here. Vector b is equal to negative 1
times i-- times the unit vector i-- plus 4 times the unit vector
in the horizontal direction. So given these two
vector definitions, what would the would be the
vector v plus b be equal to? And I encourage you to pause
the video and think about it. Well once again,
we just literally have to add
corresponding components. We could say, OK,
well let's think about what we're doing in
the horizontal direction. We're going 2 in the
horizontal direction here, and now we're going negative 1. So our horizontal
component is going to be 2 plus negative
1-- 2 plus negative 1 in the horizontal direction. And we're going to multiply
that times the unit vector i. And this, once
again, just goes back to adding the corresponding
components of the vector. And then we're going to have
plus 4, or plus 3 plus 4-- And let me write it that way--
times the unit vector j in the vertical direction. And so that's going
to give us-- I'll do this all in this one color--
2 plus negative 1 is 1i. And we could literally
write that just as i. Actually, let's do that. Let's just write that as i. But we got that from 2
plus negative 1 is 1. 1 times the vector is just
going to be that vector, plus 3 plus 4 is 7-- 7j. And you see, this is exactly
how we saw vector addition in the past, is that we
could also represent vector b like this. We could represent it
like this-- negative 1, 4. And so if you were
to add v to b, you add the corresponding terms. So if we were to add
corresponding terms, looking at them as column
vectors, that is going to be equal to 2 plus
negative 1, which is 1. 3 plus 4 is 7. So this is the exact same
representation as this. This is using unit
vector notation, and this is representing
it as a column vector.",Unit vector notation | Vectors and spaces | Linear Algebra | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/e/unit-vector?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/linear-algebra-parametric-representations-of-lines?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/linear-algebra-vector-examples?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,9ylUcCOTH8Y
Datastructures-LinkedListimplementationofQueue-A5_XdiK4J8A.en.csv,"In our previous lesson, we saw how we can
implement queue using arrays. Now, In this lesson we'll
see how we can implement queue using linked list. Queue as we know from our
previous discussions is a structure in which whatever goes in first comes out
first. Queue data strucuture is a list or
collection with this restriction that insertion can be
performed at one end and deletion can be performed at other
end. These are typical operations that we
defined with Queue. An insertion is called enqueue
operation and a deletion is called dequeue. Front operation
front function should simply return the element at
front of list and isempty should check whether queue is empty or
not and all these operations must a constant
time. There time complexity should be O(1). When we were implementing
queue with arrays, we used the idea of 
circular array to implement Queue. Then in this case we have a limitation.
The limitation is that arary will always have a fixed size and
once all the positions in the array are taken once study is exhausted, we have two
options we can either deny insertion so we can say that the queue is full and
we cannot insert anything now, or what we can do is we can create a new
larger array and copy elements from previous array
to the new larger array, which will be a costly process. We can
avoid this problem if people use linked list to implement Queue. Please note that this represantaion
of circular array that i'm showing here is only a logical way of looking at
array. We can show this array like this also. As i was saying in an array
implementation, we will have this question what if array gets filled and we need to
take care of this. We can either say queue is full, or we can
create a new larger array and copy elements from previous filled
array into new larger array. The time taken for this copy operation
will be proportional to number of elements in filled array, or in other words
we can say that the time complexity of this copy operation will be O(N). There is another problem the array
implementation. We can have a large enough array and Queue
may not be using most of it. Like right now, in this array
90% of memory is unused. Memory is an important
resource and we should always avoid blocking memory
unnecessarily. It's not that some amount of unused memory will be real problem in a modern-day machine. It's just that
while designing solutions and algorithms, we should analyze and understand these
implications. Let's now see how good we will be with
are linked list implementation. I have drawn logical view of a linked
list of integers here. Coming back to basic definition of Queue.
As we know, a queue is list or collection with
this constraint with this property, that an element must always be inserted from one side of the queue that we
call the rear of queue and an element must always be
removed from the other side that we call the
front of Queue. It's really easy to enforce this
property in a linked list. A linked list as we know is a
collection of entities that we call nodes, and this nodes
are stored at non-contiguous locations in memory. Each node contains two fields, one to 
store data and another to store address of the next node or
reference to the next node. Let's assume that nodes in this figure
are at addresses 100 200 300 respectively. I have also filled in the address fields.
The identity of linked list that we always keep with us, is address
of the head node. We often named a pointer or reference
variable at which store this address head. Okay so now we are saying that we
want to use linked list to implement queue. These are the typical
operations that we define with a Queue. We can use a linked list like a
queue. We can pick one side for insertion or
enqueue operation. So node in the linked list must
always be inserted from this side. The other side will then be used for dequeue.
So if we are picking head side for enqueue operation, a dequeue must always happen from Tail, if
they are picking tail for equeue operation then dequeue
must always happen from head. Whatever side we're picking
for whatever operation we need to be taking care of one
requirement and then the requirement is that, these operations
must a constant time, or in other words that there time
complexity must be O(1). As we know from our
previous lessons the cost of insertion or removal from head side is O(1), but the cost of insertion or removal from tail side is O(N). So here's the deal, In a normal
implementation of linked list if we will insert at one side and
remove from other side then one of these operations enqueue or dequeue , depending on how we are picking the
side, will cost us O(N),but the requirement that we
have this that both these operations must take constant
time. So we definitely need to do something. To make sure that both enqueue and dequeue
operations take constant time, let's call the side front and this side rear. So I want to enqueue a node from
this side and I want a dequeue from this side. We a good for dequeue operation because removal from front will take constant
time, but insertion or enqueue operation will be O(N). Let's first see why
insertion at tail will be costly and then maybe we can try to do
something. To insert at rear end what we will have to do is, first
we will have to create a node. We have a new node here. Let's say I've
got this node at address 350 and integer that i want to enqueue is 7. The address part of this node
can be set as null. Now what we need to do is we
need to build this link. We need to set the address part of the
last node as address of this newly created node, and to do so
we first need to have a pointer pointing to this last node storing the
address of this last node. In a linked list the only identity that
we always keep with us is address of the head node. To get appointed to any other node, we need
to start at head. So we will first create a pointer Temp and
we will initially set it to head, and Now in one step we can move this pointer variable to the next of
whatever node it is pointing to its pointing to. We use a statement like temp=temp-&gt;next 
to move to the next node. So from first node we will go to the
second node and then from second we will go to the third node. In this
example, third node is the rear node, and now using this pointer temp we can
write the address part of this node and build this link. This whole traversal that we are
having to get a pointer from head to tail is what's taking all the
time. What we can do is we can avoid this whole
traversal. We can have pointer variable just like head that should all the store
the address of rear node. I can call this variable tail or the rear. Let's call this rear and
let's call this variable that is storing the address of head node Front. In any insertion or removal and we will have to update both front
and rear now. But now when we will enqueue. Let's say I've
got node at address 450 and I
want to insert this node at rear end. Now using the rear pointer
we can update to address field here. So we are
building this link and now we can update rear. We will only
have to modify some address fields and time taken for
enqueue operation will not depend upon number of nodes in the
linked list. So now with this design, both to enqueue
and dequeue operations will be constant time operations. The time
complexity for both will be O(1). Let's quickly
see how real code  in C will  look like for this design. I have
declared node as a structure with two fields, one to
store data and another to store address of next node and now instead of declaring a pointer
variable named head, a pointer to node named head I am declaring two pointers, a pointer to
node named front and another pointer to node
named rear and initially I'm setting them both as
null. Let's say i'm defining these two variable in global scope, so they will be accessible to all
functions. My enqueue function will take an integer as argument. In this function, i'll first
create a node. I'll use malloc in C or a new operator in C++ to create a node in what we call dynamic
memory. I'm pointing to the newly created node using this variable which is pointed to node named temp.
Now we can have two cases in insertion or enqueue operation. If there is no element in the queue, if
the queue is empty in this case both front and rear be
null. We will simply set both front and rear as address of
this new node being pointed to by temp and we will return or exit else we already
have pointer to rear node, we will first set the address part of
current rear as the address of this newly created
node and then we will modify the address and rear variable to make it point to this newly created
node. While writing all of this I'm assuming that
you are ready know how to implement a linked list. If you want to refresh your concepts, you
can check earlier lessons in the series or you can check the description of
this video for a link to lesson on linked list implementation in C or C++.
This code will be further the clear if I'll show things moving in
a simulation. Let's say, initially we have an empty queue
so both front and rear will be null. Null is only a macro for address Zero. At this stage let's say we are
making a call to enqueue function passing it number 2. Now let's go through the
enqueue function and see what will happen. First we will create a node. Data part
of this node will be set as 2 and address part initially will be set
as null. Let's say we got this node at address temp
at address 100, so a variable name temp is storing this address. This variable is pointing to the this node.
Right now front and rear are both null, so we will go inside is if condition and
simply set both front and rear as 100. When the
function will finish execution temp which is a local variable will be
cleared from the memory. After setting both front and rear as
address of this newly created node we are returning. So this is how the queue will look like
after first enqueue. Let's say we're making another call to
enqueue function at this stage passing number 4 as argument. Once again a
new node will be created. Let's say I got the new node at
address 200. This time queue is not empty so in this function we will
first go to this statement rear-&gt;next=temp, so they
will set the next part of this node at address 100 as the address of
the newly created node which is 200 so we will build
this link, and now they will store the address of the new rear node in this variable named rear. So this is
how my queue will look like after the second enqueue Let's do one more enqueue. Let's enqueue 6. Let's say we got our new node this time
at address 300. So this is how our queue will look
like Okay! Let's now write dequeue function. In dequeue
function, I'll first create a temporary pointer to
node in which i'll store the address of the current head
or current front Let's say for this example at this stage,
I'm making a call to dequeue function. We will have couple of cases in dequeue also. The queue could be empty so in this case we
can print an error message and return. In
case of empty queue front and rear will both be equal to null.  We can check one of these and we will be good. In the
case when front and rear will be equal. We will simply set both front and
rear as null. In all other cases we can simply
make front point to the next node. So we will simply do a 
front=front-&gt;next but why have the used this temporary
pointer to node why have I declare this temporary pointer
to node in this code. Well simply incrementing front will not
be good enough. In this example i am calling dequeue. I'm
first creating temp. let's walk through whatever
code i have written so far so in the first line i am creating temp and
then because queue it's not empty and there are more than
one element in the queue. I am setting front as address of the next
node so my queue is good now. All the links
are appropriately modified but this node which
was front previously is still in the memory.
Anything in dynamic memory has to be explicitly
freed. To free this node we will
use free function and to this free function we should be
passing address of the node, and that's why we had created temp. With this free the
node will be wiped off from memory. These are enqueue and dequeue operations for you
and if you can see there are simple statements in these functions. There are no loops so these functions
will take constant time. The time complexity will be O(1).
In the beginning of this lesson we had also discussed some limitations with array implementation like what if array gets
filled and that of unused memory. We do not have
these limitations in a linked list implementation. We're using some extra memory to store
address of next node but apart from that there is
know what a major disadvantage I'll stop here now. You can write rest of the
functions like front function, to look at the element at
front or isempty function to check whether queue is empty or not yourself. If you
want to get my source code then you can check the
description of this video for link. So thanks for watching.",Data structures: Linked List implementation of Queue,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described linked list implementation of  Queue data structure. 

See source code here:
https://gist.github.com/mycodeschool/7510222

Lessons on Time complexity analysis:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI9HK8YPVBjElbLbI3ufctn 

Lesson on Implementation of Linked list in C/C++: 
http://www.youtube.com/watch?v=vcQIFT79_50&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=5

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,A5_XdiK4J8A
Datastructures-PropertiesofGraphs-AfYqN3fGapc.en.csv,"In our previous lesson, we introduced you
to graphs. We defined graph as a mathematical or
logical model and talked about some of the
properties and applications of graph. Now in this lesson, we will discuss some
more properties of graph but first I want to do a quick recap of
what we have discussed in our previous lesson. A graph can be defined as an ordered
pair of a set of vertices and a set of edges. We use this formal mathematical
notation G = (V,E) to define a graph, here V is set of
vertices and E is set of edges. Ordered pair is just a
pair of mathematical objects in which order of objects in the pair matters. It
matters which element is first and which element is second in the pair. Now as we know to denote number of
elements in a set that we also call cardinality of a set.
We use the same notation that we used for modulus or absolute value. So this is how we can denote number of
vertices and number of edges in a graph. Number of vertices would be number of elements in set V
and number of edges would be number of elements in set E. Moving forward, this is how I'm
going to denote number of vertices and number of edges in all my explanations. Now as we had
discussed earlier, edges in a graph can either be
directed that is 1 way connections or undirected that is 2 way
connections. A graph with only directed  edges is called a directed graph or digraph and a
graph with only undirected edges is called a undirected graph. Now sometimes all connections in a
graph cannot be treated as equal, so we label edges with some weight or cost like what i'm showing here and
a graph in which some value is associated to connections as cost or weight is called a weighted graph. A graph is unweighted if there is no cost distinction among edges. Okay, now we can
also have some special kind of edges in a graph. These edges complicate algorithms and
make working with graphs difficult but I'm going to talk about them anyway.
An edge is called a self loop or self edge if it involves only 1
vertex. If both endpoint of an edge are same then it's called a self loop. We can
have a self loop in both directed and undirected graphs but the question is why would we
ever have a self loop in a graph. Well, sometimes if edges are depicting
some relationship or connection that's possible with the same node as
origin as well as destination then we can have a self loop. For example
as we discussed in our previous lesson, interlinked web pages on the internet
or the world wide web can be it presented as a directed graph. A page
with a unique URL can be a node in the graph and we can have a directed edge if a page contains link to another
page. Now we can have a self loop in this graph
because its very much possible for a webpage to have a link to itself. Have a look
at this webpage mycodeschool.com/videos. In the header, we have links for workouts
page, problems page and videos page.
Right now I'm already on videos page but I can still click on videos link and
all that will happen with the click is refresh because I'm already on videos page. My
origin and destination are same here, so if I'm representing
world wide web as a directed graph the way we just discussed then we have
self loop here. Now the next special type of edge that
I want to talk about is multi-edge. An edge is called a multi-edge if it occurs more than once in a graph.
Once again, we can have a multi-edge in both directed and undirected graphs. First multi edge that I'm showing you here
is undirected and the second 1 is directed. Now once again, the question why should
be ever have a multi-edge. Well, let's say we are representing flight
network between cities as a graph. A city would be a node and we can have
an edge if there is a direct flight connection
between any 2 cities, but then there can be multiple flights
between a pair of cities. These flights would have different names
and may have different costs. If I want to keep the information about
all the flights in my graph, I can draw multi-edges. I can draw 1
directed edge for each flight and then I can label an edge
with its cost or any other property. I just labeled edges here with some
random flight numbers. Now as we were saying earlier, self loops
and multi-edges often complicate working with graph. Their
presence means we need to take extra care while solving
problems. If a graph contains no self loops or multi-edge
then it's called a simple graph. In our lessons, we will mostly be dealing
with simple graphs. Now I want you to answer a very simple
question. Given a number of vertices in a simple graphs that is a a graph 
with no self loops or multi-edge, what would be maximum possible number of
edges. Well, let's see. Let's say, we want to draw
a directed graph with 4 vertices. I have drawn 4
vertices here. I'll name these vertices V1, V2, V3
and V4. So this is my set of vertices. Number
of elements in set V is 4. Now it's perfectly fine if I
choose not to draw any age here. This will still
be a graph. Set of edges can be empty, nodes can be
totally disconnected. So minimum possible number of edges in a
graph is zero. Now if this is a directed graph, what do
you think can be maximum number of edges here. Well, each node can have directed edges
to all other nodes. In this figure here, each node can have
directed edges to 3 other nodes. We have 4 nodes in
total, so maximum possible number of edges here
is 4 * 3 that is 12. I have shown
edges originating from a vertex in same color here. This is the maximum that we can draw if
there is no self loop or multi-edges. In general if there are N
vertices then maximum number of edges in a
directed graph would be N * (N - 1), so in a simple directed graph of number of edges would be
in this range 0 to N * (N-1). Now what do
you think would be the maximum for an undirected graphs. In an undirected graph, we can have only
1 bi-directional edge between a pair of nodes. We can't
have 2 edges in different directions, so here the maximum would be half of
maximum for directed. So if the graph is simple and undirected
number of edges would be in the range 0 to (N * (N - 1)) / 2. Remember this is true only if there is
no self loop or multi-edge. Now if you can see number of edges in
the graph can be really really large compared to a number of vertices. For example if number of vertices in a
directed graph is equal to 10, maximum number of edges
would be 90. If number of vertices is 100, maximum number of edges would be 9900. Maximum number of edges would be close
to Square of number of vertices. A graph is called dense if number of
edges in the graph is close to maximum possible number of edges that is if the number of edges is of
order of square of number of vertices, and a graph is called sparse if the
number of edges is really less typically close to a number of
vertices and not more than that. There is no defined boundary for what
can be called dense and what can be called sparse. It all depends on context but this is an important classification.
While working with graphs, a lot of decisions are made based on
whether the graph is dense or sparse. For example we
typically choose a different kind of storage structure in computer's memory
for a dense graph. We typically store a dense graphs and
something called adjacency matrix, and for a sparse graph we typically use
something called adjacency list. I'll be talking about
adjacency matrix and adjacency list in next lesson. Okay, now the next concept
that I want to talk about is concept of path in a graph. A path in a graph is a sequence of vertices where each 
adjacent pair in the sequence is connected by an
edge. I'm highlighting the path here in this
example graph. This sequence of vertices A B F and H is a path in this graph. Now we have an undirected graph here,
edges are bi-directional. In a directed graph, all edges must also
be aligned in 1 direction the direction of the
path. A path is called simple path if no vertices
are repeated and if vertices are not repeated
then edges will also not be repeated. So in a simple path both vertices and
edges are not repeated. This path A B F H that I have highlighted
here is a simple path but we could also have
a path like this. Here, start vertex is A and end vertex is D. In this path, 1 edge and 2 vertices are repeated. In graph theory, there is some inconsistency
in use of this term path. Most of the time, when we say path
we mean a simple path and if repetition is possible we used
this term walk. So a path is basically a walk in which no vertices or edges are repeated. A walk is called a trail if 
vertices can be repeated but edges cannot be repeated. I'm highlighting
a trail here in this example graph. Okay, now I want to say this once again
walk and path are often used as synonyms but most
often when we say path we mean simple path, a path in which
vertices and edges are not repeated. Between 2 different
vertices if there is  a walk in which vertices or edges
are repeated like this walk that I'am showing you here in
this example graph then there must also be a path or simple
path that is a walk in which vertices or
edges would not be repeated. In this walk that
I'm showing you here, we're starting at A and we are ending our walk at C. There is a simple path from A to C
with just 1 edge. All we need to do is, we need to avoid
going to B E H D and then coming back again to A. So
this is why we mostly talk about simple path between 2 vertices because if any other walk is possible
simple path is also possible and it makes most sense to look for a
simple path so this is what I'm going to do
throughout our lessons. I'm going to say path and by path, I'll mean simple path and if it's not a simple path I'll say it
explicitly. A graph is called strongly connected if
in the graph there is a path from any vertex to any
other vertex. If it's an undirected graphs, we simply
call it connected and if it's a directed graph, we call it
strongly connected. In leftmost and rightmost graphs that I'm
showing you here, we have a path from any vertex to any
other vertex but in this graph in the middle, we do
not have a path from any vertex to any other vertex. We cannot
go from vertex C to A. We can go from A to C but we
cannot go from C to A, So this is not a strongly
connected graph. Remember if it's an undirected graph, we
simply say connected and if it's a directed graph we say a strongly
connected. If a directed graph is not strongly connected but can be turned into connected
graph by treating all edges as undirected then such a directed graph is called
weakly connected. If we just ignore the directions of
edges here, this is connected but I would recommend that you just
remember connected and strongly connected. This leftmost undirected graph is connected. I removed 1 of the edges and now this
is not connected. Now we have 2 disjoint connected
components here but the graph overall is not
connected. Connectedness of a graph is are really
important property. If you remember, intracity road
network with a city that would have a lot of 1 ways can
be present as a directed graph. Now an intra-city road network should
always be strongly connected. We should be able to reach any street
from any street, any intersection to any intersection.
Okay, now that we understand concept of path. Next, I want to talk about cycle in a
graph. A walk is called a closed walk if it starts an ends at same vertex like what i'm showing here and there is 1
more condition, the length of the walk must be
greater than 0. Length of a walk or path is number of edges
in the path like for this closed walk that I'm showing
you here. length is 5 because we have 5 edges
in this walk. So a closed walk is a walk that starts
and ends at same vertex and the length of which is greater than
0. Now some may call closed walk a cycle but generally we used
the term cycle for a simple cycle. A simple cycle is a close walk in which other than start
and end vertices no other vertex or
edge is repeated. Right now, what I'm showing
you here in this example graphs is a simple cycle or we can just say cycle. A graph with no cycle is called an
acyclic graph. A tree if drawn with undirected edges would
be an example of and undirected acyclic graphs. Here
in this tree, we can have a closed walk but we
cannot have a simple cycle. In this closed walk that I'm showing you
here, our edge is repeated. There would be no simple cycle in a tree
and apart from tree, we can have other kind of undirected
acyclic graphs also. A tree also has to be connected. Now we
can also have a directed acyclic graph, as you can see here also we do not have
any cycle. You cannot have a path of lenght greater
than 0 starting and ending at the same vertex. A directed cyclic graph is often
called a DAG. A cycles in a graph cause a lot of
issues in designing algorithms for
problems like finding shortest route from 1 vertex to another and we will talk about cycles a lot when
we will study some of these advanced algorithm in coming lessons. For this lesson, I'll stop here now.
In our next lesson, we will discuss ways of creating and storing graph in
computers memory. This is it for this lesson. Thanks for
watching.",Data structures: Properties of Graphs,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described below properties of Graph data structure:

a) directed graph vs undirected graph
b) weighted graph vs unweighted graph
c) sparse graph vs dense graph
d)  strongly connected graphs
e)  Acyclic graphs. 

Next Lesson:- https://www.youtube.com/watch?v=ZdY1Fp9dKzs&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=40

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,AfYqN3fGapc
Moreonlinearindependence_Vectorsandspaces_LinearAlgebra_KhanAcademy-Alhcv5d_XOs.en.csv,"I think by now we have a
reasonable sense of what linear dependence means. So let's just do a slightly
more formal definition of linear dependence. So we're going to say that a set
of vectors-- Let me just define my set of vectors. Let me call my set s
of vectors, v1, v2, all the way to vn. I'm going to say that they
are linearly dependent. If and only if. So sometimes it's written if, if
with a lot of f's in there. So sometimes it's written
if and only if. Sometimes it's shown like an
arrow in two directions. If and only if I can satisfy
this equation, I can find a set of constants c1 times v1. I can take a linear combination
of my vectors all the way to cn vn, that satisfy
the equation that I can create this into the 0 vector. Sometimes it's just written as
a bold 0, and sometimes you could just write it -- I
mean we don't know the dimensionality of this vector. It would be a bunch of 0's. We don't know how many actual
elements are in each of these vectors, but you get the idea. My set of vectors is linearly
dependent-- remember I'm saying dependent, not
independent --is linearly dependant, if and only if I can
satisfy this equation for some ci's where not all of
them are equal to 0. This is key, not all are 0. Or you could say it
the other way. You could say at least
one is non-zero. So how does this gel with what
we were talking about in the previous video where I said
look, a set is linearly dependent if one of the of
vectors can be represented by the combination of the
other vectors? Let me write that down. In the last few I said, look,
one vector can be -- Let me write it this way. One vector being represented
by the some of the other vectors, I can just write
it like this. I can write it a little
bit more math-y. In the last video, I said that
linear dependence means that-- let me just pick an arbitrary
vector, v1. Let's say that v1, you know
this is arbitrary, v1 one could be represented
by some combination of the other vectors. Let me call them a1 times v --
let me be careful -- a2 times v2 plus a3 times v3 plus all
the way up to an times vn. This is what we said in
the previous video. If this is linear dependence,
any one of these guys can be represented as some combination
of the other ones. So how does this imply that? In order show this if and only
if, I have to show that this implies that and I have to show
that that implies this. So this is almost a trivially
easy proof. Because if I subtract v1 from
both sides of this equation I get 0 is equal to minus 1 v1
plus a2 v2 plus a3 v3 all the way to an vn. And clearly I've just
said, well, this is linearly dependent. That means that I can represent
this vector as a sum of the other vectors, which
means that minus 1 times v1 plus some combination of the
other vectors is equal to 0, which means that I've been able
to satisfy this equation, and at least one of my constants
is non-zero. So I've shown you that, if I
can represent one of the vectors by a sum of the other
ones, then this condition is definitely going to be true. Now let me go the other way. Let me show you if I have this
situation that I can definitely represent one
of the vectors as the sum of the others. So let's say that
this is true. And one of these constants,
remember it's not just this, it's at least one,
is non-zero. So let me just assume, just for
the sake of simplicity-- I mean these are all arbitrary. I'll do it in a new color. Let me do it in the magenta. Let me assume that c1
is not equal to 0. If c1 is not equal to 0, then
I can divide both sides of this equation by c1. And what do I get? I get v1 plus c2 over c1 v2 plus
all the way up to cn over c1 is equal to 0. And then I can multiply both
sides of this, or I could add negative v1 to both sides of
this equation or subtract v1 from both sides. And I get c2 over c1 v2 plus all
the way up to cn over c1 vn-- there's a vn here --is
equal to minus v1. Now if I just multiply both
sides of this by negative 1, I get a minus, and all these
become minuses and this becomes a plus. And I just showed you that
if at least one of these constants is non-zero, that I
can represent my vector v1 as some combination of
the other vectors. So we're able to go
this way too. If this condition is true, then
I can represent one of the vectors as a combination
of the others. If I can represent one of those
vectors as a combination of the others, then this
condition is true. Hopefully that kind of proves
that these two definitions are equivalent. Maybe it's a little
bit of overkill. Let's apply that definition
now, to actually test. You might say, hey Sal, why'd you go
through all of this effort? I went through all of this
effort because this is actually a really useful way
to test whether things are linearly independent
or dependent. Let's try it out. Let's use our newly
found tool. Let's say I have the
set of vectors-- Let me do it up here. I want to be efficient
with my space usage. So let's say I have the set
of vectors 2,1 and 3,2. And my question to you is, are
these linearly independent or are they linearly dependent? In order for them to be linearly
dependent, that means that if some constant times 2,1
plus some other constant times this second vector,
3,2 where this should be equal to 0. Where these both aren't
necessarily 0. Before I go up for this problem,
let's remember what we're going to find out. If either of these are non-zero,
if c1 or c2 are non-zero, then this implies
that we are dealing with a dependent, linearly
dependent set. If c1 and c2 are both 0, if the
only way to satisfy this equation -- I mean you can
always satisfy it by sitting everything equal to 0. But if the only way to satisfy
it is by making both of these guys 0, then we're
dealing with a linearly independent set. Let's try to do some math. And this'll just take us back
to our Algebra 1 days. In order for this to be true,
that means 2 times c1 plus 3 times c2 is equal to -- when I
say this is equal to 0, it's really the 0 vector. I can rewrite this as 0,0. So 2 times c1 plus 3
times c2 would be equal to that 0 there. And then we'd have 1 times
c1 plus 2 times c2 is equal to that 0. And now this is just a system,
two equations, two unknowns. A couple of things
we could do. Let's just multiply this
top equation by 1/2. If you multiply it by 1/2 you
get c1 plus 3/2 plus 3/2 c2 is equal to 0. And then if we subtract the
green equation from the red equation this becomes 0. 2 minus 1 and 1/2-- 3/2 is 1 and
1/2 --of this is just 1/2 c2 is equal to 0. And this is easy to solve. c2 is equal to 0. So what's c1? Well, just substitute this back
in. c2 is equal to 0. So this is equal to 0. So c1 plus 0 is equal to 0. So c1 is also equal to 0. We could have substituted
it back into that top equation as well. So the only solution to this
equation involves both c1 and c2 being equal to 0. So they both have to be 0. So this is a linearly
independent set of vectors. Which means that neither
of them are redundant of the other one. You can't represent one as a
combination of the other. And since we have two vectors
here, and they're linearly independent, we can actually
know that this will span r2. The span of my r vectors
is equal to r2. If one of these vectors was
just some multiple of the other, than the span would have
been some line within r2, not all of. But now I can represent any
vector in r2 as some combination of those. Let's do another example. Let me scroll to the right,
because sometimes this thing, when I go too far down, I
haven't figured out why, when I go too far down it
starts messing up. So my next example is
the set of vectors. So I have the vector 2,1. I have the vector 3,2. And I have the vector 1,2. And I want to know are these
linearly dependent or linearly independent. So I go to through
the same drill. I use that little theorem that
I proved at the beginning of this video. In order for them to be linearly
dependent there must be some set of weights that
I can multiply these guys. So c1 times this vector plus c2
times this vector plus c3 times that vector, that will
equal the 0 vector. And if one of these is non-zero
then we're dealing with a linearly dependent
set of vectors. And if all of them are 0,
then it's independent. Let's just do our
linear algebra. So this means that 2 times c1
plus 3 times c2 plus c3 is equal to that 0 up there. And then if we do the bottom
rows-- Remember when you multiply a scalar times a vector
you multiply it by each of these terms. So c1 times 1. 1c1 plus 2c2 plus 2c3
is equal to 0. There's a couple of giveaways
on this problem. If you have three
two-dimensional vectors, one of them is going to
be redundant. Because, in the very best case,
even if you assume that that vector and that vector are
linearly independent, then these would span r2. Which means that any point,
any vector, in your two-dimensional space can
be represented by some combination of those two. In which case, this is going to
be one of them because this is just a vector in
two-dimensional space. So it would be linearly
dependent. And then, if you say, well,
these aren't linearly independent then, they're just
multiples of each other. In which case, this would
definitely be a linearly dependent set. When you see three vectors that
are each only vectors in r2, that are each
two-dimensional vectors, it's a complete giveaway that this
is linearly dependent. But I'm going to show it to you
using our dependent, using our little theorem here. So I'm going to show you that I
can get non-zero c3's, c2's, and c1's such that I
can get a 0 here. If all of these had to be 0-- I
mean you can always set them equal to 0. But if they had to be equal to
0, then it would be linearly independent. Let me just show you. I can just pick some
random c3. Let me pick c3 to be equal
to negative 1. So what would these two
equations reduce to? I mean you have just three
unknowns and two equations, it means you don't have enough
constraints on your system. So if I just set c3-- I just
pick that out of a hat. I could have picked
c3 to be anything. But if I set c3 to be equal to
negative 1, what do these equations become? You get 2c1 plus 3c2 minus
1 is equal to 0. And you get c1 plus 2c2
minus 2 is equal to 0. Right? 2 times minus 1. What can I do here? If I multiply this second
equation by 2, what do I get? I get 2 plus 4c2 minus
4 is equal to 0. And now let's subtract this
equation from that equation. So the c1's cancel out. 3c2 minus 4c2 is minus c2. And then minus 1 minus minus 4,
so that's minus 1 plus 4. That's plus 3 is equal to 0. And so we get our -- Let me make
sure I got that right. We have a minus 1
minus a minus 4. So plus 4. So we have a plus 3. So that is a minus 2. So minus c2 is equal to minus
3 or c2 is equal to 3. And if c2 is equal to 3 and c3
is equal to minus 1-- Let's just substitute here, so we
get c1 plus 2 times c2, so plus 6, plus 2 times c3. So minus 2 is equal to 0. c1 plus 4 is equal to 0. c1 is equal to minus 4. I'm giving you a combination
of c's that will give us a 0 vector. If I multiply minus 4 times our
first vector, 2,1, that's c1, plus 3 times our second
vector, 3,2 minus 1 times our third vector, 1,2 this
should be equal to 0. Let's verify it just for fun. Minus 4 times 2 is minus
8 plus 9 minus 1. Yeah, that's minus 9 plus 9. That's 0. Minus 4 times plus 6 minus
2 that's also 0. So we've just shown a linear
combination of these vectors, where actually none of
the constants are 0. But all we had to show was
that at least one of the constants had to be non-zero,
and we actually showed all three of them were. But at least one of these
had to be non-zero. And I was able to satisfy this
equation, I was able to make them into the zero vector. So this shows, this proves,
that this is a linearly dependent set of vectors. Which means one of the
vectors is redundant. And you can never just say,
oh, this is the redundant vector, because I can represent
this as combination of those two. You could just as easily pick
this guy as the redundant vector, and say, hey, I can
represent this guy as the sum of those two. There's not one bad apple
in the bunch. Any of them can be represented
by the combination of some other, by all of the
rest of them. So hopefully you have a better
intuition of linear dependence and independence. Maybe I'll continue. I'll do a few more examples
in the next video.",More on linear independence | Vectors and spaces | Linear Algebra | Khan Academy,"More examples determining linear dependence or independence.

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/linear_independence/v/span-and-linear-independence-example?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/linear_independence/v/linear-algebra-introduction-to-linear-independence?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,Alhcv5d_XOs
Amoreformalunderstandingoffunctions_Matrixtransformations_LinearAlgebra_KhanAcademy-BQMyeQOLvpg.en.csv,"I think you've been exposed to
the idea of a function at some point in your mathematical
career. But what I want to do in this
video is explain it a little bit more formerly than you might
be used to, and then relate it to some of the
concepts of vectors and linear algebra that we've
seen so far. A function really is just a
relation between the members of one set and the members
of the other set. So let's have some set x, and
for every member of that set x I'm going to relate that member,
or associate that member, with another
member of a set y. So if I imagine that is my set
x, and that this is my set y-- and y doesn't have to be
smaller, that's just the way I drew it-- the function
is just a relation. That if I just take a member of
my set x, let's see that's the member that I'm
taking, we're visualizing it as a point. This function will say, OK you
gave me a member of x, then I will give you a member
of y associated with that member of x. So the function will say, you
give me that, then I will map it to that member right there. And that really just means
relating it to, or associating with another member of y. And if you'd give me some other
point right here, I'll relate it to another
member of y. I might even relate it to
the same member of y. And so this notation just says
this is a mapping from one set x, and I'm speaking in
very general terms, to another set y. And so you're probably saying,
Hey Sal, this is very abstract, how does this relate
to the functions that I've seen in the past? Well let me just write down a
function you've probably seen a lot in the past. You've
dealt with f of x is equal to x squared. How would we write this
in this notation? Well this is a function,
assuming that it's kind of the traditional way that
you see it. Let me just write with the f,
I was going to write it with the g of x, just so this doesn't
always have to be an f, but I think you
get that idea. In this case f is a mapping from
real numbers-- the real numbers are everything that I
can put in here-- actually this is part of the function
definition. I could constrain this to just
be integers, or just be even numbers, or just be
even integers. But this is part of the function
definition, I'm defining the function to be a
mapping from real numbers. I'm saying you can put any real
number here, and it's going to map to real numbers. So in this case, if x is real
numbers, it's going to map to itself, which is completely
legitimate. So if this is the real numbers--
and obviously the real numbers would go off in
every direction forever-- but if this for real numbers, this
function mapping is just taking every point in
R and mapping it to another point in R. It's taking every point and
associating with it its perfect square. And I want to make a very subtle
notation-- or at least in my mind the first time that
I got exposed to functions I was thinking, you give me an
x and I square it, and I'm giving you the square of x. And that's true, you
are doing that. But at least the way my brain
worked, I kind of thought of it as I was changing my
x into another number. And you can maybe view it that
way, and that might actually be the best way to view it. But the mathematical definition
I'm introducing here is more that I'm
associating x with x squared. This is another function
notation of writing this exact same thing. These two statements right here,
this statement and this statement are identical. This statement you've probably
never seen before, but I like it because it shows the mapping
or the association more, while this association I
think that you're putting an x into a little meat grinder or
some machine that's going to ground up the x or square the x,
or do whatever it needs to do to the x. This notation to me implies
the actual mapping. You give me an x, and I'm going
to associate another number in real numbers
called x squared. So it's going to be just
another point. And just as a little bit of
terminology, and I think you've seen this terminology
before, the set that you are mapping from is called the
domain and it's part of the function definition. I, as the function creator, have
to tell you that every valid input here has to be
a set of real numbers. Now the set that I'm mapping
to is called the codomain. The obvious question that you're
probably asking is, hey Sal, when I learned all of this
function stuff in algebra II or whenever you first learned
it, we never used this codomain word. We have this idea of range, I
learned the word range when I was in 9th or 10th grade. How does this codomain
relate to range? And it's a very subtle
notation. So the codomain is a set that
you're mapping to, and in this example this is the codomain. In this example, the real
numbers are the domain and the codomain. So the question is how does
the range relate to this? So the codomain is the
set that can be possibly mapped to. You're not necessarily
mapping to every point in the codomain. I'm just saying that this
function is generally mapping from members of this
set to that set. The range is the subset --
let me write it this way. It could be equal
to the codomain. It's some subset. A set is a subset of itself,
every member of a set is also a member of itself, so it's
a subset of itself. So range is a subset of the
codomain which the function actually maps to. So let me give you an example. Let's say I define the function
g, and it is a mapping from the set
of real numbers. Let me say it's a mapping
from R2 to R. So I'm essentially taking
2-tuples and I'm mapping it to R. And I will define g, I'll
write it a couple of different ways. So now I'm going to take g of
two values, I could say xy or I could say x1, x2. Let me do it that way. g of x1, x2 is always
equal to 2. It's a mapping from R2 to R,
but this always equals 2. And let me actually write the
other notation just because you probably haven't
seen this much. g maps any points x1 and
x2 to the point 2. This makes the mapping
a little bit clearer. But just to get the notation
right, what is our domain? What's the real number? That was part of my function
definition, I said we're mapping from R2, so
my domain is R2. Now what is my codomain? My codomain is the set that I'm
potentially mapping to, and is part of the function
definition. This by definition
is the codomain. So my codomain is R. Now what is the range
of my function? The range is the set of values
that the function actually maps to. In this case, we always map to
the value 2, so the range is actually just the value 2. And if we were to visualize
this-- R2 is actually-- I wouldn't draw it as a blurb, I
would draw it as the entire Cartesian space, but I'm just
giving you an abstract notion. That's R2. If I really have to draw R, I'd
draw it as some type of a number line. Actually let me do it that way
just for fun, you don't normally see it written
that way. But I could just draw R like
that's R2, and I could just draw R as some straight line. So this is the set R. I could draw it like that
as well, but let's just say this is set R. And my function g essentially
maps any point over here to exactly the point 2. 2 is just one little
point in R. My function g takes any point in
R2, any coordinate, this is the point 3, minus 5,
whatever it is. It always maps it to
the point 2 in R. So if I think that point it
maps it to the point 2. That's what g always does. So g's codomain-- you could
say it's all of the real numbers, but it's range
is really just 2. Let me do another example that
might be interesting. If I just write h is a function
that goes from R2 to R3, and I'll be a little
careful here, h goes from R2 to R3. And I'll write here that h of
x1, x2 is equal to -- so now I'm mapping a higher dimension
space, so I'm going to say that that is going to be equal
to, let's say my first coordinate or my first component
at R3 is x1 plus x2. Let's say my second coordinate
is x2 minus x1. And let's say my third
coordinate is x2 times x1. Now what is my domain and my
range and my codomain? So my domain by definition
is this right there. My codomain by definition
is R3. And notice I'm going from a
space that has two dimensions to a space it has three
dimensions, or three components. But I can always associate some
point with x1, x2 with some point in my R3 there. A slightly trickier question
here is, what is the range? Can I always associate every
point-- maybe this wasn't the best example because it's not
simple enough -- but can I associate every point in R3--
so this is my codomain, my domain was R2, and my function
goes from R2 to R3, so that's h. And so my range, as you could
see, it's not like every coordinate you can express
in this way in some way. Let me give you an example. I could put some x1's and x2's
here and figure it out. Let's do that. Let's take our h of-- let me use
my other notation-- let's say that I said h, and I wanted
to find the mapping from the point in R2, let's
say the point 2 comma 3. And then my function tells me
that this will map to the point in R3. I add the two terms, the
2 plus 3, so it's 5. I'd find the difference between
x2 and x1-- so 3 minus 2 is 1-- and then I multiply
the two, 6. So clearly this will be in
the range, this is a member of the range. So for example the point 2, 3,
which might be right there, will be mapped to the three
dimensional point, it's kind of just drawn as a two
dimensional blurb right there, but I think you get the idea,
would be mapped to the three dimensional point 5, 1, 6. So this is definitely a
member of the range. Now my question to you, if I
have some point in R3, let's say that this is the
point 5, 1, 0. Is this point a member
of the range? It's definitely a member of
the codomain, it's in R3. It's definitely in
here, and this by definition is the codomain. But is this in our range? 5 has to be the sum of two
numbers, the 1 has to be the difference of two numbers, and
then the 0 would have to be the product of two numbers. And clearly we know 5 is the
sum, and 1 is the difference, we're dealing with 2 and 3, and
there's no way you can get the product of those numbers
to be equal to 0. So this guy is not
in the range. So the range would be the subset
of all of these points in R3, so there'd be a ton of
points that aren't in the range, and there'll be a smaller
subset of R3 that is in the range. Now I want to introduce you to
one more piece of terminology when it comes to functions. These functions up here, this
function that mapped from points in R2 to R, so
its codomain was R. This function up here is
probably the most common function you see in mathematics,
this is also mapping to R. These functions that map to R
are called scalar value or real value, depending on how
you want to think about it. But if they map to a one
dimensional space, we call them a scalar valued function,
or a real valued function. Which is pretty much all of
the functions that you've probably dealt with up to this
point in your mathematical career, unless you've taken
some vector calculus. Now the functions that map to
spaces or subspaces that have more than one dimension-- so if
you map to R or any subset of R, you have a real valued
function, or a scalar valued function. If you map to Rn, where n is
greater than 1, so if you map to R2, R3, R4, R100, you're
then dealing with a vector valued function. So this last function that I
defined over here, h is a vector valued function. Anyway I think you now have
at least the mathematical notational tools to understand
what I'm going to do in the rest of this playlist, and
hopefully you found this reasonably useful.",A more formal understanding of functions | Matrix transformations | Linear Algebra | Khan Academy,"A more formal understanding of functions

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/vector-transformations?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/showing-that-the-candidate-basis-does-span-c-a?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,BQMyeQOLvpg
InverseLaplaceexamples_Laplacetransform_DifferentialEquations_KhanAcademy-BbqbvSig6Mc.en.csv,"A lot of what we do with Laplace
transforms, taking them and taking their
inverse, it's a lot of pattern matching. And it shouldn't just be a
mechanical thing, and that's why I've gone through the
exercise of showing you why they work. But in order to just kind of
make sure we don't get confused, I think it might be
useful to review a little bit of everything that we've
learned so far. So in the last video, we saw
that the Laplace transform-- well, let me just
write something. The Laplace transform of f of
t, let me just get some notation down, and we can write
that as big capital F of s, and I've told you
that before. And so given that, in the last
video I showed you that if we have to deal with the unit step
function, so if I said, look, the Laplace transform of
the unit step function, it becomes 1 at some value c times
some shifted function f of t minus c, in the last video,
we saw that this is just equal to e to the minus cs
times the Laplace transform of just this function right
there, so times the F of s. And it's really important not
to get this confused with another Laplace transform
property or rule, or whatever you want to call it, that
we figured out. I think it was one of the videos
that I made last year, but if you're just following
these in order I think it's three or four videos ago. And that one told us that the
Laplace transform of e to the at, times f of t, that this is
equal to-- and I want to make this distinction very clear. Here we shifted the f of t
and we got just kind of a regular F of s. In this situation, when we
multiply it times a e to the positive at, we end up shifting
the actual transform. So this becomes F
of s minus a. And these two rules, or
properties, or whatever you want to call them, they're
very easy to confuse with each other. So we're going to do a couple
of examples that we're going to have to figure out which
one of these two apply. Let's write all the other stuff
that we learned as well. The very first thing we learned
was that the Laplace transform of 1 was
equal to 1/s. We know that that's a pretty
straightforward one, easy to prove to yourself. And more generally, we learned
that the Laplace transform of t to the n, where n is a
positive integer, it equaled n factorial over s to
the n plus 1. And then we had our
trig functions that we've gone over. Let me do this in a
different color. I'll do it right here. The Laplace transform of sine
of at is equal to a over s squared, plus a squared. And the Laplace transform of the
cosine of at is equal to s over s squared plus a squared. And you'll be amazed by how far
we can go with just what I've written here. In future videos, we're going
to broaden our toolkit even further, but just these right
here, you can already do a whole set of Laplace transforms
and inverse Laplace transforms. So let's
try to do a few. So let's say I were to give
you the Laplace transform. And you know, this is
just the hard part. I think you know how to solve
a differential equation, if you know how to take the
Laplace transforms and go back and forth. The hard part is just
recognizing or inverting your Laplace transforms. So let's
say we had the Laplace transform of some
function F of s. Let's say it's 3 factorial over
s minus 2 to the fourth. Now, your pattern matching, or
your pattern recognition part of your brain, should
immediately say, look, I have a Laplace transform of something
that has a factorial in it, and it's over
an exponent. This must be something
related to this thing right here, right? If I just had the Laplace
transform-- let me write that down-- the Laplace transform
of-- you see a 3 factorial and a fourth power, so it looks
like n is equal to 3. So if you write the Laplace
transform of t to the 3, this rule that we showed right here,
this means that it would be equal to 3 factorial
over s to the fourth. Now, this thing isn't
exactly this thing. They're not quite
the same thing. You know, I'm doing this to
instruct you, but I find these, when I'm actually doing
them on an exam-- I remember when I did them when I first
learned this, I would actually go through this step because you
definitely don't want to make a careless mistake and you
definitely want to make sure you have a good handle
on what you're doing. So you're like, OK, it's
something related to this, but what's the difference between
this expression right here and the expression that we're trying
to take the inverse Laplace transform of,
and this one here? Well, we've shifted our s. If we call this expression right
here F of s, then what's this expression? This expression right here
is F of s minus 2. So what are we dealing
with here? So you see here, you have
a shifted F of s. So in this case, a would
be equal to 2. So this is the Laplace transform
of e to the at times our f of t. So let me write this down. This is the Laplace transform
of e to the-- and what's a? a is what we shifted by. It's what we shifted by minus
a, so you have a positive a, so e to the 2t times the
actual function. If this was just an F of s,
what would f of t be? Well, we figured out, it's t the
3, t to the third power. So the Laplace transform of
this is equal to that. Or we could write that the
inverse Laplace transform of 3 factorial over s minus 2 to the
fourth is equal to e to the 2t times t to the third. Now, if that seemed confusing
to you, you can kind of go forward. Let's go the other direction,
and maybe this will make it a little bit clearer for you. So let's go from
this direction. If I have to take the Laplace
transform of this thing, I'd say, OK, well, the Laplace
transform of t to the third is easy. I think the tool isn't working
right there properly. Let me scroll up a little bit. So I could write
it right here. So if I wanted to figure out the
Laplace transform of e to the 2t times t to the third,
I'll say, well, you know, this e to the 2t, I remember that
it shifts something. So if I know that the Laplace
transform of t the third, this is an easy one. It's equal to 3 factorial
over s to the fourth. That's 3 plus 1. Then the Laplace transform of e
to the 2t times t the third is going to be this shifted. This is equal to F of s. Then this is going to
be f of s minus 2. So what's F of s minus 2? It's going to be equal to 3
factorial over s minus 2 to the fourth. I think you're already getting
an appreciation that the hardest thing about these
Laplace transform problems are really kind of all of these
shifts and kind of recognizing the patterns and recognizing
what's your a, and what's your c, and being very careful about
it so you don't make a careless mistake. And I think doing a lot of
examples probably helps a lot, so let's do a couple of more
to kind of make sure things really get hammered home
in your brain. So let's try this
one right here. This looks a little bit
more complicated. They give us that the Laplace
transform of some function is equal to 2 times s minus 1 times
e to the minus 2s, all of that over s squared
minus 2s plus 2. Now this looks very daunting. How do you do this? I have an e here. I have something shifted here. I have this polynomial in
the denominator here. What can I do with this? So the first thing, when I look
at these polynomials in the denominator, I say can
I factor it somehow? Can I factor it fairly simply? And actually, in the exams
that you'll find in differential equation class,
they'll never give you something that's factorable
into these weird numbers. It tends to be integers. So you see, OK, what
two numbers? They have to be positive. When you give their product,
you get 2. And then when you add them, you
get negative 2, or they could both be negative. But there's no two easy
numbers, not 1 and 2. None of those work. So if you can't factor this
outright, the next idea is maybe we could complete the
square and maybe this will match one of the cosine
or the sine formulas. So how can we complete the
square in this denominator? Well, this can be rewritten
as s squared minus 2s. And I'm going to put
a plus 2 out here. And you can watch, I have
a bunch of videos on the completing of the square,
if all of this looks foreign to you. And to complete the square, we
just want to turn this into a perfect square. So to turn this into a perfect
square-- so something when I add it to itself twice becomes
minus 2, and so that when I square it, when I add it to
itself twice, it becomes minus 2, it's minus 1. And when I square it,
it'll become plus 1. I can't just add plus 1
arbitrarily to some expression, I have to
make it neutral. So let me subtract 1. I haven't changed this. I added 1 and I subtracted 1. A little bit of a primer on
completing the square. But by doing this, I now can
call this expression right here, I can now say that this
thing is s minus 1 squared. And then this stuff out here,
this out here is 2 minus 1. This is just plus 1. So I can rewrite my entire
expression now as 2 times s minus 1 times e to the minus
2s-- make sure I'm not clipping off at the top-- e to
the minus 2s, all of that over s minus 1 squared plus 1. So a couple of interesting
things seem to be happening here. Let's just do a couple of test
Laplace transforms. So if a Laplace transform of cosine of
t, we know that this is equal to s over s squared plus 1,
which this kind of looks like if this was an s and this
was an s squared plus 1. If this was F of s,
then what is this? Well, let's ignore this guy
right here for a little bit. So what is it? We know, actually, from
the last video. We saw, well, what if we took
the Laplace transform of e to the-- I'll call it 1t. But let's say e to the-- yeah
I'll just write it e to the 1t times cosine of t? Well, then this will just
shift this Laplace transform by 1. It will shift it by
1 to the right. Wherever you see an s, you
would put an s minus a 1. So this will be equal to s
minus 1 over s minus 1 squared plus 1. We're getting close. We now figured out this
part right here. Now, in the previous video, I
think it was two videos ago, or maybe it was the last
video, I forget. Memory fails me. I showed you that if you have
the Laplace transform of the unit step function of t times
some f of t shifted by some value of c, then that this is
equal to e to the minus cs times F of s. OK, And this can get
very confusing. This can get very confusing,
so I want to be very careful here. Let's ignore all of this. I called this F of s before, but
now I'm going to backtrack a little bit. And let's just ignore this,
because I'm going to redefine our F of s. So let's just ignore
that for a second. Let's define our new
f of t to be this. Let's say that that is f of t. Let's say f of t is equal to
e to the t cosine of t. Then if you take the Laplace
transform of that, that means that F of s is equal to s
minus 1 over s minus 1 squared plus 1. Nothing fancy there. I just defined our f of
t as this, and then our F of s is that. Now, we have a situation here. Let's ignore the 2 here. The 2 is just kind of
a scaling factor. This expression right here, we
can rewrite as that expression is equal to-- this
is our F of s. This expression right here is
equal to 2 times our F of s times e to the minus 2s. Or let me just write it. Let me switch the order, just
so we make it look right. 2 times e to the minus
2s times F of s. Well, that looks just like
this if our 2 was equal to our c. So what does that tell us? That tells us that the inverse
Laplace transform, if we take the inverse Laplace
transform-- and let's ignore the 2. Let's do the inverse Laplace
transform of the whole thing. The inverse Laplace transform
of this thing is going to be equal to-- we can just write
the 2 there as a scaling factor, 2 there times
this thing times the unit step function. What's our c? You can just pattern match. You have a 2 here. You have a c, a minus c,
a minus 2, so c is 2. The unit step function is zero
until it gets to 2 times t, or of t, so, then it becomes 1
after t is equal to 2, times our function shifted by 2. So this is our inverse
Laplace transform. Now, what was our function? Our function was this
thing right here. So if our inverse Laplace
transform of that thing that I had written is this thing, an
f of t, f of t is equal to e to the t cosine of t. Then our inverse-- let me
write all of this down. Let me write our big result. We established that the inverse
Laplace transform of that big thing that I had
written before, 2 times s minus 1 times e to the minus 2--
sorry, e to the minus 2s over s squared minus 2s plus 2
is equal to this thing where f of t is this. Or we could just rewrite this
as 2 times the unit step function starting at 2, where
that's when it becomes non-zero of t times f of t minus
2. f of t minus 2 is this with t being replaced
by t minus 2. I'll do it in another color,
just to ease the monotony. So it would be e to the t minus
2 cosine of t minus 2. Now, you might be thinking, Sal,
you know, he must have taken all these baby steps with
this problem, because he's trying to explain
it to me. But I'm taking baby steps with
this problem so that I myself don't get confused. And I think it's essential
that you do take these baby steps. And let's just think about
what baby steps we took. And I really want
to review this. This is actually a surprisingly
good problem. I didn't realize it when I
first decided to do it. We solved this thing. We wanted to get this
denominator into some form that is vaguely useful to us,
so I completed the square there and then we rewrote
our Laplace transform, our f of s like this. And then we used a little
pattern recognition. We said, look, if I take the
Laplace transform of cosine of t, I'd get s over s
squared plus 1. But this isn't s over
s squared plus 1. It's s minus 1 over s minus
1 squared plus 1. So we said, oh, well, that means
that we're multiplying our original time
domain function. We're multiplying our f of
t times e to the 1t. And that's what we got there. So the Laplace transform of e to
the t cosine of t became s minus 1 over s minus
1 squared plus 1. And then we had this e to the
minus 2s this entire time. And that's where we said, hey,
if we have e to the minus 2s in our Laplace transform, when
you take the inverse Laplace transform, it must be the step
function times the shifted version of that function. And that's why I was
very careful. And you had this 2 hanging out
the whole time, and I could have used that any time. But the simple constants
just scale. A function is equal to two times
the Laplace transform of that function and vice versa. So the 2's are very easy to
deal with, so I kind of ignored that most of the time. But that's why I was
very careful. I redefined f of t to be this,
F of s to be this, and said, gee, if F of s is this, and if
I'm multiplying it times e to the minus 2s, then what I'm
essentially doing, I'm fitting this pattern right here. And so the answer to my problem
is going to be the unit step function-- I just
throw the 2 out there-- the 2 times the unit step function
times my f of t shifted by c. And we established this was
our f of t, so we just shifted it by c. We shifted it by 2, and we
got our final answer. So this is about as hard up to
this point as you'll see an inverse Laplace transform
problem. So, hopefully, you found that
pretty interesting.",Inverse Laplace examples | Laplace transform | Differential Equations | Khan Academy,"Using our toolkit to take some inverse Laplace Transforms

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/dirac-delta-function?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-of-the-unit-step-function?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,BbqbvSig6Mc
Showingrelationbetweenbasiscolsandpivotcols_LinearAlgebra_KhanAcademy-BfVjTOjvI30.en.csv,"In the last video we saw a
method of figuring out what the basis for column space is. And we use these
exact examples. Whereas this was matrix A, I
just took it and I put it in reduced row echelon form. And I figured out which of these
columns in my reduced row echelon form of A,
are pivot columns. And it turned out to be the
first one, the second one, and the fourth one. And then the method is, you say
look, the corresponding columns in A-- so the first one,
the second one, and the fourth one-- form my basis
for my column space. And since they form the basis,
and if you want to know the dimension of your basis of your
column space, which is also called the rank,
you just say, well there's three in there. So it has a rank of
one, two, three. In this video I want to discuss
a little bit about why this worked. Why were we able to just take
the corresponding columns? Why did linear independence of
these three guys, imply linear independence of these
three guys? Why was the fact that I can
represent these guys-- this guy right here as a linear
combination of these three, or this guy as a linear combination
of these three-- why does that imply that I can
construct this guy as a linear combination of my
basis vectors? So the first thing that wasn't
too much of a stretch of the imagination in the last video,
was the idea that these pivot vectors are linearly
independent. So r1, r2, and r4. And everything I'm doing, I'm
kind of applying to the special case just so that it's
easier to understand. But it should be
generalizable. In fact, it definitely
is generalizable. That all of the pivot columns
in reduced row echelon form are linearly independent. And that's because the very
nature of reduced row echelon form, is that you are the only
pivot column that has a 1 in that respective row. So the only way to construct
it is with that vector. You can't construct it with
the other pivot columns because they're all going
to have 0 in that row. And when I say it's linearly
independent, I'm just saying the set of pivot columns. So let me say this in general. The set of pivot columns for any
reduced row echelon form matrix is linearly
independent. And it's just a very
straightforward argument. Because each column is
going to have a 1 in a very unique place. All of the other pivot columns
are going to have a 0 in that same place. And so you can't take any linear
combinations to get to that 1 because 0 times anything,
minus or plus 0 times anything, can never
be equal to 1. So I think you can
accept that. Now, that means that the
solution to c1 times r1, plus c2 times r2, plus, let
me say, c4 times r4. The solution to this equation,
because these guys are linearly independent, we know
that this only has one solution, and that's c1, c2,
and c4 is equal to 0. That's the only solution
to that. So another way we could say it
is, if we write r times some vector x-- well I'll just write
it times this particular x-- where I write it as
c1, c2, 0, c4, and 0 is equal to 0. So this will be some special
member of your null space. It's a particular solution
to the equation. This is equal to one, two,
three, four 0's because we have four rows here. Now, if we just expand
this out. If we just multiply 1 times c1,
plus 0 times c2, minus 1 times 0, plus 4 times 0, you'll
get-- or actually a better way to explain it-- this
multiplication right here can be written as-- and we've
seen this multiple times-- c1 times r1, plus c2 times
r2, plus 0 times r3. So we could just ignore that
term, plus c4, c4 times r4, plus 0 times r5. That's r5 right there. All of that equal to 0. So the only solution to this,
because we know that these three columns are linearly
independent-- or the set of just those three columns, those
three pivot columns are linearly independent-- the only
solution here is all of these equal to 0. That's exactly what I
said right up here. So the only solution here, where
if these two are 0, is that these guys also all have
to equal 0, if I already constrain these two. Now, the one thing that we've
done over and over again, we know that the solution set of
this equation, the solution set of Rx is equal to 0, is the
same as the solution set of Ax is equal to 0. Now, how do we know that? Or what do I mean? Well the solution set of this
is just the null space. The solution set is just
the null space of r. It's all of x's that satisfy
this equation. And we know that is equal to the
null space of a, because r is just a in reduced
row echelon form. So this is the null space of
a, is all of the x's that satisfy this equation. Now, the only version of this
that satisfied this equation was when c1, c2, and
c4 are equal to 0. So that tells us that the only
version of this, c1, c2, 0, c4, 0, that satisfies this
equation, or this equation, is when c1, c2, and c4
is equal to 0. Or another way of saying that
it if this is vector a1, a2, a4 right here, if you multiply
this out, you get c1-- let me do it over here, let me do it in
blue-- you get c1 times a1 plus c2 times a2, and then 0
times a3, plus c4 times a4 is equal to 0. Now these guys are going to be
linearly independent, if and only if the only solution to
this equation is they all equal to 0. Well we know that the only
solution to this is that they all equal 0 because anything
that's a solution to this is a solution to this. And the only solution to this
was, if I go ahead and I constrain these two terms to
being equal to 0, the only solution to this is all of
these c's have to be 0. So likewise, if I constrain
these to be 0, the only solution to this is that c1,
c2, and c4 have to be 0. So those guys have to be 0,
which imply that these three vectors, a1, a2, and a4, so that
implies that the set a1, a2, and a4 are linearly
independent. So we're halfway there. We've shown that because the
pivot columns here are linearly independent. We can show and they have
the same solution set. The null space of the reduced
row echelon form is the same as the null space of our
original matrix. We were able to show that the
only solution to c1 times this plus c2 times this plus c4 times
this is when all the constants are 0, which shows
that these three vectors or a set of those three vectors
are definitely linearly independent. Now, the next thing to prove
that they are a basis, is to show that all of the other
column vectors can be represented as multiples
of these three guys. And I realize, just for the sake
of clarity, or maybe not boring you too much, I'll do
that in the next video. So in this one we saw that if
the pivot columns are linearly independent, they always are. All pivot columns, by definition
are linearly independent. Or the set of pivot columns
are always linearly independent when you take away
the non-pivot columns, then the corresponding columns in
your original vector are also linearly independent. In the next one we'll show that
these three guys also span your column space.",Showing relation between basis cols and pivot cols | Linear Algebra | Khan Academy,"Showing that linear independence of pivot columns implies linear independence of the corresponding columns in the original equation

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/showing-that-the-candidate-basis-does-span-c-a?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/dimension-of-the-column-space-or-rank?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,BfVjTOjvI30
Transposesofsumsandinverses_Matrixtransformations_LinearAlgebra_KhanAcademy-Br_8t58mdeI.en.csv,"Let's see if we can prove to
ourselves some more reasonably interesting transpose
properties. So let's define some matrix C,
that's equal to the sum of two other matrices, A and B. And so any entry in C, I can
denote with a lowercase cij. So if I want the ith row in jth
column it would be cij, and so each of its entries are
going to be the sum of the corresponding columns that
are matrices A and B. So our ij entry in C is going to
be equal to the ij entry in A, plus the ij entry in B. That's our definition
of matrix addition. You just get the corresponding
entry in the same row and column, add them up, and you get
your entry in the same row and column, and your new
matrix is the sum of the other two. Now, let's think a little bit
about the transposes of these guys right here. So, if A looks like this. I won't draw all
of the entries. It takes forever. But each of its entries are
ij, just like that. Let's say that A transpose
looks like this. Each of its entries, we would
call it, that's if you've got that same entry, we're going
to call it a-prime ij. And these things aren't probably
going to be the same. There's some chance they are,
but they're probably not going to be the same. But that its ijth entry. In the ith row, jth column. In A transpose. Now, the fact that this is the
transpose of that means that everything that's in some row
and column here is going to be in that column and row over
here, that the rows and columns get switched. So we know that we could write
that a-prime ij, we're going to have the same entry
that was in aji. Maybe aji is over here.
aji is over here. So, this thing over here, which
is in the same position as this one, is going to be
equal to this guy over here if you switched the rows
and columns. I think you can accept that. And you can make the same
argument for B. Let me actually draw it out. So if I make B transpose. The entry in the ith row and
jth column, I'll call it b-prime ij. Just like that. Just like I did for A. So we could say that b-prime ij
is equal to, you take the matrix B, what's going to be
the entry that's in the jth row and ith column. These are, you could
almost say, the definition of the transpose. If I'm in the third row and
second column now, it's going to be what was in the second
row and third column. Fair enough. So we already have what
cij is equal to. What's the transpose of cij
going to be equal to? Let me write that down. So C transpose, let me
write it over here. Write C transpose is equal to. I'll use the same notation. The prime means that
we're taking entries in the transpose. So C transpose is just going to
be a bunch of entries, ij. And I'll put a little prime
there showing that that's entries in the matrix
of the transpose, and not in C itself. And we know that c-prime
ij is equal to cji. Nothing new at all. We've just expressed kind
of the definition of the transpose for these
three matrices. Now what is cji equal to? So let's focus on this
a little bit. What is cji equal to? We know that cij is equal to a
sub ij plus b sub ij, so if you swap them around, this is
going to be equal to, you just swap the j's and the i's. a sub ji plus b sub ji. I just used this information
here-- you could almost view it as this assumption or
this definition-- to go from this to this. If I had an x and a y here, I'd
have an x and a y here, and a x and a y here. I have a j and an i here, so I
have a j and an i there, and a j and an i right there. Now what are these? What are these equal to? This is equal to. This guy right here is equal
to-- we do it in the green-- the same entry for the
transpose of a at ij. And this is equal to the
same entry for the transpose of b at ij. Now, what is this telling us? It's telling us that the
transpose of C, which is the same thing is A plus B, so it's
saying that A plus B, A plus B transpose is the same
thing as C transpose. Let me write that. C transpose is the same thing
as A plus B transpose. So these are the entries in A
plus B transpose right here. And what is this over here? What are these? These are the entries
right there. We do the equal sign
over here. What are these? These are the entries in A
transpose plus B transpose. Right? These are the entries
in A transpose. These are the entries
in B transpose. If you take the sum of the two,
you're just adding up the corresponding entries. So that's straightforward to
show that if you take the sum of two matrices and then
transpose it, it's equivalent to transposing them first, and
then taking their sum. Which is a reasonably
neat outcome. Let's do one more and I think
we'll finish up all of our major transpose properties. Let's say that A inverse-- this
is going to be a slightly different take on things. We're still going to
take the transpose. So if we know that A inverse
is the inverse of A, that means that A times A inverse
is equal to the identity matrix, assuming that these
are n-by-n matrices. So it's the n-dimensional
identity matrix. And that A inverse times A is
also going to be equal to the identity matrix. Now, let's take the
transpose of both sides of this equation. I'll do them both
simultaneously. So if you take the transpose of
both sides of the equation, you get A times A inverse
transpose is equal to the identity matrix transpose. And what's the transpose
of the identity matrix? Let's draw it out. The identity matrix
looks like this. You have just ones all the
way down the diagonal and everything else is 0. Right, and you could view this
as i 1, 1 i 2, 2 all the way down to i n, n. Everything else is 0. So when you take the transpose,
you're just swapping out the
zeroes, right? These guys don't change. The diagonal does not change
when you take the transpose. So the transpose of the identity
matrix is equal to the identity matrix. And so we can apply that
same thing here. Let's take the transpose
for this statement. So we know that A inverse times
A transpose is equal to the identity matrix transpose,
which is equal to the identity matrix. And then we know what happens
when you take the transpose of a product. It's equal to the
product of the transposes in reverse order. So this thing right here we
can rewrite as A inverse transpose times A transpose,
which is going to be equal to the identity matrix. You could do the same
thing over here. This thing is going to be equal
to A transpose times A inverse transpose, which is also
going to be equal to the identity matrix. Now, this is an interesting
statement. The fact that, if I have this
guy right here, times the transpose of A is equal to the
identity matrix, and the transpose of A times that same
guy is equal to identity matrix, implies that A inverse
transpose is the inverse of A transpose. Or another way of writing that
is if I take A transpose, and if I take its inverse, that is
going to be equal to this guy. It's going to be equal to
A inverse transpose. So, another neat outcome dealing
with transposes. If you take the inverse of the
transpose, it's the same thing as the transpose
of the inverse.",Transposes of sums and inverses | Matrix transformations | Linear Algebra | Khan Academy,"Transposes of sums and inverses

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-transpose-of-a-vector?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-transpose-of-a-matrix-product?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,Br_8t58mdeI
Compositionsoflineartransformations2_Matrixtransformations_LinearAlgebra_KhanAcademy-BuqcKpe5ZQs.en.csv,"In the last video, we started
with a linear transformation S, that was a mapping between
the set x, that was a subset of Rn to the set y. And then we had another
transformation that was a mapping from the set
y to the set z. And we asked ourselves,
given these two linear transformations, could
we construct a linear transformation that goes all
the way from x to z? What we did was we made
a definition. We said let's create something
called the composition of T with S. What that is, is first you apply
S to some vector in X to get some vector in Y. And that's your vector
right there. And then you apply T to
that, to get to z. And so we defined it that way. And our next question was, was
that a linear transformation? We show that it was. It met the two requirements
for them. And because it is a linear
transformation, I left off in the last video saying that
it should be able to be represented by some matrix
vector product. Where this will have to
be an l by n matrix. Because it's a mapping from an n
dimensional space, which was x-- it was a subset of Rn--
to an l dimensional space. Because z is a subset of Rl Now
in this video, let's try to actually construct
this matrix. So at the beginning of the last
video, I told you that T of x could be written as some
matrix product, B times x. Let me write that and rewrite
it down here. So I told you that the linear
transformation T applied to some vector x, could be written
as the matrix vector product, B times a vector x. And since it was a mapping from
an m dimensional space to an l dimensional space, we know
this is going to be in l by m matrix. Now similarly, I told you that
the transformation S can also be written as a matrix
vector product. Where we can say A is its
matrix representation times a vector x. And since S was a mapping from
an n dimensional space to an m dimensional space, this will
be an m by n matrix. Now by definition, what was the
composition of T with S? What is this? By definition, we said that this
is equal to-- you first apply the linear transformation
S to x. And I'll arbitrarily
switch colors. So you first apply the
transformation S to x. And that essentially gets you
a vector right there. This is just a vector in Rm. Or it's really a vector in y,
which is a subset of Rm. And then you apply the
transformation T to that vector to get you into z. Given this we can use our matrix
representations to replace this kind of
transformation representation. Although they're really
the same thing. What is a transformation
of S applied to x? Well this right here is just
A times x, where this is an m by n matrix. So we can say that this is equal
to the transformation applied to A times x. Now, what is the T
transformation applied to any vector x? Well that's the matrix B
times your vector x. So this thing right here is
going to be equal to B times whatever I put in there. So the matrix B times the matrix
A times the vector x right there. This is what our composition
transformation is. The composition of T with S
applied to the vector x. Which takes us from the set x
all the way to the set z is this, if we use the matrix
forms of the two transformations. Now at the end of last video I
said I wanted to find just some matrix that if I were to
multiply times this vector, that is equivalent to
this transformation. And I know that I can
find this matrix. I know that this exists because
this is a linear transformation. So how can we do that? Well, we just do what we've
always done in the past. We start with the identity matrix,
and we apply the transformation to every column
of the identity matrix. And then you end up with your
matrix representation of the transformation itself. So first of all, how
big is the identity matrix going to be? Well, these guys that we're
inputting into our transformation, they are subsets
of x, or they're members of x, which is
an n dimensional space, a subset of Rn. So all we do to figure out C
is we start off with the identity matrix. The n dimensional identity
matrix, because our domain is Rn. And of course we know what
that looks like. We have 1, 0 all the way down. It's going to be an n by n
matrix, and then 0, 1 all the way down 0's. These 0's right here, and then
you have 1's go all the way down the columns and everything
else is 0. We've seen this multiple times
that's what your identity matrix looks like, just 1's down
the column from the top left to the bottom right. Now to figure out C, the matrix
representation of our transformation, all we do is we
apply the transformation to each of these columns. So we can write that our matrix
C is equal to the transformation applied
to this first column. What is the transformation? It is the matrix B times the
matrix A times whatever you're taking the transformation of. In this case we're taking the
transformation of that. We're taking the transformation
of 1, 0, 0 all the way down. There's 1 followed by
a bunch of 0's. That's going to be our
first column of C. Our second column of C is going
to be B times A times the second column of our
identity matrix. And, of course, you remember
these are each the standard basis vectors for Rn. So this is going to be times
E2, which is a 0, 1, 0 all the way down. And then we're going to keep
doing that until we do get to the last column, which is B
times A times a bunch of 0's all the way down
until get a 1. The nth term is just
a 1 right there. Now what is this going
to be equal to? It looks fairly complicated
right now. But all you have to do is make
the realization-- and we've seen this multiple times. If we write our vector A or we
write our matrix A as just a bunch of column vectors. So this is a column vector A1,
A2, all the way to An. We already learned that this
was and n buy m matrix. Then what is the vector A times,
for example, x1, x2 to all the way down to xn. We've seen this multiple
times. This is the equivalent to x1
times A1 plus x2 times A2, all the way to plus xn times An. We've seen this multiple
times. It's a linear combination of
these column vectors where the waiting factors are the terms
in our vector that we're taking the product of. So given that, what is this
guy going to reduce to? This is going to be A1 times
this first entry right here, times x1, plus A2 times a second
entry, plus A3 times a third entry. But all these other
entries are 0. The x2's all the way
to the xn are 0's. So you're only going to end
up with 1 times the first column here in A. So this will reduce to--
let me write this. So the first column is going
to be B times-- now A times this E1 vector, I guess we could
call it, right there is just going to be 1 times the
first column in A plus 0 times the second column in A plus
0 times the third column. So it's just 1 times the
first column in A. So it's just A1. That simple. Now what is this one going
to be equal to? It's going to be 0 times the
first column in A, plus 1 times a second column in A, plus
0 times a third column in A, and the rest are
going to be 0's. So it's just going to be 1 times
the second column in A. So the second column in our
transformation matrix is just going to be B times A2. And I think you get
the idea here. The next one is going to be B
times A3 and all the way until you get B times An. So that's how you would
solve for your transformation matrix. Remember what we were
trying to do. We were trying to find some--
let me write down and summarize everything that
we've done so far. We had a mapping S, that was
a mapping from x to y. But x was a subset of Rn. Y was a subset of Rm. And so we said that this linear
transformation could be represented as some matrix A
where A is an m by n matrix times a vector x. Then I showed you another
transformation, we already called it T, which was a
mapping from y to z. z is a subset of Rl. And of course, the
transformation T applied to some vector in y, can be
represented as some matrix B times that vector. I shouldn't have drawn
parentheses there, but you get the idea. And this, since it's a mapping
from a subset of our Rm to Rl, this will be an l by m matrix. And then we said, look, if
we actually just take the composition of T with S,
of some vector in x, this reduced to B. So first we applied the
S transformation. We multiplied the matrix
A times x. And then we applied the T
transformation to this. So we just multiplied
B times that. Now we know this is a linear
transformation, which means it can be represented as a
matrix vector product. And we just figured out what the
matrix vector product is. So this thing is going to be
equal to C times x, which is equal to this thing right there,
which is equal to that thing right there. Which is equal to-- let me write
it this way-- B, A1, where A1 is the first column
vector in our matrix A. And then the second column
here is going to be B. And then we have A2, where
this is the second column vector in A. And you can keep going all the
way until you have B times An times x, of course. Now this is fair enough. We can always do this if you
give me some matrix. Remember this is an
l by m matrix. And you give me another matrix
right here that is an m by n matrix, I can always do this. And how do I know I can
I always do that? Because each of these
A's are going to have m entries, right? They're going to be Ai. All of them are going to
be members of our Rm. So this is well-defined. This has m columns. This has m entries. So each of these matrix vector
products are well-defined. Now, this is an interesting
thing, because we were able to figure out the actual matrix
representation of this composition transformation. Let's extend it a little
bit further. Wouldn't it be nice if this
were the same thing as the matrices B times A. All of that times x. Wouldn't it be nice if these
were the same thing? Because then we could say that
the composition of T with S of x is equal to the matrix
representation of B times a matrix representation of S. And you take the product
of those two. And that will create a new
matrix representation which you can call C. That you can then multiply
times x. So you won't have to do it
individually every time, or do it this way. And I guess the truth of the
matter is there is nothing to stop us from defining this
to be equal to B times A. We have not defined what a
matrix times a matrix is yet. So we might as well. This is a good enough motivation
for us to define it in this way. So let's throw in
this definition. So if we have some matrix B. B is an l by m matrix. And then we have some other
matrix A-- and I'll actually show what A looks like, where
these are its column vectors. A1, A2, all the way to An. We're going to define
the product. So this is a definition. We're going to define the
product BA as being equal to the matrix B times each of
the column vectors of A. So it's B times A1. That's going to be
its first column. This is going to
be B times A2. All the way to B times An. And you've seen this before in
algebra two, but the reason why I went through almost two
videos to get to here, is to show you the motivation for
why matrix products are defined this way. Because it makes the notion
of compositions of transformations kind
of natural. If you take the composition of
one linear transformation with another, the resulting
transformation matrix is just the product, as we've just
defined it, of their two transformation matrices. For those of you who might not
have a lot of experience taking products of matrices, and
who think this is fairly abstract to look at, in the next
video I'll actually do a bunch of examples and show you
that this definition is actually fairly straightforward.",Compositions of linear transformations 2 | Matrix transformations | Linear Algebra | Khan Academy,"Providing the motivation for definition of matrix products

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/composition_of_transformations/v/linear-algebra-matrix-product-examples?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/composition_of_transformations/v/compositions-of-linear-transformations-1?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,BuqcKpe5ZQs
Oldseparabledifferentialequationsintroduction_KhanAcademy-C5-lz0hcqsE.en.csv,"We hopefully know at this point
what a differential equation is, so now let's
try to solve some. And this first class of
differential equations I'll introduce you to, they're called
separable equations. And I think what you'll find
is that we're not learning really anything new. Using just your first year
calculus derivative and integrating skills, you can
solve a separable equation. And the reason why they're
called separable is because you can actually separate the
x and y terms, and integrate them separately to get
the solution of the differential equation. So that's separable. Separable equations. So let's do a couple, and I
think you'll get the point. These often are really more of
exercises in algebra than anything else. So the first separable
differential equation is: dy over dx is equal to x squared
over 1 minus y squared. And actually, this is a good
time to just review our terminology. So first of all, what
is the order of this differential equation? Well, the highest derivative
in it is just the first derivative, so the order
is equal to 1. So it's first order. It's ordinary, because we only
have a regular derivative, no partial derivatives here. And then, is this linear
or non-linear? Well, first you say, oh well,
you know, this looks linear. I'm not multiplying
the derivative times anything else. But if you look carefully,
something interesting is going on. First of all, you have
a y squared. And y is a dependent variable. y is a function of x. So to have the y squared, that
makes it non-linear. And even if this was a y, if you
were to actually multiply both sides of this equation
times 1 minus y, and get in the form that I showed you in
the previous equation, you would have 1 minus y squared. This is actually the first step
of what we have to do anyways, so I'll
write it down. So if I'm just multiplying both
sides of this equation times 1 minus y squared, you get
1 minus y squared times dy dx is equal to x squared. And then you immediately see
that even if this wasn't a squared here, you'd be
multiplying the y times dy dx, and that also makes it
non-linear because you're multiplying the dependent
variable times the derivative of itself. So that also makes this
a non-linear equation. But anyway, let's get back
to solving this. So this is the first step. I just multiply both sides
by 1 minus y squared. And the real end goal is just
to separate the y's and the x's, and then integrate
both sides. So I'm almost there. So now what I want to do is I
want to multiply both sides of this equation times dx, so I
have a dx here and get rid of this dx there. Let me go here, I don't want
to waste too much space. So you get 1 minus y squared dy
is equal to x squared dx. I have separated the x and
y variables and the differentials. All I did is I multiplied both
sides of this equation times dx to get here. Now, I can just integrate
both sides. So let's do that. Whatever you do to one side
of the equation you have to do the other. That's true with regular
equations or differential equations. So we're going to integrate
both sides. So what's the integral of this
expression with respect to y? Let's see. The integral of 1 is y, the
integral of y squared, well that's minus y to the
third over 3. And I'll write the plus c here
just to kind of show you something, but you really don't
have to write a plus c on both sides. I'll call the plus the
constant due to y. The y integration. You'll never see this in a
calculus class, but I just want to make a point here. I just want to show you that
our plus c has never disappeared from when we were
taking our traditional antiderivatives. And what's the derivative
of this? Well that's x to the
third over 3. And this is also going
to have a plus c due to the x variable. Now, the reason why I did this
magenta one in magenta and I labelled it like that, is
because you really just have to write a plus c on one
side of the equation. And if that doesn't make a lot
of sense, let's subtract this c from both sides, and we get y
minus-- let me scroll down a little bit, my y
looks like a g. y minus y to the third over 3
is equal to x to the third over 3 plus the constant when we
took the antiderivative of the x, minus the constant of
the antiderivative when we took the y. But these two constants,
they're just constants. I mean, we don't know
what they are. There are arbitrary constants. So we could just write
a general c here. So you could have just-- you
have to have a constant, but it doesn't have to be on both
sides of the equation, because they're arbitrary. cx minus cy, well, that's still
just another constant. And then if we want to simplify
this equation more, we can multiply both sides
of this by 3, just make it look nicer. And you get 3y minus y to the
third is equal to x to the third plus-- well, I could
write 3c here. But once again, c is an
arbitrary constant. So 3 times an arbitrary
constant, that's just another arbitrary constant. So I'll write the c there. And there you have it. We have solved this differential
equation. Although it is in implicit
form right now, and it's fairly hard to get it out
of implicit form. We could put the c on one side,
so the solution could be 3y minus y to the third minus x
to the third is equal to c. Some people might like that
little bit better. But that's the solution. And notice, the solution, just
like when you take an antiderivative, the solution
is a class of implicit functions, in this case. And why is it a class? Because we have that
constant there. Depending on what number
you pick there, it will be another solution. But any constant there will
satisfy the original differential equation,
which was up here. This was the original
differential equation. And if you want to solve for
that constant, someone has to give you an initial condition. Someone has to say, well,
when x is 2, y is 3. And then you could
solve for c. Anyway, let's do another
one that gives us an initial condition. So this one's a little bit--
I'll start over. Clear image, different colors,
so I have optimal space. So this one is the first
derivative of y with respect to x is equal to 3x squared
plus 4x plus 2 over 2 times y minus 1. This is a parentheses, not
an absolute value. And they give us initial
conditions. They say that y of 0 is
equal to negative 1. So once we solve this
differential equation, and this is a separable differential
equation, then we can use this initial condition,
when x is 0, y is 1, to figure out the constant. So let's first separate
this equation. So let's multiply both sides
by 2 times y minus 1. And you get 2 times y minus 1
times dy dx is equal to 3x squared plus 4x plus 2. Multiply both sides times dx. This is really just an
exercise in algebra. And I can multiply this one out,
too, you get 2y minus 2, that's just this, dy. I multiplied both sides times
dx, so that equals 3x squared plus 4x plus 2 dx. I have separated
the equations. I've separated the independent
from the dependent variable, and their relative
differentials, and so now I can integrate. And I can integrate
in magenta. What's the antiderivative
of this expression with respect to y? Well, let's just see. It's y squared minus 2y. I won't write the plus
c, I'll just do it on the right hand side. That is equal to 3x squared. Well, the antiderivative is x to
the third, plus 2x squared, plus 2x plus c. And that c kind of takes care of
the constant for both sides of the equation, and hopefully
you understand why from the last example. But we can solve for c using the
initial condition y of 0 is equal to negative 1. So let's see. When x is 0, y is negative 1. So let's put y as negative 1,
so we get negative 1 squared minus 2 times negative 1, that's
the value of y, is equal to when x is equal to 0. So when x is equal to 0, that's
0 to the third plus 2 times 0 squared plus
2 times 0 plus c. So this is fairly
straightforward. All of these, this is all 0. This is, let's see, negative
1 squared, that's 1. Minus 2 times minus 1, that's
plus 2, is equal to c. And we get c is equal to 3. So, the implicit exact solution,
the solution of our differential equation-- remember
now, it's not a class, because they gave us an
initial condition-- is y squared minus 2y is equal to x
to the third plus 2x squared plus 2x plus 3. We figured out that's
what c was. And actually, if you want, you
could write this in an explicit form by completing
the square. This is just algebra
this point. You're done. This is an implicit form. If you wanted to make it
explicit, you could add 1 to both sides. I'm just completing
the square here. So y squared minus 2y plus 1. If I add 1 to that side, I have
to add 1 to this side, so it becomes x to the third plus
2x squared plus 2x plus 4. I just added 1 to both sides
of the equation. Why did I do that? Because I wanted this
side to be a perfect square in terms of y. Then I can rewrite this side as
y minus 1 squared is equal to x to the third plus 2x
squared plus 2x plus 4. Then I could say y minus 1 is
equal to the plus or minus square root of x to the
third plus 2x squared plus 2x plus 4. I can add 1 to both sides, and
then I can get y is equal to 1 plus or minus the square root
of x to the third plus 2x squared plus 2x plus 4. And it has plus or minus here,
and if we have to pick one of the two, we'd go back to
the initial condition. Well, our initial condition told
us that y of 0 is equal to negative 1. So if we put 0 here for x, we
get y is equal to 1 plus or minus 0 plus 4. So 1 plus or minus 4. So if y is going to be equal to
negative 1, so we get y is equal to 1 plus or
minus-- sorry, 2. If this is going to be equal to
negative 1, then this has to be 1 minus 2. So the explicit form that
satisfies our initial condition, and we're getting a
little geeky here, you could get rid of the plus, it's 1
minus this whole thing. That's what satisfies our
initial condition. And you could figure out where
it's satisfied, over what domain is it satisfied. Well, that's satisfied when this
term is positive, this becomes negative, and you get
it's undefined in reals, and all of that. But anyway, I've run
out of time. See you in the next video.",Old separable differential equations introduction | Khan Academy,"Introduction to separable differential equations.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/separable-equations/v/separable-differential-equations-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/separable-equations/v/particular-solution-to-differential-equation-example?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,C5-lz0hcqsE
Binarysearchtree-ImplementationinC_C++-COZK7NATh4k.en.csv,"In our previous lesson, we saw what binary
search trees are, now in this lesson we are going to implement binary search tree. We will be writing some code for binary search
tree. prerequisite for this lesson is that you must
understand the concepts of pointers and dynamic memory allocation in C/C++. If you have already followed this series and
seen our lessons on linked list, then implementation of binary search tree or binary tree in general
is not going to be very different. We will have nodes and links here as well. Ok, so lets get started. Binary search tree or BST as we know is a
binary tree in which for each node, value of all the nodes in left subtree is lesser
or equal and value of all the nodes in right subtree is greater. We can draw BST as a recursive structure like
this. Value of all the nodes in left subtree must
be lesser or equal and value of all the nodes in right subtree must be greater and this
must be true for all nodes and not just the root node. So, in this recursive definition here, both
left and right subtrees must also be binary search trees. I have drawn a binary search tree of integers
here. Now, the question is, how can we create this
non-linear logical structure in computer's memory. I had talked about this briefly when we had
discussed binary trees. The most popular way is - dynamically created
nodes linked to each other using pointers or references just the way we do it for linked
lists. Because in a binary search tree, or in a binary
tree in general, each node can have at most 2 children, we can define node as an object
with 3 fields something like what I'm showing here. We can have a field to store data, another
to store address or reference of left child and another to store address or reference
to right child. If there is no left or right child for a node,
reference can be set as NULL. In C or C++, we can define node like this. There is a field to store data. Here the data type is integer, but it can
be anything. There is one field which is pointer to node. Node asterisk means pointer to node. This one is to store the address of left child
and we have another one to store the address of right child. This definition of node is very similar to
definition of Node for doubly linked list. Remember in doubly linked list also, each
node had two links - one to previous node and another to next node. but doubly linked
list was a linear arrangement. This definition of node is for a binary tree. We could also name this something like BstNode,
but Node is also fine, lets go with Node. Now, in our implementation, just like linked
list, all the nodes will be created in dynamic memory or heap section of application's memory
using malloc function in 'C' or new operator in C++. We can use malloc in C++ as well. Now, as we know any object created in dynamic
memory or heap section of applications memory cannot have a name or identifier. It has to be accessed through a pointer. malloc or new operator return us pointer to
the object created in heap. if you want to revise some of these concepts of dynamic memory
allocation, you can check the description of this video for link to a lesson. Its really important that you understand this
concept of stack and heap in applications memory really well. Now, for a linked list, if you remember, the
information that we always keep with us is address of the head node. If we know the head node, we can access all
other nodes using links. In case of trees, the information that we
always keep with us is address of the root node. If we know the root node, we can access all
other nodes in the tree using links. To create a tree, we first need to declare
a pointer to BstNode. I'll rather call node BstNode here, BST for
binary search tree. So, to create a tree, we first need to declare
a pointer to BstNode that will always store the address of root node. I have declared a pointer to Node here named
rootPtr - Ptr for pointer. In C, you can't just write BstNode asterisk
rootPtr. You will have to write struct space BstNode
asterisk, you will have to write struct here as well. I am gonna write C++ here, but anyway right
now I'm trying to explain the logic. we will not bother about minute details of
implementation. In this logical structure of tree that I'm
showing here, each Node as you can see has 3 fields, 3 cells. leftmost cell is to store the address of left
child and rightmost cell is to store the address of right child. Lets say root node is at address 200 in memory
and I'll assume some random addresses for all other nodes as well. Now, I can fill in these left and right cells
in each node with addresses of left and right children. In our definition, data is first field, but
in this logical structure, I am showing data in the middle. Ok, so for each Node, I have filled in addresses
for both left and right child. Address is 0 or NULL if there is no child. Now, as we were saying, identity of the tree
is address of the root node. We need to have a pointer to Node in which
we can store the address of the root node. We must have a variable of type pointer to
node to store the address of root node. All these rectangles with 3 cells are Nodes. They are created using malloc or new operator
and live in heap section of application's memory. We cannot have name or identifier for them. They are always accessed through pointers. This rootPtr, root pointer has to be a local
or global variable. We will discuss this in little more detail
in some time. Quite often, we like to name this root pointer,
just root. We can do so, but we must not confuse. This is pointer to root and not the root itself. To create a BST, as I was saying, we first
need to declare this pointer. Initially, we can set this pointer as NULL
to say that the tree is empty. A tree with no node can be called empty tree
and for empty tree, root pointer should be set as NULL. We can do this declaration and setting the
root as NULL in main function in our program. Actually, lets just write this code in a real
compiler. I am writing C++ here. As you can see, in the main function I have
declared this pointer to Node which will always store the address of root node of my tree
and I am initially setting this as NULL to say that the tree is empty. With this much of code, we have created an
empty tree. But, whats the point of having an empty tree. We should have some data in it. So, what I want to do now is I want to write
a function to be able to insert a node in the tree. I will write a function named Insert that
will take address of the root node and data to be inserted as argument and this function
will Insert a node with this data at appropriate position in the tree. In the main function, I'll make calls to this
insert function passing it address of root and the data to be inserted, lets say first
I want to insert number 15 and then I want to insert number 10 and then number 20. We can insert more, but lets first write the
logic for Insert function. Before I write the logic for Insert function,
I want to write a function to create a new Node in dynamic memory or heap. This function GetNewNode should take an integer,
the data to be inserted as argument, create a node in heap using new or malloc and return
back the address of this new node. I am creating a new node here using this new
operator. the operator will return me the address of
the newly created node which I am collecting in this variable of type pointer to BstNode. In C, instead of new operator, we will have
to use malloc. We can use malloc in C++as well. C++ is only a super-set of C. malloc will
also do here. Now, anything in dynamic memory or heap is
always accessed through pointer. Now, using this pointer - newNode, we can
access the fields of newly created Node. I will have to dereference this pointer using
asterisk operator. i am writing asterisk newNode and now I can
access the fields. We have 3 fields in node - data and 2 pointers
to node , left and right;. i have set the data here. Instead of writing asterisk newNode dot data,
we have this alternate syntax that we could use. We could simply write newNode-&gt;data and this
will mean the same. We have used this syntax quite a lot in our
lessons on linked list. Now, for the new node, we can set the left
and right child as NULL and finally we can return the address of the new Node. Ok, coming back to the insert function. We can have couple of cases in insertion. First of all, tree may be empty. For this first insertion, when we are inserting
this number 15, tree will be empty. if tree is empty, we can simply create a new
node and set it as root. With this statement, root equal GetNewNode,
I am setting root as address of the new node. But there is something not alright here. This root is local variable of Insert function
and its scope is only within this function. We want this root, root in main to be modified. This guy is a local variable of main function. There are 2 ways of doing this. We can either return the address of the new
root. So, return type of insert function will be
pointer to BstNode and not void. And here, in the main function, we will have
to write statement like root equal Insert and the arguments. So, we will have to collect the return and
update our root in main function. Another way is that, we can pass the address
of this root of main to the Insert function. This root is already a pointer to Node. So, its address can be collected in a pointer
to pointer. So, Insert function , in insert function first
argument will be a pointer to pointer and here, we can pass the address. We will say ampersand root to pass the address. We can name this argument root or we can name
this argument rootPtr. We can name this whatever. Now, what we need to do is, we need to dereference
this using asterisk operator to access the value in root of main and we can also set
the value in root of main. So, here with this statement, we are setting
the value and the return type now can be void. This pointer to pointer thing gets a little
tricky. I'll go with the former approach. Actually, there is another way. instead of declaring root as a local variable
in main function, we can declare root as global variable. Global variable, as we know has to be declared
outside all the functions. if root would be global variable, it would
be accessible to all the functions and we will not have to pass the address stored in
it as argument. Anyway, coming back to the logic for insertion. As we were saying, if the tree is empty, we
can simply create a new node and we can simply set it as root. At this stage, we wanted to insert 15. If we will make call to the insert function,
address of root is 0 or NULL. NULL is only a macro for 0 and the second
argument is the number to be inserted. In this call to Insert function, we will make
call to get new Node. Lets say, we got this new Node at address
200. GetNewNode function will return us address
200 which we can set as root here, but this root is a local variable. We will return this address 200 back to the
main function and in the main function, we are actually doing this root equal Insert. So, in the main function we are building this
link. Ok, our next call in the main function was
to insert number 10. At this stage, root is 200. the address in root is 200 and the value to
be inserted is 10. Now, the tree is not empty. So, what do we do. If the tree is not empty, we can basically
have 2 cases. If the data to be inserted is lesser or equal,
we need to insert it in the left subtree of root and if the data to be inserted is greater,
we need to insert it in right subtree of the root. So, we can reduce this problem in a self similar
manner, in a recursive manner. Recursion is one thing that we are going to
use almost all the time while working with trees. In this function, I'll say that if the data
to be inserted is less than or equal to the data in root, then make a recursive call to
insert data in left subtree. The root of the left subtree will be the left
child. So, in this recursive call, we are passing
address of left child and data as argument and after the data is inserted in left subtree,
the root of the left subtree can change. Insert function will return the address of
the new root of the left subtree and we need to set it as left child of the current node. In this example tree here, right now, both
left and right subtree are empty. We are trying to insert number 10, so we have
made call to this function Insert. From main function, we have called Insert
passing it address 200 and value or data 10. Now, 10 is lesser than 15, so control will
come to this line and a call will be made to Insert data in left subtree. Now, left subtree is empty. So, address of root for left subtree is 0. Data passed, data to be inserted passed as
argument is 10. Now, this first insert call will wait for
this insert below to finish and return. For this last, insert call, root is NULL. Lets say we got this node at address 150. Now, this Insert call will return back 150
and execution of first insert call will resume at this line and now this particular address
will be set as 150. So, we will build this link and now this insert
call can finish. It can return back the current root. Actually this return root should be there
for all cases, so I am taking it out and I have it after all these conditions. Of course, we will have one more else here. If the data is greater, we need to go Insert
in right subtree. the third call in Insert function was to Insert
number 20. Now this time, we will go to this else statement,
this statement in else. Lets say, we got this new Node at address
300. So, this guy will return 300. For this node at 200, right child will be
set as 300 and now this call to Insert can finish. The return will be 200. Ok, at this stage what if a call is made to
Insert number 25. We are at root right now, the node with address
200. 25 is greater, so we need to go and insert
in right subtree. Right subtree is not empty this time. So, once again, for this call also, we will
come to this else, last else because 25 is greater than 20. Now, in this call we will go tot the first
if. A node will be created, lets say, we got this
Node in heap at address 500. This particular call Insert(0,25) will return
500 and finish. Now, for the node at 300, right child will
be set as 500. So, this link will get built. Now, this guy will return 300. The root for this subtree has not changed. And this first call to Insert will also wrap
up. It will return 200. So, we are looking good for all cases. This Insert function will work for all cases. We could write this Insert function without
using recursion. I encourage you to do so. You will have to use some temporary pointer
to Node and loops. Recursion is very intuitive here and recursion
is intuitive in pretty much everything that we do with trees. So, its really important that we understand
recursion really well. Ok, I will write one more function now to
search some data in BST. In the main function here, I have made some
more calls to Insert. Now, i want to write a function named Search
that should take as argument, address of the root node and the data to be searched and
this function should return me true if data is there in the tree, false otherwise. Once again, we will have couple of cases. If the root is NULL, then we can return false. If the data in root is equal to the data that
we are looking for, then we can return true. Else, we can have 2 cases - either we need
to go and search in the left subtree or we need to go in the right subtree. So, once again, i am using recursion here. I am making recursive call to search function
in these two cases. If you have understood the previous recursion,
then this is very similar.Lets test this code now. what I have dine here is I have asked the
user to enter a number to be searched and then I am making call to this search function
and if this function is returning me true, I am printing ""Found"", else I am printing
""NotFound"". Lets run this code and see what happens. I have moved multiple Insert statements in
one line because I am short of space here. Lets say, we want to search for number 8. 8 is found. And now lets say, we want to search for 22. 22 is not found. So, we are looking good. I'll stop here now. You can check the description of this video
for link to all the source code. We will do a lot more with trees in coming
lessons. In our next lesson, we will go a little deeper
and try to see how things move in various sections of application's memory. How things move in stack and heap sections
of memory when we execute these functions. It will give you a lot of clarity. This is it for this lesson. Thanks for watching !",Binary search tree - Implementation in C/C++,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have implemented binary search tree in C/C++. We have written a simple program to create a binary search tree of integers and search an element in it. 

See source code here:
https://gist.github.com/mycodeschool/44e1a9183ab0e931f729 

Lesson on dynamic memory allocation:
http://www.youtube.com/watch?v=_8-ht2AKyH4&list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_&index=12

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,COZK7NATh4k
ShowingthatthecandidatebasisdoesspanC(A)_Vectorsandspaces_LinearAlgebra_KhanAcademy-CkQOCnLWPUA.en.csv,"Two videos ago we asked
ourselves if we could find the basis for the columns
space of A. And I showed you a method
of how to do it. You literally put A in reduced
row echelon form, so this matrix R is just a reduced
row echelon form of A. And you look at its
pivot columns, so this is a pivot column. It has a 1 and all 0's, this is
a pivot column, 1 and all 0's, and the 1 is the leading
non-zero term in its row. And this is a pivot column, let
me circle them, these guys are pivot columns, and
this guy's a pivot column right there. You look at those in the reduced
row echelon form of the matrix, and the
corresponding columns in the original matrix will
be your basis. So this guy, this guy,
so the first, second, and forth columns. So if we call this a1, this is
a2, and let's call this a4, this would be a3,
and this is a5. So we could say that a1, a2,
and a4 are a basis for the column span of A. And I didn't show you
why two videos ago. I just said this is
how you do it. You have to take it as a bit
of an article of faith. Now in order for these
to be a basis, two things have to be true. They have to be linearly
independent, and I showed you in the very last video, the
second in our series dealing with this vector. I showed you that by the fact
that this guy is r1, this guy is r2, and this guy is r4, it's
clear that these guys are linearly independent. They each have a 1 in a unique
entry, and the rest of their entries are 0. We're looking at three pivot
columns right now, but it's true if we had n
pivot columns. That each pivot column would
have a 1 in a unique place, and all the other pivot
columns would have 0 in that entry. So there's no way that the
other pivot columns, any linear combination of the other
ones, could never add up to each of them. So these are definitely
linearly independent. And I showed you in the last
video that if we know that these are linearly independent,
we do know that they are, given that R has the
same null space as A, we know that these guys have to be
linearly independant, I did that in the very last video. Now the next requirement for a
basis, we checked this one off, is to show that a1 a2 and
an, that their span equals the column space of A. Now the column space of A is
a span of all five of these vectors, so I had to throw
a3 in there and a5. So to show that just these three
vectors by themselves span our column space, we just
have to show that I can represent a3 and a5 as
linear combinations of a1, a2, and a4. If I can do that, then
I can say then these guys are redundant. Then the span of a1, a2, a3, a4,
and a5 doesn't need the a3 and the a5 terms, that we can
just reduce it to this. Because these guys can be
represented as linear combinations of the
other three. These guys are redundant. And if we can get rid of them
we can show that these guys can be represented as linear
combinations of the other, then we can get rid of them. And then the span of these three
guys would be the same as the span of these five guys,
which is of course the definition of the column
space of A. So let's see if we
can do that. Let me fill in each of these
column vectors a1 through a5, and then each of these column
vectors let me label them r1, r2, r3, r4, and r5. Now let's explore the
null spaces again. Or not even the null spaces,
let's just explore the equations Ax is equal to -- let
me write it this way -- instead of x let me write x1,
x2, x3, x4, x5 is equal to 0. This is how we define the
solution set of this. All the potential x1's through
x5's or all the potential vectors X right here, that
represents our null space. And then also let's explore all
of the R times x1, x2, x3, x4, x5's is equal to 0. This is the 0 vector, in which
case you would have four entries in this particular
case. It would be a member of Rm. So these equations
can be rewritten. I can rewrite this as -- what
were the column vectors of A? They were a1, a2 through a5. So I can rewrite this as x1
times a1 plus x2 times a2 plus x3 times a3 plus x4 times
a4 plus x5 times a5 is equal to 0. That was from our definition
of matrix vector multiplication, this is just a
bunch of column vectors a1 through a5, I drew it up here. I can just rewrite this
equation like this. Similiarly, I can rewrite this
equation as the vector r1 times x1 or x1 times r1 plus x2
times r2 plus x3 times r3 plus x4 times r4 plus x5
times r5 is equal to 0. Now we know that when we put
this into reduced row echelon form the x variables that are
associated with the pivot columns are -- so what are the
x variables associated with the pivot columns? Well, the pivot columns
are r1, r2, and r4. The x variables associated with
them, we can call them pivot variables, and the ones
that are not associated with our pivot columns are
free variables. So the free variables
in this case, x3 and x5, are free variables. And that applies to A. All of the vectors x that
satisfy this equation also satisfy this equation,
and vice versa. They're the exact same
null space, the exact same solution set. We can also call this x3 and
this x5 as free variables. Now what does that mean? We've done multiple
examples of this. The free variables, you can set
them to anything you want. So x3 in this case and x5 you
can set it to any real number. You can set to anything
you want. And then from this reduced row
echelon form we express the other pivot variables as
functions of these guys. Maybe x1 is equal
to Ax3 plus Bx5. Maybe x2 is equal
to Cx3 plus Dx5. And maybe x4 is equal
to Ex3 plus Fx5. That comes directly out of
literally multiplying this guy times this equals 0, you'd get a
system of equations that you could solve for your pivot
variables in terms of your free variables. Now given this, I want to show
you that you can always construct one of your -- in
your original matrix. So if we go to our original
matrix, you can always construct one of the vectors
that are associated with the free columns. You can always construct one of
the free vectors using the linear combination of the ones
that were associated with the pivot columns before. And how do I do that? Well, let's say that I want to
find some linear combination that gets me to this free
column, that gets me to a3. So how could I do that? Let me rearrange this
equation up here. So what do I get? I'm sorry. That's x3 a3. If I subtract x3 a3 from both
sides of the equation, I get minus x3 a3 is equal to x1 a1
plus x2 a2 plus -- I don't have the 3 there -- plus x4 a4
plus x5 -- sorry, x isn't a vector-- x5 a5. This, I guess salmon colored
statement here, is just another rewriting of this
equation right here. And all I did is I subtracted
this term right here, x3 a3, from both sides of
the equation. Now x3 is a free variable. We can set it to anything
we want, and so is x5. So let's set x3 is
equal to minus 1. Then this term right here
becomes a 1, because that was a minus x3. And let's set x5 equal to 0. So if x5 is equal 0, this term
disappears, and I did that because x5 is a free variable. I can set them to
anything I want. Now I've written a3 as a linear
combination of, I guess you could call it my potential
basis vectors right now, or the vectors a1, a2, and a4. They're the vectors in the
original matrix that were associated with the
pivot columns. Now in order to show that I can
always do this, we have to show that for this combination
there's always some x1, x2, and x4 that satisfy this. Well, of course there's always
some x1, x2 that satisfy this, we just have to substitute our
free variables, x3 is equal to minus 3 and x5 is equal to 0,
into these equations that we get from our system when we did
it with the reduced row echelon form. In this case you have x1 is
equal to minus A plus 0, x2 is equal to minus C, so
on and so forth. So you can always do that. You can always express the
vectors that are associated with the non-pivot columns as
linear combinations of the vectors that are associated
with the pivot columns. What I just did for a3, you
could just as easily have done for a5 by subtracting
this term from both sides of the equation. Setting x5 to negative 1 and
setting x3 to 0 so that the 3 term disappears, and you could
run the same exact argument. So given that, I've hopefully
shown you, or least helped you see or made you comfortable
with the idea, that the vectors -- let me do them in a
nice vibrant color -- these magenta color vectors here that
are associated with the free columns or with the free
variables, the free variables were x3 and x5, those were these
columns right here, that they can always be expressed as
linear combinations of the other columns. Because you just have to
manipulate this equation, set the coefficient for whatever
you're trying to find a linear combination for equal to minus
1, and set all the other free variables equal to 0 that
you're not solving for. And then you can get a linear
combination of the vectors that are associated with
the pivot columns. So given that, we've shown you
that these free vectors, and I'm using my terminology very
loosely, that these ones that are associated with the non
pivot columns can be expressed as linear combinations
of these guys. So they're unnecessary. The span of this is equivalent
to the span of this, the span of this is the column space of
A, so the span of this is the column space of A. So in the last video I showed
you that these guys are linearly independent, and now
I've showed you that the span of these guys is the
column space of A. So now you should be satisfied
that these vectors that are associated -- let me do it in
a blue color -- that that column vector, this column
vector, and this column vector, that are associated with
the pivot columns in the reduced row echelon form of
the matrix, do indeed represent a basis for the
column space of A. Anyway, hopefully you didn't
find that too convoluted.",Showing that the candidate basis does span C(A) | Vectors and spaces | Linear Algebra | Khan Academy,"Showing that just the columns of A associated with the pivot columns of rref(A) do indeed span C(A).

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/a-more-formal-understanding-of-functions?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/showing-relation-between-basis-cols-and-pivot-cols?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,CkQOCnLWPUA
Introductiontolinearindependence_Vectorsandspaces_LinearAlgebra_KhanAcademy-CrV1xCWdY-g.en.csv,"Let's say I had the set of
vectors-- I don't want to do it that thick. Let's say one of the vectors is
the vector 2, 3, and then the other vector is
the vector 4, 6. And I just want to answer the
question: what is the span of these vectors? And let's assume that these
are position vectors. What are all of the
vectors that these two vectors can represent? Well, if you just look at it,
and remember, the span is just all of the vectors that can
be represented by linear combinations of these. So it's the set of all the
vectors that if I have some constant times 2 times that
vector plus some other constant times this vector,
it's all the possibilities that I can represent when I just
put a bunch of different real numbers for c1 and c2. Now, the first thing you might
realize is that, look, this vector 2, this is just
the same thing as 2 times this vector. So I could just rewrite
it like this. I could just rewrite it as c1
times the vector 2, 3 plus c2 times the vector-- and here,
instead of writing the vector 4, 6, I'm going to write 2 times
the vector 2, 3, because this vector is just a multiple
of that vector. So I could write c2 times
2 times 2, 3. I think you see that this is
equivalent to the 4, 6. 2 times 2 is 4. 2 times 3 is 6. Well, then we can simplify
this a little bit. We can rewrite this as just c1
plus 2c2, all of that, times 2, 3, times our vector 2, 3. And this is just some
arbitrary constant. It's some arbitrary constant
plus 2 times some other arbitrary constant. So we can just call this c3
times my vector 2, 3. So in this situation, even
though we started with two vectors, and I said, well, you
know, the span of these two vectors is equal to all of
the vectors that can be constructed with some linear
combination of these, any linear combination of these,
if I just use this substitution right here, can
be reduced to just a scalar multiple of my first vector. And I could have gone the
other way around. I could have substituted this
vector as being 1/2 times this, and just made any
combination of scalar multiple of the second vector. But the fact is, that instead
of talking about linear combinations of two vectors,
I can reduce this to just a scalar combination
of one vector. And we've seen in R2 a scalar
combination of one vector, especially if they're
position vectors. For example, this vector 2, 3. It's 2, 3. It looks like this. All the scalar combinations of
that vector are just going to lie along this line. So 2, 3, it's going
to be right there. They're all just going to lie
along that line right there, so along this line going in
both directions forever. And if I take negative
values of 2, 3, I'm going to go down here. If I take positive values,
I'm going to go here. If I get really large positive
values, it's going to go up here. But I can just represent the
vectors, and when you put them in standard form, their arrows
essentially would trace out this line. So you could say that the span
of my set of vectors-- let me put it over here. The span of the set of vectors
2, 3 and 4, 6 is just this line here. Even though we have
two vectors, they're essentially collinear. They're multiples
of each other. I mean, if this is 2, 3, 4,
6 is just this right here. It's just that longer
one right there. They're collinear. These two things
are collinear. Now, in this case, when we have
two collinear vectors in R2, essentially their span just
reduces to that line. You can't represent
some vector like-- let me do a new color. You can't represent this vector
right there with some combination of those
two vectors. There's no way to kind of
break out of this line. So there's no way that you can
represent everything in R2. So the span is just
that line there. Now, a related idea to this,
and notice, you had two vectors, but it kind of reduced
to one vector when you took its linear combinations. The related idea here is that we
call this set-- we call it linearly dependent. Let me write that down:
linearly dependent. This is a linearly
dependent set. And linearly dependent just
means that one of the vectors in the set can be represented
by some combination of the other vectors in the set. A way to think about it is
whichever vector you pick that can be represented by the
others, it's not adding any new directionality or any
new information, right? In this case, we already had
a vector that went in this direction, and when you throw
this 4, 6 on there, you're going in the same direction,
just scaled up. So it's not giving us any new
dimension, letting us break out of this line, right? And you can imagine in three
space, if you have one vector that looks like this and another
vector that looks like this, two vectors that aren't
collinear, they're going to define a kind of two-dimensional
space. They can define a
two-dimensional space. Let's say that this is
the plane defined by those two vectors. In order to define R3, a third
vector in that set can't be coplanar with those
two, right? If this third vector is coplanar
with these, it's not adding any more directionality. So this set of three
vectors will also be linearly dependent. And another way to think about
it is that these two purple vectors span this plane, span
the plane that they define, essentially, right? Anything in this plane going in
any direction can be-- any vector in this plane, when we
say span it, that means that any vector can be represented
by a linear combination of this vector and this vector,
which means that if this vector is on that plane, it can
be represented as a linear combination of that vector
and that vector. So this green vector I added
isn't going to add anything to the span of our set of vectors
and that's because this is a linearly dependent set. This one can be represented by a
sum of that one and that one because this one and this
one span this plane. In order for the span of these
three vectors to kind of get more dimensionality or start
representing R3, the third vector will have to break
out of that plane. It would have to break
out of that plane. And if a vector is breaking out
of that plane, that means it's a vector that can't be
represented anywhere on that plane, so it's outside of the
span of those two vectors. Where it's outside, it can't
be represented by a linear combination of this
one and this one. So if you had a vector of this
one, this one, and this one, and just those three, none of
these other things that I drew, that would be linearly
independent. Let me draw a couple more
examples for you. That one might have been
a little too abstract. So, for example, if I have the
vectors 2, 3 and I have the vector 7, 2, and I have the
vector 9, 5, and I were to ask you, are these linearly
dependent or independent? So at first you say, well, you
know, it's not trivial. Let's see, this isn't a scalar
multiple of that. That doesn't look like a scalar
multiple of either of the other two. Maybe they're linearly
independent. But then, if you kind of inspect
them, you kind of see that v, if we call this v1,
vector 1, plus vector 2, if we call this vector 2, is
equal to vector 3. So vector 3 is a linear
combination of these other two vectors. So this is a linearly
dependent set. And if we were to show it, draw
it in kind of two space, and it's just a general idea
that-- well, let me see. Let me draw it in R2. There's a general idea that if
you have three two-dimensional vectors, one of them is
going to be redundant. Well, one of them definitely
will be redundant. For example, if we do 2, 3, if
we do the vector 2, 3, that's the first one right there. I draw it in the standard
position. And I draw the vector 7, 2 right
there, I could show you that any point in R2 can be
represented by some linear combination of these
two vectors. We can even do a kind of a
graphical representation. I've done that in the previous
video, so I could write that the span of v1 and v2
is equal to R2. That means that every vector,
every position here can be represented by some linear
combination of these two guys. Now, the vector 9,
5, it is in R2. It is in R2, right? Clearly. I just graphed it
on this plane. It's in our two-dimensional,
real number space. Or I guess we could call it
a space or in our set R2. It's there. It's right there. So we just said that anything in
R2 can be represented by a linear combination of
those two guys. So clearly, this is in R2, so
it can be represented as a linear combination. So hopefully, you're starting
to see the relationship between span and linear
independence or linear dependence. Let me do another example. Let's say I have the vectors--
let me do a new color. Let's say I have the vector--
and this one will be a little bit obvious-- 7, 0, so that's
my v1, and then I have my second vector, which
is 0, minus 1. That's v2. Now, is this set linearly
independent? Is it linearly independent? Well, can I represent
either of these as a combination of the other? And really when I say as a
combination, you'd have to scale up one to get the other,
because there's only two vectors here. If I am trying to add up to this
vector, the only thing I have to deal with is this
one, so all I can do is scale it up. Well, there's nothing
I can do. No matter what I multiply this
vector by, you know, some constant and add it to itself
or scale it up, this term right here is always
going to be zero. It's always going to be zero. So nothing I can multiply
this by is going to get me to this vector. Likewise, no matter what I
multiply this vector by, the top term is always
going to be zero. So there's no way I could
get to this vector. So both of these vectors,
there's no way that you can represent one as a combination
of the other. So these two are linearly
independent. And you can even see
it if we graph it. One is 7, 0, which
is like that. Let me do it in a non-yellow
color. 7, 0. And one is 0, minus 1. And I think you can clearly see
that if you take a linear combination of any of these
two, you can represent anything in R2. So the span of these, just to
kind of get used to our notion of span of v1 and v2,
is equal to R2. Now, this is another interesting
point to make. I said the span of
v1 and v2 is R2. Now what is the span of
v1, v2, and v3 in this example up here? I already told you. I already showed you that
this third vector can be represented as a linear
combination of these two. It's actually just these
two summed up. I can even draw it right here. It's just those two
vectors summed up. So it clearly can be represented
as a linear combination of those two. So what's its span? Well, the fact that this is
redundant means that it doesn't change its span. It doesn't change all of the
possible linear combinations. So its span is also
going to be R2. It's just that this was
more vectors than you needed to span R2. R2 is a two-dimensional space,
and you needed two vectors. So this was kind of a more
efficient way of providing a basis, and I haven't defined
basis formally, yet, but I just want to use it a little
conversationally, and then it'll make sense to you when
I define it formally. This provides a better basis, or
this provides a basis, kind of a non-redundant set of
vectors that can represent R2. While this one, right
here, is redundant. So it's not a good
basis for R2. Let me give you one more example
in three dimensions. And then in the next video,
I'm going to make a more formal definition of linear
dependence or independence. So let's say that I had
the vector 2, 0, 0. Let me make a similar argument
that I made up there: the vector 2, 0, 0, the vector 0, 1,
0, and the vector 0, 0, 7. We are now in R3, right? Each of these are
three-dimensional vectors. Now, are these linear dependent
or linearly independent? Sorry, are they linearly
dependent or independent? Well, there's no way with some
combination of these two vectors that I can end up with
a non-zero term right here to make this third vector, right? Because no matter what I
multiply this one by and this one by, this last term
is going to be zero. So this is kind of adding
a new direction to our set of vectors. Likewise, there's nothing
I can do-- there's no combination of this guy and
this guy that I can get a non-zero term here. And finally, no combination of
this guy and this guy that I can get a non-zero term here. So this set is linearly
independent. And if you were to graph these
in three dimensions, you would see that none of these--
these three do not lie on the same plane. Obviously, any two of them lie
on the same plane, but if you were to actually graph
it, you get 2, 0. Let me say that that's x-axis. That's 2, 0, 0. Then you have this, 0, 1, 0. Maybe that's the y-axis. And then you have 0, 0, 7. It would look something
like this. So it almost looks like, your
three-dimensional axes, it almost looks like the
vectors i, j, k. They're just scaled
up a little bit. But you can always correct
that by just scaling them down, right? Because we care about any linear
combination of these. So the span of these three
vectors right here, because they're all adding new
directionality, is R3. Anyway, I thought I would leave
you there in this video. I realize I've been making
longer and longer videos, and I want to get back in the habit
of making shorter ones. In the next video, I'm going
to make a more formal definition of linear dependence,
and we'll do a bunch more examples.",Introduction to linear independence | Vectors and spaces | Linear Algebra | Khan Academy,"Introduction to linear dependence and independence

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/linear_independence/v/more-on-linear-independence?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/linear_combinations/v/linear-combinations-and-span?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,CrV1xCWdY-g
Separabledifferentialequationsintroduction_Firstorderdifferentialequations_KhanAcademy-DL-ozRGDlkY.en.csv,"- [voiceover] So now that
we've spent some time thinking about what a
differential equation is and even visualizing solutions to a differential equations
using things like slope field, let's start seeing if we can actually solve differential equations. As we'll see, different types
of differential equations might require different techniques and some of them we might not be able to solve at all using analytic techniques. We'd have to resort to numeric techniques
to estimate the solutions. But let's go to what I would argue as the simplest form of
differential equation to solve and that's what's called a Separable. Separable differential equation. And we will see in a
second why it is called a separable differential equation. So let's say that we
have the derivative of Y with respect to X is equal to negative X
over Y E to the X squared. So we have this differential equation and we want to find
the particular solution that goes through the point 0,1. I encourage you to pause this
and I'll give you a hint. If you can on one side of
this equation through algebra separate out the Ys and the DYs and on the other side
have all the Xs and DXs, and then integrate. Perhaps you can find
the particular solution to this differential equation that contains this point. Now if you can't do it don't worry because we're about to work through it. So like I said, let's use
a little bit of algebra to get all the Ys and DYs on one side and all the Xs and DXs on the other side. So one way, let's say I
want to get all the Ys and DYs on the left hand side, and all the Xs and DXs
on the right hand side. Well, I can multiply both sides times Y. So I can multiply both sides times Y that has the effect of putting
the Ys on the left hand side and then I can multiple
both sides times DX. I can multiple both sides times DX and we kind of treat, you can treat these differentials as you would treat a variable when you're manipulating it
to essentially separate out the variables. And so, this will cancel with that. And so, we are left with Y, DY. Y, DY is equal to negative X. And actually let me write it this way.
Let me write it as negative X, E. Actually, I might need
a little more space. So negative X E to the
negative X squared DX. DX.
Now why is this interesting? Because we could integrate both sides. And now this also highlights why we call it the separable.
You won't be able to do this with every differential equation. You won't be able to algebraically separate the Ys and DYs on one side and the Xs and DXs on the other side.
But this one we were able to. And so that's why this is called a separable differential equation. Differential equation. And it's usually the first
technique that you should try. Hey, can I separate the Ys and the Xs and as I said, this is
not going to be true of many, if not most
differential equations. But now that we did this we can integrate both sides. So let's do that. So, I'll find a nice
color to integrate with. So, I'm going to integrate both sides. Now if you integrate the left hand side
what do you get? You get and remember, we're integrating with respect to Y here. So this is going to be Y squared over two
and we could put some constant there. I could call that plus C one. And if you're integrating that that's going to be equal to. Now the right hand side we're integrating with respect to X.
And let's see, you could do U substitution or you could recognize that look, the derivative of negative X squared
is going to be negative two X. So if that was a two there and if you don't want to change
the value of the integral you put the 1/2 right over there.
And so now you could either do U substitution explicitly or you could do it in your head where you said U is equal
to negative X squared and then DU will be negative to X, DX or you can kind of do this
in your head at this point. So I have something and it's derivative so I really could just
integrate with respect to that something too with respect to that U. So this is going to be 1/2. This 1/2 right over here. The anti-derivative. This is E to the negative X squared and then of course, I might
have some other constant. I'll just call that C two. And once again, if this part over here what I just did seemed strange, the U substitution, you might want to review that piece. Now, what can I do here? We'll have a constant
on the left hand side. It's an arbitrary constant. We don't know what it is. I haven't used this initial condition yet we could call it. So, let me just subtract
C one from both sides. So if I just subtract
C one from both sides I have an arbitrary so
this is gonna cancel, and I have C two, sorry. Let me.
So, this is C one. So these are going to cancel and C two minus C one. These are both constants,
arbitrary constants and we don't know what they are yet.
And so, we could just rewrite this as on the left hand side we
have Y squared over two is equal to on the right hand side. I'll write 1/2 E. Let me write that in blue just because I wrote it in blue before. 1/2 E to the negative X squared
and I'll just say C two minus C one. Let's just call that C. So if you take the sum of those two things
let's just call that C. And so now, this is kind
of a general solution. We don't know what this constant is and we haven't explicitly solved for Y yet but even in this form we can now find a particular solution using this initial condition. Let me separate it out. This was a part of this original expression right over here but using this initial condition. So, it tells us when X is zero,
Y needs to be equal to one. So we would have one
squared which is just one over two is equal to 1/2.
E to the negative zero squared. Well, that's just going to be e to the zero is just one.
This is gonna be 1/2 plus C and just like that
we're able to figure out if you subtract 1/2 from both sides C is equal to zero.
So the relationship between Y and X that goes through this point, we could just set C is equal to zero. So that's equal to zero. That's zero right over there.
And so we are left with Y squared over two is equal to E to the
negative X squared over two. Now we can multiply both sides by two and we're going to get Y squared. Y squared. Let me do that. So we're gonna get Y squared is equal to E to the negative X squared. Now, we can take the
square root of both sides and you can say, well look, you know, Y squared is equal to this so Y could be equal to the
plus or minus square root of E to the negative X squared. Of E to the negative X squared. But they gave us an initial condition
where Y is actually positive. So we're finding the particular solution that goes through this point. That means Y is gonna be
the positive square root. If this was a point zero negative one then we would say Y is
the negative square root but we know that Y is
the positive square root, it's the principal root right over there. So let me do that a little bit neater
so we can get rid of, whoops. I thought I was writing in black. So we can get rid of this right over here. We're only going to be dealing with
the positive square root so we could write Y is equal to E to the negative X squared to the 1/2 power and that of course is equal to E to the negative X squared over two. So this right over here is or Y equals E to the
negative X squared over two is a particular solution that satisfies the initial conditions to this original differential equation. So just like that. Because we were able to just as a review, because this differential
equation was setup in a way or because we could algebraically separate the Y, DYs from the Xs, DXs, we're able to just separate
them out algebraically, integrate both sides and use the information given
in the initial condition to find the particular solution.",Separable differential equations introduction | First order differential equations | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/separable-equations/e/separable-differential-equations?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/separable-equations/v/particular-solution-to-differential-equation-example?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/differential-equations-intro/v/differential-equation-from-slope-field?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,DL-ozRGDlkY
LaplaceaslinearoperatorandLaplaceofderivatives_Laplacetransform_KhanAcademy-E2VxbufzuWQ.en.csv,"Well, now's as good a time
as any to go over some interesting and very
useful properties of the Laplace transform. And the first is to show that
it is a linear operator. And what does that mean? Well, let's say I wanted to take
the Laplace transform of the sum of the-- we call it the weighted sum of two functions. So say some constant, c1, times
my first function, f of t, plus some constant,
c2, times my second function, g of t. Well, by the definition of the
Laplace transform, this would be equal to the improper
integral from 0 to infinity of e to the minus st, times
whatever our function that we're taking the Laplace
transform of, so times c1, f of t, plus c2, g of t-- I think
you know where this is going-- all of that dt. And then that is equal to the
integral from 0 to infinity. Let's just distribute
the e the minus st. That is equal to what? That is equal to c1e to the
minus st, f of t, plus c2e to the minus st, g of t, and
all of that times dt. And just by the definition
of how the properties of integrals work, we know that we
can split this up into two integrals, right? If the integral of the sum of
two functions is equal to the sum of their integrals. And these are just constant. So this is going to be equal to
c1 times the integral from 0 to infinity of e to the minus
st, times f of t, d of t, plus c2 times the integral
from 0 to infinity of e to the minus st, g of t, dt. And this was just a very
long-winded way of saying, what is this? This is the Laplace transform
of f of t. This is the Laplace transform
of g of t. So this is equal to c1 times the
Laplace transform of f of t, plus c2 times-- this is the
Laplace transform-- the Laplace transform of g of t. And so, we have just shown that
the Laplace transform is a linear operator, right? The Laplace transform of
this is equal to this. So essentially, you can kind of
break up the sum and take out the constants, and just take
the Laplace transform. That's something useful to
know, and you might have guessed that was the
case anyway. But now you know for sure. Now we'll do something which
I consider even more interesting. And this is actually going to
be a big clue as to why Laplace transforms are extremely
useful for solving differential equations. So let's say I want to find
the Laplace transform of f prime of t. So I have some f of t, I take
its derivative, and then I want the Laplace transform
of that. Let's see if we can find a
relationship between the Laplace transform of the
derivative of a function, and the Laplace transform
of the function. So we're going to use some
integration by parts here. Let me just say what this
is, first of all. This is equal to the integral
from 0 to infinity of e to the minus st, times f
prime of t, dt. And to solve this, we're going
to use integration by parts. Let me write it in the
corner, just so you remember what it is. So I think I memorized it,
because I recorded that last video not too long ago. I'm just going to write
this shorthand. The integral of u-- well, let's
say uv prime, because that will match what we have up
here better-- is equal to both functions without the
derivitives, uv minus the integral of the opposite. So the opposite is u prime v. So here, the substitution
is pretty clear, right? Because we want to end up
with f of x, right? So let's make v prime is f
prime, and let's make u e to the minus st. So
let's do that. u is going to be e to the minus
st, and v is going to equal what? v is going to equal
f prime of t. And then u prime would be minus
se to the minus st. And then, v prime-- oh, sorry,
this is v prime, right? v prime is f prime of t, so
v is just going to be equal to f of t. I hope I didn't say that
wrong the first time. But you see what I'm saying. This is u, that's u, and
this is v prime. And if this is v prime, then
if you were to take the antiderivative of both sides,
then v is equal to f of t. So let's apply integration
by parts. So this Laplace transform, which
is this, is equal to uv, which is equal to e to the minus
st, times v, f of t, minus the integral-- and, of
course, we're going to have to evaluate this from
0 to infinity. I'll keep the improper
integral with us the whole time. I won't switch back and forth
between the definite and indefinite integral. So minus this part. So the integral from 0 to
infinity of u prime. u prime is minus se to the
minus st times v-- v is f of t-- dt. Now, let's see. We have a minus and a
minus, let's make both of these pluses. This s is just a constant,
so we can bring it out. So that is equal to e to the
minus st, f of t, evaluated from 0 to infinity, or as we
approach infinity, plus s times the integral from 0 to
infinity of e to the minus st, f of t, dt. And here, we see,
what is this? This is the Laplace transform
of f of t, right? Let's evaluate this part. So when we evaluated in
infinity, as we approach infinity, e to the minus
infinity approaches 0. f of infinity-- now this is
an interesting question. f of infinity-- I don't know. That could be large, that
could be small, that approaches some value, right? This approach 0, so
we're not sure. If this increases faster than
this approaches 0, then this will diverge. I won't go into the mathematics
of whether this converges or diverges, but let's
just say, in very rough terms, that this will converge
to 0 if f of t grows slower than e to the minus
st shrinks. And maybe later on we'll do some
more rigorous definitions of under what conditions
will this expression actually converge. But let's assume that f of t
grows slower than e to the st, or it diverges slower than this
converges, is another way to view it. Or this grows slower
than this shrinks. So if this grows slower than
this shrinks, then this whole expression will approach 0. And then you want to subtract
this whole expression evaluated at 0. So e to the 0 is 1 times f of
0-- so that's just f of 0-- plus s times-- we said, this is
the Laplace transform of f of t, that's our definition--
so the Laplace transform of f of t. And now we have an interesting
property. What was the left-hand side of
everything we were doing? The Laplace transform
of f prime of t. So let me just write
all over again. And I'll switch colors. The Laplace transform of f prime
of t is equal to s times the Laplace transform of
f of t minus f of 0. And now, let's just extend
this further. What is the Laplace transform--
and this is a really useful thing to know--
what is the Laplace transform of f prime prime of t? Well, we can do a little pattern
matching here, right? That's going to be s times the
Laplace transform of its antiderivative, times the
Laplace transform of f prime of t, right? This goes to this, that's
an antiderivative. This goes to this, that's
one antiderivative. Minus f prime of 0, right? But then what's the Laplace
transform of this? This is going to be equal to s
times the Laplace transform of f prime of t, but what's that? That's this, right? That's s times the Laplace
transform of f of t, minus f of 0, right? I just substituted
this with this. Minus f prime of 0. And we get the Laplace transform
of the second derivative is equal to s squared
times the Laplace transform of our function, f
of t, minus s times f of 0, minus f prime of 0. And I think you're starting
to see a pattern here. This is the Laplace transform
of f prime prime of t. And I think you're starting
to see why the Laplace transform is useful. It turns derivatives into
multiplications by f. And actually, as you'll see
later, it turns integration to divisions by s. And you can take arbitrary
derivatives and just keep multiplying by s. And you see this pattern. And I'm running out of time. But I'll leave it up to you to
figure out what the Laplace transform of the third
derivative of f is. See you in the next video.",Laplace as linear operator and Laplace of derivatives | Laplace transform | Khan Academy,"Useful properties of the Laplace Transform

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-6?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-tutorial/v/laplace-transform-4?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,E2VxbufzuWQ
Particularsolutiontodifferentialequationexample_KhanAcademy-E444KhRcWSk.en.csv,"- Let's now get some practice
with separable differential equations, so let's say I have
the differential equation, the derivative of Y with
respect to X is equal to two Y-squared, and let's say
that the graph of a particular solution to this, the graph
of a particular solution, passes through the point one
comma negative one, so my question to you is, what is Y,
what is Y when X is equal to three for this particular
solution, so the particular solution to the differential
equation that passes through the point one comma negative
one, what is Y when X is equal to three, and I encourage
you to pause the video, and try to work through it on your own. So I'm assuming you had a
go at it, and the key with a separable differential
equation, and that's a big clue that I'm even calling it a
separable differential equation, is that you separate the Xs from the Ys. Or all the Xs and the
DXs from the Ys and DYs. So how do you do that here? Well, what I could do,
let me just rewrite it. So it's gonna be DY DX is
equal to two Y-squared, is equal to two Y, equal to two Y-squared. So let's see, we can
multiply both sides by DX, and let's see, so then we're
gonna have, that cancels with that if we treat it as just
a value, or as a variable. We're gonna have DY is
equal to two Y squared DX. Well, we're not quite done yet. We gotta get this two Y
squared on the left hand side. So we can divide both
sides by two Y-squared. So if we divide both sides by
two Y-squared, two Y-squared, the left hand side, we could
rewrite this as 1/2 Y to the negative two power, is going
to be equal to DY, DY is equal to DX, and now, we
can integrate both sides. So we can integrate both sides. Let me give myself a
little bit more space. And so, what is, what is this
left hand side going to be? Well, we increment the exponent, and then divide by that value,
so Y to the negative two, if your increment is
Y to the negative one, and then divide by negative one, so this is going to be -1/2
Y to the negative one power, and we could do a plus C like
we did in the previous video, but we're gonna have a
plus C on both sides, and you could subtract,
or you know, you have different arbitrary
constants on both sides and you could subtract them from each other, so I'm just gonna write the
constant only on one side. So you have that is equal to,
well if I integrate just DX, that's just going to give me
X, that's just gonna give me X. So this right over here is X, and of course I can have
a plus C over there, and If I want I can, I can
solve for Y if I multiply, let's see, I can multiply
both sides by negative two, and then I'm gonna have, the
left hand side you're just gonna have Y to the negative
one, or 1/Y is equal to, if I multiply the right hand
side times negative two, I'm gonna have negative
two times X plus, well it's some arbitrary constant,
it's still going to, it's gonna be negative two
times this arbitrary constant but I could still just call it
some arbitrary constant, and then if we want we can take
the reciprocal of both sides, and so we will get Y is equal
to, is equal to 1/-2X+C. And now we can use, we can use
the information they gave us right over here, the fact
that our particular solution needs to go through this
point to solve for C. So, when X is negative one,
so when X is negative one. Oh sorry, when X is one, when
X is one, Y is negative one, so we get negative one
is equal to 1/-2+C, or we could say C minus two, we
could multiply both sides times C minus two, if then we will
get, actually let me just scroll down a little bit, so
if you multiply both sides times C minus two, negative
one times C minus two is going to be negative C plus two or
two minus C is equal to one. All I did is I multiplied C
minus two times both sides, and then, let's see, I can
subtract two from both sides, so negative C is equal to negative
one, and then if I multiply both sides by negative one,
we get C is equal to one. So our particular solution
is Y is equal to 1/-2X+1. And we are almost done,
they didn't just ask for, we didn't just ask for
the particular solution, we asked, what is Y when
X is equal to three. So Y is going to be equal
to one over, three times negative two is negative six
plus one, which is equal to negative, is going to be
equal to 1/-5, or -1/5. And we are done.",Particular solution to differential equation example | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/separable-equations/e/separable-differential-equations?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/separable-equations/v/separable-differential-equations?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/separable-equations/v/separable-differential-equations-introduction?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,E444KhRcWSk
VisualizingacolumnspaceasaplaneinR3_Vectorsandspaces_LinearAlgebra_KhanAcademy-EGNlXtjYABw.en.csv,"In the last video, I started
with this matrix right here, and right from the get go, we
said the span of this matrix is just the span of the column
vectors of it, and I just wrote it right there. But we weren't clear whether
this was linearly independent, and if it's not linearly
independent, it won't be a sufficient basis. And then we go off and
we figure out the null space of A. We find out that the null space
of A contains more than just the zero vector. It's just the span of these two
vectors here, which means that these columns are not
linearly independent. We saw that several
videos ago. And we used that information
that they're not linearly independent to try to make them
linearly independent by getting rid of the
redundant ones. So we were able to get rid of
this guy and this guy, because these were essentially the
columns associated with the free variables. And we were able to do it using
this little technique down here, where we set one of
these equal to 0, the other one equal to negative
1 and then solved for the pivot variables. And then we set the other one
equal to 0 and the other one equal to negative 1 and solved
for the pivot variables. And you could imagine
that this is a generalizable process. If you have a bunch of free
variables, you can set all of them but one to equal 0, and
then that one that you didn't set to 0, you set it to
equal negative 1. And you can express it as a sum
of the pivot variables, where the pivot variables are a function of the free variables. In general, this would be
a quick way of doing it. We had to do it more
slowly over here. If I have some matrix A, and I
want to figure out the basis for the column space, the column
space is just the span of these, but if I wanted a
linearly independent basis, I need to figure out some set
of these that are linearly independent. What I can do is put this guy
into reduced row echelon form. When I put them in reduced row
echelon form, and I did that over here, this is the reduced
row echelon form of A, I can look at the variables
that are associated with the pivot entries. So this is x1. Let me scroll up a little bit. This is associated
with x1, right? When you multiply this times x1,
you get this column times x1, this column times x2, this
column times x3, this column times x4 like that. When you look at just regular A,
when you look at just your matrix A, it's the same thing. If you were to write Ax equal
to 0, this column would be associated with x1, this column
would be associated with x2, x3 and x4 like that. What you can do is you put it
in reduced row echelon form. You say which columns have
my pivot entries or are associated with pivot
variables? You say, OK, x1 and x2 are
associated with pivot variables, or they are the pivot
variables, and they're associated with these first
two columns, and so those first two columns would be a
basis for the column space. How did I get this? Am I just making up
things on the fly? Well, no! It all comes from the reality
that you can always construct a situation where the vectors
associated with the free variables you can write them as
linear combinations of the vectors associated with the
pivot variables, and we did a special case of that
last time. But a very quick and dirty way
of doing it, and I don't know if it's actually dirty, is just
take your matrix, put it in it reduced row echelon form,
and you say, look, this column and this column
are associated with my free variables. Therefore, this column and this
column must be associated with my free variables. The solution sets are the same
to Ax equal to 0 or the reduced row echelon form
of Ax is equal to 0. So they're the same. So if this column and this
column are associated with free variables, so are this
column and this column, which means that they can be expressed
just by judiciously selecting your values of your
free variables as linear combinations of the columns
associated with the pivot variables, with the pivot
entries, which are that column and that column. So this column and this column
would be a basis for A, and we see that. We see that all the
way down here. 1, 2, 3 and 1, 1, 4, We did a
lot of work and we got all the way there, and we said this
is a basis for the column span of A. Now, doing all of that work,
let's see if we can actually visualize what the column
space of A looks like. I have a strange feeling I might
have said column span a couple of times, but the
column space, what does it look like? Well, there's a couple of
ways to think about what it looks like. One way is we can say, look,
this span this is 2-- that's a member of R3. That's a vector in R3 and
this is a vector in R3. Let me draw my x, z and-- well,
normally it's drawn-- this is normally y, x, and
z-axes in R3, if I'm want to represent them as
three-dimensional space. Then the vector 1, 2, 3 might
look like this where it's one, one, two, one, two, three,
so we go out one down here, then up three. So the vector will look like
that in its standard form. That's that one right there. And the vector 1, 1, 4 would be
one, one and go up four, so it might look something
like this. It's hard to actually draw
them very well in three dimensions, but you
get the idea. But the column space is the span
of these, so all of the linear combinations
of these two guys. So all of the linear
combinations of these two guys are going to create
a plane that contains these two vectors. If you just sum these guys up in
multiple combinations, you can get any vector up there. If you just add them
up, you'll get that vector right there. If you add this guy plus 2 times
that, you'll get some vector up here. So if you view them as position
vectors, they'll essentially form
a plane in R3. But let's see if we can get the
equation for that plane. Well, how can we do that? Well, we know that we can figure
out the equation of a plane based on the fact that
a normal vector dotted with any-- let me write my normal
vector like this. The normal vector dotted with
any position vector specifying a position on the plane. So let me call that x minus any
point on the plane or any vector position on the plane. So I could do that minus
the vector 1, 2, 3 has to be equal to 0. And we can use this information
to figure out the equation for this plane. But what is a normal vector? How can we find a normal
vector to this plane? So this would be a vector. Let me see if I can draw
this in a way that doesn't confuse the issue. If the plane is like that,
the normal vector would come out like that. So how can I create
a normal vector? Well, we learned that you take
the cross product of any two vectors in R3, and the cross
product I've only defined so far in R3, and I will get a
vector that's normal to both of those vectors. So let's take the
cross product. This is a nice way of thinking
about it, because it's really integrating everything that
we've covered so far. So let me define my normal
vector to be equal to 1, 2, 3 cross 1, 1, 4. And what does this equal? So my first term,
I ignore that. I get 2 times 4 minus
3 times 1. 2 times 4 is 8. 2 times 4 minus 3 times 1. 8 minus 3. Then for my second row, I have
1 times 4, and my temptation is do 1 times 4 minus
3 times 1. But you reverse it. You do 3 times 1, so it's
3, minus 1 times 4. We've done that multiple
times. You might want to review the
cross product video if that seems strange. You ignore the middle row, and
you normally do 1 times 4 minus 3 times 1, but the
middle row you switch. We're only defining it for R3,
so instead, we do 3 times 1 minus 1 times 4. And then finally for the last
row, we ignore it, and we say 1 times 1, which is 1, minus 2
times 1, which is minus 2. And this is equal to the vector
5, minus 1, minus 1, which by definition of the cross
product, and I've shown this to you multiple times,
is normal to both of these vectors, and so it'll be
normal to any linear combination of these
two vectors. So now that we have our normal
vector, we can define the traditional equation
for the plane. So we now know that our normal
vector 5, minus 1, minus 1, that I got by taking the cross
product of our basis vectors dot any vector in our plane. So let me just write
any vector. Let me just write it x, y, z. So x, y, z since that's how
I defined my axes up here. This was the x-axis. x, y and z. x, y, z minus-- I just
picked one of these. I could have picked either of
them-- minus 1, 2, 3 has got to be equal to 0. So what's this? This is going to be equal to--
let me write it a little smaller, a little neater-- 5,
minus 1, minus 1 dot-- what's this guy going to be? x minus 1, y minus 2, and
z minus 3 has got to be equal to 0. And what's the dot product? It's 5 times x minus 1 plus-- or
maybe I should say minus 1, so it's plus minus 1 times y
minus 2 plus minus 1 times z minus 3 is equal to 0. That's just the definition
of our dot product. If I simplify this, I get 5x
minus 5 minus y plus 2 minus z plus 3 is equal to 0. You have 2 plus 3 is 5 minus
5, so those all cancel out. Those will equal 0. And we get 5x minus y minus
z is equal to 0. This plane in R3 is the
column space of A. So we've now shown you that
it's truly a plane in A. And actually, it makes
sense that this plane intersects the origin. If you set x, y, and
z equal to 0, it satisfies this equation. And that makes sense, because we
said that a column space of a matrix has to be a valid
subspace, and a valid subspace has to contain the
zero vector. And in R3 that's the
coordinate 0, 0, 0. Now, what I want to do now is
see if we can get at the same answer going a completely
different way, or approaching it in a completely
different way. Let me get my original A,
which I've forgotten. I've marked it up a good
bit, but let me just copy and paste it. So that's my original
A right there. Let me copy it. Let me paste it. Nope. That's not what I
wanted to do. Let's see, so my original
A-- I copied and pasted the wrong thing. Let me do it a little-- don't
want to waste your time. Edit, copy, edit, paste. There you go and let me scroll
this down and get to a point that's relatively clean. Bring my A down. I've used a lot of space. So here you go. This is my original
A right there. And what I want to do is see
if I can get this result completely different. I got this result by figuring
out the basis of the column span, finding a normal vector by
taking the cross product of our two basis vectors, and then
using the dot product of the normal vector with the
difference-- this vector right here, where you take any vector
on our plane minus one of our basis vectors,
that's to find some vector in the plane. This is some vector
in the plane. So any vector in the plane
dotted with my normal vector is going to be equal to 0. And actually, I should probably
make a side note here, that the only reason I
was able to say that the normal vector is a cross
product of my two basis vectors, is because I knew that
these two basis vectors, not only do they specify some
point on the plane-- so let's say that this guy right here
is this blue vector. Not only does he specify some
point on the plane right there, but the vector lies
completely on the plane. How did I know that? Because I knew from the get go
that the 0, 0 vector is in my span, right? I knew that if I draw this guy
in just standard position, the point 0, 0, 0, is in my span,
and I know its end point is in the span, so this whole vector
has to be in my plane, and likewise, this whole vector
has to be in my plane. So if I take the cross product,
anything normal to these guys or any combination
of these guys is going be normal to the plane, and we got
this result right here. But let me take this right
here and use our other definition of column span. Our other definition, or it's
really an equivalent definition, is all of the valid
solutions to Ax where x is a member of Rn. Or another way we could think of
it is, we could view it as all of the valid b's where Ax
is equal to b, and x is a member of Rn. These are equivalent
statements. I'm just defining b here to be
Ax, so these are equivalent statements. But let's run with this
a little bit. So let's say that I define my
b, so b is going to be a vector in R3, right? We already have an intuition
like that. When I take Ax, I get a b
that's equal to x, y, z. And I want to figure out what x,
y's and z's can I get valid solutions for? So if I take my vector A and
then let me multiply it times-- well, actually, the
best way to do it, I think we're used to it right now. If I'm solving the equation
Ax is equal to b, I can essentially just create the
augmented matrix, where I have the matrix A and I can augment
it with b, and put this in reduced row echelon form, and
that'll essentially represent the solution set. So let me do that. So if I just augment this matrix
right here with b, so I write x, y, z. So this is A augmented with b. This is A, this is b. let me put this in reduced row
echelon form and find the solution set. And these are x, y, and z's
that define a valid b. So what do I get? The first thing I want to do,
and we've done this exercise before, let's keep my
first row the same. 1, 1, 1, 1, and I get an x. And let's replace our second row
with the second row minus the first row. Actually let me do
it this way. Let me replace the second row
with 2 times the first row minus the second row. So 2 times the first row minus
the second row, we're going to get a 2x minus y up there. And then 2 times
1 minus 2 is 0. 2 times 1 minus 1 is 1. 2 times 1 minus 4 is minus 2. 2 times 1 minus 3 is minus 1. Fair enough. And now let me replace my third
row with the third row minus 3 times the first row. So we're going to do the third
row minus-- no, let me do it this way. It's the third row minus
3 times the first row. So I'm just doing the b column
first, because I can remember what I did. The third row minus 3
times the first row. 3 minus 3 times 1 is 0. 4 minus 3 times 1 is 1. 1 minus 3 times 1 is minus 2. And then 2 minus 3 times
1 is minus 1. Now, I could go all the way to
reduced row echelon form, but something interesting is
already happening. So let me from the get go try
to zero out this third row. And the best way to zero out
this third row is to just replace the third row. So the first row-- well,
I won't even write the first row. The second row is 0, 1, minus
2, minus 1, and 2x minus y. I'm not even going to worry
about the first row right now. But let's replace the third row,
just in our attempt to go into reduced row echelon form. Let's replace it with
the second row minus the third row. So you get 2x minus
y minus z plus 3x. I just took this minus this. So minus z plus 3x. So 0 minus 0 is 0. 1 minus 1 is 0. Minus 2 minus minus 2 is
0, and that's also 0. So we're only going to have a
valid solution to Ax equals b if this guy right here
is equal to 0. What happens if he's
not equal to zero? Then we're going to have a bunch
of zeroes equaling some number, which tells us that
there's no solution. So if I pick a b where this guy
does not equal zero, then I'll have no solution. If this guy equals 5, if I pick
x, y, and z's such as that this expression is equal to
5, then Ax equal to b will have no solution, because it
will have 0 is equal to 5. So this has to equal 0. So 2x minus y minus z plus 3x
must be equal to 0 in order for b to be valid, in order for
b to be a member of the column space of A, in order for
it to be a valid vector that Ax can become, or the
product A times x can become for some x. So what does this equal to? If we add the 2x plus the 3x,
I get 5x minus y minus z is equal to 0, which is the exact
same outcome we got when we figured out the basis vectors. We said oh, you know what? The basis vectors, they have
to be in the column space themselves by definition. So let me find a normal vector
to them both by taking the cross product. I did that, and I said the cross
product times any valid vector in our space minus one of
the basis vectors has to be equal to zero, and then
I got this equation. Or we could have done
it the other way. We could've actually literally
solved this equation setting our b equal to this. We said what b's will give
us a valid solution? And our only valid solution will
be obtained when this guy has to be equal to zero, because
the rest of his row became zero. And when we set that equal
to zero, we got the exact same equation. So, hopefully, you found this
to be mildly satisfying, because we were able to tackle
the same problem from two different directions and get the
same result, and it kind of shows you the beauty of
linear algebra, how it all starts to fit together.",Visualizing a column space as a plane in R3 | Vectors and spaces | Linear Algebra | Khan Academy,"Determining the planar equation for a column space in R3

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/proof-any-subspace-basis-has-same-number-of-elements?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/null-space-and-column-space-basis?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,EGNlXtjYABw
ShowingthatA-transposexAisinvertible_Matrixtransformations_LinearAlgebra_KhanAcademy-ESSMQH6Y5OA.en.csv,"OK. I've got some matrix A. It's an n by k matrix. Let's say it's not just
any n by k matrix. This matrix A has a bunch of
columns that are all linearly independent. So, a1. a2, all the way through ak
are linearly independent. They are linearly independent
columns. Let me write that down. a1, a2, all the column
vectors of A. All the way through ak are
linearly independent. Now, what does that mean? That means that the only
solution to x1 times a1 plus x2 times a2, plus all the
way to xk times ak. The only solution to this is all
of these x's have to be 0. So, all xi's must
be equal to 0. That's what linear independence
implies. Or another way to write it is
all the solutions to this equation x1, x2, all
the way down to xk equaling the zero vector. That all the solutions to this
are all of these entries have to be equal to 0. This is just another way of
writing this right there. We've seen it multiple times. That's the zero vector
right there. So if all of these have to be 0,
that's like saying that the only solution to ax is equal
to 0, is x is equal to the zero vector. Or another way to say it-- this
is all coming out of the fact that this guy's columns
are linearly independent. So linear independence
of columns. Based on that, we can say, since
the only solution to ax is equal to 0 is x is equal to
the zero vector, we know that the null space of a must be
equal to the zero vector. Or it's a set with the just
the zero vector in it. And that is all a
bit of review. Now, n by k. We don't know its dimensions. It may or may not be
a square matrix. So we don't know, necessarily,
whether it's invertible and all of that. But maybe we can construct an
invertible matrix with it. So, let's study a transpose
times a. a transpose times a. A is an n by k matrix. A transpose will be
a k by n matrix. So, A transpose a is going
to be a k by k matrix. So it's a square matrix. So that's a nice place
to start for an invertible matrix. So let's see if it is
actually invertible. We don't know anything
about A. All we know is its columns
are linearly independent. Let's see if A transpose
a is invertible. Essentially, to show that it's
invertible, if we can show that all of its columns are
linearly independent, then we'll know it's invertible. If we have any-- and I'll
get back to this at the end of the video. But if you have a square
matrix with linearly independent columns-- remember,
the linearly independent columns all are
associated with pivot columns when you put them in reduced
row echelon form. So if you have a square matrix,
then you're going to have exactly-- so if it's a k by
k matrix, that means you're going to have k-- that means
that the reduced row echelon form of a matrix will have k
pivot columns and be k by k. And be a square k by k matrix. And there's only one k by k
matrix with k pivot columns. And that's the identity
matrix. The k by k identity matrix. And if when you do something
to reduce row echelon form, and it you got the identity
matrix, that means that your matrix is invertible. I could have probably left that
to the end of the video, but I just want to show you. If we can show that-- we already
know that this guy's square, that a transpose
A is a square matrix. If we can show that, given
that a has linearly independent columns, that a
transpose times A also has linearly independent columns,
and given the columns are linearly independent, and it's a
square matrix, that tells us that when we put it into reduced
row echelon form, we'll get the identity matrix. And that tells us that this
thing would be invertible. Let's see if we can prove that
all of this guy's columns are linearly independent. So let's say I have
some vector V. Let's say my vector V is a
member of the null space of a transpose A. That means that if I take a
transpose A times my vector v, I'm going to get the
zero vector. Fair enough? Now, what happens if I multiply
both sides of the equation times the transpose
of this guy? So I'll get a v transpose--
actually let me just do it right here. I multiply v transpose
on this side, and v transpose on this side. You could view this as a
matrix vector product. Right? Or, in general, if you take a
row vector times a column vector, it's essentially
their dot product. So this right-hand side of the
equation, you dot anything with the zero vector. That is just going to
be the zero vector. Now what is the left-hand side
of this going to be? We've seen this before. If you have the transpose of--
we can view this as, even though it's a transpose of a
vector, you can view it as a-- it is a row factor,
but you could also view it as a matrix. Right? Let's say v is a
k by 1 matrix. v transpose will be
a 1 by k matrix. We've seen this before. That that is equal to the
reverse product, the transpose of the reverse product. Or if we take the product of two
things and transpose it, that's the same thing as taking
the reverse product of the transposes of either
of those two matrices. So given that, we can replace
this right here with a times a vector v transpose-- and we're
multiplying this vector times av times this vector
right here. And that is going to be equal
to the zero vector. Now, what is this? If I'm taking some vector's
transpose, and let's say this is a vector. Remember, even though I have a
matrix vector product right here, when I multiply a matrix
times this vector, it will result in another vector. So this is a vector, and this
is a vector right here. And if I take some vector and I
multiply its transpose times that vector-- we've
seen this before. That is the same thing
as y dot y. These two statements
are identical. So this thing right here is the
same thing as av dot av. And so what does the right-hand
side equal? The right-hand side is going
to be equal to 0. Actually let me just make
a correction up here. When I take v transpose times
the zero vector, v transpose is going to have k elements. And then the zero vector is also
going to have k elements. And when I take this product
that's like dotting it. You're taking the dot
product of v and 0. So this is a dot product of v
with the zero vector which is equal to zero, the
scalar zero. So this right here's
the scalar zero. I want to make sure
I clarify that. It wouldn't make sense
otherwise. So the right-hand side, when I
multiply the zero vector times the transpose of v, gets
just the number zero. No vector zero there. So this av dot av is going
to be equal to 0. Or we could say that the
magnitude, or the length, of av squared is equal to 0. Or that tells us that av
has to be equal to 0. The only vector whose length
is 0, is the zero vector. So av-- let me switch colors. Using that a little
bit too much. So we know that av
must be equal to 0, to the zero vector. This must be equal to the zero
vector since its length is 0. Now, we started off with saying
v is a member of the null space of a transpose A. v can be any member of the null
space of a transpose A. But then from that assumption,
it turns out that V also has to be a member of the
null space of A. That av is equal to 0. Let's write that down. If v is a member of the null
space of a transpose A, then v is a member of the
null space of a. Now, our null space of A,
because A's columns are linearly independent, it only
contains one vector. It only contains the
zero vector. So, if this guy's a member of
the null space of A transpose A, and he has to be a member
of the null space of A, there's only one thing
he can be. There's only one entry there. So then v has to be equal
to the zero vector. Or another way to say that is,
any v that's in our null space of a transpose A has to
be the zero vector. Or the null space of a transpose
A is equal to the null space of a which is equal
to just the zero factor sitting there. Now, what does that do for us? That tells us that the only
solution to a transpose A times some vector x equal to
zero, this says that the only solution is the zero vector is
equal to the zero vector. Right? Because the null space of a
transpose A is the same as the null space of a. And that just has the
zero vector in it. The null space is just
the solution to this. So if the only solution to the
null space is this, that means that the columns of a transpose
A are linearly independent. You could, essentially, write
all of the linear combinations of the columns by the weights
of the entries of x. We actually did that
at the beginning. It's the same argument
we used up here. So if all of their columns are
linearly independent, and I said it over here, a transpose
A has linearly independent columns, and it's a square
matrix, that was from the definition of it. So we now know that A transpose
A if I were to put it-- let me do this way. That tells me that the reduced
row echelon form of a transpose A is going to be equal
to the k by k identity matrix which tells me that a
transpose A is invertible. Which is a pretty neat result. I started with the
matrix that has linearly independent columns. So it wasn't just any matrix. It wasn't just any run
of the mill matrix. It did have linearly independent
columns, but it might have weird dimensions. It's not necessarily
a square matrix. But I could construct
a square matrix. a transpose A with it. And we now know that
it also has linearly independent columns. It's a square matrix. And therefore it is invertible.",Showing that A-transpose x A is invertible | Matrix transformations | Linear Algebra | Khan Academy,"Showing that (transpose of A)(A) is invertible if A has linearly independent columns

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/alternate_bases/othogonal_complements/v/linear-algebra-orthogonal-complements?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-rank-a-rank-transpose-of-a?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,ESSMQH6Y5OA
Laplacetransformsolvesanequation2_Laplacetransform_DifferentialEquations_KhanAcademy-EdQ7Q9VoF44.en.csv,"Welcome back. We're finally using the Laplace
Transform to do something useful. In the first part of this
problem, we just had this fairly straightforward
differential equation. And I know it's a little bit
frustrating right now, because you're like, this is such an
easy one to solve using the characteristic equation. Why are we doing Laplace
Transforms? Well I just want to show you
that they can solve even these problems. But later on there
are going to be classes of problems that, frankly, our
traditional methods aren't as good as the Laplace Transform. But anyway, how did
we solve this? We just took the Laplace
Transform of both sides of this equation. We got all of this hairy mess. We used the property of the
derivative of functions, where you take the Laplace Transform,
and we ended up, after doing a lot of algebra
essentially, we got this. We got the Laplace Transform of
y is equal to this thing. We just took the Laplace
Transform of both sides and manipulated algebraically. So now our task in this video
is to figure out what y's Laplace Transform
is this thing? And essentially what we're
trying to do, is we're trying to take the inverse Laplace
Transform of both sides of this equation. So another way to say it, we
could say that y-- if we take the inverse Laplace Transform
of both sides-- we could say that y is equal to the
inverse Laplace Transform of this thing. 2s plus 13, over s squared
plus 5s plus 6. Now we'll eventually actually
learn the formal definition of the inverse Laplace Transform. How do you go from the s
domain to the t domain? Or how do you go from
the frequency domain to the time domain? We're not going to worry
about that right now. What we're going to do is we're
going to get this into a form that we recognize,
and say, oh, I know those functions. That's the Laplace Transform
of whatever and whatever. And then we'll know what y is. So let's try to do that. So what we're going to use is
something that you probably haven't used since Algebra two,
which is I think when it's taught in, you know,
eighth, ninth, or 10th grade, depending. And you finally see it now in
differential equations that it actually has some use. Let me write it. We're going to use partial
fraction expansion. And I'll do a little primer
on that, in case you don't remember it. So anyway, let's just factor
the bottom part right here. And you'll see where I'm
going with this. So if I factor the bottom, I get
s plus 2 times s plus 3. And what we want to do, is we
want to rewrite this fraction as the sum of 2-- I
guess you could call it partial fractions. I think that's why it's called
partial fraction expansion. So we want to write this as a
sum of A over s plus 2, plus B over s plus 3. And if we can do this, then--
and bells might already be ringing in your head-- we know
that these things that look like this are the Laplace
Transform of functions that we've already solved for. And I'll do a little review
on that in a second. But anyway, how do we
figure out A and B? Well if we were to actually add
A and B, if we were to-- let's do a little aside right
here-- so if we said that A-- so if we were to give them a
common denominator, which is this, s plus 2 times s plus 3. Then what would A become? We'd have to multiply A
times s plus 3, right? So we'd get As plus 3A. This, as I've written it right
now, is the same thing as A over s plus 2. You could cancel out an s plus
3 in the top and the bottom. And now we're going to
add the B to it. So plus-- I'll do that in a
different color-- plus-- well, if we have this as the
denominator, we could multiply the numerator and
the denominator by s plus 2, right? To get B times s, plus
2B, and that's going to equal this thing. And all I did is I added
these two fractions. Nothing fancier than there. That was Algebra two. Actually, I think I should
do an actual video on that as well. But that's going to
equal this thing. 2s plus 13, all of that over
s plus 2 times s plus 3. Notice in all differential
equations, the hairiest part's always the algebra. So now what we do
is we match up. We say, well, let's add
the s terms here. And we could say that the
numerators have to equal each other, because the denominators
are equal. So we have A plus Bs plus 3A
plus 2B is equal to 2s plus B. So the coefficient on s, on
the right-hand side, is 2. The coefficient on the left-hand
side is A plus B, so we know that A plus
B is equal to 2. And then on the right-hand side,
we see 3A plus 2B must be equal to-- oh,
this is a 13. Did I say B? This is a 13. That's a 13. It looks just like a B, right? That was 2s plus 13. Anyway, so on the right-hand
side I get, it was 3A plus 2B is equal to 13. Now we have two equations
with two unknowns, and what do we get? I know this is very tiresome,
but it'll be satisfying in the end. Because you'll actually
solve something with the Laplace Transform. So let's multiply the top
equation by 2, or let's just say minus 2. So we get minus 2A minus
2B equals minus 4. And then we get-- add the two
equations-- you get A is equal to-- these cancel out--
A is equal to 9. Great. If A is equal to 9, what
is B equal to? B is equal to 9 plus
what is equal to 2? Or 2 minus 9 is minus 7. And we have done some serious
simplification. Because now we can rewrite this
whole expression as the Laplace Transform of y is equal
to A over s plus 2, is equal to 9 over s plus 2,
minus 7 over s plus 3. Or another way of writing it, we
could write it as equal to 9 times 1 over s plus 2, minus
7 times 1 over s plus 3. Why did I take the trouble
to do this? Well hopefully, you'll recognize
this was actually the second Laplace Transform
we figured out. What was that? I'll write it down here just
so you remember it. It was the Laplace Transform of
e to the at, was equal to 1 over s minus a. That was the second Laplace
Transform we figured out. So this is interesting. This is the Laplace
Transform of what? So if we were to take the
inverse Laplace Transform-- actually let me just
stay consistent. So that means that this is the
Laplace Transform of y, is equal to 9 times the Laplace
Transform of what? If we just do pattern matching,
if this is s minus a, then a is minus 2. So 9 times the Laplace
Transform of e to the minus 2t. Does that make sense? Take this, put it in this one,
which we figured out, and you get 1 over s plus 2. And let me clean this up a
little bit, because I'm going to need that real estate. I'll write this. I'll leave that there, because
we'll still use that. And then we have minus 7 times--
this is the Laplace Transform of what? This is the Laplace Transform
of e to the minus 3t. This pattern matching, you're
like, wow, if you saw this, you would go to your Laplace
Transform table, if you didn't remember it, you'd see this. You're like, wow, that looks
a lot like that. I just have to figure
out what a is. I have s plus 3. I have s minus a. So in this case, a is
equal to minus 3. So if a is equal to minus 3,
this is the Laplace Transform of e to the minus 3t. So now we can take the inverse
Laplace-- actually, before we do that. We know that because the Laplace
Transform is a linear operator-- and actually now I
can delete this down here-- we know that the Laplace Transform
is a linear operator, so we can
write this. And you normally wouldn't go
through all of these steps. I just really want to make you
understand what we're doing. So we could say that this is the
same thing as the Laplace Transform of 9e to the minus 2t,
minus 7e to the minus 3t. Now we have something
interesting. The Laplace Transform of y
is equal to the Laplace Transform of this. Well if that's the case, then
y must be equal to 9e to the minus 2t, minus 7e
to the minus 3t. And I never proved to you, but
the Laplace Transform is actually a 1:1 Transformation. That if a function's Laplace
Transform, if I take a function against the Laplace
Transform, and then if I were take the inverse Laplace
Transform, the only function whose Laplace Transform
that that is, is that original function. It's not like two different
functions can have the same Laplace Transform. Anyway, a couple of things
to think about here. Notice, we had that thing that
kind of looked like a characteristic equation
pop up here and there. And we still have to solve a
system of two equations with two unknowns. Those are both things that we
had to do when we solve an initial value problem, when we
use just traditional, the characteristic equation. But here it happened
all at once. And frankly it was a little bit
hairier because we had to do all this partial fraction
expansion. But it's pretty neat. The Laplace Transform got
us something useful. In the next video I'll actually
do a non-homogeneous equation, and show you that the
Laplace Transform applies equally well there. So it's kind of a more
consistent theory of solving differential equations, instead
of kind of guessing solutions, and solving for
coefficients and all of that. See you in the next video.",Laplace transform solves an equation 2 | Laplace transform | Differential Equations | Khan Academy,"Second part of using the Laplace Transform to solve a differential equation.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-to-solve-differential-equation/v/using-the-laplace-transform-to-solve-a-nonhomogenous-eq?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-to-solve-differential-equation/v/laplace-transform-to-solve-an-equation?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,EdQ7Q9VoF44
Datastructures-Introductiontostack-F1F2imiOJfk.en.csv,"In this lesson we're going to introduce
you to stack data structure. Data structures, as we know, are ways to
store and organize data in computers. So far, in the series we have discussed
some of the data structures. We have talked about arrays and linked
lists. Now in this lesson we are going to
talk about stacks and we are going to talk about stack as abstract data type or ADT. When we talk about a data structure
as abstract data type, we talk only about
the features or operations available with the data
structure. We do not go into implementation details.
So basically we define the data structured only as a mathematical or
logical model. We'll go into implementation of stack in
later lessons. In this lesson, we're going to talk only
about stack ADT. So we are only going to have a look at
the logical view of stack. Stack as a data structure in
computer science is not very different from stack as a way of organizing objects, in real world. Here are some examples of
stack from real world: First figure is of a stack of dinner
plates. Second figure is of a mathematical
puzzle, called tower of hanoi, where we have three rods or
three pegs and multiple disks and the game is about moving a stack of
discs, from one peg to another with this
constraint that, a disc can not go on top of a smaller
disc. Third figure is of a pack of Tennis balls. Stack basically is a collection with
this property, that an item in the stack must be inserted
or removed, from the same end that we call the top
of stack. In fact this is not just a property, this
is a constraint or restriction. Only the top of a stack is accessible and
any item has to be inserted or removed from the top. A stack is
also called 'last in first out' collection. Most recently added item in a stack has to go
out first. In the first example, you will always
pick up a dinner plate from top of the stack and
if you will have to put a plate back into the stack, you will
always put it back on top of the stack. You can argue, that I
can slip out a plate from in between without actually
removing the plates on the top. So the constraint that I should take
out a plate always from the top is not strictly enforced. For the sake of
argument, this is fine. You can say this. In other
two examples where we have discs in a pag, and tennis balls in this box that can open only from one side,
there is no way you can take out an item from in between. Any insertion of removal has to happen
from top. You can not slip out an item from in
between. You can take out an item, but for that you will have to remove all
the items on top of that item. Let's now formally define stack as an
abstract data tape. A stack is a list or collection with the
restriction that insertion and deletion can be performed only from
one end, that we call the top of stack. Let's
now define the interface or operations available with stack ADT. There are two fundamental
operations available with a stack. An insertion is called a 'push' operation. 'push' operation can insert or push some
item 'X' onto the stack. Another operation,
second operation is called 'pop'. 'pop' is removing the most recent item from the stack,
most recent element from the stack. 'push' and 'pop' are the fundamental
operations and there can be few more. Typically there is
one operation called 'top', that simply returns the element at
top of the stack. And there can be an operation to check
wheather a stack is empty or not. So this
operation will return true if the stack is empty, false
otherwise. So 'push' is inserting an element on top
of stack and 'pop' is removing an element from
top of stack. We can 'push' or 'pop' only one element at a
time. All these operations that have written
here can be performed in constant time, or in other words their
time complexity is O(1). Remember an element that is pushed or
inserted last on to a stack, is popped or removed first. So stack is
called 'last in first out' structure, what goes in
last comes out first. 'last in first out', in short is called
'LIFO'. Logically a stack is represented
something like this: As a three sided figure, as a container open from one side. This is representation
of an empty stack. Let's name this stack 's'.
Let's say this figure is representing a stack of integers. Right now the stack is empty. I will
perform push and pop operations to insert and remove integers from the
stack. I will first write down the operations here and
then show you what will happen in the logical
representation. Let's first perform a 'push'. I want to 'push' number 2 on to
the stack. The stack is empty right now, so we
can not 'pop' anything. After the 'push', stack will look
something like this: There is only one integer in the stack, so
of course its on 'top'. Let's 'push' another integer. This time, I want to 'push' number 10. And now lets say we want to perform a 'pop'. The integer at 'top' right now is 10. With a 'pop', it will be removed from
the stack. Let's do few more 'push'. I just pushed
7 and 5 onto the stack. At this stage, if I will call 'top'
operation, it will return me number 5. 'IsEmpty' will return me false. At this stage, a 'pop' will remove 5 from the stack. As you can see the element, the
integer which is coming last, is going out first, That's why we call
stack 'last in first out' data structure. We can 'pop' till the stack gets empty. One more 'pop', and stack will be empty. So this pretty much is stack data
structure. Now one obvious question can be what are the real scenarios where stack helps us. Let's list down some of the
applications of stack. Stack data structure is used for
execution of function calls in a program. We have talked about this quite a bit in
our lessons on dynamic memory allocation and linked lists. We can also say that stack is used for
recursion, because recursion is also a chain of function
calls. It's just that, all the calls are to the same function.
To know more about this application, you can check the description of this video,
for a link to 'MyCodeSchool' lesson on dynamic memory allocation. Another application of stack is we can
use it to implement undo operation, in an editor. We can perform undo
operation in any text editor or image editor. Right now,
I'm pressing 'Ctrl Z', and as you can see some of the text
that I have written, is getting cleared. You can implement this using a stack. Stack is used in a number of important
algorithms, like for example a compiler verifies
whether parentheses in a source code are
balanced or not using Stack data structure. Corresponding
to each opening curly brace or opening
parentheses in a source code, there must be a closing parentheses at appropriate
position. And if parentheses in a source code are
not put properly, if they're not balanced, compiler should throw error and this check can be
performed using a stack. We will discuss some of these problems
in detail in coming lessons. This much is good for an introduction. In
our next lesson we will discuss implementation of stack. This is it for
this lesson. Thanks for watching!!",Data structures: Introduction to stack,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described stack data structure as abstract data type. 

Lesson on Dynamic memory allocation:
http://www.youtube.com/watch?v=_8-ht2AKyH4

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,F1F2imiOJfk
Visualizationsofleftnullspaceandrowspace_LinearAlgebra_KhanAcademy-GW8ZPjGlk24.en.csv,"In the last video I had this 2
by 3 matrix A right here, and we figured out all of the
subspaces that are associated with this matrix. We figured out its null space,
its column space, we figured out the null space and column
space of its transpose, which you could also call the left
null space, and the row space, or what's essentially the space
spanned by A's rows. Let's write it all in one place,
because I realize it got a little disjointed, and see
if we can visualize what all of these look
like, especially relative to each other. So let me copy and paste
my original matrix. Copy, and then let me scroll
down here and paste it over here, and hit paste. Let me see if I can find
our key takeaways from the last video. So our column space right here,
of A, was this thing right here. Let me write this. This was our column space. It was the span of the
R2 vector 2, 4. Let me copy that. Copy that and bring it down. Hit paste. This was our column space. Let me write that. This is the column space of A. It was equal to that
right there. And now what other things
do we know? Well, we know that the left null
space was a span of 2, 1. Let me write that. So our left null space, or the
null space of our transpose, either way, it was equal to the
span of the R2 vector 2, 1, just like that. And then what was
our null space? Our null space we figured
out in the last video. Here it is. It's the span of these
two R3 vectors. Let me copy and paste that. Hit copy. Let me go down here. Let me paste it. So that was our null
space right there. And then finally, what
was our row space? What was our row space or the
column space of our transpose? So the column space of our
transpose was the span of this R3 vector right there, So it
was this one right here. So let me copy and paste it. Copy and scroll down, and we can
paste it just like that. OK, let's see if we can
visualize this now, now that we have them all in one place. So first of all, if we imagine
a transformation, x, that is equal to A times x, our
transformation is going to be a mapping from what? x would be
a member of R3, so R3 would be our domain. So it would be a mapping from
R3 and then it would be a mapping to R2 because we have
two rows here, right? You multiply a 2-by-3 matrix
times a 3-by-1 vector, and you're going to get a 2-by-1
vector, so it's going to be a mapping to R2. So that's our codomain. So let's draw our domains
and our codomains. I'll just write them very
generally right here. So you could imagine
R3 is our domain. And then our codomain is going
to be R2 just like that. And our T is a mapping, or you
could even imagine A is a mapping between any vector there
and any vector there when you multiply them. Now, what is our column
space of A? Our column space of A is the
span of the vector 2 minus 4. It's an R2 vector. This is a subspace of R2. We could write this. So let me write this. So our column space of A, these
are just all of the vectors that are spanned
by this. We figured out that these guys
are just multiples of this first guy, or we could have
done it the other way. We could have said this guy and
that guy are multiples of that guy, either way. But the basis is just one
of these vectors. We just have to have one of
these vectors, and so it was equal to this right here. So the column space
is a subset of R2. And what else is
a subset of R2? Well, our left null space. Our left null space is
also a subset of R2. So let's graph them, actually. So I won't be too exact,
but you can imagine. Let's see, if we draw the
vector 2, 4-- let me draw some axes here. Let me scroll down
a little bit. So if you have some vector--
let me draw my-- do this as neatly as possible. That's my vertical axis. That is my horizontal axis. And then, what does the span of
our column space look like? So you draw the vector 2, minus
4, so you're going to go out one, two, and then you're
going to go down one, two, three, four. So that's what that
vector looks like. And the span of this vector
is essentially all of the multiples of this vector, where
you could say linear combinations of it, but you're
taking a combination of just one vector, so it's just going
to be all of the multiples of this vector. So if I were to graph it, it
would just be a line that is specified by all of the linear
combinations of that vector right there. This right here is a graphical
representation of the column space of A. Now, let's look at the left null
space of A, or you could imagine, the null space
of the transpose. They are the same thing. You saw why in the last video. What does this look like? So the left null space
is a span of 2, 1. So if you graph 2, and then you
go up 1, it's the graph of 2, 1, and it looks like this. Let me do it in a
different color. So that's what the vector
looks like. The vector looks like that,
but of course, we want the span of that vector, so it's
going to be all of the combinations. All you can do when you combine
one vector is just multiply it by a bunch of
scalars, so it's going to be all of the scalar multiples
of that vector. So let me draw it like that. It's going to be like that. And the first thing you might
notice, let me write this. This is our left null space
of A or the null space of our transpose. This is equal to the left
null space of A. And actually, since we're
writing, we wrote this in terms of A transpose. It's the null space of A
transpose, which is the left null space of A. Let's write the column
space of A also in terms of A transpose. This is equal to the row space
of A transpose, right? If you're looking at the columns
of A, everything it spans, the columns of A are the
same things as the rows of A transpose. But the first thing that you
see, when I just at least visually drew it like this, is
that these two spaces look to be orthogonal to each other. It looks like I drew it in R2. It looks like there's a
90-degree angle there. And if we wanted to verify it,
all we have to do is take the dot product. Well, any vector that is in our
column space, you could take an arbitrary vector that's
in our column space, it's going to be equal
to c times 2 minus 4. So let me write that down. I want this stuff up here. I'll scroll down a little bit. Let's say v1 is a member
of our column space. And that means that v1 is going
to be equal to some scalar multiple times the
spanning vector of our column space, so some scale or
multiple of this. So we could say it's equal
to c1 times 2 minus 4. That's some member of
our column space. Now, if we want some member of
our left null space-- let's write it here. So let's say that v2 is some
member of our left null space, or the null space of
the transpose, then what does that mean? That means v2 is going to be
equal to some scalar multiple of the spanning vector of our
left null space of 2, 1. So any vector that's in our
column space could be represented this way. Any vector in our left
null space can be represented this way. Now, what happens if you take
the dot product of these two characters? So let me do it down here. I want to save some space for
what we're going to do in R3, but let me take the dot
product of these two characters. So v1 dot v2 is equal to--
I'll arbitrarily switch colors-- c1 times 2 minus
4 dot c2 times 2, 1. And then the scalars, we've
seen this before. You can just say that this is
the same thing as c1, c2 times the dot product of 2
minus 4 dot 2, 1. And then what is
this equal to? This is going to be equal to
c1, c2 times 2 times 2 is 4 plus minus 4 times 1: minus 4. Well, this is going to be equal
to 0, so this whole expression is going
to be equal to 0. And this was for any two vectors
that are members of our column space and our
left null space. They're orthogonal
to each other. So every member of our column
space is going to be orthogonal to every member of
our left null space, or every member of the null space of our
transpose, and that was the case in this example. It actually turns out this is
always going to be the case, that your column space of
a matrix, its orthogonal complement is the left null
space, or the null space of its transpose. I'll prove that probably in the
next video, either in the next video or the video after
that, but you can see it visually for this example. Now let's draw the other two
characters that we're dealing with here. So we have our null space, which
is the span of these two vectors in R3. It's a little bit more difficult
to draw it, these two vectors in R3 right there. But what is the span of
two vectors in R3? All of the linear combinations
of two vectors in R3 is going to be a plane in R3. So I'll draw it in just very
general terms right here. If we draw it in just very
general terms, let me see. So it's a plane in R3 that
looks like that. Maybe I'll fill in the plane
a little bit, give you some sense of what it looks like. This is the null space of A. It's spanned by these
two vectors. Now, you could imagine these
two vectors look something like-- I'm drawing it very
general, but if you take any linear combinations of these two
guys, you're going to get any vector that's along this
plane that goes in infinite directions. And, of course, the origin
will be in these. All of these are valid
subspaces. Now, what does the row
space of A look like? Or you could say the column
space of A transpose? Well, it's the span of this
vector in R3, but let's see something interesting about
this vector in R3. How does it relate to
these two vectors? Well, you may not see it
immediately, although if you look at it closely, it might pop
out at you, that this guy is orthogonal to both
of these guys. Notice, if you take the dot
product of 2 minus 1 minus 3, and you dotted it with 1/2, 1,
0, what are you going to get? You're going to get 2 times 1/2,
which is 1, plus minus 1 times 1, which is minus
1, plus minus 3 times 0, which is 0. So that's when I dotted that guy
with that guy right there. And then, when I take the dot
of this guy with that guy, what do you get? You get 3/2, 0 and 1, dotted
with-- let me scroll down a little bit. I don't want to write too
small-- dotted with 1, dotted with 2 minus 1 minus 3. In the row space of A,
I wrote the spanning vector there this time. I probably shouldn't have
switched the order. But here, I'm dotting it with
this guy, and then here, I'm dotting it with this
guy right there. So if you take it, 3/2 times 2
is equal to 3 plus 0 times minus 1 is 0, plus 1 times minus
3 is minus 3, so it's equal to 0. So the fact that this guy is
orthogonal to both of these spanning vectors, it also means
that it's orthogonal to any linear combination
of those guys. Maybe it might be useful
for you to see that. So let's take some member
of our null space. So let's say the vector v3 is
a member of our null space. That means it's a linear
combination of that guy and that guy. Those are the two spanning
vectors. I'd written it up here. These are our two spanning
vectors. I need the space down here,
so let me scroll down a little bit. These are the two spanning
vectors. So that means that v3 can be
written as some linear combination of these two guys
that I squared off in pink. So let me just write it as maybe
A times 3/2, 0, 1 plus b times 1/2, 1, 0. Now, what happens if I take the
dot product of v3 and I dot it with any member of
my row space right here? So any member of my row space
is going to be a multiple of this guy right here. That is the spanning vector
of my row space. Just let me actually
create that. So let me say that v4 is a
member of my row space, which is the column space of
the transpose of A. And that means that v4 is equal
to, let's say, some scaling vector. I always use c a lot. Let me use d. Let's say it's d times
my spanning vector. d times 2 minus 1, 3. So what is v3, which is just
any member of my null space dotted with v4, which is any
member of my row space? So what is this going
to be equal to? This is going to be
equal to this guy. So let me write it like this. A times 3/2, 0, 1 plus v times
1/2, 1, 0 dotted with this guy, dot d times 2 minus 1, 3. Now, what is this going
to be equal to? Well, we know all of
the properties of vector dot products. We can distribute it and then
take the scalars out. So this is going to be equal
to-- I'll skip a few steps here, but it's going to be equal
to-- ad times the dot product of 3/2, 0, 1, dot 2
minus 1, 3-- just distribute it out to here-- plus bd times
the dot product of 1/2, 1, 0, dotted with 2 minus 1, 3. This is the dot product. I just distributed this
term along these two terms right here. And we already know what these
dot products are equal to. We did it right here. This dot product right here
is that dot product. I just switched the order,
so this is equal to 0. And this dot product is that dot
product, so this is also equal to 0. So you take any member of your
row space and you dot it with any member of your null space,
and you're going to get 0, or any member of your row space is
orthogonal to any member of your null space. And I did all of that to
help our visualization. So we just saw that any member
of our row space, which is the span of this vector, is
orthogonal to any member of or null space. So my row space, which is just
going to be a line in R3 because it's just a multiple
of a vector. It's going to look like this. It's going to be a line,
and then it's going to maybe go behind it. You can't see it there. It's going to look like that,
but it's going to be orthogonal. So let me draw it. So this pink line right here in
R3, that is our row space of A, which is equal to the
column space of A transpose because the rows of A are the
same thing as the columns of A transposed, and the row space
is just the space spanned by your row vectors. And then this is the null space
of A, which is a plane. It's spanned by two
vectors in R3. Or we could also call
that the left null space of A transpose. And I never used this term in
the last video, but it's symmetric, right? If the null space of A transpose
is the left null space of A, then the null space
of A is the left null space of A transpose, which is
an interesting takeaway. Notice that you have here the
row space of A is orthogonal to the null space of A. And here, you have the row
space of A transpose is orthogonal to the null
space of A transpose. Or you could say the left null
space of A is orthogonal to the column space of A. Or you could say the left null
space of A transpose is orthogonal to the column
space of A transpose. So these are just
very interesting takeaways, in general. And just like I said here, that
look, these happen to be orthogonal. These also happen to
be orthogonal. And this isn't just some
strange coincidence. In the next video or two, I'll
show you that this space, this pink space, is the orthogonal
complement of the null space right here, which means it
represents all of the vectors that are orthogonal
to the null space. And these two guys
are orthogonal complements to each other. They each represent all of the
vectors that are orthogonal to the other guy in their
respective spaces.",Visualizations of left nullspace and rowspace | Linear Algebra | Khan Academy,"Relationship between left nullspace, rowspace, column space and nullspace.

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-rank-a-rank-transpose-of-a?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-rowspace-and-left-nullspace?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,GW8ZPjGlk24
Datastructures-BinaryTree-H5JubkIy_p8.en.csv,"In our previous lesson, we introduced you
to tree data structure. We discussed tree as a logical model and talked
briefly about some of the applications of tree. Now, in this lesson we will talk a little
bit more about binary trees. As we had seen in our previous lesson, binary
tree is a tree with this property that each node in the tree can have at most 2 children. We will fist talk about some general properties
of binary tree and then we can discuss some special kind of binary trees like binary search
tree which is a really efficient structure for storing ordered data. In a binary tree as we were saying, each node
can have at most 2 children. In this tree that I have drawn here, nodes
have either 0 or 2 children. We could have a node with just one child. I have added one more node here and now we
have a node with just one child. Because each node in a binary tree can have
at most 2 children, we call one of the children left child and another right child. For the root node, this particular node is
left child and this one is right child. A node may have both left and right child. These 4 nodes have both left and right child
or a node can have either of left and right child. This one has got a left child, but has not
got right child. I'll add one more node here. Now this node has a right child, but does
not have a left child. In a program, we would set the reference or
pointer to left child as NULL. So, we can say that for this node left child
is NULL and similarly for this node, we can say that the right child is NULL. For all the other nodes that do not have children,
that are leaf nodes, a node with 0 child is called leaf node. For all these nodes, we can say that both
left and right child are NULL. Based on properties, we classify binary trees
into different types. I'll draw some more binary trees here. If a tree has just one node, then also its
a binary tree. This structure is also a binary tree. This is also a binary tree. Remember, the only condition is that a node
cannot have more than 2 children. A binary tree is called strict binary tree
or proper binary tree if each node can have either 2 or 0 children. This tree that I am showing here is not a
strict binary tree because we have 2 nodes that have one child. I'll get rid of 2 nodes and now this is a
strict binary tree. We call a binary tree complete binary tree
if all levels except possibly the last level are completely filled and all nodes are as
far left as possible. All levels except possibly the last level
will anyway be filled. So, the nodes at the last level, if its not
filled completely must be as far left as possible. Right now this tree is not a complete binary
tree. Nodes at same depth can be called nodes at
same level. Root node in a tree has depth 0. Depth of a node is defined as length of path
from root to that nodes. In this figure lets say nodes at depth 0 are
nodes at level 0. I can simply say L-0 for level 0. Now, these two nodes are at level 1, these
4 nodes are at level 2 and finally these 2 nodes are at level 3. The maximum depth of any node in the tree
is 3. Maximum depth of a tree is also equal to height
of the tree. if we will go numbering all the levels in
the tree like L-0, L-1, L-2 and so on, then the maximum number of nodes that we can have
at some level i, will be equal to 2 to the power i. At level 0, we can have 1 node, 2 to the power
0 is 1. Then at level 1, we can have at max 2 nodes. At level 2 , we can have 2 to the power 2
nodes at max which is 4. So, in general at any level i, we can have
at max 2 to the power i nodes. You should be able to see this very clearly. Because each node can have 2 children, so
if we have x nodes at a level, then each of these x nodes can have 2 children. So, at next level, we can have at most 2x
children. Here in this binary tree, we have 4 nodes
at level 2 which is the maximum for level 2. Now, each of these nodes can possibly have
2 children. I am just drawing the arrows here. So, at level 3, we can have max 2 times 4
i.e 8 nodes. Now, for a complete binary tree, all the levels
have to be completely filled. We can give exception to the last level or
deepest level. It doesn't have to be full. But the nodes have to be as left as possible. This particular tree that I am showing here
is not a complete binary tree because we have 2 vacant node positions in left here. I'll do slight change in this structure. Now this is a complete binary tree. We can have more nodes at level 3, but there
should not be a vacant position left. I have added one more node here and this still
is a complete binary tree. if all the levels are completely filled, such
a binary tree can also be called perfect binary tree. In a perfect binary tree, all levels will
be completely filled. If h is the height of a perfect binary tree,
remember height of a binary tree is length of longest path between root to any of the
leaf nodes or i should say number of edges in longest path from root to any of the leaf
nodes. Height of a binary tree will also be equal
to max depth, Here, for this binary tree, max depth is 3. Maximum number of nodes in a tree with height
h will be equal to, we will have 2 to the power 0 nodes at level 0, 2 to the power 1
nodes at level 1 and we'll go on summing for height h, we will go till 2 to the power h. At deepest level, we will have 2 to the power
h nodes. Now this will be equal to 2 to the power h
plus 1 minus 1. h+1 is number of levels here. We can say that 2 to the power number of levels
minus 1. In this tree, number of levels is 4. We have L0 till L3. So, number of nodes, maximum number of nodes
will be 2 to the power 4 minus 1 which is 15. So, a perfect binary tree will have maximum
number of nodes possible for a height because all levels will be completely filled. Well, I should say maximum number of nodes
in a binary tree with height h. Ok, I can ask you this also. What will be height of a perfect binary tree
with N nodes. Lets say N is number of nodes in a perfect
binary tree. To find out height, we'll have to solve this
equation n = 2^h+1 - 1 because if height is h, number of nodes will be 2 to the power
(h+1) minus 1. We can solve this equation and the result
will be this. Remember n is number of nodes here. I'll leave the maths for you to understand. Height will be equal to log (n+1) to the base
2 minus 1. In this perfect binary tree that I am showing
here, number of nodes is 15. So, n is 15. (n+1) will be 16. So, h will be log 16 to the base 2 minus 1. log 16 to the base 2 will be 4. So, the final value will be 4-1 equal 3. In general, for a complete binary tree, we
can also calculate height as floor of log n to the base 2. So, we need to take integral part of log n
to the base 2. Perfect binary tree is also a complete binary
tree. Here n is 15. log of 15 to base 2 is 3.906891. if we'll
take the integral part, then this will be 3. I'll not go into proof of how height of complete
binary tree will be log n to the base 2. We'll try to see that later. All this maths will be really helpful when
we will analyze cost of various operations on binary tree. Cost of a lot of operations on tree in terms
of time depends upon the height of tree. For example, in binary search tree which is
a special kind of binary tree, the cost of searching, inserting or removing an element
in terms of time is proportional to the height of tree. So, in such case we would want the height
of the tree to be less. Height of a tree will be less if the tree
will be dense, If the tree will be close to a perfect binary tree or a complete binary
tree. Minimum height of a tree with n nodes can
be log n to the base 2 when the tree will be a complete binary tree. if we will have an arrangement like this,
then the tree will have maximum height. With n nodes, minimum height possible is floor
of or integral part of log n to the base 2 and maximum height possible with n nodes in
n-1 when we will have a sparse tree like this which is as good as a linked list. Now, think about this. If I'm saying that time taken for an operation
is proportional to height of the tree or in other words I can say that if time complexity
of an operation is big-oh of h where h is height of the binary tree, then for a complete
or perfect binary tree, my time complexity will be big-oh of log n to the base 2 and
in worst case for this sparse tree, my time complexity will be big-oh of n. Order of log n is almost best running time
possible. For n as high as 2 to the power 100, log n
to the base 2 is just 100. With order of n running time, if n will be
2 to the power 100, we won't be able to finish our computation in years even with most powerful
machines ever made. So, here is the thing. Quite often, we want to keep the height of
a binary tree minimum possible or most commonly, we say that we try to keep a binary tree balanced. We call a binary tree balanced binary tree,
if for each node, the difference between height of left and right sub-tree is not more than
some number k. Mostly k would be 1. So, we can say that for each node, difference
between height of left and right sub-tree should not be more than 1. There is something that I want to talk about
height of a tree. We had defined height earlier as number of
edges in longest path from root to a leaf. Height of a tree with just one node where
the node itself will be a leaf node will be 0. We can define an empty tree as a tree with
no node and we can say that height of an empty tree is -1. So, height of tree with just one node is 0
and height of an empty tree is -1. Quite often, people calculate height as number
of nodes in longest path from root to a leaf. In this figure, I have drawn one of the longest
paths from root to a leaf. We have 3 edges in this path. So, the height is 3. If we will count number of nodes in the path,
height will be 4. This looks very intuitive and I have seen
this definition of height at lot of places. if we will count the nodes, height of tree
with just one node will be equal to 1 and then we can say that height of an empty tree
will be 0, but this is not the correct definition and we are not going to use this assumption. We are going to say that height of an empty
tree is -1 and height of tree with one node is 0. The difference between heights of left and
right sub-trees of a node can be calculated as absolute value of height of left subtree
minus height of right subtree and in this calculation, height of a sub-tree can be -1
also. For this leaf node here in this figure, both
left and right sub-trees are empty, so both hleft or height of left sub-tree and hright
or height of right sub-tree will be -1, but the difference overall will be 0. For all nodes in a perfect tree, difference
will be 0. I have got rid of some nodes in this tree
and now by the side of each node, I have written the value of diff. This is still a balanced binary tree because
the maximum diff for any node is 1. Lets get rid of some more nodes in this tree
and now this is not balanced because one of the nodes has diff 2. For this particular node, height of left sub-tree
is 1 and height of right sub-tree is -1 because right sub-tree is empty. So, the absolute value of difference is 2. We try to keep a tree balanced to make sure
its dense and its height is minimized. If height is minimized, cost of various operations
that depend upon height are minimized. Ok, the next thing that I want to talk about
very briefly is how we can store binary trees in memory. One of the ways that we had seen in our previous
lesson which is most commonly used is dynamically created nodes linked to each other using pointers
or references. For a binary tree of integers, in C or C++,
we can define node like this - data type here is integer, so we have a field to store data
and we have two pointer variables, one to store address of left child and another to
store address of right child. This of course is the most common way. Nodes dynamically created at random locations
in memory linked together through pointers, but in some special cases, we use arrays also. Arrays are typically used for complete binary
trees. I have drawn a perfect binary tree here. Lets say this is a tree of integers. What we can do is, we can number these nodes
from 0 starting at root and going level by level from left to right. So, we will go like 0, 1 , 2 , 3 , 4, 5 and
6. Now, I can create an array of 7 integers and
these numbers can used as indices for these nodes. So, at 0th position, I'll fill 2, at 1th position
I'll fill 4, at 2th position, we will have 1 and I'll go on like this. We have filled in all the data in the array,
but how will we store that information about the links. How will we know that the left child of root
has value 4 and the right child of root has value 1? Well, in case of complete binary tree, if
we will number the nodes like this that for a node at index i, the index of left child
will be 2*i+1 and the index of right child will be 2i+2 and remember this is true only
for a complete binary tree. For 0, left child is - 2i+1 for i = 0 will
be 1 and 2i+2 will be 2. Now, for 1, left child is at index 3, right
child is at index 4. For i =2, 2i+1 will be 5 and 2i+2 will be
6. We will discuss array implementation in detail
when we will talk about a special kind of binary tree called heap. Arrays are used to implement heaps. I'll stop here now. In our next lesson, we will talk about binary
search tree which is also a special kind of binary tree that gives us a really efficient
storing structure in which we can search something quickly as well as update it quickly. This is it for this lesson. Thanks for watching !!",Data structures: Binary Tree,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have discussed binary tree in detail. We have talked about different types of binary tree like ""complete binary tree"", ""perfect binary tree"" and ""balanced binary tree"" and their properties. We have also discussed how cost of operations in a tree may depend upon height of the tree and why we want a tree to be dense and its height to be minimum. Finally, we talked about two possible implementations of binary tree - a)  using dynamically created nodes and b)  using arrays. 

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,H5JubkIy_p8
nxndeterminant_Matrixtransformations_LinearAlgebra_KhanAcademy-H9BWRYJNIv4.en.csv,"So far we've been able to define
the determinant for a 2-by-2 matrix. This was our definition right
here: ad minus bc. And then we were able to broaden
that a bit by creating a definition for the determinant
of a 3-by-3 matrix, and we did that right
here, where we essentially said the determinant is equal
to each of these terms-- you could call these maybe the
coefficient terms-- times the determinant of the matrix-- you
can kind of view it as the submatrix produced-- when you
get rid of each of these guys' column and row. So when you got rid of this
guy's column and row, you're left with this matrix. So we said this guy times
the determinant of this. And we kept switching signs,
minus this guy times the determinant, if you move
his column and his row. So it was left with these terms
right there to get that determinant. Then finally, you switched
signs again. So plus this guy times the
determinant of the 2-by-2 matrix if you get rid of this
row and this column. So this thing right here,
which was this matrix. Now let's see if we can
extend this to a general n-by-n matrix. So let's write out our n-by-n
matrix right over here. I'll do it in blue. So let's say I have some matrix
A that is an n-by-n matrix, so it's going
to look like this. This would be a11, that would
be a12, and we would go all the way to-- you're going
to have n columns, a1n. And when you go down, this is
going to be your second row: a21, and it's going to go all
the way down to an1, because you have n rows as well. And then if you go down the
diagonal all the way, this right here would be ann. So there is my n-by-n matrix. Now, before I define how to find
the determinant of this, let me make another
definition. Let me define-- so this
is my matrix A. Let me define a submatrix Aij to
be equal to-- see this is n by n, right? So this is going to be an n
minus 1 by n minus 1 matrix. So if this is 7 by 7, the
submatrix is going to be 6 by 6, one less in each direction. So this is going to be the n
minus 1 by n minus 1 matrix you get if you essentially
ignore or if you take away-- maybe I should say take away. Let's say ignore, like
the word ignore. If you ignore the i-th row, this
right here is the row, the i-th row and the
j-th column of a. So, for example, let's go back
to our 3 by 3 right here. This thing could be denoted
based on that definition I-- we could have called
this, this was a11, this term right here. We could denote the matrix when
you get rid of the first column and the first row or the
first row and the first column, we could call this thing
right here, we could call that big matrix A11. So this was big matrix A11. This is big matrix A21, or
actually, this matrix was called C, so this would
be C11 right there. We could call this one, this
would be matrix C12. Why is that? Because if you get rid of the
first row, let me get rid of the first row, right? The first term is your row. If you get rid of the first
row and the second column, this is the matrix that's
left over: 2, 3, 4, 1. So this is this guy
and this guy. 2, 3, 4, 1. So this is the submatrix c
because this is the big matrix C, But this one is C12. I know it's a little
bit messy there. So that's all we mean
by the submatrix. Very similar to what we did
in the 3 by 3 case. You essentially get rid of--
so if you want to find out this guy's submatrix, you would
call that a11, and you would literally cross out the
first row and the first column, and everything
left over here would be that submatrix. Now, with that out of the way,
we can create a definition, and it might seem a little
circular to you at first, and on some level it is. We're going to define the
determinant of A to be equal to-- this is interesting. It's actually a recursive
definition. I'll talk about that
in a second. It's equal to-- we start
with a plus. It's equal to a11 times the
submatrix if you remove this guy's row and column. So that, by definition, is
just A, big capital A11's determinant. So that's exactly what we did. Let me write that a
little bit neater. So times the determinant of
its submatrix, so the determinant of A11. So you take A11, you get rid of
its column and its row or its row and its column, and
everything else, you find the determinant of that. Actually, let me write it
in terms of-- let me write it this way. a11 times the determinant
of the submatrix A11. And then we switch sides. We're just going to go along
this row, and then you do minus a12 times the determinant
of its submatrix, which we'll just call A12. We would get rid of this row
and this column, and everything left would
be this matrix A12. We want to find its
determinant. And then we'll take the next
guy over here would be a13. So we switch signs with minus. Now, you go plus,
so a13 times the determinant of its submatrix. So if this is n by n, these each
are going to be n minus 1 by n minus 1. So the determinant of A13. And you're just going to keep
doing that, keep switching signs, so it's going to be a
minus and then a plus and you keep going all the way--
and then I don't know. It depends on whether an,
whether we're dealing with an odd number or an even number. If we're dealing with an even
number, this is going to be a minus sign. If it's an odd number, it's
going to be a plus sign, but you get the idea. It's either going to be a plus
or a minus, not just-- if it's odd, this is going
to be a plus. If it's an even n, it's going to
be a minus, All the way to a1n, the n-th column times
its submatrix, A1n. With that submatrix, you get rid
of the first row and the n-th column, and it's going
to be everything that's left in between. And you immediately might
say, Sal, what kind of a definition is this? You defined a determinant for an
arbitrary n-by-n matrix in terms of another definition
of a determinant. How does this work? And the reason why this works
is because the determinant that you use in the definition
are determinants of a smaller matrix. So this is a determinant of an n
minus 1 by n minus 1 matrix. And you're saying hey, Sal, that
still doesn't make any sense because we don't know how
to find the determinant of an n minus 1 by n
minus 1 matrix. Well, you apply this definition
again, and then it's going to be in terms of n
minus 2 times n-- or n minus 2 by n minus 2 matrices. And you're like how
do you do that? Well, you keep doing it, and
you're going to get all the way down to a 2-by-2 matrix. And that one we defined well. We defined the determinant of
a 2-by-2 matrix not in terms of a determinant. We just defined it in terms of
a times-- we defined it as-- let me write it up here. It was a times d minus
b times c. And you can see. I mean, we could just go down to
the 3 by 3, but the 2 by 2 is really the most fundamental
definition. And you could see that the
definition of a 3-by-3 determinant is a special
case of the general case for an n by n. We take this guy and we
multiply him times the determinant of his submatrix
right there. Then we take this guy where
we switch signs. We have a minus. And we multiply him times the
determinant of his submatrix, which is that right there. Then you do a plus. You switch signs and then you
multiply this guy times the determinant of his submatrix,
which is that right there. So this is a general case
of what I just defined. But we know it's never that
satisfying to deal in the abstract or the generalities. We want to do a specific case. And actually, before I do that,
let me just introduce a term to you. This is called a recursive
formula. And if you become a computer
science major, you'll see this a lot. But a recursive function or a
recursive formula is defined in terms of itself. But the things that you use in
the definition use a slightly simpler version of it, and as
you keep going through, or you keep recursing through it, you
get simpler and simpler versions of it until you get
to some type of base case. In this case, our base case is
the case of a 2-by-2 matrix. You keep doing this, and
eventually you'll get to a determinant of a 2-by-2 matrix,
and we know how to find those. So this is a recursive
definition. But let's actually apply it
because I think that's what actually makes things
concrete. So let's take-- this is going
to be computationally intensive, but I think if we
focus, we can get there. So I'm going to have a 4-by-4
matrix: 1, 2, 3, 4. 1-- throw some zeroes in there
to make the computation a little bit simpler, 0, 1, 2,
3, and then 2, 3, 0, 0. So let's figure out this
determinant right there. This is the determinant
of the matrix. If I put some brackets
there that would have been the matrix. But let's find the determinant
of this matrix. So this is going to be equal
to-- by our definition, it's going to be equal to 1 times the
determinant of this matrix right here if you get rid of
this row and this column. So it's going to be 1 times the
determinant of 0, 2, 0; 1, 2, 3; 3, 0, 0. That's just this guy right here,
this matrix right there. Then I'm going to have a 2, but
I'm going to switch signs. So it's minus 2 times the
determinant if I get rid of that row and this column,
so it's 1, 2, 0. I'm ignoring the zero because
it's in the same column as the 2: 1, 2, 0; 0, 2, 3,
and then 2, 0, 0. And then I switch signs again. It was a minus, so now
I go back to plus. So I do that guy, so
plus 3 times the determinant of his submatrix. Get rid of that row and get
rid of that columm, I get a 1, 0, 0. I get a 0, 1, 3. I skip this column every time. Then I get a 2, 3, 0,
just like that. We're almost done. One more in this column. Let me switch to
another color. I haven't used the
blue in this yet. So then I'm going
to do a minus 4. Remember, it's plus, minus,
plus, minus 4 times the determinant of its submatrix. That's going to be
that right there. So it's 1, 0, 2; 0, 1, 2;
2, 3, 0, just like that. And now we're down to
the 3-by-3 case. We could use the definition of
the 3 by 3, but we could just keep applying this recursive
definition. So this is going to be equal
to-- let me write it here. It's 1 times-- what's
this determinant? This determinant's going to be
0 times the determinant of that submatrix, 2, 3, 0, 0. That was this one right here. And then we have minus 2, minus
this 2-- remember, we switched signs-- plus, minus,
plus, so minus 2 times its submatrix, so it's 1, 3, 3, 0. And then finally plus 0 times
its submatrix, which is this thing right here: 1, 2,
3, 0, just like that. And then we have this
next guy right here. As you can see, this can get a
little bit tedious, but we'll keep our spirits up. So minus 2 times 1 times its
submatrix, so that's this guy right here-- times the
determinant of its submatrix 2, 3, 0, 0. Then minus 2 times-- get
rid of that row, that column-- 0, 3, 2, 0. And then plus 0 times
0, 2, 2, 0. That's this one right there. Halfway there, at
least for now. And then we get this next one,
so we have a plus 3. Bring out our parentheses. And then we're going to have 1
times its sub-- I guess call it sub-determinant. So 1 times the determinant
1, 3, 3, 0, right? You get rid of this guy's row
and column, you get this guy right there. And then minus 0-- get rid
of this row and column-- times 0, 3, 2, 0. Then you have plus 0 times its
sub-determinant 0, 1, 2, 3. Three-fourths of
the way there. One last term. Let's hope we haven't made
any careless mistakes. Minus 4 times 1 times 1,
2, 3, 0 right there. Minus 0 times-- get rid of those
two guys-- 0, 2, 2, 0. And then plus 2 times
0, 1, 2, 3, right? Plus 2-- get rid of these
guys-- 0, 1, 2, 3. Now, we've defined or we've
calculated or we've defined our determinant of this matrix
in terms of just a bunch of 2-by-2 matrices. So hopefully, you saw in this
example that the recursion worked out. So let's actually find what
this number is equal to. A determinant is always just
going to be a number. So let me get a nice
vibrant color. This is 0 times--
I don't care. 0 times anything's
going to be 0. 0 times anything is
going to be 0. 0 times anything's
going to be 0. 0 times anything's
going to be 0. Just simplifying it. These guys are 0 because
it's 0 times that. 0 times this is going
to be equal to 0. So what are we left with? This is going to be equal to 1
times-- this is all we have left here is a minus 2 times--
and what is this determinant? It's 1 times 0, which is 0. It's 0-- let me write this. This is going to be 1 times 0
is 0, minus 3 times 3 is 0 minus 9, so minus 9. This right here is
just minus 9. So minus 2 times minus 9. That's our first thing, I'll
simplify it in a second. Now let's do this
term right here. So it's minus 2 times-- now
what's this determinant? 2 times 0 minus 0 times 3. That's 0 minus 0. So this is 0. That guy became 0, so we
can ignore that term. This term right here is
0 times 0, which is 0, minus 2 times 3. So it's minus 6. So it's minus 2 times-- so this
is a minus 6 right here. You have a minus 2 times a minus
6, so that's a plus 12. So I'll just write
a plus 12 here. This minus 2 is that minus
2 right there. And then we have a plus 3. And then this first term is 1
times 0, which is 0, minus-- let me make the parentheses
here-- 1 times 0, which is 0, minus 3 times 3, which
is minus 9 times 1. So it's minus 9. Everything else was a 0. We're in the home stretch. We have a minus 4. Let's see, this is 1 times 0,
which is 0, minus 3 times 2, so minus 6. So this is minus 6 right here. Minus 6, this is 0, and then we
have this guy right here. So we have 0 times 3, which
is 0, minus 2 times 1. So that's minus 2, and then
you have a minus 2 times a plus 2 is minus 4. So now we just have
to make sure we do our arithmetic properly. This is 1 times plus 18,
so this is 18, right? Minus 2 times minus 9. This right here is minus 24. This right here is minus 27. And then this right here, let's
see, this is minus 10 right here. That is minus 10. Minus 4 times minus
10 is plus 40. Let's see if we can simplify
this a little bit. If we simplify this a little
bit-- I don't want to make a careless mistake right
at the end. So 18 minus 24, 24 minus 18 is
6, so this is going to be equal to minus 6, right? 18 minus 24 is minus 6. And then-- let me do it in
green-- now what's the difference? If we have minus 27 plus
40, that's 13, right? It's positive 13. So minus 6 plus positive
13 is equal to 7. And so we are done! After all of that computation,
hopefully we haven't made a careless mistake. The determinant of this
character right here is equal to 7. The determinant is equal to 7. And so the one useful takeaway,
we know that this is invertible because it has
a non-zero determinant. Hopefully, you found
that useful.",n x n determinant | Matrix transformations | Linear Algebra | Khan Academy,"Defining the determinant for nxn matrices. An example of a 4x4 determinant.

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-determinants-along-other-rows-cols?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-3x3-determinant?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,H9BWRYJNIv4
DataStructures-Listasabstractdatatype-HdFG8L1sajw.en.csv,"In our previous lesson, we introduced you
to the concept of data structures and we saw how we can talk about data
structures in two ways, one as a mathematical and logical model  that we also call, that we also term as an abstract data type or ADT and then we also study data structures as concrete implementations. In this lesson, we will study one simple
data structure we will first define an abstract view of it we will first define it as an abstract data
type and then we will see uh... the possible implementations and this data structure is list. List is a common real world entity. List is nothing but a collection of
objects of the same type. we can have a list of words, we can
have a list of names or, we can have a list of numbers so let us first define list as an
abstract data type. So, when we define abstract data type, we just define the data that we'll store and then
we define the operations available with the type and we do not
go into the implementation details let us first define a very basic list. I want a list that can store a given number of elements of a given data type this would be a static list as the
number of elements in the list will not change and we will know the number of
elements before creating the list We should be able to write or modify element at any position in the list and of course we should be able to read
element at a particular position in the list so if i ask you for an implementation
of such a list and you have taken a basic course in programming, a basic introductory course then you
will be like hey i know this, an array gives us all these features, all these operations are available with
an array, we can create an array of any data type. So, let's say if we want to create a list of integers, then we declare the array type as integer and then we can give the size as a parameter in declaration i can write or modify element at a particular
position The elements are A[0], A[1] and are accessed something like this we all know about arrays and then you can also read  elements at particular position. The element at i-th postion is accessed as A[i]. So, array is a data structure that gives
us implementation for this list now i want a list and that should have
many more features. I want it to handle more scenarios for me so i'll redefine this list here i don't want a static list, a static collection of fixed size. I want a dynamic list that should grow as per my need so the features of my list are that i will call my list empty if there are no elements in the list i'll  say the size of the list is zero when it is empty and then i can insert an element into the list and i can insert an element at any
position in the list, in an existing list i can remove element from the list i can count the number of elements in
the list and i should be able to read or write or rather, read or modify element at a particular position in
the list and i should also be able to specify the
date type for the list so i should be able to while creating the list i should
be able to say whether this is a list of integers or whether this is a list of string or float or whatever. Now, i want a data structure which is implementation of this dynamic list so how do i get it? Well, actually we can implement such a
dynamic list using arrays.  It's just that we will have to
write some more operations on top of arrays to provide for all these
functionalities. So, let us see how we can implement this
particular list using arrays Let's for the sake of simplicity of
design uh... assume that that the data type for the list is integer.So, we are creating a list of, a dynamic list of integers. What we can do is to implement such a list
we can declare a really large array We will define some max size and declare an
array of this max size. Now, as we know the elements in the array are indexed as A[0], A[1] A[2] and we go on like this uh... so what i'll do is i will define a variable that will mark the end of the list in this array. So, if the list is empty, we can initialize this variable or we can set
this variable as minus one because the lowest index possible is 0 so if end is minus one the list is
empty at anytime a part of the array will store the list Okay, so let's say initially when the list is empty this pointer end is pointing to index minus one which is not valid which does not exist and now i insert an integer into this array and let's say if we do not give the postion at which the number is to be inserted the number is always inserted towards the tail of the list, towards the end of the list so the list will be like we'll have an
element at position zero and now end is index zero So, at anytime end marks the this variable end, marks the end of the list in this array Now, if i want to insert something in the list at a particular position let's say i want to insert number five at
index two Then, to accommodate five here at this
particular position we will have to shift all the elements one unit towards the right all the elements starting index two we need to shift all the elements starting index
two towards the right okay i just inserted some elements into
the list let me also write the uh... function call for these let's say we went in this order, we inserted
two then we inserted four and then inserted in the end we are inserting five and we will also give the position at which we want to insert, so this insert with two arguments would
be the call to insert element at a
particular position. So, after all these operations, after all these insertions this is what
the list will look like this uh... arrow here marks the end of
the list in the array. Now, if i want to remove an element from
a particular position. Let's say i make  a call to something to the remove function i want to remove the element two so, i will pass the index zero here i want to remove the element at index zero. So, to do so, all these elements after index zero will be shifted one unit towards the left or towards the lower indices and two will go away that this end variable here  is being adjusted after each insertion
that we are making. So, after each insertion end will be zero after this one, two, three and so on. After this remove, end will be four
again.  Okay, looks like we pretty much have an
implementation of this uh... list in the left that is described as an abstract data type we have a logic of calling the list
empty when we have this variable end equal to minus one We can insert element at the
particular position in the list. We can remove element it's just that we have to perform some
shifts in the array,  they can count the number of elements in
the list it will be equal to end plus one the
value in the variable end plus one. We  can read and modify element at a position. Well, this
is an array, so we can definitely read or modify element at a particular
position uh... if we wanted to choose the data type
it was just choosing the array of that particular data type,  but this looks like a cool
implementation except that we have one problem uh... we said that the array will be
of some large size, some max size. But what is a good max size? We can
always exhaust the array, the list can grow to exhaust the array, there is no good max size. So,we need to have a strategy for
the scenario when the list will fill up the whole array. So, what do we do in that case? We need to keep that into our
design. We cannot extend the same array it is
not possible to do so. So, we will have to create a new array, a larger array So,  when the array is full, we will create a  new larger array and copy all the elements from the
previous array into the new array and then we can free the memory for the
previous array now the question is by how much should we increase the size
of the new array this whole operation of creating a new array
and copying all the elements from the previous array into the new array is costly in terms of time and definitely a good
design would be to avoid such big cost. So, the strategy that we choose is that uh... each time the array is
full, we create a new larger array of double the size of the previous
array and why this is the best strategy is
something that we will not discuss in this lesson so we will create a larger array of double size and copy elements from previous array into this new array. This looks like a cool implementation The study of data structures is not just about studying the operations and the implementation of these
operations it's also about analyzing the cost of
these operations so let us see what are the costs in
terms of time for all these operations that we have in the dynamic list. The access to any element in this
dynamic list, if we want to acces it using index for read or write, then this will take constant time
because we have an array here and in array, elements are arranged in one contiguous block of memory using the starting address or the base
address of the block of the memory of the block of memory and the index on the position of the
element can calculate the address of that particular
element and excessive in constant time. Big oh notation, that is used to describe
the time complexity of operations for constant time,it is written as in terms of big oh, the time complexity is written as Big Oh of
one. If we wanted to insert element if we wanted to insert element at the end of the array uh... end of the list then that again will be cost in time but
if we would insert element at a particular position in the list then we will have to shift elements towards higher indices. In the worst case
we will have to shift all the elements to the right when we will be inserting at the first position, so the time taken for insertion uh... will be proportional to the length of the list let's say the
length of the list is n or, in other words, we will say that insertion will be Big Oh of n  in terms of time complexity if you do not know about Big Oh notation, do not bother, just understand that, inserting an element at the
particular position will be a linear function in terms of the size of
the list. Removing an element will again be big oh of n Time taken will be proportional to the current size of the list. n is the size of the list here. ok now, inserting an element at the
end we just said that it will happen in constant time it is not
so if the array is full then we will create a new array uh... lets call inserting element at the end as adding an element adding an element will take constant time if the list is not full but it will take time proportional  to the size of the list,
size of the array, if array is full. So, adding in the worst case will be big oh of n again as we said when the list is full
we create a new copy double the size of the previous array and when we copy  the previous array, elements from previous array
into the new array, so primafacy what loooks like the good thing with this kind of
implementation Well, the good thing is that we can
access elements at any index in constant time which is the property of the array but if we have to insert some element
in between and if we have to remove element from the list then it is costly. if the list grows and shrinks
a lot then we will also have to create a new array
and have all this thing of copying elements from previous array to a new
array again and again and one more problem is that a lot of time a lot of the array would be unused. The memory there,  is of no use Definitely the use of array as dynamic list is not efficient in
terms of memory this kind of implementation is not efficient in terms
of memory This leads us to think- can we have a data structure that will give
us a dynamic list and use the memory more efficiently we have one data structure that gives us
good utilization of the memory and this data structure is linked list and we will study about the linked list in the next lesson. So that's it for this lesson. Thanks for
watching!",Data Structures: List as abstract data type,"See complete series of videos in data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&feature=view_all
In this lesson, we will introduce a dynamic list structure as an abstract data type and then see one possible implementation of dynamic list using arrays.",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,HdFG8L1sajw
Matrixproductassociativity_Matrixtransformations_LinearAlgebra_KhanAcademy-Hhc96U_HvQE.en.csv,"We know that if we have some
linear transformation, that the transformation from x to y
-- and these are just sets, sets of vectors, and T is a
linear transformation from y to z-- that we can construct a
composition of s with T that is a linear transformation
from x all the way to z. We saw this several
videos ago. And the definition of our linear
transformation, or the composition of our linear
transformation. So the composition of s with t,
applied to someone vector x in our set x, our domain,
is equal to s of t of x. This was our definition. And then we went on and we said,
look, if s of x can be represented as the matrix
multiplication a x, the matrix vector product, and if T of x
can be represented -- or the transformation T can be
represented-- as the product of the matrix b with x, we saw
that this thing right here -- which is of course, if we just
write this way, this is equal to a times T times x, which is
just b x -- we saw in multiple videos now that this is
equivalent to, by our definition of matrix products,
the matrix a b -- right? When you take the product of
two matrices you just get another matrix -- the
product a b times x. So you take essentially the
first linear transformation in your composition, its matrix,
which was a, and you take the product with the second one. Fair enough, all of this
is review so far. Let's take three linear
transformations. Let's say that I have the linear
transformation h, and when I apply that to a vector
x, it's equivalent to multiplying my vector
x by the matrix a. Let's say I have the linear
transformation g. When I applied that to a vector
x, it's equivalent to multiplying that vectrix -- that
vector, there should be a new concept called a vetrix --
it's equivalent to multiplying that vector times
the matrix b. And then I have a final linear
transformation f. When it's applied to some vector
x, it's equivalent to multiplying that vector
x times the matrix z. Now what I'm curious about is
what happens when I take the composition of h with g, and
then I take the composition of that with f -- these are all
linear transformations -- and then I apply that to
some vector x. Which is necessarily going to be
in the domain of this guy. I haven't actually drawn out
their domain and co-domain definitions, but I think
you get the idea. So let's explore what this
is a little bit. Well by the definition of
what a -- let's go back. By this definition right here
of what composition even means, we can just apply that
to this right here. So we could just imagine this as
being our s, and then this is our T right there. Then what is this going
to be equal to? If we just do a straight up
pattern match right there, this is going to be equal to
s, the transformation s, applied to the transformation
f, applied to x. So s is h of g. So it is h -- or I should say h
of g -- the composition of h with g, that is our s. And then I apply that
to f applied to x. f is our t. I apply that to f applied
to x, just like that. Now what is this equal to? Now we can imagine that
this is our x. If we just pattern match,
according to this definition, that this and this guy right
here, that this is our t, and that this is our s. And so if we just pattern
match here, this is equal to what? This is just straight from the
definition of a composition. So it's equal to s of -- s is
our h -- so h of t, which in this case is g, g
applied to x. But instead of an x, we have
this vector here, which was the transformation
f applied to x. So g of f of x. That's what this is equal to. The composition of h with
g, and the composition competition of f with h, the
composition of h and g, all of that applied to x is equal
to h of g of f of x. Now what is this equal to? Well this is equal to -- I'll
do it right here -- this is equal to h, the transformation
h, applied to -- what is this term right here? I'll do it in pink. What is this? That is the composition of
g and f applied to x. You can just replace s with g,
and f with T, and you'll get that right there. So this is just equal to the
composition of g with f applied to x. That's all that is. Now, what is this equal
to right there? And it's probably confusing
to see two parentheses in different colors, but
you get the idea. What is this equal to? Well, just go back to your
definition of the composition -- I just want to make it very
clear what we're doing. This is, if you imagine this
being your T and then this being your s, this is just the
composition of s with T, applied to x. So this is just equal to --
I'll write it this way. This is equal to -- I shouldn't
write s's -- this is a composition of h with the
composition of g and f. And then all of that
applied to x. Now why did I do all of this? Well one, to show you that the
composition is associative. I went all the way here and then
I went all the way back. And essentially it doesn't
matter where you put the parentheses. The composition of h with g with
f, is equivalent to the composition of h with the
composition of g and f. That these two things are
equivalent, and essentially these two things, you can
just re-write them. The parentheses are essentially
unnecessary. You can write this as a
composition of h with g with f, all of that applied to x. Now, I took the time to say
that each of these linear transformations I can
represent as matrix multiplications. Why did I do that? Well we saw before, that any
composition, when you take the composition of s with T, the
matrix version of this transformation of this
composition is going to be equal to the product -- by our
definition of matrix matrix products -- the product of the
s's transformation matrix and T's transformation matrix. So what are these going
to be equal to? So this one right here --
if you think of this transformation right here, this
statement right here, its matrix version of it--
so let me write that. A matrix version of the
composition of h with g, and then the composition of that
with f, applied to x, is going to be equal to -- and we've
seen this before -- the product of these matrices. So this composition, its matrix
is going to be a b. h and g, their matrices
are a and b. So it's going to be a b -- and
I'll do it in parentheses. And then you take that matrix,
and you take the product -- so this guy's matrix representation
is a b, right? And this guy's matrix
representation is c. So the matrix representation
of this whole thing is this guy, taking the product of a b,
and then taking the product of that with c. So a b. and then c. And then if you look at this
guy right here -- and of course all of that times a
vector x, all of that time some vector x, right there. That's the vector x. Now let's look at this
one right here. If we take the composition of
h with the composition of g and f, and apply all of that to
some vector x, what is that equivalent to? Well this composition right
here, the matrix version of it, I guess we can say, is going
to be the product b c. And we're going to
apply that to x. So we're going to have
the product b c. And then we're going to take the
product of that with this guy's matrix representation,
which is a. And we've shown this before. We never showed it with
three, but it extends. I kind of showed it extends, so
you can just keep applying the definition. You can keep applying this
property right here, and so it'll just naturally extend. Because every time, we're
just taking the composition of two things. Even though it looks like we're
taking the composition of three, we're taking the
composition of two things first here. And then we get its matrix
representation. And then we take the composition
of that with this other thing. So the matrix representation of
the entire composition is going to be this matrix
times this matrix. Which I did here. Similarly, here we take first
the composition of these two linear transformations, and
their matrix representation will be that right there. And then we take the composition
of that with that. So its entire matrix
representation is going to be guy's matrix times this
guy's matrix. So a times b c. And of course, all of that
applied to the vector x. Now, in this video I've showed
you that these two things are equivalent. If anything, the parentheses
are completely unnecessary. And I showed you that there. They both essentially boil
down to h of g of f of x. So these two things
are equivalent. So we could say, essentially,
that these two things over here are equivalent. Or that a b, the product a b,
and then taking the product of that matrix with the matrix c,
is equivalent to taking the product a with the matrix b c. Which is just another
product matrix. Or another way of saying it is
that these parentheses don't matter, that all of these
is just equal to a b c. Or -- I mean, this is just a
statement that matrix products exhibit the associative
property. It doesn't matter where you
put the parentheses. And you know, sometimes it's
confusing me, the word associative. It just means it doesn't matter
where you put the parentheses. Matrix products do not exhibit
the commutative property. We saw that in the last video. In general, we cannot make
the statement that a b is equal to b a. We cannot do that. And in fact in the last video
-- I think it was the last video -- I showed you that if a
b is defined, sometimes b a is not even defined. Or if b a is defined, sometimes
a b isn't defined. So it's not commutative. It is associative, though. In the next video, I'll see if
matrix products are actually distributive.",Matrix product associativity | Matrix transformations | Linear Algebra | Khan Academy,"Showing that matrix products are associative

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/composition_of_transformations/v/distributive-property-of-matrix-products?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/composition_of_transformations/v/linear-algebra-matrix-product-examples?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,Hhc96U_HvQE
Undeterminedcoefficients3_Secondorderdifferentialequations_KhanAcademy-I3vIAzMcm4Y.en.csv,"Let's do another example of
solving a nonhomogeneous linear differential equation
with a constant coefficient. And the left-hand side is going
to be the same one that we've been doing. The second derivative of y
minus 3 times the first derivative minus 4 times y is
equal to-- and now instead of having an exponential function
or a trigonometric functional, we'll just have a simple--
well, it just looks an x squared term, but it's
a polynomial. Right? And you know how to solve the
general solution of the homogeneous equation
if this were 0. So we're going to focus just
now on the particular solution, then we can later
add that to the general solution of a nonhomogeneous
equation, to get the solution. So what's a good guess for
a particular solution? Well, when we had exponentials,
we guessed that our solution would be
an exponential. When we had trigonometric
functions, we guessed that our solution would be
trigonomretric. So since we have a polynomial
here that makes this differential equation
nonhomogeneous, let's guess that a particular solution
is a polynomial. And that makes sense. If you take a second-degree
polynomial, take its derivatives and add and
subtract, you should hopefully get another second-degree
polynomial. So let's guess that it is Ax
squared plus Bx plus C. And what would be a
second derivative? Well a second derivative
would be 2Ax plus B. Sorry, this is the
first derivitive. The second derivative
would be 2A. And now we can substitute back
into the original equation. We get the second derivitive,
2A minus 3 times the first derivitive. So minus 3A-- oh no, sorry. Minus 3 times this. So minus 6Ax minus 3B minus 4
times the function itself. So minus 4Ax squared
minus 4Bx minus 4C. That's just 4 times
all of that. That's going to equal
4x squared. And I'll just group our x
squared, our x and our constant terms, and then we
could try to solve for the coeficients. So let's see. I have one x squared
term here. So it's minus 4Ax squared. And then what are my x terms? I have minus 6Ax minus 4Bx. So then say plus minus
6A minus 4B times x. I just added the coefficients. And then finally we get
our constant terms. 2A minus 3B minus 4C. And all of that will
equal 4x squared. Now how do we solve
for A, B, and C? Well, whatever the x squared
coefficients add up on this side, it should equal 4. Whatever the x coefficients add
up on this side, it should be equal to 0, right? Because you can view this
as plus 0x, right? And then you could say plus
0 constant as well. So the constants should
also add up to 0. So let's do that. So first let's do the
x squared term. So minus 4A should
be equal to 4. And then that tells us that
A is equal to minus 1. Fair enough. Now the x terms. Minus
6A, minus 4B, that should be equal to 0. Right? So let's write that down. We know what A is, so
let's substitute. So minus 6 times A, so minus
6 times minus 1. So that's 6 minus 4B
is equal to 0. So we get 4B-- I'm just putting
4B on this side and then switching. 4B is equal to 6. And B is equal to-- 6
divided by 4 is 3/2. And then finally the constant
term should also equal 0, so let's solve for those. 2 times A, that's minus 2. Minus 3 times B. Well, that's minus
3 times this. So minus 9/2 minus
4C is equal to 0. So let's see. I don't want to make
a careless mistake. So this is minus 4
minus 9/2, right? That's minus 4/2 minus 9/2-- and
we could take the 4C and put it on that side--
it's equal to 4C. What's minus 4 minus 9? That's minus 13/2. Minus 13/2 is equal to 4C. 4C, divide both sides by 4, and
then you get C is equal to minus 13/8. And I think I haven't made
a careless mistake. So if I haven't, then
our particular solution, we now know. Well, let me write the
whole solution. So. And this is a nice stretch of
horizontal real estate. So let's write our solution. Our solution is going to be
equal to the particular solution, which is Ax squared,
so that's minus 1x squared. Ax squared plus Bx plus 3/2x
plus C minus 13/8. So this is the particular
solution. We solved for A, B, and C. We determined the undetermined
coefficient. And now if we want the general
solution, we add to that the general solution of the
homogeneous equation. What was that? y prime
minus 3y prime minus 4y is equal to 0. And we've solved this
multiple times. We know that the general
solution to the homogeneous equation is C1e to the 4x plus
C2e to the minus x, right? You just take the characteristic
equation r squared minus 3r minus 4. What did you get? You get r minus 4 times r plus
1, and then that's how you get minus 1 and 4. Anyway. So if this is the general
solution to the homogeneous equation, this a particular
solution to the nonhomogeneous equation. The general solution to the
nonhomogeneous equation is going to be the sum
of the two. So let's add that. So plus C1e to the 4x plus
C2e to the minus x. So there you. I don't think that
was too painful. The most painful part was just
making sure that you don't make a careless mistake
with the algebra. But using a fairly
straightforward, really algebraic technique, we were
able to get a fairly fancy solution to this second order
linear nonhomogeneous differential equation with
constant coefficients. See you in the next video.",Undetermined coefficients 3 | Second order differential equations | Khan Academy,"Another example where the nonhomogeneous part is a polynomial

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/undetermined-coefficients/v/undetermined-coefficients-4?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/undetermined-coefficients/v/undetermined-coefficients-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,I3vIAzMcm4Y
Newton'sLawofCooling_Firstorderdifferentialequations_KhanAcademy-IICR-w1jYcA.en.csv,"- [Voiceover] Let's think
about another scenario that we can model with the
differential equations. This is a scenario where we take an object that is hotter or cooler than
the ambient room temperature, and we want to model how
fast it cools or heats up. And the way that we'll think about it is the way that Newton thought about it. And it is described as
Newton's Law of Cooling. And in a lot of ways, it's common sense. It states that the rate
of change of temperature should be proportional
to the difference between the temperature of the object
and the ambient temperature. So let me write that
in mathematical terms. So Newton's Law of Cooling tells us, that the rate of change of temperature, I'll use that with a capital T, with respect to time, lower case t, should be proportional to the difference between the temperature of the object and the ambient temperature. So that is a mathematical
description of it. And once again, it's common sense. If something is much, much hotter than the ambient temperature,
the rate of change should be pretty steep, it should be declining in temperature quickly. If something is much, much cooler, it should be increasing
in temperature quickly. And if something is
close, if these two things are pretty close, well
maybe this rate of change shouldn't be so big. Now I know one thing that you're thinking. You're like, okay, if
the temperature is hotter than the ambient temperature,
then I should be cooling. My temperature should be decreasing. And a decreasing temperature would imply a negative instantaneous change. So how will this be a negative value in the case where our
temperature of our object is greater than our ambient temperature? And the way that that would happen is, you would have to have a negative k. If you don't like thinking
in terms of a negative k, you can just put a
negative right over here and now you would have a positive k. Now it makes sense. If our thing is hotter, if
it has a higher temperature than the ambient temperature,
so this is a positive, then our rate of change will be negative, will be getting cooler. If it was the other way around, if our temperature of our
object is cooler than our ambient temperature, then this thing is going to be a negative,
and then the negative of that is going to be a positive,
we're assuming a positive k, and our temperature will be increasing. So hopefully, this makes
some intuitive sense. And our constant k could depend on the specific heat of the
object, how much surface area is exposed to it, or whatever else. But now I'm given this,
let's see if we can solve this differential equation
for a general solution. And I encourage you to pause
this video and do that, and I will give you a clue. This is a separable differential equation. So I assume you've had a go at it, so let's now work through it together. So, we just have to
algebraically manipulate this so all my Ts and dTs are on one side. I should say, so all my capital
Ts and dTs are on one side, this is going to be a
little bit more confusing because I have a capital
T and a lower case t. Capital T for temperature,
lower case t for time. But hopefully we'll be
able to work through it. And then I'm going to have
all my time differentials and time variables on the other side. So one thing I could is
I could divide both sides by T minus ambient
temperature, minus T sub a. Remember this is just
going to be a constant based on what our ambient temperature is. We're going to assume
our ambient temperature doesn't change as a function of time, it's just such a big
room that our cup of tea is not going to actually warm up the room. So that's just one of these assumptions that we're going to make. So if we do that, if we
divide both sides by this, we are going to have... So I'm going to divide both sides, I'm going to do this in a new color. If I divide both sides
by that, I get one over T minus T sub a, and let
me multiply both sides times the time differential. So I'm going to have, that dT,
our temperature differential. Times our temperature differential,
is going to be equal to negative k times our time differential. So once again, to separate the variables, all I did was divide both sides by this, and multiply both sides by that. Now I can integrate both sides, we've seen this show before. So I can integrate both sides. And the integral of this is going to be the natural log of the absolute value of what we have in the denominator. And you can do u substitution if you want. If we said u is equal to T minus T sub a, then du is just going to be one dT, and so this is essentially,
you could say the integral of one over u du, and so
it would be the natural log of the absolute value of u, and this right over here is u. So this is the natural
log of the absolute value of T minus T sub a, is equal to, and once again I could
put a constant here, but I'm going to end up with a constant on the right hand side too so
I'm just going to merge them into the constant on the right hand side. So that is going to be equal to, now here, this is going to be negative kt, and once again we have plus C. And now we can raise e
to both of these powers, or another way of interpreting this is if e to this thing is
going to be the same as that. So we can write this
as, the absolute value, let me do that in that same blue color. We can write this as the
absolute value of T minus T sub a is equal to e, something about e I always think of the color green. e to the negative kt plus C. This of course is the same thing as, this is equal to e to the negative kt, we've done this multiple times before. Negative kt times e to the C power. And we could just call this
another arbitrary constant. If we called this C1,
then we could just call this whole thing C. So this we could say is
Ce to the negative kt. So at least it's starting
to resemble what we did when we were modelling population. We'll see it's a little bit different. Instead of just temperature
on this left hand side, we have temperature minus
our ambient temperature. And so, we can do a couple of things. If, in a world, say we were
dealing with a hot cup of tea, something that's hotter than
the ambient temperature. So we could imagine a world where T is greater than or equal to
our ambient temperature. So that means this is hot, or it's hotter, I guess we could say. So if we're dealing with something hotter than the ambient temperature, then this absolute value
is going to be positive or the thing inside the absolute value is going to be positive. So we don't need the absolute value. Or the absolute value of it is going to be the same thing as it. And then we can just add
T sub a to both sides, and then we would have our temperature, and I can even write this
as a function of time, is going to be equal to this business, is going to be equal to Ce, let me do that in that same color. Ce to the negative kt plus T sub a. All I did is I'm assuming that this inside the absolute value
is going to be positive, so the absolute value is not
going to change the value. And I added T sub a to
both sides to get this. So this right over here is going
to be our general solution, in the case where we start
with something that is hotter than the ambient room temperature. And if we want to look at the
case where something is cooler than the ambient room temperature, so that's the situation,
let's say T is less than our ambient room temperature. Then the absolute value of
T, then this thing over here is going to be negative, and
so the absolute value of it's going to be the negative of that. So then this up here
results in T sub a minus T, that's going to be the same
thing as the absolute value, it's going to be the
negative of the negative. So then that is going to be
equal to e to the negative k plus, actually let me just do it... T sub a minus T is going to be equal to Ce to the negative kt, so
this is equal to that. I'm just assuming that
T is less than T sub a. And so then, to solve for T,
you could add T to both sides and subtract this from both sides. You would have T as a function
of t is going to be equal to, let's see, if this went onto that side and this goes over here,
you would have T sub a minus Ce to the negative kt. Did I do that right? So yep, that looks right. So this is the situation where
you have something that is cooler than the ambient temperature. So this right over
here, based on the logic of Newton's Law of Cooling,
these are the general solutions to that differential equation. In the next video we can actually apply it to model how quickly something
might cool or heat up.",Newton's Law of Cooling | First order differential equations | Khan Academy,"Another separable differential equation example.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/modeling-with-differential-equations/v/applying-newtons-law-of-cooling-to-warm-oatmeal?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/modeling-with-differential-equations/v/particular-solution-given-initial-conditions-for-population?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,IICR-w1jYcA
Introductiontotheconvolution_Laplacetransform_DifferentialEquations_KhanAcademy-IW4Reburjpc.en.csv,"  In this video, I'm going to
introduce you to the concept of the convolution, one of the
first times a mathematician's actually named something
similar to what it's actually doing. You're actually convoluting
the functions. And in this video, I'm not
going to dive into the intuition of the convolution,
because there's a lot of different ways you
can look at it. It has a lot of different
applications, and if you become an engineer really of any
kind, you're going to see the convolution in kind of a
discrete form and a continuous form, and a bunch of
different ways. But in this video I just want
to make you comfortable with the idea of a convolution,
especially in the context of taking Laplace transforms. So the convolution theorem--
well, actually, before I even go to the convolution theorem,
let me define what a convolution is. So let's say that I have
some function f of t. So if I convolute f with g-- so
this means that I'm going to take the convolution of f and
g, and this is going to be a function of t. And so far, nothing I've written
should make any sense to you, because I haven't
defined what this means. This is like those SAT problems
where they say, like, you know, a triangle b means a
plus b over 3, while you're standing on one leg or
something like that. So I need to define this
in some similar way. So let me undo this silliness
that I just wrote there. And the definition of a
convolution, we're going to do it over a-- well, there's
several definitions you'll see, but the definition we're
going to use in this, context there's actually one other
definition you'll see in the continuous case, is the integral
from 0 to t of f of t minus tau, times g of t-- let me
just write it-- sorry, it's times g of tau d tau. Now, this might seem like a very
bizarro thing to do, and you're like, Sal, how
do I even compute one of these things? And to kind of give you that
comfort, let's actually compute a convolution.   Actually, it was hard to find
some functions that are very easy to analytically compute,
and you're going to find that we're going to go into a lot of
trig identities to actually compute this. But if I say that f of t, if I
define f of t to be equal to the sine of t, and I define
cosine of t-- let me do it in orange-- or I define g of t to
be equal to the cosine of t. Now let's convolute
the two functions. So the convolution of f with g,
and this is going to be a function of t, it equals this. I'm just going to show you how
to apply this integral. So it equals the integral--
I'll do it in purple-- the integral from 0 to t of
f of t minus tau. This is my f of t. So it's is going to be sine of
t minus tau times g of tau. Well, this is my g of t, so
g of tau is cosine of tau, cosine of tau d tau. So that's the integral, and
now to evaluate it, we're going to have to break out
some trigonometry. So let's do that. This almost is just a very
good trigonometry and integration review. So let's evaluate this. But I wanted to evaluate this
in this video because I want to show you that this isn't some
abstract thing, that you can actually evaluate
these functions. So the first thing I want to
do-- I mean, I don't know what the antiderivative of this is. It's tempting, you see a sine
and a cosine, maybe they're the derivatives of each
other, but this is the sine of t minus tau. So let me rewrite that sine of
t minus tau, and we'll just use the trig identity, that
the sine of t minus tau is just equal to the sine of t
times the cosine of tau minus the sine of tau times
the cosine of t. And actually, I just made a
video where I go through all of these trig identities really
just to review them for myself and actually to make a
video in better quality on them as well. So if we make this subsitution,
this you'll find on the inside cover of any
trigonometry or calculus book, you get the convolution of f and
g is equal to-- I'll just write that f-star g; I'll just
write it with that-- is equal to the integral from 0 to t of,
instead of sine of t minus tau, I'm going to write this
thing right there. So I'm going to write the sine
of t times the cosine of tau minus the sine of tau times the
cosine of t, and then all of that's times the
cosine of tau.   I have to be careful with my
taus and t's, and let's see, t and tau, tau and t. Everything's working so far. So let's see, so
then that's dt. Oh, sorry, d tau. Let me be very careful here. Now let's distribute this
cosine of tau out, and what do we get? We get this is equal to-- so f
convoluted with g, I guess we call it f-star g, is equal to
the integral from 0 to t of sine of t times cosine of
tau times cosine of tau. I'm just distributing
this cosine of tau. So it's cosine squared of tau,
and then minus-- let's rewrite the cosine of t first, and I'm
doing that because we're integrating with
respect to tau. So I'm just going to write my
cosine of t first. So cosine of t times sine of tau times
the cosine of tau d tau. And now, since we're taking
the integral of really two things subtracting from each
other, let's just turn this into two separate integrals. So this is equal to the integral
from 0 to t, of sine of t, times the cosine squared
of tau d tau minus the integral from 0 to t of cosine
of t times sine of tau cosine of tau d tau. Now, what can we do? Well, to simplify it more,
remember, we're integrating with respect to-- let
me be careful here. We're integrating with
respect to tau. I wrote a t there. We're integrating with
respect to tau. So all of these, this
cosine of t right here, that's a constant. The sine of t is a constant. For all I know, t could
be equal to 5. It doesn't matter that one
of the boundaries of our integration is also a t. That t would be a 5,
in which case these are all just constants. We're integrating only with
respect to the tau, so if cosine of 5, that's a constant,
we can take it out of the integral. So this is equal to sine of t
times the integral from 0 to t of cosine squared of tau d tau
and then minus cosine of t-- that's just a constant; I'm
bringing it out-- times the integral from 0 to t of sine
of tau cosine of tau d tau. Now, this antiderivative is
pretty straightforward. You could do u substitution. Let me do it here, instead
of doing it in our heads. This is a complicated
problem, so we don't want to skip steps. If we said u is equal to sine of
tau, then du d tau is equal to the cosine of tau, just
the derivative of sine. Or we could write that
du is equal to the cosine of tau d tau.   We'll undo the substitution
before we evaluate the endpoints here. But this was a little bit
more of a conundrum. I don't know how to take the
antiderivative of cosine squared of tau. It's not obvious what that is. So to do this, we're going
to break out some more trigonometric identities. And in a video I just recorded,
it might not be the last video in the playlist, I
showed that the cosine squared of tau-- I'm just using tau as
an example-- is equal to 1/2 times 1 plus the cosine
of 2 tau. And once again, this is just a
trig identity that you'll find really in the inside cover of
probably your calculus book. So we can make this substitution
here, make this substitution right there, and
then let's see what our integrals become. So the first one over here,
let me just write it here. We get sine of t times the
integral from 0 to t of this thing here. Let me just take the 1/2 out,
to keep things simple. So I'll put the 1/2 out here. That's this 1/2. So 1 plus cosine of 2 tau and
all of that is d tau.   That's this integral
right there. And then we have this integral
right here, minus cosine of t times the integral from--
let me be very clear. This is tau is equal to 0
to tau is equal to t. And then this thing right
here, I did some u subsitution. If u is equal to sine of
t, then this becomes u. And we showed that du is equal
to cosine-- sorry, u is equal to sine of tau. And then we showed that du is
equal to cosine tau d tau, so this thing right here
is equal to du. So it's u du, and let's see if
we can do anything useful now. So this integral right here, the
antiderivative of this is pretty straightforward, so
what are we going to get? Let me write this
outside part. So we have 1/2 times
the sine of t. And now let me take the
antiderivative of this. This is going to be tau plus
the antiderivative of this. It's going to be 1/2
sine of 2 tau.   I mean, we could have done
the u substitution. we could have said u is equal to
2 tau and all of that, but I think you could do that from
recognition, and if you don't believe me, you just have to
take the derivative of this. 1/2 sine of 2 tau is the
derivative of this. You multiply, you take the
derivative of the inside, so that's 2, so the 2 and the 1/2
cancel out, and the derivative of the outside, so
cosine of 2 tau. And you're going to evaluate
that from 0 to t. And then we have minus
cosine of t. When we take the antiderivative
of this-- let me do this on the side. So the integral of u du,
that's trivially easy. That's 1/2 u squared. Now, that's 1/2 u squared, but
what was u to begin with? It was sine of tau. So the antiderivative of this
thing right here is 1/2 u squared, but u is sine of tau. So it's going to be 1/2u, which
is sine of tau squared. And we're going to evaluate
that from 0 to t. And we didn't even have to do
all this u substitution. The way I often do it in my
head, I see the sine of tau, cosine of tau. if I have a function and I have
its derivative, I can treat that function just like
as if I had an x there, so it'd be sine squared of tau over
2, which is exactly what we have there. So it looks like we're
in the home stretch.   We're taking the convolution of
sine of t with cosine of t. And so we get 1/2 sine of t. Now, if I evaluate this thing
at t, what do I get? I get t plus 1/2 sine
of 2t, that's when I evaluated it at t. And then from that I need to
subtract it evaluated at 0, so minus 0 minus 1/2 sine of
2 times 0, which is just sine of 0. So this part right here, this
whole thing right there, what does that simplify to? Well this is 0, sine of 0
is 0, so this is all 0. So this first integral right
there simplifies to 1/2 sine of t times t plus
1/2 sine of 2t.   All right, now what does this
one simplify to over here? Well, this one over here, you
have minus cosine of t. And we're going to evaluate this
whole thing at t, so you get 1/2 sine squared of t
minus 1/2 the sine of 0 squared, which is just 0,
so that's just minus 0. So far, everything that we have
written simplifies to-- let me multiply it all out. So I have 1/2-- let me just pick
a good color-- 1/2t sine of t-- I'm just multiplying
those out-- plus 1/4 sine of t sine of 2t. And then over here I have minus
1/2 sine squared t times cosine of t. I just took the minus cosine t
and multiplied it through here and I got that. Now, this is a valid answer,
but I suspect that we can simplify this more, maybe using
some more trigonometric identities. And this guy right there
looks ripe to simplify. And we know that the sine of
2t-- another trig identity you'll find in the inside cover
of any of your books-- is 2 times the sine of t
times the cosine of t. So if you substitute that there,
what does our whole expression equal? You get this first term. Let me scroll down
a little bit. You get 1/2t times the sine of
t plus 1/4 sine of t times this thing in here, so times
2 sine of t cosine of t. Just a trig identity, nothing
more than that. And then finally I have this
minus 1/2 sine squared t cosine of t. No one ever said this was
going to be easy, but hopefully it's instructive
on some level. At least it shows you that you
didn't memorize your trig identities for nothing. So let me rewrite the whole
thing, or let me just rewrite this part. So this is equal to 1/4. Now, I have-- well let
me see, 1/4 times 2. 1/4 times 2 is 1/2. And then sine squared
of t, right? This sine times this sine is
sine squared of t cosine of t. And then this one over here is
minus 1/2 sine squared of t cosine of t. And luckily for us, or lucky
for us, these cancel out. And, of course, we had this
guy out in the front. We had this 1/2t sine
t out in front. Now, this guy cancels with this
guy, and all we're left with, through this whole hairy
problem, and this is pretty satisfying, is 1/2t sine of t. So we just showed you that the
convolution-- if I define-- let me write our result. I feel like writing this
in stone because this was so much work. But if we write that f of t is
equal to sine of t, and g of t is equal to cosine of t, I
just showed you that the convolution of f with g, which
is a function of t, which is defined as the integral from 0
to t of f of t minus tau times g of tau d tau, which was equal
to-- and I'll switch colors here-- which was equal to
the integral from 0 to t of sine of t minus tau times g of
tau d tau, that all of this mess, all of this convolution,
it all equals-- and this is pretty satisfying-- it all
equals 1/2t sine of t. And the whole reason why I went
through all of this mess and kind of bringing out the
neurons that had the trig identities memorized or having
to reproof them or whatever else is to just show you that
this convolution, it is convoluted and it seems a little
bit bizarre, but you really can take the convolutions
of actual functions and get an
actual answer. So the convolution of sine
of t with cosine of t is 1/2t sine of t. So, hopefully, you have a little
of intuition of-- well, not intuition, but you at least
have a little bit of hands-on understanding of how
the convolution can be calculated.  ",Introduction to the convolution | Laplace transform | Differential Equations | Khan Academy,"Introduction to the Convolution

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/convolution-integral/v/the-convolution-and-the-laplace-transform?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-to-solve-differential-equation/v/laplace-step-function-differential-equation?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,IW4Reburjpc
Modelingpopulationwithsimpledifferentialequation_KhanAcademy-IYFkXWlgC_w.en.csv,"- What I'd like to do in
this video is start exploring how we can model things with
the differential equations. And in this video in particular, we will explore modeling population. Modeling population. We're actually going to
go into some depth on this eventually, but here we're going to start with simpler models. And we'll see, we will stumble on using the logic of differential equations. Things that you might have seen in your algebra or your precalculus class. So, in some level, what
we're going to do here is going to be review, but
we're going to get there using the power of modeling
with differential equations. So let's just define some variables. Let's say that P is
equal to our population. And let's say that t
is, let's say that t is equal to the time that has passed in days. In days, it could have
been years or months. But let's say we're
doing the population of insects that reproduce quite quickly. So days seem like a nice
time span to care about. Now, what would be a reasonable model? Well, we could say that
the rate of change, the rate of change of our
population, with respect to time, with respect to time is, well,
a reasonable thing to say is that it's going to be proportional to the actual population,
the actual population. Why is that reasonable? Well, the larger the population, the larger the rate at any given time. If you have a thousand people, the rate at which they're reproducing
is going to be more, or a thousand insects is
going to be more insects per second, per day or per year than if you only have 10 insects. So it makes sense that the rate of growth of your population, with respect to time, is going to be proportional
to your population. And so, you know, sometimes you think of differential equations as
these daunting complex things, but notice we've just been able to express a reasonably not so complicated idea. The rate of change of population is going to be proportional to the population. And now, once we've expressed
that, we can actually try to solve this differential equation. Find a general solution, and
then we can try to put some initial conditions on there or
some states of the population that we know to actually
solve for the constants to find a particular solution. So how do we do that? And I encourage you to
pause the video at any time and see if you can solve
this differential equation. So assuming you, at least,
maybe have had an attempt at it, and you might immediately recognize that this is a separable differential equation. And in separable differential equations, we want one variable and
all the differentials involving that variable on one
side, and the other variable and all the differentials involving the other variable on the other side, and then we can integrate both sides. And once again, dP, the
derivative of P with respect to t, this isn't quite a fraction. This is the limit as our change
in P over change in time. This is our instantaneous
change, but for the sake of separable differential equations or differential equations
in general, you can treat, you can treat these, this
derivative in Leibniz notations like fractions, and you can
treat these differentials like quantities because we
will eventually integrate them. So let's do that. So, we want to put all
the Ps and dPs on one side and all the, all the things that involve t or that I guess don't
involve P on the other side. So, we could divide both sides by P. We could divide both sides
by P, and so we'll have one over P, and you have one over P here and then those will cancel, and then you can multiply
both sides times dt. We could multiply both sides times dt. Once again, treating the
differential like a quantity which isn't, it really isn't a quantity. You really have to view this as a limit of change in P over change in time. The limit as we get smaller and smaller and smaller changes in time. But for, once again, for the sake of this we can do this, and when we do that we would be left with one over P dP is equal to, is equal to k dt, is equal to k dt. Now we can integrate,
integrate both sides. Because this was a separable
differential equation, we were able to completely
separate the Ps and dPs from the things involving ts or, I guess, the things that aren't
involving Ps, and then if we integrate this side,
we would get the natural log, the natural log of the absolute
value of our population, and we could say plus
some constant if we want but we're going to get a
constant on this side as well so we could just say that's
going to be equal to, that's going to be equal to
k, it's going to be equal to k times t, k times t plus some constant. Plus some constant. I'll just call that C one, and once again I could've put a plus C
two here, but I could've then subtracted the
constant from both sides and I would just get the
constant on the right hand side. Now, how can I solve for P? Well, the natural log of
the absolute value of P is equal to this thing right over here. That means that's the same thing. That means that the absolute value of P, that means that the absolute value of P is equal to e to all this business, e to the, e to the, let
me do in the same colors, kt, kt plus, plus C one, plus C one. Now this right over
here is the same thing. Just using our exponent
properties, this is the same thing as e to the kt, e to the k times t times e, times e to the C one, e to the C one. Now this is just e to some constant, so we could just call this, let's just call that the constant C. So this is all simplified to C e, C e to the kt, to the kt. And if we assume our
population at any given time is positive then we could get rid of this absolute value sign, and
we have a general solution to this, frankly, fairly
general differential equation. We just said proportional. We haven't given what the
proportionality constant is, but we could say, if we
assume, positive population that the population is
going to be equal to some constant C times e to the kt power. To the kt power, and the
reason why I said that you've seen this before is this is just an exponential function,
and it's very likely that in algebra or in precalculus class you have modeled things
with exponential functions, and my guess is that
you've modeled things, modeled things like population. The reason why this is interesting is you now see where this is coming from. The underlying logic that's just driven by the actual differential equation. The rate of change, with respect
to time, of the population. Well, maybe it's just
proportional to population. So I'll leave you there,
and in the next video we'll do what you probably
did in the 10th or 11th grade or maybe later in your
life, it doesn't matter when you did it, where we actually look at some initial conditions to find
a particular solution.",Modeling population with simple differential equation | Khan Academy,"Another separable differential equation example.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/modeling-with-differential-equations/v/particular-solution-given-initial-conditions-for-population?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/separable-equations/v/separable-differential-equations-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,IYFkXWlgC_w
LinkedListinC_C++-Insertanodeatnthposition-IbvsNF22Ud0.en.csv,"In our previous lesson, we had written code
to insert a node at the beginning of the linked list. Now, in this lesson we will write program
to insert a node at any given position in the linked list. So, let me first explain the problem in a
logical view. Let's say we have a linked list of integers
here. There are 3 nodes in this linked list. Let us say they are at addresses 200, 100
and 250 respectively in the memory and we have a variable head that is pointer to node,
that stores the address of the first node in the list. Now, let us say we number these nodes. We number these positions on a 1-based index. So, this is the first node in the list and
this is the second node and this is the third node and we want to write a function Insert
that will take the data to be inserted in the list and the position at which we want
to insert this particular data. So, we will be inserting a node at that particular
position with this data. There will be a couple of scenarios. The list could be empty. So, this variable head will be NULL. or this
argument being passed to the insert function, the position n could be an invalid position. For example, 5 is an invalid position here
for this linked list. The maximum possible position at which we
can insert a Node in this list will be 4. If we want to insert at position 1, we want
to insert at beginning and if we want to insert at position 4, we want to insert at end. So, our Insert function should gracefully
handle all these scenarios. Let us assume for the sake of simplicity,
for the sake of simplifying our implementation that we always give a valid position, we will
always give a valid position so that we do not have to handle the error condition in
case of invalid position. The implementation logic for this function
will be pretty straight forward. We will first create a node. Let's say in this example we want to insert
a node with value 8 at 3rd position in the list. So, i'll set the data here in the node. The data part is 8. Now, to insert a node at the Nth position,
we will first have to go to the (n-1)th node. In this case n =3, so we will go to the 2nd
node. now the first thing that we will have to do is we will have to set the link field
of this newly created node equal to the link field of this (n-1)th node, so we will have
to build this link. Let's say the address that we will get for
this newly created node is 150. Once we build this link, we can break this
link and set the link of this newly created node as address of this, set the link of this
(n-1)th node as address of this newly created node. We may have special cases in our implementation. like the list may be empty or may be we may
want to insert a node at the beginning. let's say we will take care of special cases
(if any) in our actual implementation. So, now let's move on to implementing this
particular function in our program. In my 'C' program. the first thing that I need to do is i want
to define a Node. So, Node will be a structure. We have seen this earlier. So, Node has these two fields - one data of
type integer and another next of type pointer to Node. Now, to create a linked list, the first thing
that I need to create is a pointer to Node that will always store the address of the
first node or the head node in the linked list. So, i will create struct Node*, let's name
this variable head. And once again, i have created this variable
as a global variable. To understand linked list implementation,
we need to understand what goes where, what variable sits in what section of the memory
and what is the scope of these variables. What goes in the stack section of memory and
what goes in the heap section of the memory. So, this time as we write this code, we will
see what goes where. In the main method, first i'll set this head
as NULL to say that initially the list is empty. So, let us now see what has gone where so
far in our program in what section of the memory. the memory that is allocated to our program
or application is typically divided into these four parts or these 4 sections. We have talked about this in our lesson on
dynamic memory allocation. There is a link to our lesson on dynamic memory
allocation in the description of this video. I'll quickly talk about what these sections
are. One section of the application's memory is
used to store all the instructions that need to be executed. Another section is allocated to store the
global variables that live for the entire lifetime of the program, of the application. One section of the memory which is called
stack is used to store all the information about function call executions, to store all
the local variables. And these 3 sections that we talked about
are fixed in size , their size is decided at compile time. The last section that we call heap or free
store is not fixed and we can request memory from the heap during run-time and that's what
we do when we use malloc or new operator. Now, i have drawn these 3 sections of the
memory. Stack, heap and the section to store global
variables. In our program, we have declared a global
variable named head which is pointer to Node. So, it will go and sit here. And this variable is like anyone can access
it. Initially, value here is NULL. Now, in my program what i want to do is, I
first want to define two functions - Insert and this function should take two arguments
- data and the position at which i want to insert a node and insert that particular node
at that position, insert data at that position in the list. And another function Print that will simply
print all the numbers in the linked list. now, in the main method i want to make a sequence
of function calls. First i want to insert number 2, the list
is empty right now so i can only insert at position 1. So, after this Insert, list will be having
this one number, this particular number 2 and let's say again I want to insert this
number 3 at position 2. So, this will be our list after this insertion. And i will make two more insertions and finally,
I'll Print the list. So, this is my main method. I could have also asked a user to input a
number and position, but let's say we go this way this time. Now, let us first implement Insert. I will move this Print above. So, the first thing that I want to do in this
method is, I want to create a Node, so I will make a call to malloc. In C++, we can simply write a new Node for
this call to malloc and this looks a lot cleaner. let's go C++ way this time. now, what I can do is, I can first set the
data field and set the link initially as NULL. I have named this variable temp1 because I
want to use another temp variable in this function. I'll come to that in a while. We first need to handle one special case - when
we want to insert at the head, when we want to insert at the first position. So, if n is equal to 1, we simply want to
set the link field of the newly created node as whatever the existing head is and then
adjust this variable to point to the new head which will be this newly created node. And we will be done at this stage so we will
not execute any further and return from this function. If you can see, this will work even when the
list is empty because the head will be Null in that case. I'll show a simulation in the memory in a
while, so hold on till then. Things will be pretty clear to you after that. Now, for all other cases, we first need to
go to the (n-1)th node. As we had discussed in our logic initially. So,what i'll do is i'll create another pointer
to node, name this variable temp2 and we will start at the head and then we will run a loop
and go to the (n-1)th node something like this. We will run the loop n-2 times because right
now we are pointing to the head which is the first node. So, if we do this temp2 = temp2-&gt;next n-2
times, we will be pointing temp2 to (n-1)th node. And now the first thing that we need to do
is set the next or the link field of newly created node as the link field of this (n-1)
the node and then we can adjust the link of this (n-1)th node to point to our newly created
node. And, now i am writing this Print here. I have written this print here. We have used a temporary variable, a temporary
pointer to node initially pointing to head and we have traversed the whole list. Ok, so let us now run this program and see
what happens. We are getting this output which seems to
be correct. The list should be 4 5 2 3 in this order Now,
i have this code. I'll run through this code and show you what's
happening in the memory. When the program starts execution, initially
the main method is invoked. Some part of the memory from the stack is
allocated for execution of a function. All the local variables, and the state of
execution of this function is saved in this particular section, we also call this stack
frame of a function. here in this main method, we have not declared
any local variable. We have just set head to NULL which we have
already done here. Now, the next line is call to function Insert. So, the machine will set the execution of
this particular method main on hold and go on to execute this call to insert so insert
comes into the stack and insert has couple of local variables. it has two arguments - data and this variable
n. This stack frame will be a little larger because
we will have couple of local variables. And now we create this another local variable
which is a pointer to node temp1. And we use the new operator to create a memory
block in the heap and this guy temp1 initially stores the address of this memory block. Let's say this memory block is at address
150, so this guy stores the address 150. when we request some memory to store something
on the heap using new or malloc, we do not get a variable name and the only way to access
it is through a pointer variable. So, this pointer variable is the remote control
here kind of. So, here when we say temp1-&gt;data is equal
to this much, through this pointer which is our remote we are going and writing this value
2 here and then we are saying temp-&gt;next = NULL. So, null is nothing but address 0. So, we are writing address 0 here. So, we have created a Node and in our first
call n is equal to 1, so we will come to this condition. Now, we want to set temp1-&gt;next = head. temp1-&gt;next is this section, this second field
and this is already equal to head. head is Null here and this is already null. Null is nothing but 0. the only reason we said temp-&gt;next = head
will work for empty case is because head would be null. And now we are saying head is equal to temp1. So, head guy now points to this because it
stores address 150 like temp1. And in this first call to insert, after this
we will return. So, the execution of insert will finish and
now the control will return to main method. We come to this line where we make another
call to Insert with different arguments this time, we pass number 3 to be inserted at position
2. Now, once again memory in the stack frame
will be allocated for this particular call to insert. The stack frame allocation is corresponding
to a particular call. So, each time the function execution finishes,
all the local variables are gone from the memory. Now, once again in this call we create a new
node. We keep the address initially in this temporary
variable temp1. let's say we get this Node at address 100
this time. Now, n is not equal to 1, we will move on
to create another temporary variable temp2. Now, we are not creating a new node and storing
the address in temp2 here. We are saying temp2 is initially equal to
head. So, we store the address 150. So, initially, we make this guy point to the
head node. And now, we want to run this loop and we want
to keep going to the next node till we reach (n-1)th node. In this case, n = 2 so this loop will not
execute this statement even once. (n-1)th node is the first node itself. Now, we execute these two lines. The next of the newly created Node will be
set first, so we will build this link.. oopss.. NO.. temp2-&gt;next is 0 only. So, even after reset this will be 0. And now we are setting temp2-&gt;next as temp1,
so we are building this link. And now this call to insert will finish, so
we go back to the main method. So, this is how things will happen for other
calls also. After everything we have inserted, when we
will reach this print statement in the main function, our list will be something like
this in the memory. This is a little messy. i have chosen these addresses as per my convenience
for the sake of example and now Print will execute and once again I'm using a temp variable
in Print. By now, it should have been clear to you why
we use temp variable again and again and why this variable head that stores the address
of the first Node is so important. Now what if this head was not global, what
if we would have declared this head inside the main method. We have talked about this in our previous
lesson. head will not be accessible everywhere. So, in each call to these functions, in each
call to insert we will have to return some value from the function to update this head
or we will have to pass this head by reference. We have talked about this in our previous
lesson. So, this is it for this lesson. In our next lesson we will see program to
delete a node at a particular position in the list. So, Thanks for watching !",Linked List in C/C++ - Insert a node at nth position,"See complete series on linked list here:
http://www.youtube.com/watch?v=NobHlGUjV3g&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=3

In this lesson, we have written a C program to insert a node at any given position in a linked list. We have also shown a simulation of program execution in memory explaining what goes in stack section of memory and what goes in heap.

Additional Resources:
Lesson on Dynamic Memory location:
https://www.youtube.com/watch?v=_8-ht2AKyH4&list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_&index=7

Series on pointers in C/C++:
https://www.youtube.com/playlist?list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_

Feel free to drop you questions, suggestions and feedback in comments.",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,IbvsNF22Ud0
Expressingaprojectionontoalineasamatrixvectorprod_LinearAlgebra_KhanAcademy-JK-8XNIoAkI.en.csv,"  In the last video we saw that
if we had some line that was defined as all of the scalar
multiples of some vector-- I'll just write it like this. The scalar multiples,
obviously, are any real number. We defined a transformation, and
I didn't speak of it much in terms of transformations, but
it was a transformation. We defined a projection
onto that line L as a transformation. In the video, we drew it as
transformations within R2, but it could be, in general, a
transformation from Rn to Rn. We defined it as, the projection
of x onto L was equal to the dot product of x,
with this defining vector. x dot this defining vector,
divided by that defining vector dotted with itself.   All of that times the defining
vector of the line. This was our definition. A couple of things might have
popped out at you right when we first saw this. When you dot a vector with
itself, what's that equal to? We know that if I take some
vector, and I dot it with itself, that is equivalent
to the length of the vector squared. We can rewrite this as being
equal to x dot v, over the length of v squared, all
of that times v. Wouldn't it be nice if the
length of v was 1. The length of v was
equal to 1. If the length of v was 1, or
this is another way of saying that, v is a unit vector. Our formula for our projection
would just simplify to x dot v. All of that times, this will
just be some scalar number, that times v. You say, hey Sal, how do
we know if this is a unit vector or not. What you can realize is that
any-- Let me draw it this way. When I drew it in the previous
video, I just picked a line, like that. The line can be really defined
to this vector v in the line. It can be any of the vectors
that's contained in the line. The vector v could
be like that. Let's say someone gives
you a vector v that isn't a unit vector. Let's say that the length
of v is not equal to 1. How can you define a line
using sum unit vector. You can just normalize v. You can define sum unit
vector right here. You could define sum
vector right there. Let's call it u, and I'll
say it's a unit vector. That is equal to 1 over 1 over
the length of v times v. I showed you this in the
unit vector video. You can construct a unit vector
that goes in the same direction as any vector,
essentially just by dividing, or I guess multiplying,
that vector times 1 over its length. In general, we can always
redefine the line. All of the possible scalar
multiples of v are going to be the same thing as all of the
scalar multiples of our unit vector, u, which is just
a scalar multiple of v. We can redefine our line. If we redefine our line, L,
as being equal to all the possible scalar multiples of
our unit vector, where the scalars are any members
of the real numbers. Our projection definition
simplifies a good bit. The projection of x onto L
becomes x dot our unit vector, times the unit vector, times
the unit vector itself. That case that I did in the
previous video, where I had those two vectors. Where I said the vector v that
defined the line, I think it was vector 2, 1. Our vector x was
equal to 2, 3. If you want to do this
definition, we just have to turn this guy into a
unit vector first. The way you turn him into a unit
vector, you figure out the magnitude. In this case the magnitude
of v is equal to what. 2 squared plus 1 squared is 1. You take the square
root of that. Let me just write. It's equal to square root of 2
squared plus 1 squared, which is equal to the square
root of 5. You can define your u-- your
unit vector could just be 1 over this, times that guy. 1 over the square root
of 5 times 2, 1. You could multiply
it out, or not. You could just leave
it in this form. You can always, for any vector
v, you can always find a unit vector that goes in the same
direction, assuming that we're dealing with non-zero vectors. You can always reduce anything
like this, to some other definition, like this. Where this is a unit
vector version of your vector v up there. I just said that,
look, this is a transformation from Rn to Rn. The one thing that we're not
sure of, is this a linear transformation. We can always write
it like this. Let's see if this is always
going to be a linear transformation. There's two conditions for it to
be a linear transformation.   Let's see what happens if I take
the projection onto L of two vectors. Let's say the vector a
plus the vector v. If I take the sum of
their vectors. If this is a linear
transformation, this should be equivalent to taking each
of their projections individually, and
then summing. Let's see if this is the case. This is equal to, by our
definition, we'll use the unit vector version, because
it's simpler. This is equal to a plus b,
that's our x, dot u. And then, all of that times
our unit vector. We know that the dot product has
a distributive property, so that this is equal to
a dot u plus b dot u. These are unit vectors. All of that times
the vector u. These are just scalar numbers. So scalar multiplication has
distributive properties. This is equal to a dot u,
times our vector u. Remember, this is just going
to be some scalar. Plus b dot u times our
unit vector u. What is this equal to. This right here is equal
to the projection of a. This is equal to the projection
of a onto L, by definition, right here. By this definition. If we assume that we're dealing
with the unit vector definition for the line. This is equal to, this whole
thing right here, is equal to plus the projection onto
L of the vector b. We see our first condition
for this being a linear transformation holds. A projection of the sum of the
vectors is equal to the sum of the projections of
the vectors. Our second condition is that
the projection of a scalar multiple should be equal to
a scalar multiple of the projection. Let me write that down. What is the projection onto L
of some scalar multiple of some vector a. That is equal to ca dot
our unit vector u times unit vector u. This one is a little bit
more straightforward. This is the scalar multiple. We see it in our dot product
properties, this is equal to c times a dot u, times
the vector u. This is just equal to c times,
this right here, is a projection of a onto L.   We met both of our conditions
for linear transformations. We know that our projection
onto a line L in Rn is a linear transformation. That tells us that we can
represent it as a matrix transformation.   We know that projection of x
onto L, we already know this definition, it can
be rewritten. It doesn't hurt to rewrite it. As x dot some unit vector
that defines our line. Let me draw it with a little
hat to show that it is a unit vector. Times the unit vector
itself, so that we actually get a vector. How can I write this as
some matrix product. Some matrix vector product. I want to write it as
a product of some matrix times x.   To simplify things, since we're
actually dealing with a matrix, let's limit ourselves
to the case of R2. I'm assuming that my projection
onto L is going to be a mapping from R2 to R2. You could do what I'm
doing here with an arbitrary dimension. If we're doing it in R2, then
our matrix A, right there, is going to be a 2 by 2 matrix. We've seen in multiple videos
that to figure out the matrix A, we just take the identity
matrix that has the standard basis vectors as columns. 0, 1. Or 1, 0, and then 0, 1. And we apply the transformation
to each of these columns. We could say that A is going
to be equal to-- its first column is going to be equal to
the projection onto L of this thing right here. We'll do it in this orange
color, right here. What is that going to be. That is going to
be this dot u. Let me write my u. My unit vector, let's just
assume that u can be rewritten as my unit vector is equal
to sum u1 and u2. Just like that. I need to take this dot
my unit vector, let me write this down. Let me write this on the side. The first thing I want to do
is figure out what the projection-- the projection
onto L, let me write it this way. We know the projection is just
equal to this dot this times that vector. Let me write that. The vector 1, 0 dot
the unit vector u, which is just u1, u2. We're going to have that
times my unit vector. I'll write it like this. Times the vector u1, u2. This is going to be my
first column in my transformation matrix. My second column is going to be
the same thing, but I'm not ready to take the projection
of this guy. The definition of our projection
is you dot this guy with our unit vector. So we dot it. We're taking the dot
product of 0, 1. 0, 1 dot my unit vector
dot u1, u2. I'm going to multiply
that times my unit vector, times u1, u2. This seems very complicated, but
it should simplify when we actually try to work out our
transformation matrix. Let's do it. When I dot these two guys,
what do I get. Let me write it here. My matrix A will become 1 times
u1, plus 0 times u2. That's just u1. This whole thing just simplifies
to u1, when I take the dot product of
these two things. Times u1, u2. That's going to be
my first column. My second column, if I dot these
two guys, I get 0 times u1 plus 1 times u2. So I'm going to get u2 times
my unit vector, u1, u2. If I multiply that out, this
will be equal to what. I can just write them
as columns. u1 times u1 is u1 squared. u1 times u2 is u1, u2. u2 times u1 is u2 times u1. Then, u2 times u2
is u2 squared. You give me any unit vector
and I will give you the transformation that gives you
any projection of some other vector onto the line
defined by that. That was a very long
way of saying that. Let's go back to what
I did before.   Let's say we want to find any
projection onto the line, onto the vector, I'll draw it here. We'll do the same example that
we did in the last video. If I have some vector v
that looks like that. We said the vector v was equal
to the vector 2, 1. That was my vector v. How can we find sum
transformation for the projection onto the
line defined by v? Onto this line right here. The line defined by v. What we can first do is convert
v into a unit vector. We can convert v into
a unit vector that goes in the same direction. Some unit vector u. We did that already up here. Where we essentially just
divided [? bv ?] by it's length. Let's take v and divide
by it's length. The unit vector is this, 1
over the square root of 5 times our vector v. It was 1 over the square
root of 5 times our vector v, right there. You start with a unit
vector there. You just create this matrix,
and then we will have our transformation matrix. If this is our u, what will
our matrix be equal to. This is u. Then our matrix would be
equal to u1 squared. What is u1 squared. Let me rewrite our u a little
bit, not at angles. Our vector u, our unit vector
that defines this line, is equal to the vector 2 over the
square root of 5 and 1 over the square root of 5. I just multiplied
out this scalar. If we want to construct this
matrix, we get A is equal to u1 squared. What is this squared? It becomes 2 squared 4 over the
square root of 5 squared, which is just 5. Equals 4 over 5. What is u1 times u2? 2 times 1 over square root of
5 times square root of 5. So, 2/5. I just multiplied these two. What is u2 times u1. Same thing. Order doesn't matter
when you multiply. This will also be 2/5. What is u2 squared. 1 squared over the square root
of 5 squared is just 1/5.   Now we can say-- and that's the
neat thing about creating these matrices, that the
projection-- Let's say we have some, let's say this is the
origin right here, we have some other vector
x, right here. We can now define our
transformation. The projection onto L where
L is equal to any scalar multiple of our unit vector u. It's right here. Is a member of the reals. That is our line L. The projection onto L
of any vector x is equal to this matrix. Is equal to the matrix 4, 5,
2/5, 2/5, 1/5 times x. Which is a pretty neat result,
at least for me. We once again reduced everything
to just a matrix multiplication. You take this x and you multiply
it by this matrix, you're going to get its
projection onto the L, onto the line. If you take this vector, let's
say a, and you multiply it times this matrix right there,
you're going to get its projection. Its projection onto the line. If you could take this vector--
No, it should go through the origin. I want to draw it in
standard position. If you take this vector, right
there, and multiply it times this matrix, you're going to get
this vector, right here, that is contained in the line. When you subtract it from
this, it's orthogonal. We know the definition. It's kind of the shadow
of that vector. Anyway, I think this
is pretty neat.",Expressing a projection on to a line as a matrix vector prod | Linear Algebra | Khan Academy,"Expressing a Projection on to a line as a Matrix Vector prod

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/composition_of_transformations/v/compositions-of-linear-transformations-1?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/introduction-to-projections?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,JK-8XNIoAkI
Dimensionofthecolumnspaceorrank_Vectorsandspaces_LinearAlgebra_KhanAcademy-JUgrBkPteTg.en.csv,"We've seen in several videos
that the column space of a matrix is pretty straightforward
to find. In this situation the column
space of A is just equal to all of the linear combinations
of the column vectors of A. Another way of saying all of
the linear combinations is just the span of each of
these column vectors. So if we call this one
right here a1. This is a2, a3, a4. This is a5. Then the column space of A is
just equal to the span of a1, a2, a3, a4, and a5. Fair enough. But a more interesting question
is whether these guys form a basis for the
column space. Or even more interesting, what
is the basis for the column space of A? And in this video I'm going
to show you a method for determining the basis, and along
the way we'll get an intuition for maybe
why it works. And if I have time, actually I
probably won't have time in this video. In the next video I'll prove
to you why it works. So we want to figure out
the basis for the column space of A. Remember the basis just means
that vectors span, C, A. Clearly these vectors span
our column space. I mean the span of these vectors
is the column space. But in order to be a basis, the
vectors also have to be linearly, let me just write,
linearly independent. And we don't know whether these
guys or what subset of these guys are linearly
independent. So what you do-- and I'm just
really going to describe the process here, as opposed to the
proof-- is you put this guy in reduced row
echelon form. So let's do that. So let me see if
we can do that. Let's keep our first
row the same. 1, 0. Let me do it actually in the
right side right here. So let's keep the first
row the same. 1, 0, minus 1, 0, 4. And then let's replace our
second row with the second row minus 2 times the first row. So then our second row. 2 minus 2 times 1 is 0. 1 minus 2 times 0 is 1. 0 minus 2 times negative
1, so that's 0 plus 2. 0 minus 2 times 0 is just 0. And then 9 minus
2 times 4 is 1. Fair enough. Now we want to zero
out this guy. Well it seems like a pretty
straightforward way. Just replace this row with this
row plus the first row. So minus 1 plus 1 is 0. 2 plus 0 is 2. 5 minus 1 is 4. 1 plus 0 is 1. Minus 5 plus 4 is minus 1. And then finally we got this guy
right here, and in order to zero him out, let's
replace him with him minus the first row. So 1 minus 1 is 0. Minus 1 minus 0 is minus 1. Minus 3 minus negative 1, that's
minus 3 plus 1, so that's minus 2. Minus 2 minus 0 is minus 2. And then 9 minus 4 is 5. So we did one round. We got our first pivot
column going. Now let's do another round
of row operations. Well we want to zero all
of these guys out. Luckily this is already 0. So we don't have to change our
first row or our second row. So we get 1, 0, minus 1, 0, 4. Our second row becomes
0, 1, 2, 0, 1. And now let us see if we can
eliminate this guy right here. And let's do it by replacing our
blue row, our third row, with the third row minus
2 times the second row. So 0 minus 2 times 0 is 0. 2 minus 2 times 1 is 0. 4 minus 2 times 2 is 0. 1 minus 2 times 0 is 1. Minus 1 minus 2 times
1 is minus 3. All right. Now this last guy we want to
eliminate him, and we want turn this into a 0. Let's replace this fourth row
with the fourth row plus the second row. So 0 plus 0 is 0. Minus 1 plus minus 1 is 0. Minus 2 plus minus 2 is 0. Minus 2 plus 0 is minus 2. And then 5 plus 1 is 6. We're getting close. So let's look at our
pivot entries. We have this is a pivot entry. That's a pivot entry. And this is not a pivot entry,
because it's following obviously another. This guy is a pivot entry
right here, or will be. Zero this minus 2 out, and
I think we'll be done. So let me write my first row
just the way it is, because everything above it is
0, so we don't have to worry about it. So my first row I can just write
as 1, 0, minus 1, 0, 4. I can write my second
row, 0, 1, 2, 0, 1. I can write my third row
as 0, 0, 0, 1 minus 3. And now let's replace
my fourth row. Let's replace it with it plus
2 times the second row. So 0 plus 2 times 0, 0 plus 2
times 0, 0 plus 2 times 0, minus 2 plus 2 times
1 is just 0. 6 plus 2 times minus 3, that's
6 minus 6, that's just 0. And there we've actually put
our matrix in reduced row echelon form. So let me put brackets
around it. It's not so bad if you just
kind of go and just do the manipulations. And sometimes you kind of get
a headache thinking about doing something like this,
but this wasn't too bad. So this is let me just say the
reduced row echelon form of A. Let me just call
that matrix R. So this is matrix
R right there. Now what do we see
about matrix R? Well it has 3 pivot entries,
or 3 pivot columns. Let me square them out,
or circle them out. Column 1 is a pivot column,
column 2 is a pivot column, and column 3 is a
pivot column. And we've done this in
previous videos. There's two things
that you can see. These three columns are clearly
linearly independent. How do we know that? And that's just with respect
to each other. If we just took a set of, let's
call this r1, r2, and this would be r3, this would
be r4 right here. It's clear that the set r1,
r2, and r4 is linearly independent. And you say why is that? Well look, our one's got a 1
here, while the other two have a 0 in that entry, right? And this is by definition
of pivot entries. Pivot entries have 0's, or
pivot columns have 0's everywhere except for
where they have a 1. For any pivot column, it will be
the only pivot column that has 0's there. Or it'll be the only pivot
column that has a 1 there. So there's no way that you can
add up combinations of these guys to get a 1. You can say 100 times
0, minus 3, times 0. You're just going to
get a bunch of 0's. So no combination of these
two guys is going to be equal to that guy. By the same reasoning, no
combination of that and that is going to equal this. This is by definition
of a pivot entry. When you put it in reduced row
echelon form, it's very clear that any pivot column will
be the only one to have 1 in that place. So it's very clear that these
guys are linearly independent. Now it turns out, and I haven't
proven it to you, that the corresponding columns in
A-- this is r1, but it's A before we put it in reduced row
echelon form-- that these guys right here, so a1, a2,
and a4 are also linearly independent. So a1-- let me circle
it-- a2, and a4. So if I write it like this,
a1, a2, and a4. Let me write it in
set notation. These guys are also linearly
independant, which I haven't proven. But I think you can kind of
get a sense that these row operations really don't change
the sense of the matrix. And I'll do a better explanation
of this, but I really just wanted you to
understand how to develop a basis for the column space. So they're linearly
independent. So the next question is do they
span our column space? And in order for them to span,
obviously all of these 5 vectors, if you have all of
them, that's going to span your column space
by definition. But if we can show, and I'm not
going to show it in this video, but it turns out that you
can always represent the non-pivot columns as
linear combinations of the pivot columns. And we've kind of touched on
that in previous videos where we find a solution for the
null space and all that. So these guys can definitely
be represented as linear combinations of these guys. I haven't shown you that, but
if you take that on faith, then you don't need
that column and that column to span. If you did then, or I guess a
better way to think it, you don't need them to span,
although they are part of the span. Because if you needed this guy,
you can just construct him with linear combinations
of these guys. So if you wanted to figure out
a basis for the column space of A, you literally
just take A into reduced row echelon form. You look at the pivot entries
in the reduced row echelon form of A, and that's
those three. And then you look at the
corresponding columns to those pivot columns in your
original A. And those form the basis. Because any linear combination
of them, or linear combinations of them can be
used to construct the non-pivot columns, and they're
linearly independant. So I haven't shown you that. But for this case, if you want
to know the basis, it's just a1, a2, and a4. And now we can answer
another question. So a1, a2, and a4 form a basis
for the column space of A, because you can construct the
other two guys with linear combinations of our basis
vectors, and they're also linearly independent. Now the next question is what is
the dimension of the basis? Or what is the dimension-- not
the dimension of the basis-- what is the dimension of
the column space of A? Well the dimension is just the
number of vectors in any basis for the column space. And all bases have the same
number of vectors for any given subspace. So we have 1, 2, 3 vectors. So the dimension of our column
space is equal to 3. And the dimension of a column
space actually has a specific term for it, and that's
called the rank. So the rank of A, which is the
exact same thing as the dimension of the column space,
it is equal to 3. And another way to think about
it is, the rank of A is the number of linearly independent
column vectors that you have that can span your entire
column space. Or the number of linearly
independent column vectors that can be used to construct
all of the other column vectors. But hopefully this didn't
confuse you too much, because the idea is very simple. Take A, put it into reduced row
echelon form, see which columns are pivot columns. The corresponding columns are
going to be a basis for your column space. If you want to know the rank for
your matrix, you can just count them. Or if you don't want to count
those, you could literally just count the number of pivot
columns you have in your reduced row echelon form. So that's how you do it. In the next video I'll explain
why this worked.",Dimension of the column space or rank | Vectors and spaces | Linear Algebra | Khan Academy,"Dimension of the Column Space or Rank

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/showing-relation-between-basis-cols-and-pivot-cols?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/dimension-of-the-null-space-or-nullity?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,JUgrBkPteTg
Matrices-Reducedrowechelonform3_Vectorsandspaces_LinearAlgebra_KhanAcademy-JVDrlTdzxiI.en.csv,"I have here three linear
equations of four unknowns. And like the first video, where
I talked about reduced row echelon form, and solving
systems of linear equations using augmented matrices, at
least my gut feeling says, look, I have fewer equations
than variables, so I probably won't be able to constrain
this enough. Or maybe I'll have an infinite
number of solutions. But let's see if I'm right. So let's construct the augmented
matrix for this system of equations. My coefficients on the x1
terms are 1, 1, and 2. Coefficients on the x2
are 2, 2, and 4. Coefficients on x3
are 1, 2, and 0. There's of course no x3 term,
so we can view it as a 0 coefficient. Coefficients on the x4 are
1, minus 1, and 6. And then on the right-hand side
of the equals sign, I have 8, 12, and 4. There's my augmented matrix,
now let's put this guy into reduced row echelon form. The first thing I want to do is,
I want to zero out these two rows right here. So what can we do? I'm going to keep my first row
the same for now, so it's 1, 2, 1, 1, 8. That line essentially represents
my equals sign. What I can do is, let me
subtract-- let me replace the second row with the second
row minus the first row. So 1 minus 1 is 0, 2 minus 2
is 0, 2 minus 1 is 1, 1-- negative 1 minus 1 is minus 2,
and then 12 minus 8 is 4. There you go, that looks good so
far, it looks like column, or x2 which is represented by
column two, looks like it might be a free variable, but
we're not 100% sure yet. Let's do all of our rows. So let's take-- to get rid of
this guy right here, let's replace our third equation with
the third equation minus two times our first equation. So we get 2 minus 2 times 1 is
0, 4 minus 2 times 2, well that's 0, 0 minus 2 times
1, that's minus 2. 6 minus 2 times 1, well
that's 4, right? 6 minus 2. And then 4 minus 2 times
8, is minus 16, 4 minus 16 is minus 12. Now what can we do? Well, let's see if we can
get rid of this minus 2 term right there. So let me rewrite my
augmented matrix. I'm going to keep row two the
same this time, so I get a 0, 0, 1, minus 2, and essentially
my equals sign, or the augmented part of the matrix. And now let's see
what I can do. Let me get rid of this 0 up
here, because I want to get into reduced row echelon form. So any of my pivot entries,
which are always going to have the coefficient 1, or the entry
1, it should be the only non-zero term in my row. How do I get rid of
this one here? Well I can subtract-- I can
replace row one with row 1 minus row 2. So 1 minus 0 is 1, 2 minus 0 is
2, 1 minus 1 is 0, 1 minus minus 2, that's 1 plus
2, which is 3. And then 8 minus 4 is 4. And now how can I get
rid of this guy? Well let me replace row 3 with
row 3 plus 2 times row 1. Sorry, with row 3 plus
2 times row 2. Right? Because then you'd have minus
2, plus 2 times this, and they'd cancel out. So let's see the zeros. 0 plus 2 times 0, that's 0. 0 plus 2 times 0, that's 0,
minus 2 plus 2 times 1 is 0. 4 plus 2 times minus 2, that's
4 minus 4, that's 0. And then I have minus
12, plus 2 times 4. That's minus 12 plus
8, that's minus 4. Now, this is interesting right
now-- this is interesting. I have essentially put this in
reduced row echelon form. I have two pivot entries, that's
a pivot entry right there, and that's a pivot
entry right there. They're the only non-zero term
in their respective columns. And this is just kind of a style
issue, but this pivot entry is in a lower
row than that one. So it's in a column to the right
of this one right there. And I just inspected, this looks
like a-- this column two looks kind of like a free
variable-- there's no pivot entry there, no pivot
entry there. But let's see, let's
map this back to our system of equations. These are just numbers to
me and I just kind of mechanically, almost like a
computer, put this in reduced row echelon form. Actually, almost exactly
like a computer. But let me put it back to my
system of linear equations, to see what our result is. So we get 1 times x1, let
me write it in yellow. So I get 1 times x1, plus 2
times x2, plus 0 times x3, plus 3 times x4 is equal to 4. Obviously I could ignore this
term right there, I didn't even have to write it. Actually. I'm not going to write that. Then I get 0 times x1, plus 0
times x2, plus 1 times x3, so I can just write that. I'll just write the one. 1 times x3, minus 2 times
x4, is equal to 4. And then this last term,
what do I get? I get 0 x1, plus 0 x2 plus 0
x3 plus 0 x4, well, all of that's equal to 0, and I've got
to write something on the left-hand side. So let me just write a 0,
and that's got to be equal to minus 4. Well this doesn't make
any sense whatsoever. 0 equals minus 4. This is this is a nonsensical
constraint, this is impossible. 0 can never equal minus 4. This is impossible. Which means that it is
essentially impossible to find an intersection of these three
systems of equations, or a solution set that satisfies
all of them. When we looked at this
initially, at the beginning of the of the video, we said
there are only three equations, we have four
unknowns, maybe there's going to be an infinite set
of solutions. But turns out that these three--
I guess you can call them these three surfaces--
don't intersect in r4. Right? These are all four dimensional,
we're dealing in r4 right here, because we have--
I guess each vector has four components, or we have four
variables, is the way you could think about it. And it's always hard to
visualize things in r4. But if we were doing things
in r3, we can imagine the situation where, let's say
we had two planes in r3. So that's one plane right there,
and then I had another completely parallel
plane to that one. So I had another completely
parallel plane to that first one. Even though these would be two
planes in r3, so let me give an example. So let's say that this first
plane was represented by the equation 3x plus 6y plus 9z is
equal to 5, and the second plane was represented by the
equation 3x plus 6y plus 9z is equal to 2. These two planes in r3-- this is
the case of r3, so this is r3 right here. These two planes, clearly
they'll never intersect. Because obviously this one has
the same coefficients adding up to 5, this one has the same
coefficient adding up to 2. And when, if we just looked at
this initially, if it wasn't so obvious, we would have
said, we have only two equations with three unknowns,
maybe this has an infinite set of solutions. But it won't be the case,
because you can actually just subtract this equation, from the
bottom equation, from the top equation. And what do you get? You would get a very familiar--
so if you just subtract the bottom equation
from the top equation, and you get 3x minus 3x, 6y minus 6y, 9z
minus 9z-- actually, let me do it right here. So for that minus that, you get
zero is equal to 5 minus 2, which is 3. Which is a very similar result
that we got up there. So when you have two parallel
planes, in this case in r3, or really to any kind of two
parallel equations, or a set of parallel equations,
they won't intersect. And you're going to get, when
you put it in reduced row echelon form, or you just do
basic elimination, or you solve the systems, you're going
to get a statement that zero is equal to something, and
that means that there are no solutions. So the general take-away,
if you have zero equals something, no solutions. If you have the same number of
pivot variables, the same number of pivot entries as you
do columns, so if you get the situations-- let me write this
down, this is good to know. if you have zero is equal
to anything, then that means no solution. If you're dealing with r3,
then you probably have parallel planes, in r2 you're
dealing with parallel lines. If you have the situation where
you have the same number of pivot entries as columns, so
it's just 1, 1, 1, 1, this is the case of r4 right there. I think you get the idea. That equals a, b, c, d. Then you have a unique
solution. Now if, you have any free
variables-- so free variables look like this, so let's say we
have 1, 0, 1, 0, and then I have the entry 1, 1,
let me be careful. 0, let me do it like this. 1, 0, 0, and then I have the
entry 1, 2, and then I have a bunch of zeroes over here. And then this has to equal
zero-- remember, if this was a bunch of zeroes equaling some
variable, then I would have no solution, or equalling some
constant, let's say this is equal to 5, this
is equal to 2. If this is our reduced row
echelon form that we eventually get to, then we have
a few free variables. This is a free, or I guess we
could call this column a free column, to some degree this
one would be too. Because it has no
pivot entries. These are the pivot entries. So this is variable x2 and
that's variable x4. Then these would be
free, we can set them equal to anything. So then here we have unlimited
solutions, or no unique solutions. And that was actually the
first example we saw. And these are really the three
cases that you're going to see every time, and it's good to
get familiar with them so you're never going to get
stumped up when you have something like 0 equals minus
4, or 0 equals 3. Or if you have just a bunch of
zeros and a bunch of rows. I want to make that
very clear. Sometimes, you see a bunch of
zeroes here, on the left-hand side of the augmented divide,
and you might say, oh maybe I have no unique solutions,
I have an infinite number of solutions. But you have to look at
this entry right here. Only if this whole thing is
zero and you have free variables, then you have an
infinite number of solutions. If you have a statement like,
0 is equal to a, if this is equal to 7 right here, then all
of the sudden you would have no solution to this. That you're dealing with
parallel surfaces. Anyway, hopefully you
found that helpful.",Matrices: Reduced row echelon form 3 | Vectors and spaces | Linear Algebra | Khan Academy,"And another example of solving a system of linear equations by putting an augmented matrix into reduced row echelon form

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/matrix-vector-products?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/matrices_elimination/v/matrices-reduced-row-echelon-form-2?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,JVDrlTdzxiI
Datastructures-IntroductiontoDoublyLinkedList-JdQeNxWCguQ.en.csv,"Hello everyone ! In our lessons in this series
so far, we have discussed linked list quite a bit. We have seen how we can create a linked list
and how we can perform various operations with linked list. Linked lists as we know are collections of
entities that we call Nodes. So far, in all our implementations, we have
created linked list in which each Node would contain two fields - one to store data and
another to store address of the next node. Lets say we have a linked list of integers
here. So, I'll fill in some values in data field
of each Node. Lets assume that these Nodes are at addresses
200, 250 and 350 respectively. I'll also fill in the address field in each
Node. The address field in first Node will be the
address of second node which is 250. The address field in second node will be address
of third node which is 350 and address part in third Node will be 0 or Null. The identity of a linked list that we always
keep with us is the address of head Node or reference to head Node. Lets say we have a variable named head only
to store the address of head node. Remember this variable named head is only
a pointer to the head Node. Ideally, we should have named this something
like head pointer. its only pointing to the head Node, its not
the head Node itself. head Node is this guy. The first node in the linked list. Ok, so right now, in the linked list that
we are showing here each node has only one link, a link to the next Node. In a real program, Node for the linked list
that I am showing here will be defined like this. This is how we have defined Node so far in
all our lessons. We have two fields here - one of type integer
to store data and another of type pointer to Node - struct Node asterisk. I am calling this field next. When we say linked list, by default we mean
such a list that we can also call singly linked list. What we have here is a singly linked list. What we want to talk about in this lesson
is idea of a doubly linked list. The idea of a doubly linked list is really
simple. In a doubly linked list, each Node would have
two links - one to the next Node and another to the previous Node. Programatically, this is how we will define
Node for a doubly linked list in C or C++. I have one more field here which once again
is a pointer to Node. So, I can store address of a Node. i can point
to another Node using this field and this field will be used to store the address of
the previous Node. In a logical representation, I will draw my
Node like this now. I have one field to store data, one to store
address of previous Node and one to store address of next Node. Lets say I want to create a doubly linked
list of integers. I have created 3 Nodes here. Lets say these nodes at addresses 400, 600
and 800 respectively. I'll fill in some data. lets say the cell in the middle in each Node
is to store data. The rightmost cell is lets say to store the
address of the next Node. So, for first Node this field will be 600
which means we have a link like this. For second Node, this field will be 800. For third Node, this field will be zero. For first Node, there is no previous Node,
so this leftmost cell which is supposed to contain the address of the previous Node will
be zero or NULL. The previous Node for second Node will be
400 and the previous Node for the third Node is the Node at address 600. And of course we will have a variable to store
the address of the head Node. Ok, so what we have here is a doubly linked
list of integers with 3 Nodes. Ok, so with this much, you already know doubly
linked list. If you have ever implemented a singly linked
list then it should not be very difficult implementing a doubly linked list. One obvious question would be, why would we
ever want to create a doubly linked list. What are the advantages or use cases of doubly
linked list. First advantage is that now if we have pointer
to any Node, then we can do a forward as well as reverse look-up. With just one pointer, we can look at the
current Node , the next Node as well as the previous Node. I am showing a pointer named temp here. If temp is a pointer pointing to a Node, then
temp-&gt;next is a pointer pointing to the next Node. Its the address of the next Node and temp-&gt;prev
or rather temp arrow previous , this is actually a syntactical sugar for asterisk temp dot
prev. So, this guy temp-&gt;prev is previous Node Or
in pure words, pointer to previous Node. The value stored in temp for this example
right now is 600. temp-&gt;next is 800 and temp-&gt;prev is 400. In a singly linked list, there is no way you
can look at the previous Node with just one pointer. you will have to use an extra pointer to keep
track of the previous Node. In a lot of scenarios, the ability to look
at the previous Node makes our life easier. Even implementation of some of the operations
like deletion becomes a lot easier. In a singly linked list, to delete a Node,
you would need two pointer - one to the Node to be deleted and one to the previous Node.
but in a doubly linked list, we can do so using only one pointer, a pointer to the Node
to be deleted. All in all this ability that we can do a reverse
look-up in the linked list is really useful. We can flow through the linked list in both
directions. Disadvantage of doubly linked list is that
we are having to use extra memory for pointer to previous Node. For a linked list of integers, lets say integer
takes 4 bytes in a typical architecture and pointer also takes 4 bytes, pointer variable
also takes 4 bytes, then in a singly linked list, each Node will be 8 bytes - 4 for data
and 4 for link to the next Node. In a doubly linked list, each Node will be
12 bytes. We will take 4 bytes for data and 8 bytes
for link. For a linked list of integers, we will take
twice for links than data. With a doubly linked list, we also need to
be more careful while resetting links, while inserting or deleting, we need to reset couple
of more links than a singly linked list and so we are more prone to errors. We will implement doubly linked list in a
C program in next lesson. We will write basic basic operations like
traversal, insertion and deletion. This is it for this lesson. Thanks for watching !",Data structures: Introduction to Doubly Linked List,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described doubly linked list data structure. 

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,JdQeNxWCguQ
Printelementsofalinkedlistinforwardandreverseorderusingrecursion-K7J3nCeRC80.en.csv,"In our series on linked list so far, we
have implemented some of the basic operations like
insertion deletion and traversal. Now in this lesson we
will write code to traverse and print the
elements of a linked list using recursion. Prerequisite for this lesson is that you
should understand recursion as a programming concept well. Recursive traversal of linked list
actually helps us solve couple of interesting problems but in
this lesson we will keep it simple We will just traverse and print
all the elements in linked list using recursion. and we will write one simple variation to print all the elements in reverse order.
using recursion. We will actually not reverse the
list we will just print the elements in reverse order. So, once again I have taken example of a
linked list of integers here we have four nodes, each rectangle here is
a Node It has two fields, one to store the data
and another to store the address of the next node let's say we have four Nodes at addresses
100 200 150 and 250 respectively. And of course we will also have a
variable that will store the address of the head node. Let's name
this variable head. Programmatically in our C or C plus plus
program Node will be defined something like this
We will have a structure with  two fields, one to store the data and another to store the address of the next Node. What
we want to do in this particular lesson is that we want to write two
functions first we want to write a function named
print that will take address of the Node as argument. We will first
past this function the address of the head node, so let's name this argument head and in
this function we will use recursion to print elements in the list so for
this particular example here if we want to print a space separated
list of all the elements our output will be something like this and
we also want to write another function named reverse print.
Here also we will take the address of the Node. So we will pass this
guy the address of the head node and in this function we will use 
recursion to print the elements in the list in reversed order. So if we have to print a
space separated list for this example our output will be something like this.
So let's first implement the print function. in my C code here, I will declare print
function like this it will take as argument the address 
of a node so the argument is of type pointer to Node.
Initially we will pass the address of the head node. We can name this argument head or we can
name this argument p. we can name it whatever but we must
understand that this will be local variable and let's not
bother about other infrastructure in the code like
how we would create a linked list and how we would insert
a node in the linked list. let's assume that they are in place so let's
keep the name of this particular argument p. Now recursion is a function calling itself so we have been passed the address
of the node initially the head node, so what we can do in our code is first we can
print the value at that particular node with
a printf statement like this and then we can
make another call to the print function and this time we will pass the address of the next node with a
statement like this. This next field is also a pointer to node, so
this will pass the address of the, this will be the
address of the next node Now, there is one more important thing in
recursion and that we should never forget and it's
the exit condition from recursion. we should not go on making recursive
calls infinitely. So in this case if we go from the first
node to the second node and from the second node to the third node using recursion, then finally
at one stage, p will be equal to NULL in one of the calls. So at
this stage we can avoid making a recursive call,
we will exit and we will show you a simulation of
how things will happen. in memory. Hold on for a while,so once we
will reach the end of the list p will be equal to NULL and we will
exit. the recursion at that stage. Now I will write
the main method, We have already written the insert function
here so I'll declare a variable head as NULL in the main method. So head will be a
local variable. Once again we could name this particular variable
a or b or whatever Just because this variable points to the
head node or the first node in the list we name this variable as head and then we will insert some nodes in
the linked list by making calls to the insert
function that takes the address of the head node as
argument. Initially head is set as NULL to say
that the list is empty and there should be two arguments to head to the function insert. The address of
the head node and the value that needs to be inserted and why is it that this particular function
insert is returning a pointer. It's because this head in the main method is a local
variable and if we pass it to the function we
just pass a copy of the address of the head node. In this head
which will be a local variable of the insert function so
this guy returns us back the address of the modified head. So,
we can update it in the main function. This function inserts
a a node at the end of the list. So, initially
when head is null head will be modified in the insert
function For other cases it will not be modified
if we are inserting at the end so we will make four such calls to the
insert function to create a linked list of four integers
2, 4, 6, 5 and now we will make a call to print
function and pass it the address of the head node.
Let us now run this code and see what happens. As you
can see we have got this output 2, 4, 6, 5 The print function here in our code
which is a recursive implementation to print the lists is
working now I'll make one slight change in the
print function instead of printing the value in the
node and then making making a recursive call I will first make a recursive call and then
when the recursive call finishes, I will print the value in the Node and I will not modify anything else in the code.
The main method will remain the same And if we run this code, we can see that the elements in the
list are printed in reverse order. So we just implemented the reverse print
print function that we have talked about Let us now analyse these two
recursive implementations in a logical view in our example here if we want to print this particular list
we will do something like from the main method we will make a
call to the print function passing it the address of the head
node so initially this print function it's been
called with  p equal 100 now in the execution of
this function we will come here if p is equal to NULL, NULL is address
zero. And our argument is 100 so control will not
go inside this if condition. We will come here we will print p-&gt; data. p-&gt;data means that
we will first dereference the address So, we will go to the address 100 and then we
will look at the data field there. So, on the console we will print the data field
of the data field at address 100 and now the recursive call we will make a call
to print function passing it address p-&gt;next which is 200 and execution of this particular
call will not finish It will finish only after print(200)
finishes.  We will come back to it now print(200)
once again prints the data at address 200 and
then makes a recursive call to print function passing address 150
and we will go on like this. In this call to print with address 250 We will first print the data and the address
field the value of P-&gt;next  is 0, what we can also say NULL.  We will make a call like this. Now for this
call with arguments null we have reached end,
the exit condition recursion will not grow
further. So we will just print an end-of-line and return. This particular structure that we have
drawn here is called recursion tree so print(NULL) function will finish
and control will return back to  print(250) there is no statement after this particular recursive call
finishes so we will simply exit this function call also and control
will return back to print(150). And we will go on like this. Finally we
will come back to the main method If you want to see how the recursion
will execute in the memory Then i will have to draw a diagram like
this. Applications memory, the memory that is allocated for the
execution of a program has these two sections. All the details
of function called execution and the local variables they're stored in the stack section of
the memory and any memory that is allocated using
the malloc function or the new operator in C plus plus they
go to the heap section The memory for the Nodes in a linked
list is allocated from the heap so that's why these four nodes in our example are
sitting in the heap. If you want to know in detail about
stack and heap, check the description of this video for a lesson on dynamic
memory allocation.  When the program will start executing
first the main function will be invoked anytime a function is invoked some
amount of memory from the stack is allocated for the execution of that particular function
and is called the stack frame of that function so let's say Main is executing. We have
already inserted some nodes in the linked list. We have
this variable head in the main function so all the local variables
will sit in the stack frame of the function so
head will sit here. Now at this stage let's say main
makes a call to print function so main was executing and now it makes a
call to print function execution of Main will be paused and
we will go on to execute the print function. The argument passed to the print function is
100 which is stored in the local area. This
argument p is a local variable in the print function Now, print function again makes a recursive call.
Now, stack frame is alocated corresponding to each call of a function. So, a function calling itself is not
different from a function calling another function. At any time whatever
function call is at the top of the stack is executing. Finally
when we will reach the exit condition of recursion, stack will be something
like this.  First this call where p is 0 will
finish.  We will come back to this particular call
and then this will finish and we will go on like this so this is how recursion works. 
This is how things will happen in the memory. Okay so now I'll clear this diagram of stack and heap in
the right and I'll make some change in my print
function. What I've done is I have renamed
my function Print as ReversePrint and in my
function I am first making a recursive call
and after coming back from that  recursive call I'm writing a print statement and from
the main function I'll make a call to reverseprint. Let's write RP as shortcut for ReversePrint and
initially I will pass the address of the head node so I'll make a call like this ReversePrint(100). The control will come inside
this function. p is 100. It is not equal to null. and I have also drawn the console like
before now this particular function call does not print first it just makes a recursive call so this guy will go ahead and make a
recursive call to the ReversePrint function passing it
address 200 nothing will be written on the console and
once again this particular function will make a
recursive call like this and once again this particular
function will go ahead and make a recursive call like
this and finally we will have recursive call where the
function is at address null. At this stage we will come to the exit condition in recursion. The
recursion will not grow any further. We will simply return, the control
will return to this particular call, ReversePrint(250) So we will come here now. To this
Printf statement the data field at address 250 is 4. So, 4 will be printed on the console
and now this particular function call will finish and now we will  go to ReversePrint(150) and now
this call will print 5 and exit and we will go on like
this. Finally we will return back to the
main function with this output on the console, the elements of
the list printed in reverse order So, this was a recursive traversal of
linked list to print its elements.  I must point out
here that for normal traversal of the linked
list not for the reverse print, for the normal print an
iterative approach will be a lot more efficient than the recursive approach because in
iterative approach we will just use one temporary variable while in
recursion we will use space in the stack section
of the memory for so many function calls so there is implicit use of memory there. for ReversePrint operation we will any day 
have to store elements in some structure so if we use recursion it's still okay. In the coming lessons we will solve
more problems, more interesting problems on linked list.  So thanks for watching!",Print elements of a linked list in forward and reverse order using recursion,"See complete series on linked list here:
http://www.youtube.com/watch?v=NobHlGUjV3g&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=3

See series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we will write two recursive functions ""Print"" and ""ReversePrint""  that will print the elements of a singly linked list in forward and reverse order respectively. 

Feel free to drop your questions, feedback and suggestions in comments section. 

You may also like us on facebook:
http://www.facebook.com/MyCodeSchool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,K7J3nCeRC80
Reversealinkedlistusingrecursion-KYH83T4q6Vs.en.csv,"in our previous lesson we saw how we
can traverse a linked list using recursion we
wrote code to print the elements of linked list in
forward as well as reverse order using recursion we did not actually reverse
the list we just printed the elements in reverse
order now in this lesson we will reverse a linked list using recursion and this
is yet another famous programming interview
question so if we have an input list like this we have linked
list of integers here we have four nodes in the linked list each rectangular block here with two
partitions is a Node first field is to store the data and another to
store the address of the next node the second field stores the
address of the next node and of course we will have one variable
to store the address of the First node or head node we
name that variable head we may name it anything i have named it
head so this is our input list and after reversal our output
should be like this, this variable head should
store the address of the last node in the original list,
the last node in the original list was at address 250 and we will go like
from 250 to 150, 150 to 200 200 to 100 and 100 to null, null is
nothing but address zero we have already seen how we can
reverse a linked list using iterative method in one of
our previous lessons let us now see how we can solve this
problem using recursion in our solution we must reverse the
list by adjusting the links by reversing the
links not by moving around data or something
so let us first understand the logic that we can use in our recursive approach if you remember
from our previous lesson where we had used recursion to print the
list backward print the elements in reverse order then
recursion gives us a Way to traverse the list backward in our C or C++
program.Programatically Node will be a structure like this so
let's first look at the function from the previous lesson the
recursive function that was used to print the list backward to
this function we passed the address of a Node initially we pass the address of the head Node
and we have this exit condition if the address passed is
null then we simply return else we make a
recursive call and Pass the address of the next Node so main method will typically call 
Reverseprint passing it the address of the head node and this guy will first make
a recursive call and then when this recursive call finishes
then only it will print so I'm writing RP as shortcut 
for ReversePrint so the recursion will go on like this and
when it reaches this particular call when argument is null it will return so this
call will finish and again the control will come to this call with address 250 as
argument and now we're printing the value  of the node at address 250 which will
be four and then this guy finishes and then we
go ahead and print five and similarly we then go on to print
six and two so recursion kind of gives us a way to
first traverse the list in the forward
direction and then traverse the list in the backward
direction so let us now see how we can implement reverse function using 
recursion let's say for the sake of simplicity
in implementation that head is a global variable so it is
accessible to all the functions now we will implement a function named 
reverse that will take the address of a node as argument
initially we will pass address of the head node to this
function now I want to do something like this in my recursion I want to go on till the end, I want to go on making a recursive call till i reach
the last node, for the last node the link part will be null so this is my
exit condition from recursion on this exit condition is what will stop
us from going on infinitely in a recursion and what I'm doing here is
something very simple as soon as I'm reaching the last node
I'm modifying the head pointer to make it point to this
guy so the recursion will work like this from the main method we will call the
Reverse function passing it the address of the head node address 100
we will come and check this condition if P.next is equal to null, no it is
equal to 200 for the node at address 100 so this
recursion will go on till we reach this call, call to Reverse passing it address 250 and now we will come down and now we
have come to this exit condition and now head will be set as P and the list will
look like this and now Reverse(250), the call to Reverse(250)
will finish and we will come back to  Reverse(150) their is no statement here after this recursive call to Reverse function
if there were some statements here then they would have executed now for 
Reverse(150) after we would have come from Reverse(250) and that's how we actually traverse the
list in reverse order if you see when Reverse(250) has finished the Node till 250 is already reversed because head is
pointing to this node and the link part of this node is set as null so till 250 we are
already reversed now when we come to 150 we can make sure
the list is reversed till 150 when we
finish the execution of Reverse(150)  to do that we can write
statement like this we will have to do two things we will
have to cut this node and make this cut point to this guy so we will build this link and we would have
to cut this link and make this guy point to null and
that's how Node till address 150 will be
reversed after we finish this call so I have written these three lines in
my function that will execute after the recursive call so they will execute when the the recursion is
folding up and we are traversing the list in the backward
direction so when we are executing Reverse(150) and we have come back to it after 
recursion we are at this particular line so P would be 150 and q would be P.next so q would be
250 so this guy is p and this guy is q and we are saying that
set q.next is equal to p so we will set this particular field as 100 so we are building this link and cutting this link and now we are saying
that set p.next equal null so we are building
this link making p.next null and now this call
to Reverse(150) finishes and when this call has finished the
list till 150 is reversed as you can see
head is 250 so from 250 we will go to 150 and from 150 we are going to
null so till 150 we have a reversed list so this is how things will look like when the
call to Reverse(200) finishes till 200 we have reversed list and once again we come to execution of
Reverse(100) and this is how things will look like finally when Reverse(100) finish we will return back to
the main function we had seen in the previous lesson that how things will happen in the memory
when recursion execute in recursion we save the state of
execution of all the function calls in stack section of the memory in
this function all we're doing is basically we are storing the addresses of
Node in a structure as we go forward in recursion and then we first work on the last Node to make it part of the reverse list
and then we once again come back to the previous node and we keep doing this, watch the
previous lesson for detailed explanation and simulation of how things will happen
in the memory for recursion there are couple of more things
here one thing is that instead of writing these two lines I
could write one line for these two lines I could say something like p-&gt;next -&gt;next equal p and that would have
meant the same except that this statement is more of 
skated and there is one more thing we have
assumed that head is a global variable what if head is not a global variable this Reverse
function will have to  return the address of the modified head I
leave that as an exercise for you to do so this was reversing a linked list
using recursion thanks for watching",Reverse a linked list using recursion,"See complete series of videos on Linked List here:
http://www.youtube.com/watch?v=NobHlGUjV3g&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=3

In this lesson we written code to reverse a linked list using recursion.  This is a famous programming interview question. 

We have already seen how we can reverse a linked list using iteration in this lesson:
http://www.youtube.com/watch?v=sYcOK51hl-A&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

Feel free to post your questions, feedback and suggestions in comments section. 

You may like us on Facebook:
http://www.facebook.com/MyCodeSchool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,KYH83T4q6Vs
Matrices-Reducedrowechelonform1_Vectorsandspaces_LinearAlgebra_KhanAcademy-L0CmbneYETs.en.csv,"I have here three equations
of four unknowns. You can already guess, or you
already know, that if you have more unknowns than equations,
you are probably not constraining it enough. You actually are going
to have an infinite number of solutions. Those infinite number of
solutions could still be constrained. Let's say we're in four
dimensions, in this case, because we have four
variables. Maybe we were constrained into a
plane in four dimensions, or if we were in three dimensions,
maybe we're constrained to a line. A line is an infinite number of
solutions, but it's a more constrained set. Let's solve this set of
linear equations. We've done this by elimination
in the past. What I want to do is I want to introduce
the idea of matrices. The matrices are really just
arrays of numbers that are shorthand for this system
of equations. Let me create a matrix here. I could just create a
coefficient matrix, where the coefficient matrix would just
be, let me write it neatly, the coefficient matrix would
just be the coefficients on the left hand side of these
linear equations. The coefficient there is 1. The coefficient there is 1. The coefficient there is 2. You have 2, 2, 4. 2, 2, 4. 1, 2, 0. 1, 2, there is no coefficient
the x3 term here, because there is no x3 term there. We'll say the coefficient on
the x3 term there is 0. And then we have 1,
minus 1, and 6. Now if I just did this right
there, that would be the coefficient matrix for
this system of equations right there. What I want to do is I want to
augment it, I want to augment it with what these equations
need to be equal to. Let me augment it. What I am going to do is I'm
going to just draw a little line here, and write the
7, the 12, and the 4. I think you can see that
this is just another way of writing this. And just by the position, we
know that these are the coefficients on the x1 terms.
We know that these are the coefficients on the x2 terms.
And what this does, it really just saves us from having to
write x1 and x2 every time. We can essentially do the same
operations on this that we otherwise would have
done on that. What we can do is, we can
replace any equation with that equation times some
scalar multiple, plus another equation. We can divide an equation,
or multiply an equation by a scalar. We can subtract them
from each other. We can swap them. Let's do that in an attempt
to solve this equation. The first thing I want to do,
just like I've done in the past, I want to get this
equation into the form of, where if I can, I have a 1. My leading coefficient in
any of my rows is a 1. And that every other entry
in that column is a 0. In the past, I made sure
that every other entry below it is a 0. That's what I was doing in some
of the previous videos, when we tried to figure out
of things were linearly independent, or not. Now I'm going to make sure that
if there is a 1, if there is a leading 1 in any of my
rows, that everything else in that column is a 0. That form I'm doing is called
reduced row echelon form. Let me write that. Reduced row echelon form. If we call this augmented
matrix, matrix A, then I want to get it into the reduced row
echelon form of matrix A. And matrices, the convention
is, just like vectors, you make them nice and bold, but use
capital letters, instead of lowercase letters. We'll talk more about how
matrices relate to vectors in the future. Let's just solve this
system of equations. The first thing I want to do is,
in an ideal world I would get all of these guys
right here to be 0. Let me replace this guy with
that guy, with the first entry minus the second entry. Let me do that. The first row isn't
going to change. It's going to be 1, 2, 1, 1. And then I get a
7 right there. That's my first row. Now the second row, I'm going
to replace it with the first row minus the second row. So what do I get. 1 minus 1 is 0. 2 minus 2 is 0. 1 minus 2 is minus 1. And then 1 minus minus 1 is 2. That's 1 plus 1. And then 7 minus
12 is minus 5. Now I want to get rid
of this row here. I don't want to get rid of it. I want to get rid of
this 2 right here. I want to turn it into a 0. Let's replace this row
with this row minus 2 times that row. What I'm going to do is,
this row minus 2 times the first row. I'm going to replace
this row with that. 2 minus 2 times 1 is 0. That was the whole point. 4 minus 2 times 2 is 0. 0 minus 2 times 1 is minus 2. 6 minus 2 times 1 is 6
minus 2, which is 4. 4 minus 2 times 7, is 4 minus
14, which is minus 10. Now what can I do next. You can kind of see that this
row, well talk more about what this row means. When all of a sudden it's all
been zeroed out, there's nothing here. If I had non-zero term here,
then I'd want to zero this guy out, although it's already
zeroed out. I'm just going to move
over to this row. The first thing I want to do is
I want to make this leading coefficient here a 1. What I want to do is, I'm going
to multiply this entire row by minus 1. If I multiply this entire
row times minus 1. I don't even have to
rewrite the matrix. This becomes plus 1,
minus 2, plus 5. I think you can accept that. Now what can we do? Well, let's turn this
right here into a 0. Let me rewrite my augmented
matrix in the new form that I have. I'm going to keep the
middle row the same this time. My middle row is 0, 0, 1,
minus 2, and then it's augmented, and I
get a 5 there. What I want to do is I want to
eliminate this minus 2 here. Why don't I add this row
to 2 times that row. Then I would have minus 2, plus
2, and that'll work out. What do I get. Well, these are just
leading 0's. Then I have minus 2,
plus 2 times 1. That's just 0. 4 plus 2 times minus
2, that is minus 4. That's 4 plus minus 4,
that's 0 as well. Then you have minus
10 plus 2 times 5. Well, that's just minus 10
plus 10, which is 0. That one just got zeroed out. Normally, when I just did
regular elimination, I was happy just having the situation
where I had these leading 1's. Everything below it were 0's. I wasn't too concerned about
what was above our 1's. What I want to do is,
I want to make those into a 0 as well. I want to make this
guy a 0 as well. What I can do is, I can replace
this first row with that first row minus
this second row. What is 1 minus 0? That's just 1. 2 minus 0 is 2. 1 minus 1 is 0. 1 minus minus 2 is 3. 7 minus 5 is 2. There you have it. We have our matrix in reduced
row echelon form. This is the reduced row echelon
form of our matrix, I'll write it in bold, of our
matrix A right there. You know it's in reduced row
echelon form because all of your leading 1's in each
row-- so what are my leading 1's in each row? I have this 1 and
I have that 1. They're the only non-zero
entry in their columns. These are called the
pivot entries. Let me label that for you. That's called a pivot entry. Pivot entry. They're the only non-zero
entry in their respective columns. If I have any zeroed out rows,
and I do have a zeroed out row, it's right there. This is zeroed out row. Just the style, or just the
convention, is that for reduced row echelon form, that
has to be your last row. We have the leading entries are
the only -- they're all 1. That's one case. You can't have this a 5. You'd want to divide that
equation by 5 if this was a 5. So your leading entries
in each row are a 1. That the leading entry in each
successive row is to the right of the leading entry of
the row before it. This guy right here is to
the right of that guy. This is just the style, the
convention, of reduced row echelon form. If you have any zeroed out rows,
it's in the last row. And finally, of course, and I
think I've said this multiple times, this is the only non-zero
entry in the row. What does this do for me? Now I can go back from
this world, back to my linear equations. We remember that these were the
coefficients on x1, these were the coefficients on x2. These were the coefficients on
x3, on x4, and then these were my constants out here. I can rewrite this system of
equations using my reduced row echelon form as x1,
x1 plus 2x2. There's no x3 there. So plus 3x4 is equal to 2. This equation, no x1,
no x2, I have an x3. I have x3 minus 2x4
is equal to 5. I have no other equation here. This one got completely
zeroed out. I was able to reduce this system
of equations to this system of equations. The variables that you associate
with your pivot entries, we call these
pivot variables. x1 and x3 are pivot variables. The variables that aren't
associated with the pivot entry, we call them
free variables. x2 and x4 are free variables. Now let's solve for, essentially
you can only solve for your pivot variables. The free variables we can
set to any variable. I said that in the beginning
of this equation. We have fewer equations
than unknowns. This is going to be a not well
constrained solution. You're not going to have just
one point in R4 that solves this equation. You're going to have
multiple points. Let's solve for our pivot
variables, because that's all we can solve for. This equation tells us, right
here, it tells us x3, let me do it in a good color, x3
is equal to 5 plus 2x4. Then we get x1 is equal to
2 minus x2, 2 minus 2x2. 2 minus 2x2 plus, sorry,
minus 3x4. I just subtracted these from
both sides of the equation. This right here is essentially
as far as we can go to the solution of this system
of equations. I can pick, really, any values
for my free variables. I can pick any values for my
x2's and my x4's and I can solve for x3. What I want to do right now is
write this in a slightly different form so we can
visualize a little bit better. Of course, it's always hard to
visualize things in four dimensions. So we can visualize things a
little bit better, as to the set of this solution. Let's write it this way. If I were to write it in vector
form, our solution is the vector x1, x3, x3, x4. What is it equal to? Well it's equal to-- let
me write it like this. It's equal to-- I'm just
rewriting, I'm just essentially rewriting this
solution set in vector form. So x1 is equal to 2-- let
me write a little column there-- plus x2. Let me write it this way. Plus x2 times something plus
x4 times something. x1 is equal to 2 minus 2 times
x2, or plus x2 minus 2. I put a minus 2 there. I can say plus x4
times minus 3. I can put a minus 3 there. This right here, the first
entries of these vectors literally represent that
equation right there. x1 is equal to 2 plus x2 times minus
2 plus x4 times minus 3. What does x3 equal? x3 is equal to 5. Put that 5 right there. Plus x4 times 2. x2 doesn't apply to it. We can just put a 0. 0 times x2 plus 2 times x4. Now what does x2 equal? You could say, x2 is equal
to 0 plus 1 times x2 plus 0 times x4. x2 is just equal to x2. It's a free variable. Similarly, what does
x4 equal to? x4 is equal to 0 plus 0 times
x2 plus 1 times x4. What does this do for us? Well, all of a sudden here,
we've expressed our solution set as essentially the linear
combination of the linear combination of three vectors. This is a vector. You can view it as
a coordinate. Either a position vector. It is a vector in R4. You can view it as a position
vector or a coordinate in R4. You could say, look, our
solution set is essentially-- this is in R4. Each of these have four
components, but you can imagine it in r3. That my solution set
is equal to some vector, some vector there. That's the vector. Think of it is as a
position vector. It would be the coordinate
2, 0, 5, 0. Which obviously, this is four
dimensions right there. It's equal to multiples
of these two vectors. Let's call this vector,
right here, let's call this vector a. Let's call this vector,
right here, vector b. Our solution set is all of this
point, which is right there, or I guess we could call
it that position vector. That position vector will
look like that. Where you're starting at the
origin right there, plus multiples of these two guys. If this is vector a, let's do
vector a in a different color. Vector a looks like that. Let's say vector a looks like
that, and then vector b looks like that. This is vector b, and
this is vector a. I don't know if this is going to
be easier or harder for you to visualize, because obviously
we are dealing in four dimensions right here, and
I'm just drawing on a two dimensional surface. What you can imagine is, is that
the solution set is equal to this fixed point, this
position vector, plus linear combinations of a and b. We're dealing, of
course, in R4. Let me write that down. We're dealing in R4. But linear combinations
of a and b are going to create a plane. You can multiply a times 2,
and b times 3, or a times minus 1, and b times
minus 100. You can keep adding and
subtracting these linear combinations of a and b. They're going to construct
a plane that contains the position vector, or contains
the point 2, 0, 5, 0. The solution for these three
equations with four unknowns, is a plane in R4. I know that's really hard to
visualize, and maybe I'll do another one in three
dimensions. Hopefully this at least gives
you a decent understanding of what an augmented matrix is,
what reduced row echelon form is, and what are the valid
operations I can perform on a matrix without messing
up the system.",Matrices: Reduced row echelon form 1 | Vectors and spaces | Linear Algebra | Khan Academy,"Solving a system of linear equations by putting an augmented matrix into reduced row echelon form

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/matrices_elimination/v/matrices-reduced-row-echelon-form-2?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/distance-between-planes?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,L0CmbneYETs
Slopefieldtovisualizesolutions_Firstorderdifferentialequations_KhanAcademy-LoaagZPWvpM.en.csv,"- [Voiceover] So we have
the differential equation, the derivative of y with respect to x is equal to y over six times four minus y. And what we have plotted right over here is the slope field or a slope field for this differential
equation and we can verify that this indeed is a slope field for this differential equation, let's draw a little table here, so let's just verify a few points, so let's say x, y, and dy/dx. So let's say we start with, I don't know, let's start with this point
right over here, one comma one, when x is one, and y is
one, well when I look at the differential equation,
1/6 times four minus one, so it's 1/6 times three, which is 3/6, which is 1/2, and we see
indeed on the slope field, they depicted the slope
there if a solution goes to that point, right at that
point, its slope would be 1/2. And as you see, it's actually
only dependent on the y-value, it doesn't matter what x
is as long as y is one, dy/dx is going to be 1/2,
and you see that's why when x is 1 1/2, and y is one,
you still have a slope of 1/2 and as long as y is one,
all of these sampled points right over here, all have a slope of 1/2, so that, just looking at
that, that makes us feel that this slope field is consistent with this differential
equation, but let's try a few other points just to feel a
little bit better about it, and then we will use a slope field to actually visualize some solutions. So let's say, let's do
an interesting point, let's say we have this point, actually no, that's at a half point, let's say we have this, let's see, let's say we
do this point right over here, so that's x is equal to
one, and y is equal to six, and we see the way the
differential equation is defined, it doesn't
matter what our x is, it's really dependent
on the y that's going to drive the slope, but
we have 6/6, which is one, times four minus six,
which is negative two. So it's negative two, so we should have a slope of negative two and it looks like that's what they
depicted, so as long as y is six, we should have
a slope of negative two. Have a slope of negative two, and you see that in the slope field. So hopefully you feel
pretty good that this is the slope field for
this differential equation, if you don't, I encourage
you to keep verifying these points here, but
now let's actually use the slope field, let's actually use this, to visualize solutions to
this differential equation based on points that the
solution might go through. So let's say that we have a solution that goes through this
point right over here. So what is that solution
likely to look like? And once again this is going
to be a rough approximation, well right at that point it's going to have a slope just as
the slope field shows, and as our y increases,
it looks like our slope, it looks like our slope... so at this point I should be, actually let me undo that, so if I
keep going up at this point when y is equal to two
I should be parallel to all of these segments
on the slope field that y is equal to two,
and then it looks like the slope starts to
decrease as we approach y is equal to four, and
so if I had a solution that went through this point, my guess is that would look something, and then now the slope decreases again as we approach y is equal to zero. And of course we see that,
because if when y equals zero this whole thing is zero so our derivative is going to be zero. So, a reasonable solution might look something like this,
so this gives us a clue of, look, if a solution
goes through this point, this right over here might
be what it looks like. But what if it goes through, I don't know, what if it goes through
this point right over here? Well then, it might look like... It might look like this
by the same exact logic. So it might look like
this, so just like that, we're trying to get a
sense, we don't know the actual solution for this
differential equation, but we're starting to get a sense of what type of functions or
the class of functions, that might satisfy the
differential equation. But, what's interesting
about this slope field, is it looks like there's
some interesting stuff if our solution includes points between where the y value is
between zero and four, it looks like we're going
to have solutions like this, but what if we had y-values
that were larger than that or that were less than that,
or exactly zero or four? So for example, what if
we had a solution that went through this point right over here? Well, that point right
over here, the slope field tells us that our slope is zero. So our y-value is not going to change, and as long as our y-value doesn't change, our y-value is going to stay at four, so our slope is going to stay at zero, so we actually already
found this is actually a solution to the differential
equation, y is equal to four is a solution to
this differential equation. So, y is equal to four,
and you can verify that that is a solution,
when y is equal to four, this right-hand side is going to be zero, and the derivative is zero
for y is equal to four. So that is a solution to
the differential equation. And the same thing for y is equal to zero. That is also a solution to
the differential equation. Now what if we included points, what if we included this point up here, and actually, let me do
it in a different color, so that you could see it, let's say our solution included that point. Well then it might look
something like this, and once again, I'm just
using the slope field as a guide to give me an
idea of what the slope might be as my curve progresses,
as my solution progresses. So solution that includes
the point zero five, might look something like this, and once again, it's just another clue. A solution that includes the
point zero negative 1 1/2, might look something like... might look something like this. So anyway, hopefully this
gives you a better appreciation for why slope fields are interesting. If you have a differential equation that just involves the first derivative, and some x's and y's,
this one only involves the first derivative and y's. We can plot a slope field like this, not too much trouble if we
essentially just keep solving for the slopes, and then
we can use that slope field to get a conceptual or
visual understanding of what the solutions might look like given points that the solutions
might actually contain.",Slope field to visualize solutions | First order differential equations | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/differential-equations-intro/e/slope-fields?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/differential-equations-intro/v/differential-equation-from-slope-field?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/differential-equations-intro/v/creating-a-slope-field?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,LoaagZPWvpM
Matrixconditionforone-to-onetrans_Matrixtransformations_LinearAlgebra_KhanAcademy-M3FuL9qKTBs.en.csv,"  Let's say I have
some matrix A. If I'm trying to determine
the null space of A, I'm essentially asking -- I'm
essentially just asking, look if we set up the equation Ax is
equal to the 0 vector, the null space of A is all the x's
that satisfy this equation. All the x's that satisfy
that equation. Ax is equal to the
0 vector, or you could call it the system. And the way you would solve it
-- and we've done this many times, this was many videos
ago -- you would make an augmented matrix with this. So the augmented matrix
would look like that. And you would have the 0 vector
on the right hand side. And then you'd perform a bunch
of row operations to put the left hand side into reduced
row echelon form. So, you would do a bunch
of operations. The left hand side would go into
reduced row echelon form. Let's call that reduced
row echelon form of A. And then the right hand side
is just going to stay 0, because you performed the
same row operations. But when you perform those row
operations on 0, you just get the 0 vector right here. And then when you un-augment--
when you create the system back from this right here,
because these two systems are equivalent, you are essentially
going to have your solution set look something
like this. You're going to have your--
let me write it like this, your solution set is
going to be equal to some scalar multiple. Let's say that, of your free
variables, your free variables are going to be the
scalar multiples. And you've seen this
multiple times, so I'll stay fairly general. But it's going to be some
multiple times, let's say, vector 1 plus some other scalar
times vector 2, these scalars tend to be your free
variables-- times vector 2 all the way to, I don't
know, whatever, c times your nth vector. I'm just trying to
stay general. We haven't seen any examples
that had more than two or three vectors here. But this is what, essentially,
your null space is spanned by these vectors right there. You get an equation-- you get
a solution set that looks something like that, and you
call that your null space. We've done that multiple
times. Your null space is that,
so it's all the linear combinations, or it's the span,
of these little vectors that you get here. And 1 and 2, all the
way to n, n. This is nothing new. I'm just restating something
that we've seen multiple, multiple times. We actually did this in
the previous video. I just maybe never wrote
it exactly like this. But what about the case when
you're solving the inhomogeneous equation. So the inhomogeneous equation
looks like this. So if I want to solve Ax is
equal to b, I would do something very similar
to this. I will create an augmented
matrix. We'll have A on the left hand
side, and I'd put b on the right hand side, and I'll
perform a bunch of row operations to put A into reduced
row echelon form. So, let me do that. So this left hand side will
be the reduced row echelon form of A. And then the right hand side,
whatever operations I did on A, I have to do on
the entire row. So I'll also be doing
them to b. So I'll have some
new vector here. Maybe I'll call it the vector--
maybe I'll call that the vector b prime. It's going to be different
than b, but let's just call it b prime. And so when you when you go back
to your-- I guess when you go out of the augmented
matrix world and rewrite it as a system, and you solve for
it, and we did this in the last video-- you'll get
your solution set. Your solution set that satisfies
this is going to be, x is going to be equal to this
b prime, whatever this new vector is, this b prime plus
something that looks exactly like this. It looks exactly like that, in
fact I'll copy and paste it, it'll look exactly like this. Let me see if it did copy. Copy and paste it. Edit, copy, and let
me paste it. So it will look something that
looks exactly like that. And we said in the last video
that you can kind of-- given this you can kind of think of
the solution set to the inhomogeneous equation is
equivalent to some particular solution, let's call that x
particular, some particular solution, plus some member
of your null space. So you could say it's plus some
homogeneous solution. So if you just pick particular
values for a, b and c, all of the different multiples of the
vector that span your null space, you'll get some particular homogeneous solution. So what I implied in the last
video, and I didn't show it to you rigorously, is that any
solution to the inhomogeneous system-- let me write it this
way, any solution-- and do it in white-- that's not white--
any solution to the inhomogeneous system Ax is equal
to b, this is a claim I made, will take the form-- some
particular solution-- that was this right here,
maybe I should do it in green-- this is this right
here-- When you do the reduced row echelon form, it becomes
that b prime vector. Plus some homogeneous solution,
so some member of the null space. Now I didn't prove it to
you, but I implied that this is the case. And what I want to in this video
is actually do a little bit of a more rigorous proof,
but it's actually fairly straightforward. So let's first of all verify
that this is a solution. So let's verify that
this is a solution. So let's just put this into
out original equation. Let's remember our original
equation was Ax is equal to b. So let's verify.   Let me write it as a question. Is that particular solution,
plus some homogeneous solution, a solution to
Ax is equal to b? Well to do that you just put
that in the place of x. So let's try it out. So A times this guy right here,
times some particular solution, plus some homogeneous
solution is going to be equal to A times the
particular solution, plus A times some member of
my null space. And what is this equal to? That is going to
be equal to b. Right? We're saying that this
is a particular solution to this equation. That is going to be equal to b
and that this is going to be equal to the 0 vector because
this is a solution to our homogeneous equation. So this is going to be
equal to b plus 0, or it's equal to b. So A times this vector right
here is indeed equal to b. So this is a solution. This is a solution, yes. Now the next question is, does
every solution to the inhomogeneous system, or does
any solution to the inhomogeneous system,
take this form? So does any solution x, to Ax
equal to b, take the form x is equal to some particular
solution, plus a member of our null space, or plus a
homogeneous solution. So to do that let's take-- let's
test out what happens when we multiply the vector
A times x-- let me write it this way. let's say that x is any solution
to Ax is equal to b. Let's start off with that. And let's see what happens when
we take A times x minus some particular solution
to this. So when we distribute the matrix
vector product, you get A times our any solution
minus A times our particular solution. Now what is this going
to be equal to? We're saying that this is a
solution to Ax equals b. So this is going to
be equal to b. And of course, any particular
solution to this when you multiply it by A is also
going to be equal to b. So it's going to be b minus b,
so that's going to be equal to the 0 vector. Or another way to think about
it is, x, the vector x minus our particular solution is
a solution to A times x is equal to 0. Think about this if you take
this, in parentheses right here, and you put it right
there, and you multiply it times A you get the 0 vector. We just did that, you get the
0 vector, because when you multiply each of these guys
by A you get b and you get b minus b. And so that you get 0. So you can say that x minus--
so our any solution x minus the particular solution of x is
a member of our null space. Right? By definition our null space is
all of the x's that satisfy this equation. So, since its a member of our
null space, we can say that it is equal to-- so our any
solution minus our particular solution is equal to some member
of our null space. We could say that it is equal
to a homogeneous solution. There might be more than one. A homogeneous solution.   Now, if we just add our
particular solution to both sides of this, we get that any
solution-- remember, we assume that x is any solution to this--
that any solution is equal to our homogeneous
solution, is equal to a homogeneous solution, plus a
particular solution-- or plus our particular solution. So we've proven it both ways. That this is a solution to our
inhomogeneous equation, and that any solution to our
inhomogeneous equation takes this form right here. Now why am I so concerned with
this, and I've been kind of fixated on this inhomogeneous
equation for some time. But we've been talking about the
notion of a transformation being one-to-one.   That was one of the two
conditions for a transformation to
be invertible. Now to be one-to-one-- so let me
draw a transformation here. So let's say this is my domain,
X, and this is my co-domain right here, Y, and I
have a transformation that maps from X to Y.   In order for T to be
one-to-one-- so I'll write it like this, one-to-one. In order for T to be one-to-one
that means for any b that you pick here, for any
b that is a member of our co-domain, there is at most
one solution to A times x. And I'm assuming that A is our
transformation matrix, so we can write our transformation T
as being equal to some matrix times our vector
in our domain. So this would be Ax if this is
x right here, so T would map from that to that right there. So in order for our
transformation to be one-to-one, that means if you
pick any b here, there has to be, at most, one solution
to Ax is equal to b. Or another way to say that is
that there is at most one guy that maps into that element
of our co-domain. There might be none. So there could be no solution
to this, but there has to be at most one solution. Now, we just said that any
solution to an inhomogeneous-- let me write it in blue-- any
solution takes the form-- if there is a solution. So if there isn't a solution,
that's fine. That will still satisfy
one-to-one. But if there is a solution, any
solution is going to take the form x particular plus a
member of your null space. Where this guy right here is
a member of the null space. This thing right here just
applies to that guy. Right here. Any solution if they exist,
if there are no solutions, that's fine. You can still be one-to-one. But if you do have a solution
you can have at most one person that maps to it,
and any solution will take this form. I just showed you that. Now in order to be one-to-one,
this can only be one solution. The solution set can only
be one solution.   We can only have one solution
here, right? What does that mean? That means that this guy
right here cannot be more than one vector. It just has to be one vector. There's only one particular
solution right there. But this guy right here has to
be-- for any solution set, depending on how you define
it, there's only one particular vector there. But this guy, the only way that
you're only going to have one solution is if your null
space is trivial, if it only contains the 0 vector. Your null space will
always, at minimum, contain the 0 vector. In the last video I think I,
just off the cuff, said that all your null space
has to be empty. But no, your null space will
always, by definition, by the fact that it is a subspace,
it will always contain a 0 vector. You can always multiply
A times 0 to get 0. So your null space will
always contain that. But in order to have only one
solution, your null space can only have the 0 vector so
that this can only be 0. And so that your only solution
is going to be the particular solution that you found,
depending on how you got there, but it's only going to
be your particular solution. So let me put this this way. So in order to be one-to-one
your null space of your transformation matrix
has to be trivial. It has to contain only
the 0 vector. Now we've covered this many,
many videos ago. What does it mean if your
null space only contains a trivial vector? Let me make this clear. So if your transformation vector
looks like this, A1, A2, all the way to An, and
you're multiplying it times x1, x2, all the way to xn, and
the null space is all of the x's that satisfy this equation,
0, and you are going to have m 0's right there. So if your null space is
trivial, and we're saying that that is a condition for you
to be one-to-one, for your transformation to be one-to-one,
the transformation that's specified
by this matrix. If your null space is trivial,
what does that mean? That means that the only
solution to-- another way of writing this is x1 times a1,
plus x2 times a2, all the way to xn times an, is equal
to the 0 vector. These are equivalent statements
right here. I just multiplied each of
these terms times these respective column vectors. These are the same thing. Now if you say that your null
space has to be equal to 0, you're saying that the only
solution to this equation right here, the only scalars
that satisfy this equation-- oh sorry, these aren't-- let me
actually-- because I wrote the scalars as vectors-- so
this guy right here, this statement right here, is
equivalent to x1 times a1, plus x2 times a2, plus all the
way to xn times an, is equal to the 0 vector. Where the x1's through
xn's are scalars. Now, if we say the null space
is 0, we're saying the only way that this is satisfied is
if your x1 all the way to xn is equal to 0. And this means, this is our
definition actually, of linear independence. That means that a1-- so the null
space being 0 also means that your column vectors of a--
let me write it this way-- it also means that a1, a2, all
the way through an, are linearly independent.   Now what does that mean? If all of these guys are
linearly independent, what is going to be the basis for
your column space? Remember, the column
space is the span. The column space of a is equal
to the span of a1, a2, all the way to an. What we just said, if we're
dealing with the one-to-one, or one of the conditions, or the
condition to be one-to-one is that your null space
has to be 0, or only contain the 0 vector. If your null space contains the
0 vector, then all of your columns are linearly
independent. If all of these columns span
your column space, and they are linearly independent,
then they form a basis. So that means that a1, a2, all
the way to an, are a basis for our column space. And then that means if all of
our column vectors here are linearly independent, they
obviously span our column space by definition, and they
all our linearly independent, they form the basis. So the dimension of our basis,
so the dimension of our column space, that's essentially the
number of vectors you need to form the basis, is going
to be equal to n. We have n columns. So it's going to
be equal to n. Or another way to say it is that
the rank of your matrix is going to be equal to n. So now we have a condition for
something to be one-to-one. Something is going to be
one-to-one if and only if, the rank of your matrix
is equal to n. And you can go both ways. If you assume something is
one-to-one, then that means that it's null space here has to
only have the 0 vector, so it only has one solution. If it's null space only has the
0 vector, then that means it's columns are linearly
independent. Which means that they all
are part of the basis. Which means that you have
n basis vectors, or you have a rank of n. Let's go the other way. If you have a rank of n, that
means that all of these guys are linearly independent. If all of these guys are
linearly independent, then the null space is just
the 0 vector. The null space is just the 0
vector, this part of your solution disappears. And then you are only left
with one solution. So you're one-to-one. So you're one-to-one if and
only if the rank of your transformation matrix
is equal to n.  ",Matrix condition for one-to-one trans | Matrix transformations | Linear Algebra | Khan Academy,"Showing that the rank of the of an mxn transformation matrix has to be an for the transformation to be one-to-one (injective)

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/linear-algebra-simplifying-conditions-for-invertibility?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/linear-algebra-exploring-the-solution-set-of-ax-b?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,M3FuL9qKTBs
Imageofasubsetunderatransformation_Matrixtransformations_LinearAlgebra_KhanAcademy-MIAmN5kgp3k.en.csv,"Let's say I have three position
vectors here in R2. Let me scroll this over
a little bit. Let's say my first position
vector is x0 and it is equal to minus 2, minus 2. So if I were to graph x0 I would
go minus 2, minus 2. x0 looks like that. My next position vector I have
is x1 and I'll say that's equal to minus 2, 2. If I were to graph
here, minus 2, 2. That's my next position
vector right there. And this is x1. And when I say it's a position
vector, they specify a specific coordinate in R2. Let me draw a third one
just for fun, x2. Let's say that that is
equal to 2, minus 2. So if I were to draw this, 2
minus 2, it goes right here. So that vector right
there is x2. Now, what I'm curious
about or, I guess, not curious about. What I want to do here is define
the line segments that connect these points. So let's say I have my
first line segment. Let me call it L1, or
let me call it L0. And I want it to be the
line segment that connects x0 to x1. How can I construct that? So I want to construct this line
segment right here, this little-- let me do it in a
different color actually. Let me do it in orange, L0. So what I want to do is I want
to find the set of all of these values right here, all of
the position vectors that define points on this
line right there. Well we could define it as,
we could start off at x0. We could say that orange line is
x0 plus scaled versions of the difference of x1 and x0. If you take x1 minus x0, you get
this vector right there. That's x1 minus x0. That orange vector. I know I wrote it right there
so it's hard to read. But if you just take x1 minus x0
you get that and that make sense. x0 plus this orange
vector is equal to that blue factor. So if you just take different
scaled up versions of this guy, you're going to
end up at different points in this direction. We're starting at x0, maybe
I should do that in green. We're starting at x0 and then
we're going to add up scaled up versions of this orange
vector, which is just the difference of x1 and x0. Let me write that. So scaled up versions
of x1 minus x0. Now, we have to constrict. If we just want to be in this
line segment, we have to constrict Rt. If we said t was a member of
real numbers, if it was any real number, then we would
essentially be defining the set of this entire vertical
line going up and down to infinity in the upwards
direction and the downwards direction. But we just want to restrict
it to start here and then go up here. And it doesn't necessarily have
to have any direction. We could say this is true, our
little line segment here is true, for t-- let me
write it this way. t is greater than
or equal to 0. So when t equals 0, this term
cancels out and we just have this point or this position
right here. Let me draw it in green. We just have that
position there. And then t is going to be
less than or equal to 1. What happens when
t is equal to 1? When t is equal to 1, this
becomes x1 minus x0. You have an x0 there. This x0 and that x0 cancel out
and you're just at this point right there. When t is equal to 1/2, just
to make sure this all make sense to you, what happens? You have x1 minus x0, which is
this orange vector right here. When t is equal to 1/2 you're
essentially scaling that orange vector by half and you
end up right at that point, which is exactly where
you want to be. You want halfway along
that line segment. At t is equal to 0.25, you're
going to be here. t is equal to 0.75, you're
going to be there. So at any value for t being any
real number between 0 and 1, you're going to end up at all
of the points along that line segment. So that's our L0. It's just a set of vectors. Now we can do the same exercise
if we wanted to find out the line, the equation
of the line, that goes between x1 and x2. If we wanted to find the
equation of that line, we could call this L1. And L1 would be equal to x1 plus
t times x2 minus x1 for 0 is less than or equal to t is
less than or equal to 1. That's L1. And then finally, if we want
to make a triangle out of this, let's define this
line right here. Let's define that as L2. L2 would be equal to the set
of all of vectors where you start off at x2. Set of all of vectors that are
x2 plus some scaled up sum of x0 minus x2. x0 minus x2 is this
vector right here. So x0 minus x2 such that 0 is
less than or equal to t is less than or equal to 1. And so if you take the
combination, if you were to define kind of a super set-- I
could have defined my shape as-- let's say it's the union
of all of those guys. Well, let me just write it. L0, L1, and L2. Then you'd have a nice
triangle here. If you take the union of all of
these three sets, you get that nice triangle there. Now, what I want to do in this
video, I think this is all a bit of review for you. But it's maybe a different way
of looking at things than we've done in the past. Is
I want to understand what happens to this set right here
when I take a transformation, a linear transformation,
of it? So let me define a
transformation. I'll make it a fairly
straightforward transformation. Let me define my transformation
of x, of any x, to be equal to the matrix
1 minus 1, 2, 0 times whatever vector x. So times x1, x2. And we know that any linear
transformation can actually be written as a matrix
and vice versa. So you might have said, hey,
you know, you're giving an example with the matrix, what
about all those other ways to write in your transformation? You can write all of
those as a matrix. So let's translate-- let's try
to figure out what this is going to look like. What our triangle is going to
look like when we transform every point in it. Let me take the transformation
first. The transformation of L0 is equal to the
transformation of this thing. This is just one of the
particular members. For a particular t,
this is one of the particular members of L0. So it's going to be equal to the
transformation of x0 minus the transformation of x1 minus
x0 such that-- sorry. Minus t times x1 minus x0. That's a lowercase t, not
the transformation. Such that 0 is less than or
equal to t is less than or equal to 1. Let me switch colors. This, just by the properties
of linear transformations, this is equal to the
transformation-- let me put the brackets out-- of x0 minus
the transformation of our scalar t times x1 minus x0 for
all t's between 0 and 1. That part is getting a little
redundant to keep saying it. And then, what does
this equal to? If you I take the transformation
of a scaled up vector, that's just
the scaled up transformation of that vector. So this is going to be equal
to this part, the transformation of x0 minus t,
our scalar multiple t, times the transformation of the
vector x1 minus x0. And then let me make sure I
get my parentheses right. Such that 0 is less than or
equal to t is less than or equal to 1. And then the transformation of
the sum of two vectors is equal to the sum of their
transformations. We've all seen this before. So our transformation of our
first line-- this one right here-- L0, is equal to the set
where it's the transformation of x0 minus t times the
transformation of x1 minus the transformation of x0. And we've just done our
first line so far. I have a parentheses there. For 0 is less than t is less
than or equal to 1. Now this is a pretty neat
result and it's going to simplify our lives a lot. The transformation of the line
segment that goes from x0 to x1 ends up just being the line
segment that goes from the transformation of x0 to the
transformation of x1. Let me make this clear. What is the transformation
of x0? Let's calculate these things. So x0 was minus 2, minus 2. Let me write out the
transformation of x0. So the transformation of x0 is
equal to-- let me write it out, so I don't make any
careless mistakes. 1, 2, minus 1, 0 times minus
2 minus, minus 2. And so what would this
be equal to? 1 minus 2 minus-- so it's
1 minus 2 plus minus 1 times minus 2. That's going to be plus 2. So it's minus 2 plus a plus
2, so it's equal to 0. And then we have 2 times minus
2, which is minus 4. 2 times minus 4. And then plus 0 times,
so it's minus 4. So that's the transformation
of x0. Let me graph it. So it's 0 minus 4. So our x0 vector. So this is the transformation
of x0. So the transformation associated
this vector with this vector down here, the one
that goes straight down. Now let me take the
transformation of the other guys. The transformation of x1. I'll just do it right here. I'm running out of space. The transformation of x1 is
equal to 1, 2, minus 1, 0 times minus 2, 2. So what is this equal to? This is equal to 1 times minus
2, plus minus 1 times 2. So that's minus 4. And then 2 times minus
2 is minus 4. Plus 0. So minus 4, minus 4. So x1 is minus 4, minus 4. So our x1 looks like this. Our transformation of x1 is this
vector right here in R2. Our transformation is
going from R2 to R2. So that's why I'm able to draw
them both on this nice Cartesian coordinate plane. And we have one left. Let's take our transformation
of x2. So the transformation of x2 is
equal to our transformation matrix 1, 2, minus 1,
0 times 2, minus 2. And so this will be equal
to 1 times 2 is 2. Plus minus 1 times minus 2. So it's 2 plus 2 is 4. And then have 2 times 2 is 4. Plus 0 times minus 2. So it's 4, 4. So x2 is 4, 4. So it's this point right here. 4, 4 right there. So the transformation of x2 is
that vector right there. And so, we are able to take the
transformation of each of these points of this triangle. But who knows what the
transformation does to everything in between, to all
of these other-- the actual sides of the triangle. We're able to do a little
math and we just did the first side. We just did L0 right there
we found, just using the properties of a linear
transformation, the definition of a linear transformation
actually, we were able to find that the transformation of L0 of
this vertical line here, it just ends up becoming the line
where we can start off at the transformation of x0. The point specified by this
vector right here. And to that I add up scaled
multiples of the transformation of x1 minus
the transformation of x0. What is this, the transformation
of x1 minus the transformation of x0? The transformation of x1 is just
this vector right here. The transformation of x0
is just that vector. So this whole term right here is
just this vector minus that vectors or it's this
vector right there. It's just that vector
right there. And so, what we essentially
have, we've defined the same way that we did in the first
part of this video. This is just the same thing as
the line segment that connects the point defined here and
the point defined there. We took the difference of the
two and we have scaled up versions of that between
t is equal to 0 and 1. So the transformation of L0
really just became the transformation-- is just
the line between the transformations of both of the
endpoints, which is a pretty neat result. It makes our lives simple. We can do the exact same logic
to say, you know what? What's going to be the
transformation of L1? Well L1 was between the
points x1 and x2. It was between that point
and that point. That was L1. So using the same logic,
we can do the math all over again. But it applies to any line. I did it all abstractly here. The transformation of L1 is
going to be the line that connects the transformation
of the two endpoints. So it's going to be the
line that connects the transformation of x1 and the
transformation of x2. Let me make this right here, is
the transformation of L1. This right here is the
transformation of L0. And then finally, what's the
transformation of L2? L2 connects the points
x2 and x0. So that is L2 right there. So the transformation of it
using the same math that we've done before is really just
the line connecting the transformations of
those two points. So the transformation of L2 is
going to be equal to the line that connects the transformation
of x2 to the transformation of x0. So it's going to be that
line right there. So this is the transformation
of L2, or if we defined our whole shape or our whole
triangle as the set of all of these, the transformation
of that. So the transformation of
our whole shape is now this skewed triangle. I think you're now getting a
sense of why this might be useful in things like computer
graphics or game development. Because when you look at things
from different angles, you start to skew them
and whatever else. But taking this transformation,
we were able to turn this set of vectors or
the positions-- or I guess this shape, which is specified
by this set of vectors right here. We were able to change it into
this shape in R2 specified by a different set of vectors. But the whole takeaway from this
video is, you don't have to individually figure out,
gee, what does this point right here translate
into over here? All you have to say is what
were my endpoints? Figure out their transformations
and then connect the dots in
the same order. That's what is essentially the
big takeaway from here. And this idea of when you
transform one set into another set, they have some terminology associated with it. So let's say the transformation
of L0. L0 was the set of vectors
that specified this line right here. The transformation of L0, which
is this set, is a set of vectors-- sorry. L0 was this set. It was the set of vectors in our
co-domain that specified these points. This is called the image
of L0 under T. And it kind of makes sense. Why do they call it the image? Because t is taking this thing
right here, this L0, and kind of distorting it or creating
a new image of it in the co-domain. It's taking a set in the domain
and creating a new image of it in the co-domain
right there. We could say that t of the
transformation of our entire shape, I defined our entire
shape up here as this whole triangle right there. That's the image and that
turned into this purple triangle here. That's the image of s under T. So hopefully you found that
pretty interesting. This is actually a super useful
takeaway if you ever want to become a 3D programmer
of some type. In then next video, we'll
explore what happens when s is no longer just a subset
of our domain. Everything we've been dealing
so far-- L0, L1, and L2, or our entire triangle, these
were all subsets or Rn. In the next video we'll talk
about what happens when you take the transformation
of all of Rn.",Image of a subset under a transformation | Matrix transformations | Linear Algebra | Khan Academy,"Exploring what happens to a subset of the domain under a transformation

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/im-t-image-of-a-transformation?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/linear-transformations-as-matrix-vector-products?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,MIAmN5kgp3k
EvaluationofPrefixandPostfixexpressionsusingstack-MeRb_1bddWg.en.csv,"In our previous lesson, we saw what
prefix and postfix expressions are but we did not discuss how we can
evaluate these expressions. In this lesson we'll see how we can
evaluate prefix and postfix expressions. Algorithms to evaluate prefix and
postfix expressions are similar but I'm going to talk about postfix
evaluation first because its easier to understand and
implement and then I'll talk about evaluation of
prefix. Okay so let's get started. I have written an expression in infix form
here and I first want to convert this to  postfix form. As we know in infix form  operator is
written in between operands and we want to convert to postfix in
which operator is written after operands. We have already seen how we can do
this in our previous lesson. We need to go step by step just the way we would go in  evaluation of infix. We need to go in
order of precedence and in each step we need to identify operands of an operator and we need to
bring the operator in front of the operands. What we can
actually do is we can first resolve operator precedence and put
parenthesis at appropriate places. In this expression
we will first do this multiplication this first
multiplication then we'll do this second multiplication then we will perform this addition and
finally the subtraction. Okay now we will go one
operator at a time, operands for this multiplication
operator are 'A' and 'B'. So this A*B will become AB*. Now next we would need to look at this
multiplication this will transform to cd* and now we can do the change for this addition the two operands are these two expressions in postfix, so I'm placing the plus
operator after these two expressions. Finally for this last operator the operands are this complex expression
and this variable 'e'. So this is how we will look like after the transformation. Finally when we 
are done with all the operators we can get rid of all the paranthesis. They're not needed in postfix expression. This is how you can do the conversion
manualy. We will discuss efficient ways of doing this programitically in later lessons. We will discuss algorithms to   convert infix to prefix or postfix in later lessons. In this lesson we're
only going to look at algorithms to evaluate prefix and
postfix expressions. Okay so we have this postfix
expression here and we want to evaluate this expression,
let's say for these values of variables a,b,c,d and e. So we have this expression in
terms of values to evaluate. I'll first quickly tell you how you can
evaluate a postfix expression manually. What you need to do is you need to scan
the expression from left to right and find the first occurrence of an
operator like here, multiplication is the first operator.
In postfix expression operands of an operator will always
lie to its left. For the first operator, the preceding two
entities will always be operands. You need to look for the first
occurrence of this pattern operand, operand, operator in the expression 
and now you can apply the operator on these two operands and reduced expression. So this is
what I'm getting after evaluating 23*. Now we need to repeat this
process till we are done with all the operators. Once again we need to
scan the expression from left to right and look for the first operator, if the
expression is correct it will be preceeded by two values. So basically we need to look for first
occurrence of this pattern operand, operand, operator. So now we can reduce this. we have 6 and then we have 5*4  20. We are using space as delimeter here, there should be some space in between two operands. Okay so this is
what I have now. Once again I'll look for the first
occurrence of operand, operand and operator. We will go on like this till we are done with all the operators. When I am saying we need to look for first
occurrence of this pattern operand, operand and operator, what I mean by operand here is a value and
not a complex expression itself. The first
operator will always be preceded by two values and if you will give this some thought you will
be able to understand why. If you can see in this expression we are
applying the operators in the same order in which we have them while
parsing from left to right. So first we're applying this leftmost
multiplication on 2 and 3 then we are applying the next
multiplication on 5 and 4 then we're performing the addition and then finally we are performing the
subtraction and whenever we are performing an operation, we're picking the last two operands proceeding the operator in the
expression. So if we have to do this programitically,
if we have to evaluate a postfix expression given to us in a string like this and let's say operands and operators are separated by space we can have some
other delimiter like comma also to separate operands
and operator. Now what we can do is we can parse the
string from left to right. In each step in this parsing, in each
step in the scanning process, we can get a token that will either be an
operator or an operand. What we can do is as we parse from left to right, we can keep track
of all the operands seen so far and I'll come back to how it
will help us. So I'm keeping all the operands so seen so
far in a list. The first entity that we have here is 2 which is an operand so it will go to the
list, next we have 3 which once again is operand so it will go into the list next we have this multiplication
operator. Now this multiplication should be applied to last two operands preceding it last
two operands to the left of it because we already have the elements stored in this list. All we need to do is we need to pick the
last two from this list and perform the operation. It should be 2*3 and with this multiplication we have reduced expression this 23* has now become 6 it has become an operand that can be used by an operator later. We are at this stage right now that I'm
showing in the right. I'll continue the scanning. Next we have an operand, will push this number 5 on to the
list. Next we have 4 which once again will
come to the list and now we have the multiplication operator and it should be applied to the last two
operands in the reduced expression and we should put the result back into the list. This is the stage
where we are right now. So this list actually is storing all the
operands in the reduced expression preceeding the position at which we are during passing. Now for this edition we should take out
the last two elements from the list and then we should put the result back,
next we have an operand we are at this stage right now. Next we have
an operator this subtraction. We will perform this
subtraction and put the result back. Finally when I'm done
scanning the whole expression I'll have only one element left in the list and this will be my final answer this
will be my final result. This is an efficient algorithm. We
are doing only one pass on the string representing the expression and we have our result. The list that we are using here if you could notice is being used in a
special way we are inserting operands one at a time
from one side and then to perform an operation we are
taking out operand from the same side. Whatever is coming in last is getting
out first. This whole thing that we're doing here
with the list can be done efficiently with a stack, which is nothing but a
special kind of list in which elements are inserted and removed from the same side in which
whatever gets in last comes out first. It's called Last In First
Out(LIFO) structure. Let's do this evaluation again. I have drawn
logical representation of stack here, and this time I'm going to use this stack. 
I'll also write pseudo code for this algorithm. I'm going to write a function named evaluate postfix that will take a string
as argument. Let's name this string expression exp for expression. In my function here, i'll first create a stack. Now for the sake of simplicity, let's assume that each operand or operator
in the expression will be of only one character. So to get a token or operator,
We can simply run a loop from zero till length of expression -1. So exp[i] will be my operand or operator. If
expression 'i' is operand I should put, push it onto the stack
else if exp[i] is operator we should do two pop operations in the
stack store the value of the operands in some variable. I'm using variable names op1 and op2. Let's say this pop function will remove
an element from top of stack s and also return this element. Once we have the two operands we can perform the operation, I'm using this
variable to store the output. Let's say this function will perform the operation. Now the result should be pushed back onto the stack. If
I have to run through this expression with whatever code I have right now,
then first entity is 2 which is operand so it should be pushed onto the stack.
Next we have 3, once again this will go to the stack.
Next we have this multiplication operator. So we will come to this else if part of
the code. I'll make first pop and I'll store 3 in this variable op1. Well actually this is the second operand,
so I should say this one is op2 and next one will be op1. Once I have popped these two elements I can perform the
operation. As you can see I'm doing the same stuff that I was doing with the list, the only thing is that I'm showing
things vertically. Stack is being shown as a vertical list. I'm
inserting or taking out from the top. Now I'll push the result back onto the
stack. Now we will move to the next entity
which is operand it will go onto the stack. Next 4 will
also go onto the stack and now we have this multiplication, so we
will perform two pop operations. After this operation
is performed result will be pushed back. Next we have
addition. So we will go on like this. We have 26
pushed onto the stack now. Now it's 9 which will go in and
finally we have this subtraction 26-9, 17 will be pushed onto the stack. At this stage we will be done with the loop we are done with all the tokens, all the
operands and operators. The top of stack can be returned as
final result. At this stage we will have only one
element in the stack and this element will be my final result.
You will have to take care of some parsing logic in actual implementation.
Operand can be a number of multiple digits and then we will have delimiter like
space or comma so you'll have to take care of that.
Parsing operand or operator will be some task. If you want to see my implementation you
can check the description of this video for a link. Okay so this was postfix evaluation.
Let's now quickly see how we can do prefix evaluation. Once again I have written this expression in
infix form and I'll first convert it to prefix. We will go in order of precedence. I first
put this paranthesis this 2 * 3 will become *23, this 5 * 4 will become *54 and now we will pick this plus(+) operator whose operands are these two prefix expressions. Finally for the subtraction operator this is
the first operand and this is the second operand. In the last step we can get rid of all the
parenthesis. So this is what I have finally. Let's now
see how we can evaluate a prefix expression like this. We will do it just like postfix this time all we need to do is we need
to scan from right, so we will go from right to left. Once again we will people use a stack if it's an
operand we can push it onto the stack. So here for this example 9 will go onto the stack and now we will go to the next entity in the left, it's 4. Once again we have an operand. It will go onto the stack. Now we have 5. 5 will also be pushed onto the stack and
now we have this multiplication operator. At this stage we need to pop two elements from the stack. This time the first element popped will be the first operand. In postfix the first element popped was 
the second operand. This time the second element popped will
be the second operand. For this multiplication, first operand is 5 and second operand is 4. This order is really important for multipication the order doesn't matter but for say division or subtraction this will matter. Result 20 will be pushed onto the stack and we
will keep moving left. Now we have 3 and 2 both will go onto the stack and now we have this multiplication operation. 3 and 2 will be popped and their product 6 will be pushed. Now we have this addition, the two
elements at top are 20 and 6 they will be popped and their sum 26 will be pushed. Finally we have to subtraction. 26 and 9 will be popped out and 17 will be
pushed and finally this is my answer. Prefix evaluation can be performed in couple of other ways also but this
is easiest and most straightforward. Okay so this was prefix
and postfix evaluation using Stack. In coming lessons, we will see efficient algorithms to convert infix to prefix or postfix. This is it
for this lesson. Thanks for Watching!",Evaluation of Prefix and Postfix expressions using stack,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described how we can evaluate Prefix and Postfix expressions efficiently using stack data structure. 

See source code here:
https://gist.github.com/mycodeschool/7702441

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,MeRb_1bddWg
DataStructures-LinkedListimplementationofstacks-MuwxQ2IB8lQ.en.csv,"In our previous lesson, we saw how we can
implement stack using arrays, now in this lesson we will see
how we can implement stack using linked list. For this lesson, I'm assuming that you
already know about both stack as well as linked list. Stack as
we know from our discussions so far is called a last in first out data
structure. Whatever goes in last in a stack comes
out first. It's a list with this restriction that
insertion and deletion must be performed only from one end that we call the top
of stack and insertion in a stack is called PUSH
operation and deletion is called POP. To implement a stack, all we need to do is enforce
this behavior in any implementation of the list that
insertion and deletion must be performed only from
one end and we can call that end TOP of stack. It's really easy to enforce this
behavior in a linked list. I have drawn linked list of integers
here. This is logical representation of a linked list.
A linked list is a collection of entities that we call
NODES. Each node contains two fields, one to
store data and another to store the address of the next
node. Let's assume that these nodes are at 
addresses 100,200 and 400 respectively, so I will fill up the
address part as well. The identity of a linked list is the
address of the first node that we also called the HEAD node. A variable stores to address of head node,
we often name this variable as head. Unlike arrays linked lists are not of fixed size and elements in a
linked list are not stored in one contiguous block of memory. We
already know how to create a linked list or insert and delete elements from a linked
list from our previous lessons. I'm just doing
a quick recap here. To insert an element in a linked list, we first create a new node which is
basically blocking some part of memory to store our data. In this example here, let's say for my
new node am getting address 350. We can set the data part of the
linked list as whatever value I want to add in the list and then I need to modify
the address field of some of the existing nodes to link this node in actual list. Now for a stack we want that insertion and
deletion must always happen from the same end.
We can use a linked list as stack if we always insert
and delete a node at same end. We have two options, we can insert or delete from end of the list, what we also call tail or beginning of the list that we call head. If you remember from
our previous lessons,  inserting a node at end of linked list
is not a constant time operation, the cost of
both insertion and deletion at end of linked
list if we have to talk about the time
complexity of it is O(n). Here in the definition of
stack we are saying that push and pop operations should take
constant time or the time complexity should be O(1), but if we will insert and delete from
end time complexity will be O(n). To
insert a new node in a linked list at the end, we need to go to the last node and set the address
part of that node  to make it point to the new node. To
traverse a linked list and go to the last node
we should start at the head or the first node, from first node we
get the address of the second node so we go to the second node and from
second node we get the address of the third node, it's like playing treasure hunt, you go to
the first guy, ask the address of the second guy and then you go to the second guy, ask
the address of the third guy and so on. Now once I have reached this last node in
my example here, I can set its address part to make it
point to the newly created node. All in all this operation will take time
proportional to number of elements in the linked list. To delete a node from end, once again we will
have to traverse the whole list. We will have to go to the second last node, break this link, we will set the
address field as zero or NULL. and then we can simply wipe off the
last node removed from the list from computers memory. Once again
the cost of traversal will be  O(n). So inserting and deleting at end or tail is not an option for us,
because we will not be able to do push and pop in constant time, if we
choose to insert and delete from end. The cost of inserting or
deleting from beginning however is O(1). It will take constant time to insert a
new node at beginning or delete a node from beginning. To insert a node at  beginning, we must create a
new node. In this example here, once again I have
created a new node, let's say the address of new node is 
350, I will insert some data in the first field of this node. Okay so to insert
this node at beginning, we just need to build two
links. First we need to build this link, so
we will set the address here as whatever the address
of the current head is and then we can break this link and make this guide the new head by setting
it's address here in this variable named head. To delete a node in this example here, we will have to
first cut this link and build this link which will mean
resetting the address in this variable head and then
we can free the memory allocated to this particular guy, this particular node.
Deletion from beginning once again is a constant time
operation, so this is the thing if we will insert at beginning and delete from
beginning then all our conditions are satisfied. So
linked list implementation of stack is pretty straightforward. All we need to do is insert a node at
the beginning and delete a node from beginning. So, head of
the linked list is basically the top of stack. I would
rather name this variable top here. I will quickly write a basic
implementation in C. I'm defining node as a structure
in C. I want to create a stack of Integers,
so first field in the node is an integer, another field is pointer to node that will
store the address of the next node. We have seen this definition of node in
all our previous lessons on linked list, the next thing that I'm doing is I'm
declaring a variable named top which is pointer to
node. and initially I'm setting the address in
it as NULL. I'm using variable name top instead of
head here, when top is NULL our stack is empty, by
initializing top as NULL I'm saying that initially my
stack is empty. Now let's write push and pop functions.
This is my push function. Push is taking an integer X as
argument that must be inserted onto the stack. The first thing
that we are doing in push function is that we are creating a node using malloc. Let's say in this example
in this logical representation that I'm showing here, I'm performing a push operation so I'm
making a call to push function, passing it 2 as argument. So a node is created in memory, is created
in what we call the dynamic memory or heap, let's say the address of this
node is 100. This variable is basically a pointer pointing to this node, temp is a pointer
pointing to this node in the next line we are setting the data
field in this node. We are dereferencing temp
to do so, then we are setting the link part of
this newly created node as existing top. So we are building this link and then we are seeing top equal temp 
So we are building this link. This is simple insertion at
beginning of a linked list we have one complete video in this
series on how to insert an node at beginning of linked list. Let's do one
more push. Let's say I want to push 5 on to the
stack this time. Once again a node will be created, we will
set the data and then we will first point this guy to 
the existing top and then make this pointer
variable point to this guy. The new top, let's say the address of
this guy is 250, so the address in this variable top will
be set as 250. After the second push this is how my
stack will look like. Top here is a global variable so, we do
not need to pass it as argument to functions, it is accessible to all the functions. In an
object-oriented implementation it can be a private field and we can set it as NULL in the
constructor. Okay let's now see how push, sorry pop function will look like. This is my
pop function. Let's say for this example I'm making a
call to pop function. If the stack is already empty we can check for the stack is empty or
not by checking whether top is null or not, if top
is NULL, stack is empty. In this case we can throw some error and
return for this example here stack is not empty,
we have two integers in the stack. what we are first doing is we're creating a
pointer to node temp and pointing it to the top node and now we are breaking this link we are
setting the address in top as address of the next node and now using this pointer
variable temp, we are freeing memory allocated to the node being removed from the list.
Once I exit the pop function, this is my stack so this pretty much is the core of our
implementation. I would encourage you to write rest of
the stuff yourself. You can write code for operations like
top() and isempty(). Linked list implementation of stack has
some advantages. one of the advantages is that unlike
array based implementation we do not need to worry about overflow, unless we exhaust the memory of
the machine itself. Some amount of extra memory is used in
each node to store reference or address but the fact that the use memory when
needed and release when not needed is something
that makes push and pop operations more craze full. So
this is linked list based implementation of
stack. In our coming lessons we will solve some problems using Stack. This is it for
this lesson. Thanks for watching.",Data Structures: Linked List implementation of stacks,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have discussed linked list based implementation of stack data structure.

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,MuwxQ2IB8lQ
Solvingthelogisticdifferentialequationpart2_KhanAcademy-NU1v-8VRirU.en.csv,"-(Voice over) So we left off in part one getting pretty close to finding our N of T that satisfies the logistic
differential equation where it's initial condition
is between zero and K, and now we just have to really just do some algebra to finish things up. So we left with this. For our N of T this must be true. Now, we could use a
little bit of logarithm properties to rewrite this left hand side as the logarithm of. The logarithm of something minus the logarithm of something else, that's going to be the first something, The logarithm of the first something divided by the second something. One minus N over K, and this is of course going to be equal to all this business that we have, is going to be equal to, actually let me just write it. It's going to be equal to, equal to, R times T plus C, plus C, and now what we could do, this is the same thing as saying that E to the R T plus C is going to be equal to this thing right over here. This, the natural log of this, is equal to the exponent
that I have to raise E to to get to this right over here, so I could just write that. We could just write, or another way of thinking about it, we could take E, if this is equal to that, we could take E to this
power on this left hand side, and E to this power on
this right hand side, and they should be equal. So E to this power is just going to be what's inside the parenthesis. It's just going to be N. It's just going to be N over one minus, one minus, N over K. I'll do that in a green color, so you can keep track of
where things came from. Is equal to E to this business. Is equal to E to the R T. R, I'll do the T in white. R T plus C, plus C. Now this I could rewrite if I want to. If I have E to something
plus something else, I could rewrite this as to the R T times E times E to the C, and
just to simplify things, this is just going to be
another constant here, and I could, if this is C, I could call it C one, but I'm just going to
call that a constant. So I could just say
that that's going to be equal to some constant times E to the R T, and now we just need to solve for N. And once again, at any point while we're working on this you get inspired, feel free to solve for N. So let's see. One way to solve for N. Let's see. If we could take the reciprocal of both sides of this, we're going to get. Let me draw a line here
just so you know we're. Let me draw a line. So, if we take the reciprocal
of both sides of this, we're going to get one over N, one minus N over K over
light green N is equal to, is equal to, and so let's, we could say it's equal to, it's equal to one over C
time E to the negative R T. But one over C, that's just
going to be another constant. So I could write one over C here, and I take the reciprocal. And once again, this is just going to be another constant, so I'm going to be a
little bit of hand waving, and say well O.K we're going to get another constant here. I could have called
this C one, this C two. I could call this C three if I want to make it clear that these are not going to be the same number. This is E to the this power. This is the reciprocal of that. Actually, maybe I'll do that just to make it a little bit clearer. That would have been C
one right over there, and so this is going to be, sorry, the reciprocal of this C three and E to the negative, the reciprocal of E to the R
T is E to the negative R T. E to the negative, E to the negative R, E to the negative R T. And let's see, if we divide the numerator and the denominator by N, or if we divide E. I want to think, if we divide this term by in we're going to get. So this term by N is
going to be one over N, and then this term by N is just going to be minus one over K. So this is just going to be minus one over K is equal to this. This is equal to this business. So copy and paste. It's going to be equal to that. This is good algebra practice here. Now let's see. We could take this one over K, add it to both sides, so let's do that. So let me just cut, so
let me cut and paste it. I'm going to add it to both sides, so that should be a plus one over K. So, plus one over K. And now to solve for N, I just take the reciprocal of both sides. So I'm going to get, I'm going to get N. And I'll write it in kind
of the function notation. N of T, actually let me make my T in white since I've been taking the trouble all this time of rewriting this in white, is equal to one over. Is going to be equal to one
over all of this business. Is going to be equal to one
over all of this business. So copy and paste. Is going to be equal to that. And that by itself. That's by itself is already interesting. That by itself is already interesting. So I could write it like this. And if I want, if I don't like, let's see, well yeah I could just, if I don't like having this K kind of a fraction in a fraction, I could rewrite it as. Actually, maybe I'll do it over here. N of, N of T is equal to. I'll just multiply the numerator
and the denominator by. I'll just multiply it, actually let me just leave
it like that for now. And what I'm going do, what
I'm now going to do, is say, ""Well look. ""We're assuming that N
of zero is N sub knot."" So we're assuming that N of zero, N of zero, is equal to N sub knot. So let's write this thing. Let's solve for the constant. Let's figure out what this could be if we know what our initial condition is. So N of zero, N of zero, is going to be equal to, is going to be equal to one, one over. When T is zero, this is just going to be equal to one, so it's just going to be our constant C three plus one over K plus one over the maximum population that our population, that our environment, can handle, and that's going to be equal to N knot, and now we can solve for our constant. So we get, let's see I'm probably going to need a lot of real estate for this, so I can take the reciprocal
of both sides again, so this is something that
we're doing a lot of. C three plus one over K is
equal to one over N knot. Is equal to one over N knot. Just took the reciprocal of both sides, and so we get our
constant C three is equal to one over N knot minus one over K. Minus one over K. So we can rewrite our solution, which we'll call the logistic
function, we get, we get, this is fun now, N of T. N of T is equal to one
over, our constant is this, so it's going to be, let
me copy and paste this. So copy and paste. It's going to be that,
that's our constant. So it's going to be that times E to the negative R T, to the negative R times T, plus one over K, plus one over K. And if we don't like having
all of these denominators in, all of these fractions in the denominator, why don't we multiply everything times the numerator and the denominator by N knot K. So I'm going to multiply the numerator times N knot K, and I'm going to multiply
the denominator by N knot K. N knot K. And so what do we get? This is all going to be equal to. In the numerator I have N
knot times K, N knot times K. And in the denominator I am going to have, let's see if I multiply this term right over here times N knot
K I'm going to have K. If I multiply this term times N knot K, I'm going to have N knot, so it's going to be minus N knot, minus N not, times E to the negative R T, Times E to the negative R T, negative R T, and then if I multiply this times N not K, I'm going to get N knot. So plus N knot. And there you have it. We have found a solution for the logistic differential equation. We will call this logistic function, and in future videos we
will explore it more, and we will see what it actually does. If you were to plot this, and I encourage you to do so, either on the internet, you could try Wolfram Alpha, or if you're on your graphing calculator, you will see that it has the exact properties that we want it to have. It starts at N knot. It starts to increase
at an increasing rate, but then it starts to slow down as we reach our maximum population. And so that is actually
a very neat function. If you model a population with this, you can kind of start to make predictions about what might the
population be at time whatever. And so, hopefully, you
found that satisfying.",Solving the logistic differential equation part 2 | Khan Academy,"Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/logistic-differential-equation/v/logistic-function-application?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/logistic-differential-equation/v/solving-logistic-differential-equation-part-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,NU1v-8VRirU
Repeatedrootsofthecharacteristicequation_Secondorderdifferentialequations_KhanAcademy-NW9JfMvIsxw.en.csv,"Let's say we have the following
second order differential equation. We have second derivative of
y, plus 4 times the first derivative, plus 4y
is equal to 0. And we're asked to find the
general solution to this differential equation. So the first thing we do, like
we've done in the last several videos, we'll get the
characteristic equation. That's r squared plus 4r
plus 4 is equal to 0. This one is fairly
easy to factor. We don't need the quadratic
equation here. This is r plus 2
times r plus 2. And now something interesting
happens, something that we haven't seen before. The two roots of our
characteristic equation are actually the same number,
r is equal to minus 2. So you could say we only have
one solution, or one root, or a repeated root. However you want to say it, we
only have one r that satisfies the characteristic equation. You might say, well
that's fine. Maybe my general solution is
just y is equal to some constant times e to the minus
2x, using my one solution. And my reply to you is,
this is a solution. And if you don't believe
me you can test it out. But it's not the general
solution. And why do I say that? Because this is a second order
differential equation. And if someone wanted a
particular solution, they would have to give you two
initial conditions. The two initial conditions we've
been using so far are, what y of 0 equals, and what
y prime of 0 equals. They could give you what y
of 5 equals, who knows. But in general, when you have
a second order differential equation, they have to give you
two initial conditions. Now the problem with this
solution, and why it's not the general solution, is if you
use one of these initial conditions, you can solve
for a c, right? You'll get an answer. You'll solve for that c. But then there's nothing
to do with the second initial condition. In fact, except for only in one
particular case, whatever c you get for the first initial
condition, it won't be that-- this equation won't
be true for the second initial condition. And you could try it out. I mean, if we said, y of 0 is
equal to A and y prime of 0 is equal to 5A. Let's see if these work. If y of 0 is equal to A, that
tells us that A is equal to c times e to the minus
2 times 0. So e to the 0. Or c is equal to A, right? So if you just had this first
initial condition, say fine, my particular solution is
y is equal to A times e to the minus 2x. Let's see if this particular
solution satisfies the second initial condition. So what is the derivative
of this? y prime is equal to minus
2Ae to the minus 2x. And it says that 5A-- this
initial condition says that 5A is equal to minus 2A times
e to the minus 2 times 0, so e to the 0. Or another way of saying that,
e to the 0 is just 1. It says that 5A is equal
to minus 2A, which we know is not true. So note, when we only have
this general, or pseudo-general, solution, it can
only satisfy, generally, one of the initial conditions. And if we're really lucky,
both initial conditions. So that at least gives you an
intuitive feel of why this isn't the general solution. So let me clean that up a little
bit so that I-- I have a feeling I'll have to
use this real estate. So what do we do? We can use a technique called
reduction of order. And it really just says,
well let's just guess a second solution. In general when we first thought
about these linear constant coefficient
differential equations, we said, well e to rx might
be a good guess. And why is that? Because all of the derivatives
of e are kind of multiples of the original function, and
that's why we used it. So if we're looking for a second
solution, it doesn't hurt to kind of make
the same guess. And in order be a little bit
more general, let's make our guess for our second solution--
I'll call this g for guess-- let's say it's some
function of x times our first solution, e
to the minus 2x. I could say some function of x
times c times e to the minus 2x, but the c is kind
of encapsulated. It could be part of this some
random function of x. So let's be as general
as possible. So let's assume that this is a
solution and then substitute it back into our original
differential equation, and see if we can actually solve for
v that makes it all work. So before we do that, let's
get its first and second derivatives. So the first derivative of g
is equal to-- well this is product rule. And I'll drop the v of x, we
know that v is a function and not a constant. So, product rule, derivative
of the first, v prime times the second expression, e to the
minus 2x, plus the first function, or expression, times
the derivative of the second. So minus 2 times e
to the minus 2x. Or, just to write it a little
bit neater, g prime is equal to v prime e to the minus 2x
minus 2ve to the minus 2x. Now we have to get the
second derivative. I'll do it in a different
color, just to fight the monotony of it. So the second derivative-- we're
going to have to do the product rule twice-- derivative
of this first expression. It's going to be v prime prime
e to the minus 2x, minus 2v prime e to the minus 2x. That was just the product
rule again. And then the derivative of the
second expression is going to be-- let's see, derivative of
the first one is v prime-- so it's going to be minus 2v prime
e to the minus 2x, plus 4ve to the minus 2x. I hope I haven't made
a careless mistake. And we can simplify
this a little bit. So we get the second derivative
of g, which is our guess solution, is equal to
the second derivative of v prime, e to the minus 2x minus
2v prime-- no, minus 4, sorry, because we have minus 2, minus
2-- minus 4v prime e to the minus 2x, plus 4ve
to the minus 2x. And now, before we substitute it
into this, we can just make one observation. That will just make the algebra
a little bit simpler. Notice that g is something
times e to the minus 2x. G prime is-- we could factor
out an e to the minus 2x. And g prime prime, we
can factor out an e to the minus 2x. So let's factor them
out, essentially. So when we write this, we can
write-- so the second derivative is g prime prime,
which we can write as-- and I'm going to try to do this--
it's e to the minus 2x times the second derivative. So now we can get rid of the
e to the minus 2x terms. So that's v prime prime minus
4v prime plus 4v, right? If I just distribute this out
I get the second derivative, which is this. Plus 4 times the first
derivative. And I'm also going to factor
out the e to the minus 2x. So, plus 4 times this. So it's going to be plus 4v
prime minus 8v, right? Once again, I factored out the
e to the minus 2x, right? Plus 4 times y. We factored out the e to the
minus 2x-- so plus 4 times v. I did that, because if I didn't
do that I'd be writing e to the minus 2x, and I'd
probably make a careless mistake, and I'd run out
of space, et cetera. But anyway, I essentially-- to
get this, I just substituted the second derivative, the first
derivative, and g back into the differential
equation. And we know that that
has to equal 0. And let's see if we
can simplify this a little bit more. And then hopefully
solve for v. So let's see, some things
are popping out at me. So I have plus 4v plus
4v, that's plus 8v, minus 8v, right? So plus 4 minus 8 plus
4, those cancel out. It's plus 8 minus 8,
those cancel out. And I also have minus 4v
prime plus 4v prime. So those cancel out. And lo and behold, we've done
some serious simplification. It ends up being e to the minus
2x times v prime prime-- we could call that v prime prime
of x, now that we've saved so much space--
is equal to 0. We know this could
never equal to 0. So, essentially, we have now
established that this expression has to
be equal to 0. And we get a separable second
order differential equation. We get that the second
derivative of v with respect to x-- or it's a function
of x-- is equal to 0. So now we just have to
differentiate both sides of this equation twice. You differentiate once,
you get what? v prime of x is equal to,
let's call it c1. And if we were to take the
anti-derivative of both sides again, we get v of x is
equal to c1 x plus some other c2, right? Now remember, what
was our guess? Our guess was that our general
solution was going to be some arbitrary function v times that
first solution we found, e to the minus 2x. And when we actually took that
guess and we substituted it in, we actually were able
to solve for that v. And we got that v is
equal to this. So this is interesting. So what is g, or what does
our guess function equal? And it's no longer a guess. We've kind of established
that it works. g, which we can call our
solution, is equal to v of x, times e to the minus 2x. Well, that equals this, c1 x
plus c2 e to the minus 2x. That equals c1 xe to the minus
2x, plus c2 e to the minus 2x. And now we have a truly
general solution. We have two constants, so we
can satisfy two initial conditions. And if you were looking for a
pattern, this is the pattern. When you have a repeated root
of your characteristic equation, the general solution
is going to be-- you're going to use that e to the, that
whatever root is, twice. But one time you're going to
have an x in front of it. And this works every time for
second order homogeneous constant coefficient
linear equations. I will see you in
the next video.",Repeated roots of the characteristic equation | Second order differential equations | Khan Academy,"What happens when the characteristic equation only has 1 repeated root?

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/complex-roots-characteristic-equation/v/repeated-roots-of-the-characterisitic-equations-part-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/complex-roots-characteristic-equation/v/complex-roots-of-the-characteristic-equations-3?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,NW9JfMvIsxw
Introductiontolinkedlist-NobHlGUjV3g.en.csv,"In this lesson, we will introduce you to linked list data
structure In our previous lesson, we tried to
implement a dynamic list using arrays and we had some issues there it was not most efficient in terms of
memory usage, in terms of memory consumption When we use arrays, we have some
limitations To be able to understand linked list well, we need to understand these
limitations so i'm going to tell you a simple story to help you understand this let us say this is computer's memory and
each partition here is one byte of memory Now as we know each byte of memory has an address We are showing only a section of the
memory, that's why it is extending towards the bottom and the top let's say that address increases from
bottom to top so if this bike is address 200,
the next byte would be address 201 and next byte would be address 202 and so on what I want to do is i want to draw this memory from left to right horizontally instead
of drawing it from bottom to top like this uh... this looks better let's say this byte here is address
 200 and as we go towards the right the address increases, so this is like 201 and we go on like 202, 203 and so on it doesn't really matter whether we show memory from bottom to top or left to right these are just logical ways to look at
the memory so coming back to our story Memory is a crucial resource and all the applications keep asking for it. So, Mr. computer has given this job
of managing the memory to one of his components, to one of his
guys who he calls the memory manager now this guy keeps track of what part of the memory is free and what
part of the memory is allocated and anyone who needs memory to store
something needs to talk to this guy Albert is our programmer and he is building an application he needs to store some data in the memory, so he needs to talk to the
memory manager He can talk to the memory manager in
 a high level language like C, let us say he  is using C to talk to the memory manager First he wants to store an integer in the memory so he communicates this to memory
manager by declaring an integer variable something like this the memory manager sees this declaration
and he's says that ok you need to store an integer variable so i need to give you four bytes of memory because integer variable is stored in
four bytes in a typical architecture. and let us say in this architecture, it is
stored in four bytes so the memory manager looks for four bites of free space in the memory and assigns it or allocates it  for valuable x Address of a block of memory is the address 
of the first byte in the memory so let us say this first byte of memory here is at address 217, so variable x is at address 217 so memory manager kind of communicates
it back to Albert that hey I have assigned address 217 for your variable x you can store whatever you want there. and Albert can fill-in any data into this valuable now albert needs to store a list of integers,
a list of numbers and and he thinks that the maximum number
of integers in this list will be 4. so he asks the memory manager for an integer array of size  four names 'A' Now, arrays is always stored in memory as one contiguous block of memory.  So memory manager is like ok, i need to look for a block of memory of 16 bytes for this variable  this array A. so the memory manager allocates this block
starting address two zero one and ending address two one six for this variable 'A' which is  an array of four integers. uh... because array is stored as one
contiguous block of memory and memory manager conveys the starting address of this block whenever Albert tries to access any of the elements in the array Let's say he tries to access, let's say he tries to write the value at the  fourth element in the array. which he accesses as A[3], Albert's
application knows where to write this particular value because it knows the base address the starting address of the block 'A' the array 'A' and from base address using the index which is 3 here it calculates the address of A[3] so it knows that A[3] is at address
two one three. So, to access any of the elements in the array the application takes constant time and this is one awesome thing  about arrays
that irrespective of the size of the arrays uh... the application,an application
can access any of the elements in an array  in constant time now let's say Albert uses this array of 4 integers to store his list so i'll fill in some values here at
these positions ,let's say this is 8 this is 2 this is 6, this is 5, this is 4 Now Albert at some point feels that ok, i need to have one more element in this list now he has declared an array of size four
and he wants to add a fifith element in  the array so he asks the memory manager that hey i want to
extend my array 'A' is it possible to do so i want to extend the same block and the memory manager is like when i allocate memory for an array, I do not expect that you will expect an extension, so i use whatever memory available adjacent to that block  for other variables in some cases I may extend the same
block, but in this case, I have an element a variable 'x' ... next to your block.So,
i cannot give you an extension so Albert is like what all options do i
have Memory manager is like, you can
tell me the new size and I can recreate a new block at some new address and we will have to copy all the
elements from the previous block to the new block so Albert says that ok, let's do it but the memory manager is like you still need to give me the size of
the new block Albert thinks that this time he will give a really  large size for the new array or the new block. so that it does not fill up. this new block starting address 224 is allocated Albert asks memory manager to free the previous block.  and this is some cost. He has to copy
all the elements, all the numbers from the previous block into the new block and now he can add one more element to
this list and he has kept his array large this
time just in case he needs more numbers in the list The only option that Albert  had was to create 'A' as an entirely new block, as an
entirely new array and albert is it still feeling bad
because if the list is too small he is not using some part of the array and so memory is getting wasted and if the list again grows too much he
will again have to create a new array, a new block and he will
again have to copy all the elements from the previous block into the new
block Albert is desperately seeking a
solution to this problem and the solution to this problem is a data structure named linked list so let us not try to understand linked list data structure and see how it solves Albert's problem what Albert can do is that instead of asking the memory manager
for an array which will be one  large contiguous block of memory he can ask memory for one unit of data at a time for one element at a time in a separate request I'm cleaning up the memory here once again let's say Albert wants to store this list of four integers in the memory what if he requests memory for one integer at a time.
So, first he pings memory manager for  some memory to store number six memory manager will be like ok you need
space to store an integer so you get this block of four bytes
at address 204 so Albert can  store number six here now Albert makes another reques,t a
separate request for number five let's say he gets this blocks starting
address two one seven for number five because he makes a separate request, he may or may not get memory adjacent to number 6. higher probability is that  he will not get an adjacent memory location so
similarly Albert makes uh... separate requests for number four and two so let's say he gets these two blocks at address 232 and 242 respectively   for numbers four and two so as you can see when Albert makes separate request for each integer instead of getting one contiguous block of 
memory, he gets these disjoint non-contiguous blocks of memory so we need to store some more information here we need to store the information that this  is the first element in the list and this is the
second element in the list so we need to link these blocks together
somehow we an array, it was very simple we had one contiguous block of memory, so so we knew where a particular element is
by calculating its address using the starting address of the blocks and the
position of the element in the array but here, we need to store the
information that this is the first block which  stores the first element and 
this is the second block which stores the second element and so on to link these blocks together and
to store the information that this is the first block in the list and this is
the second block in the list what we can do is that we can store some extra information with
each block so what if we can have two parts in each
block something like this and in one part of the block, we store
 the data or the value and in the other part of the block
we store the address of the next block. in this example in the first block the address part would be 217, the address of the next block that stores 5 and in this next block or the second block address part would be 232 In the block at address 232 We will store the address 242 the address of the next block that stores number two and the block at 242 is the last block. there is no next block after this so
in the address part we can have address as zero, zero is invalid address zero can be used to mark that this is the end of the list there is no link to the next uh... node or next block after this  particular block so Albert now actually has to request memory manager for a block of money that
will store two variables one an integer variable that will store the value of our element and one a pointer variable that will store
 the address of the next block the next node in the list in c he can define a type named Node like this he will have two fields in the node, one to store the data this field will be an ineteger and one more field to store the address of the next node on the list so Albert will ask a Node Albert will ask memory for a node from the memory manager and the memory manager will be like, Ok you need a node that needs 4 bytes for an integer variable and four more bytes for the pointer variable that will store the address Pointer variable also in a typical architecture is
stored in four bytes so now memory manager gives us a block of 8 bytes.  and we call this block - a Node Notice that the second field in the node
structure is Node star which means pointer to node so this field will only  store an address of the next node in the list so if we store the list like this in
the memory as these non-contiguous nodes connected to each other but then this is a linked list data structure Logical view of the linked list
data structure will be something like this data is stored in these nodes and each
node stores the data as well as the link to the next node so each node kind of points
to the next node the first node is also called the head node and the only information about the list
that we keep all the time is address of the head node or address of the first node so address of the head node kind of
gives us access to the complete list the address in the last node is NULL or  zero which means that the last node does not point to any other node. now if we want to traverse the linked list the only way to do it is we start at the head we go to the first guy and then we ask the first 
guy the address  the next guy adress of the next node and then we
go to the next node and ask the address of the next node and this
is the only way to access the elements in the linked list if we want to insert a node in the linked list let's say we want to add number
three at the end of the linked list then all we need to do is first create
 a node in the linked list sorry first ... create a node 
independently and separately it will get some memory location so we created this node with value 3. 
Now all we need to do is fill the address properly, adjust these links
properly so the address of this particular node will be filled in this node  with value 2. And this node  the address part can be NULL, so it is the last
node, it does not point to any other node let's also show this uh... these nodes
in the memory here so i have written the address of each node in  brown at top of these notes and i have also filled in this address field of each node let's say uh... the Node for value three gets address 252 so this is how things will be in the
memory and this is how the logical view will be the linked list uh... is always identified by the
address of the first node and unlike arrays we cannot access any
of the elements in constant time in the case of arrays using the starting address of the block of
memory and using the position of the  element in the list, we could calculate
the address of the element but in this case we have to start at the
head and we have to ask this element for the 
next element and then ask the next element who is
your next, it's like playing treasure hunt. You go to the first
guy and then you get the address for the second and then you go to the second guy and
you get address of the third guy. so the time taken to access elements will be proportional to the size of the list let's say the
size of the list is n, there are n elements in the list in the worst case to traverse the last element
we will go through all the elements, so time taken
to access elements is proportional to n or in other words we say that this operation will cost us or rather the  time complexity of this operation is big-oh of n insertion into the list we can insert anywhere in the list, we
first need to create a node and just adjust these links properly, like say i want 10 at 3rd position in the list so all we
need to do is create a Node, store the value 10 in the data part something like this Let's say we get the node at address 310 So, we will adjust the address field in 
the second node to point to this node at address 310,and this
 node will point to the node with value 4. Now to insert also, we will have to 
traverse the list and got to that particular position and so this will be O(n) again in terms of of time complexity the only thing is that uh... the
insertion will be a simple operation, we will not have to do all the shifts as we had to do in an array. To insert something in between, we had
 to shift all the elements by one position towards higher indices similarly to delete something from this list will also O(n) so we can see some good things about
linked list that is no extra use of memory in the sense that some memory is unused We are using some extra memory, we are
using some extra money to store the addresses but we have the benefit that we create nodes as and when we want and we can also free the nodes as
and when we want we do not have to guess the size of the
list beforehand like in the case of arrays We will discuss all the 
operations on linked list and the cost of these operations as well as comparison with array in our next lessons. We will also be
implementing linked list in C or C++ so this is all for a basic
introduction to linked list Thanks for watching !",Introduction to linked list,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P
In this lesson, we have described linked list data structure. We have analyzed our limitations with array data structure and tried to understand the need for linked list.

For updates on videos and courses, you may subscribe to our YouTube channel.

You may also like us on Facebook:
https://www.facebook.com/MyCodeSchool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,NobHlGUjV3g
Laplacetransform1_Laplacetransform_DifferentialEquations_KhanAcademy-OiNh2DswFt4.en.csv,"I'll now introduce you
to the concept of the Laplace Transform. And this is truly one of the
most useful concepts that you'll learn, not just in
differential equations, but really in mathematics. And especially if you're going
to go into engineering, you'll find that the Laplace Transform,
besides helping you solve differential equations,
also helps you transform functions or waveforms from
the time domain to this frequency domain, and study
and understand a whole set of phenomena. But I won't get into
all of that yet. Now I'll just teach
you what it is. Laplace Transform. I'll teach you what it is, make
you comfortable with the mathematics of it and then in
a couple of videos from now, I'll actually show you how it
is useful to use it to solve differential equations. We'll actually solve some of the
differential equations we did before, using the
previous methods. But we'll keep doing it, and
we'll solve more and more difficult problems. So what is the Laplace
Transform? Well, the Laplace Transform,
the notation is the L like Laverne from Laverne
and Shirley. That might be before many
of your times, but I grew up on that. Actually, I think it was even
reruns when I was a kid. So Laplace Transform
of some function. And here, the convention,
instead of saying f of x, people say f of t. And the reason is because in
a lot of the differential equations or a lot of
engineering you actually are converting from a function
of time to a function of frequency. And don't worry about
that right now. If it confuses you. But the Laplace Transform
of a function of t. It transforms that function into
some other function of s. and And does it do that? Well actually, let me just do
some mathematical notation that probably won't
mean much to you. So what does it transform? Well, the way I think of
it is it's kind of a function of functions. A function will take you from
one set of-- well, in what we've been dealing with-- one
set of numbers to another set of numbers. A transform will take you from
one set of functions to another set of functions. So let me just define this. The Laplace Transform for our
purposes is defined as the improper integral. I know I haven't actually done
improper integrals just yet, but I'll explain them
in a few seconds. The improper integral from 0 to
infinity of e to the minus st times f of t-- so whatever's
between the Laplace Transform brackets-- dt. Now that might seem very
daunting to you and very confusing, but I'll now do
a couple of examples. So what is the Laplace
Transform? Well let's say that f
of t is equal to 1. So what is the Laplace
Transform of 1? So if f of t is equal to 1--
it's just a constant function of time-- well actually, let me
just substitute exactly the way I wrote it here. So that's the improper integral
from 0 to infinity of e to the minus st
times 1 here. I don't have to rewrite it here,
but there's a times 1dt. And I know that infinity is
probably bugging you right now, but we'll deal
with that shortly. Actually, let's deal with
that right now. This is the same thing
as the limit. And let's say as A approaches
infinity of the integral from 0 to Ae to the minus st. dt. Just so you feel a little bit
more comfortable with it, you might have guessed that this
is the same thing. Because obviously you can't
evaluate infinity, but you could take the limit as
something approaches infinity. So anyway, let's take the
anti-derivative and evaluate this improper definite
integral, or this improper integral. So what's anti-derivative
of e to the minus st with respect to dt? Well it's equal to minus 1/s
e to the minus st, right? If you don't believe me, take
the derivative of this. You'd take minus s times that. That would all cancel out, and
you'd just be left with e to the minus st. Fair enough. Let me delete this here,
this equal sign. Because I could actually use
some of that real estate. We are going to take the limit
as A approaches infinity. You don't always have to do
this, but this is the first time we're dealing with
improper intergrals. So I figured I might as
well remind you that we're taking a limit. Now we took the anti-derivative. Now we have to value it at A
minus the anti-derivative valued at 0. And then take the limit of
whatever that ends up being as A approaches infinity. So this is equal to the limit
as A approaches infinity. OK. If we substitute A in here
first, we get minus 1/s. Remember we're, dealing
with t. We took the integral
with respect to t. e to the minus sA, right? That's what happens when
I put A in here. Now what happens when I put
t equals 0 in here? So when t equals 0, it becomes
e to the minus s times 0. This whole thing becomes 1. And I'm just left
with minus 1/s. Fair enough. And then let me scroll
down a little bit. I wrote a little bit bigger
than I wanted to, but that's OK. So this is going to be the limit
as A approaches infinity of minus 1/s e to the
minus sA minus 1/s. So plus 1/s. So what's the limit as A
approaches infinity? Well what's this term
going to do? As A approaches infinity, if
we assume that s is greater than 0-- and we'll make that
assumption for now. Actually, let me write
that down explicitly. Let's assume that s
is greater than 0. So if we assume that s is
greater than 0, then as A approaches infinity, what's
going to happen? Well this term is going to go to
0, right? e to the minus-- a googol is a very,
very small number. And an e to the minus googol
is an even smaller number. So then this e to the minus
infinity approaches 0, so this term approaches 0. This term isn't affected because
it has no A in it, so we're just left with 1/s. So there you go. This is a significant to
moment in your life. You have just been exposed to
your first Laplace Transform. I'll show you in a few videos,
there are whole tables of Laplace Transforms, and
eventually we'll prove all of them. But for now, we'll just
work through some of the more basic ones. But this can be our
first entry in our Laplace Transform table. The Laplace Transform of
f of t is equal to 1 is equal to 1/s. Notice we went from a function
of t-- although obviously this one wasn't really dependent
on t-- to a function of s. I have about 3 minutes left,
but I don't think that's enough time to do another
Laplace Transform. So I will save that for
the next video. See you soon.",Laplace transform 1 | Laplace transform | Differential Equations | Khan Academy,"Introduction to the Laplace Transform

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-tutorial/v/laplace-transform-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/undetermined-coefficients/v/undetermined-coefficients-4?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy is a nonprofit with a mission to provide a free, world-class education for anyone, anywhere. We believe learners of all ages should have unlimited access to free educational content they can master at their own pace. We use intelligent software, deep data analytics and intuitive user interfaces to help students and teachers around the world. Our resources cover preschool through early college education, including math, biology, chemistry, physics, economics, finance, history, grammar and more. We offer free personalized SAT test prep in partnership with the test developer, the College Board. Khan Academy has been translated into dozens of languages, and 100 million people use our platform worldwide every year. For more information, visit www.khanacademy.org, join us on Facebook or follow us on Twitter at @khanacademy. And remember, you can learn anything.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,OiNh2DswFt4
Lineartransformationsasmatrixvectorproducts_LinearAlgebra_KhanAcademy-PErhLkQcpZ8.en.csv,"Let's say I have an n-by-n
matrix that looks like this. So let me just see if I can
do it in general terms. In the first row and first
column, that entry has a 1, and then everything else, the
rest of the n minus 1 rows in that first column are all
going to be zeroes. So it's going to be zeroes all
the way down to the nth term. And then the second column,
we have a 0 in the first component, but then a 1 in
the second component. And then it goes zeroes
all the way down. And you keep doing this. In the third row, or let me say
third column, although it would've applied to the third
row as well, the 1 shows up in the third component, and then
it's zeroes all the way down. Essentially, you have the ones
filling up the diagonal of this matrix right here. So if you go all the way to
the nth column or the nth column vector, you have a bunch
of zeroes until you get-- you have n minus 1 zeroes,
and then the very last component, the nth component
there will be a 1. So you have essentially,
a matrix with ones down the diagonal. Now, this matrix has a bunch of
neat properties and we'll explore it more in the future. But I'm just exposing you to
this because it has one very neat property relative to
linear transformations. But I'm going to call this the
identity matrix and I'll call this I sub n, and I called that
sub n because it's an n-by-n identity matrix. I sub 2 would be equal to a
2-by-2 identity matrix, so it would look like that. And I sub 3 would look like
this: 1 0 0, 0 1 0, 0 0 1. I think you get the point. Now, the neat thing about this
identity matrix becomes evident when you multiply
it times any vector. We can multiply this guy times
the n-component vector, a member of Rn. So let's do that. So if we multiply this
matrix times-- let's call this vector x. This is x1, x2, all the way down
to xn, what is this going to be equal to? So this is vector
x right here. So if I multiply matrix I, my
identity matrix, I sub n, and I multiply it times my vector x,
where x is a member of Rn, has n components, what
am I going to get? Well, I'm going to get 1 times
x1 plus 0 times x2 plus 0 times x3 plus 0 times
x4, all of that. So essentially, I'm going to
have-- you can kind of view it as this row dotted
with the vector. So the only nonzero term
is going to be the 1 times the x1. So it's going to be x1-- sorry,
let me do it like this. So you're going to get another
vector in Rn like that. And so the first term is that
row essentially being dotted with that column, and
so you just get x1. And then the next entry is going
to be this row, or you could view it as the transpose
of this row dotted with that column, so 0 times x1 plus
1 times x2 plus 0 times everything else. So the only nonzero term
is the 1 times x2, so you get an x2 there. And then you keep doing thatt,
and what are you going to get? You're going to get an x3
because the only nonzero term here is the third one and you're
going to go all the way down until you get an xn. But what is this
thing equal to? This is just equal to x. So the neat thing about this
identity matrix that we've created is that when you
multiply it times any vector, you got the vector again. The identity matrix times any
vector in Rn-- it's only defined for vectors in Rn-- is
equal to that vector again. And actually, the columns of
the identity matrix have a special-- I guess the set of
columns has a special name. So if we call this first column
e1 and this second column e2 and the third column
e3 and we go all the way to en, these vectors, these column
vectors here, the set of these-- so let's say e1, e2,
all the way to en-- this is called the standard
basis for Rn. So why is it called that? Well, the word basis is there,
so two things must be true. These things must span Rn and
they must be linearly independent. It's pretty obvious from
inspection they're linearly independent. If this guy has a 1 here and
no one else has a 1 there, there's no way you can construct
that 1 with some combination of the
rest of the guys. And you can make that same
argument for each of the ones in each of the components. So it's clearly linearly
independent. And then to see that you can
span, that you can construct any vector with a linear
combination of these guys, you just really have to-- you know,
whatever vector you want to construct, if you want
to construct x1-- let me put it this way. If you want to construct
this vector-- let me write it this way. Let me pick a different one. Let's say you want to construct
the vector a1, a2, a3 all the way down to an. So this is some member
of Rn, you want to construct this vector. Well, the linear combination
that would get you this is literally a1 times e1 plus a2
times e2 plus all the way to an times en. This scalar times this first
column vector will essentially just get you-- what will
this look like? This will look like
a1 and then you'd have a bunch of zeroes. You'd have n minus 1 zeroes plus
0 and you'd have an a2 and then you'd have
a bunch of zeroes. And then you'd keep doing that,
and then you would have a bunch of zeroes, and then
you would have an an. Obviously, by our definition
of vector addition, you add all these things up, you get
this guy right here. And it's kind of obvious,
because this right here is the same thing as our identity
matrix times a1. I just wanted to expose
you to that idea. Now, let's apply what we already
know about linear transformations to what we've
just learned about this identity matrix. I just told you that
I can represent any vector like this. Let me rewrite it in
maybe terms of x. I can write any vector x as a
linear combination of the standard basis, which are really
just the columns of the identity matrix. I can write that as x1 times e1
plus x2 times e2, all the way to xn times en. And remember, each of these
column vectors right here, like for e1, is just 1 in the
first entry and then all the rest are zeroes. e2 is a 1
in the second entry and everything else is 0. e5 is a 1 in the fifth entry
and everything else is 0. And this I just showed you, and
this is a bit obvious from this right here. Now, we know that by definition,
a linear transformation of x-- let
me put it this way. A linear transformation of x,
of our vector x, is the same thing as taking the linear
transformation of this whole thing-- let me do it in another
color-- is equal to the linear transformation of--
actually, instead of using L, let me use T. I used L by accident because
I was thinking linear. But if I were take the linear
transformation of x, because that's the notation we're used
to, that's the same thing as taking a linear transformation
of this thing. They're equivalent. So x1 times e1 plus x2 times
e2, all the way to plus xn times en. It's equivalent statements. Now, from the definition of
linear transformations, we know that this is the same
thing, that the transformation of the sum is equal to the sum
of the transformation. So this is equal to the
transformation of x1 e1 plus the transformation of x2 e2
where this is just any linear transformation. Let me make that very clear. This is any linear
transformation. By definition, linear
transformations have to satisfy these properties. So the transformation times
x2 e2, all the way to this transformation times this last
entry, the scalar xn times my standard basis vector en. And we know from the other
property of linear transformations that the
transformation of a vector multiplied by the scalar is the
same thing as the scalar multiplied by the transformation
of the vector. That's just from our definition
of linear transformations. Plus x2 two times the
transformation of e2 plus all the way to xn times the
transformation of en. Now, what is this? I could rewrite this, so
everything I've done so far, so the transformation of x is
equal to that, which just using our properties of linear
transformations, all linear transformations, this has
to be true for them. I get to this and this
is equivalent. This is equal to-- if we view
each of these as a column vector, this is equal to what? This is equal to the matrix
where this is the first column, T e1. And then the second
column is T e2. And then we go all the way to
T en times-- let me put it this way-- x1, x2, all
the way to xn. We've seen this multiple,
multiple times. Now what's really, really,
really neat about this is I just started with an arbitrary
transformation. And I just showed that
an arbitrary linear transformation of x can be
rewritten as a product of a matrix where I'm taking that
same linear transformation of each of our standard basis
vectors, and I can construct that matrix, and multiplying
that matrix times my x vector is the same thing as this
transformation. So this is essentially showing
you that all transformations-- let me be careful. All linear transformations can
be a matrix vector product. Not only did I show you that
you can do it, but it's actually a fairly
straightforward thing to do. This is actually a pretty
simple operation to do. Let me show you an example. I don't know, I think
this is super neat. Let's say that I just-- I'm
just going to make up some transformation. Let's say I have a
transformation and it's a mapping between-- let's make
it extra interesting-- between R2 and R3. And let's say my transformation,
let's say that T of x1 x2 is equal to-- let's
say the first entry is x1 plus 3x2, the second entry is 5x2
minus x1, and let's say the third entry is 4x1 plus x2. This is a mapping. I could have written
it like this. I could write T of any vector
in R2, x1, x2, is equal to-- and maybe this is just
redundant, but I think you get the idea. I like this notation better. x1
plus 3x2, 5x2 minus x1, and then 4x1 plus x2. This statement and this
statement I just wrote are equivalent. And I like to visualize this
a little bit more. Now, I just told you that
I can represent this transformation as a matrix
vector product. How do I do it? Well, what I do is I take the
transformation of this guy. My domain right here is R2, and
I produce a vector that's going to be in Rn. So what I do is, let's see. So I'm concerned with
multiplying things times vectors in R2. So what we're going to do is
we're going to start with the identity matrix, identity 2
because that's my domain and it just looks like
this: 1, 0, 0, 1. I'm just going to
start with that. And all I do is I apply my
transformation to each of the columns, each of my
standard bases. These are the standard
bases for R2. I showed you that they're bases,
how do I know that they're standard? Why are they called the
standard bases? And I haven't covered this in a
lot of detail right yet, but you could take the dot product
of any of these guys with any of the other guys, and you'll
see that they're all orthogonal to each other. The dot product of any one of
these columns with the other is always zero, so that's
a nice clue. And they all have length of 1,
so that's a nice reason why they're called the
standard bases. But anyway, back to our attempt
to represent this transformation as a matrix
vector product. So we say look, our domain is in
R2, so let's start with I2, or we could call it our 2-by-2
identity matrix. And let's apply the
transformation to each of its column vectors where each of
its column vectors are a vector in the standard
basis for R2. So I'm going to write
it like this. The first column is T of this
column, and then the second column is going to
be T of 0, 1. And I know I'm getting messier
with my handwriting. What is T of the vector 1, 0? Well, we just go here. We construct another vector. So we get 1 plus
3 times 0 is 1. Then we get 5 times 0 minus
1, so that's minus 1. x2 is zero in this case. And then we get 4 times 1 plus
0, so that's just 4. So that's T of 1, 0. And then what is T of 0, 1? T of 0, 1 is equal to-- so we
have 0 plus 3 times 1 is 3. Then we have 0 minus
1 is minus 1. Let me make sure I did
this one right. What was this? This was 5 times 1 minus 1. Yeah, 5 times 0 minus
x1, which is 1. Now, this case, it's 5 times--
oh, I have to be careful. This is 5 times x2. x2 is 1. So 5 times 1 minus
0, so it's 5. And then I have 4 times
0 plus x2, plus 1. And I just showed you if I
replace each of these standard basis vectors with the
transformation of them, what do I get? I get this vector right here. So I already figured
out what they are. If I take this guy and evaluate
it, it's the vector 1, minus 1, 4. And then this guy is the
vector 3, 5, and 1. So what we just did and this
is-- I don't know. For some reason, I find this
to be pretty amazing. We can now rewrite this
transformation here as the product of any vector. So if we define this to be equal
to a, or we could write it this way. We can now write our
transformation. Our transformation of x1, x2
can now be rewritten as the product of this vector. I'll write it in green. The vector 1, 3, minus 1, 5, 4,
1 times our input vector, x1, x2, which is super cool
because now we just have to do a matrix multiplication. Instead of this, and if we have
some processor that does this super fast, we
can then use that. I don't know, I think this is
especially elegant, because what happens here is we applied
the transformations to each of the columns of a 2-by-2
matrix, and we got a 3-by-2 matrix. And we know what happens when
you multiply a 3-by-2 matrix times a vector that's in R2. Or you can almost view this
as a 2-by-1 matrix. You're going to get a vector
that is in R3. Because you're going to have
these guys times that guy's going to be the first term. These guys times these
guys are going to be the second term. These guys times those
guys are going to be the third term. So by kind of creating this
3-by-2 matrix, we have actually created a mapping
from R2 to R3. Anyway, for some reason I find
this to be especially neat. Hopefully, at least you find
this somewhat instructive.",Linear transformations as matrix vector products | Linear Algebra | Khan Academy,"Showing how ANY linear transformation can be represented as a matrix vector product

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/image-of-a-subset-under-a-transformation?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/matrix-vector-products-as-linear-transformations?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,PErhLkQcpZ8
Exactequationsexample1_Firstorderdifferentialequations_KhanAcademy-Pb04ntcDJcQ.en.csv,"OK, I filled your brain with a
bunch of partial derivatives and psi's, with respect
to x's and y's. I think now it's time to
actually do it with a real differential equation,
and make things a little bit more concrete. So let's say I have the
differential, y, the differential equation, y cosine
of x, plus 2xe to the y, plus sine of x, plus-- I'm
already running out of space-- x squared, e to the y,
minus 1, times y prime, is equal to 0. Well, your brain is already,
hopefully, in exact differential equations mode. But if you were to see this
pattern in general, where you see a function of x and y,
here-- this is just some function of x and y-- and then
you have another function of x and y, times y prime, or times
dy, d of x, your brain should immediately say if this
is inseparable. And I'm not going to try to
make it separable, just because that'll take
a lot of time. But if it's not separable, your
brain said, oh, maybe this is an exact equation. And, you say, let
me test whether this is an exact equation. So if this is an exact equation,
this is our function M, which is a function
of x and y. And this is our function
N, which is a function of x and y. Now, the test is to see if the
partial of this, with respect to y, is equal to the partial
of this, with respect to x. So let's see. The partial of M, with respect
to y, is equal to-- let's see, y is-- so this cosine of x is
just a constant, so it's just cosine of x. Cosine of x plus-- now,
what's the derivative? Well, 2x is just a constant,
what's the derivative of e to the y, with respect to y? Well, it's just e
to the y, right? So we have the constant on
the outside, 2x times the derivative, with respect to
y, so it's 2xe to the y. Fair enough. Now, what is the partial
derivative of this, with respect to x? So N sub x, or the partial of
N, with respect to x-- so what's the derivative of sine
of x, with respect to x? Well, that's easy, that's cosine
of x, plus 2x times e to the y, right? e and y is just
a constant, because y is constant when we're taking the
partial, with respect to x. So plus 2xe to the y. And then minus 1, the derivative
of a constant, with respect to anything
is going to be 0. So the derivative of N-- the
partial of N, with respect to x, is cosine of x, plus 2xe to
the y, which, lo and behold, is the same thing as the
derivative, the partial of M, with respect to y. So there we have it. We've shown that M of y is equal
to-- or the partial of M, with respect to y-- is equal
to the partial of N, with respect to x, which
tells us that this is an exact equation. Now, given that this is an exact
equation-- oh, my wife snuck up behind me,
I was wondering. I thought there was
some critter in my house, or something. Anyway, so we know that this is
an exact equation, so what does that tell us? Well, that tells us that there's
some psi, where the partial derivative of psi, with
respect to x, is equal to M, and the partial derivative of
psi, with respect to y, is equal to N. And if we know that psi,
then we can rewrite our differential equation as the
derivative of psi, with respect to x, is equal to 0. So let's solve for psi. So we know that the partial of
psi, with respect to x, is equal to M. So we could write that. We could write the partial of
psi, with respect to x, is equal to M, which is y cosine
of x, plus 2xe to the y. That's just here. That's my M of x. We could have done
it the other way. We could have said the partial
of y-- the partial of psi, with respect to y, is this
thing over here. But let's just do it with x. Now, to at least get kind of a
first approximation of what size-- not an approximation, but
to start to get a sense of it-- let's take the derivative
of both sides, with respect to-- sorry, take the
antiderivative-- take the integral of both sides,
with respect to x. So if you take the derivative of
this, with respect to x, if you integrate-- sorry, if
you were to take the antiderivative of this,
with respect to x. So let me just write
that down. The partial, with
respect to x. We're going to [? integrate ?] it, with respect to x. That is going to be equal to
the integral of this whole thing, with respect to x. Cosine of x plus 2xe to the y. We're integrating with
respect to x. And normally when you integrate
with respect to x, you'd say, OK, plus c, right? But it actually could be a
plus-- since this is a partial, with respect to x, we
could have had some function of y here in general, because
y, we treat it as a constant, right? And that makes sense, because
if you were to take the partial of both sides of this,
with respect to x, if you were to take the partial of a
function that is only a function of y, with respect
to x, you would have gotten a 0 here. So when you take the
antiderivative, you were, like, oh well, there might have
been some function of y here that we lost when
we took the partial, with respect to x. So anyway, this will
simplify to psi. psi is going to be equal to the
integral, with respect to x, or the antiderivative, with
respect to x, here, plus some function of y that we might
have lost when we took the partial, with respect to x. So let's do that. Let's figure out
this integral. I'll do it in blue So y
is just a constant. So the antiderivative of y
cosine of x, is just y sine of x, plus-- either the y
is constant, so 2x. The antiderivative of 2x, with
respect to x, is x squared, so it's x squared e to the y. And then plus some
function of y. And if you want to verify this,
you should take the partial of this, with
respect to x. If you take the partial of
this, with respect to x, you're going to get this in
here, which is our function, M, up here. And then when you take the
partial of this, with respect to x, you'll get 0, and
it'll get lost. OK, so we're almost there. We've almost figured out our
psi, but we still need to figure out this function of y. Well, we know that if we take
the partial of this, with respect to y, since this
is an exact equation, we should get this. We should get our N function. So let's do that. So the partial-- I'll switch
notation, just to expose you to it-- the partial psi, with
respect to y, is going to be equal to-- so here, y sine
of x, sine of x is just a constant. y is just y, so the
derivative of this, with respect to y, is
just sine of x. Plus the derivative of e to the
y is e to the y. x squared is just a constant. So it's just x squared e to
the y, plus-- what's the partial of f of y, with
respect to y? It's going to be f prime of y. Well, what did we do? We took M, we integrated with
respect to x, and we said, well, we might have lost some
function of y, so we added that to it. And then we took the partial of
that side that we've almost constructed, and we took
the partial of that, with respect to y. Now, we know, since this is
exact, that that is going to equal our N. So our N is up there. Cosine of x plus-- So that's
going to be equal to-- I want to make sure I can read it up
there-- to our N, right? Oh no, sorry. N is up here. Our N is up here. Sine of x-- let me write
that-- sine of x plus x squared, e to the y, minus 1. So sine of x plus x squared,
e to the y, minus 1. That was just our N,
from our original differential equation. And now we can solve
for f prime of y. So let's see, we get sine of x
plus x squared, e to the y, plus f prime of y, is equal to
sine of x plus x squared, e to the y, minus 1. So let's see, we can delete
sine of x from both sides. We can delete x squared e to
the y from both sides. And then what are
we left with? We're left with f prime
of y is equal to 1. And then we're left with f of
y is equal to-- well, it equals y plus some constant,
c, right? So what is our psi now? We wrote our psi up here, and we
had this f of y here, so we can rewrite it now. So psi is a function of x and
y-- we're actually pretty much almost done solving it-- psi
is a function of x and y is equal to y sine of x, plus x
squared, e to the y, plus y-- oh, sorry, this is f prime
of y, minus 1. So this is a minus 1. So this is a minus y plus c. So this is going to be
a minus y plus c. So we've solved for psi. And so what does that tell us? Well, we said that original
differential equation, up here, using the partial
derivative chain rule, that original differential equation,
can be rewritten now as the derivative dx of psi is
equal to-- psi is a function of x and y-- is equal to 0. Or if you were to integrate both
sides of this, you would get that psi of xy is equal
to c is a solution of that differential equation. So if we were to set this is
equal to c, that's the differential equation. So we could say, y sine of x
plus x squared, e to the y, minus y-- now we could say, plus
this c-- plus this c, you call it c1, is equal to c2. Well, you could subtract the c's
from both sides, and just be left with a c at the end. But anyway, we have solved
this exact equation, one, first, by recognizing it was
exact, by taking the partial of this, with respect to y, and
seeing if that was equal to the partial of N,
with respect to x. Once we saw that they were
equal, we're like, OK, this is going to be exact. So let's figure out psi. Since this is exact, M is going
to be the partial of psi, with respect to x. N is the partial of psi,
with respect to y. Then to figure out y, we
integrated M, with respect to x, and we got this. But since we said, oh, well,
instead of a plus c, it could have been a function of y there,
because we took the partial, with respect to x, so
this might have been lost. To figure out the function of y,
we then took our psi that we figured out, took the partial
of that, with respect to y, got this. And we said, this was an exact
equation, so this is going to equal our N of x y. We set those equal to each
other, and then we solved for f of y. And then we had our final psi. Our final psi was this. And then the differential
equation, because of the chain rule of partial derivatives,
we could rewrite the differential equation as this. The solution is this, and so
this is the solution to our differential equation. See you in the next video.",Exact equations example 1 | First order differential equations | Khan Academy,"First example of solving an exact differential equation.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/exact-equations-example-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/exact-equations-intuition-2-proofy?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,Pb04ntcDJcQ
Vectortriangleinequality_Vectorsandspaces_LinearAlgebra_KhanAcademy-PsNidCBr5II.en.csv,"In the last video, we showed
you the Cauchy-Schwarz Inequality. I think it's worth rewriting
because this is something that's going to show up a lot. It's a very useful tool. And that just told us if I have
two vectors, x and y, they're both members of Rn. And they're both nonzero
vectors. And that was an assumption we
had to make when we did the proof, otherwise there was a
potential of dividing by one of their magnitudes. So that would've been
a big no-no. But if we assume that they're
both nonzero, then we can say that the absolute value of their
dot products is going to be less than or equal
to the products of their individual lengths. So that's the length of vector x
and we defined that a couple of videos ago. And then this is the
length of vector y. And of course, this is just a
regular number and then each of these are just
regular numbers. They're not vectors once
you take a length. The length of a 50 dimensional
vector could just be the number 3. It's just a scalar value. So this is just scalar
multiplication here. And we also learned that the
only time that this inequality turns into an equality is the
situation where x is equal to some scalar multiple of y. And so in some textbooks you'll
say-- and this has to be a nonzero scalar multiple. But that's a bit obvious. I told you that x and
y are nonzero. So if this was 0 then
x would be 0. And we already said
that x is not 0. But if you want to say there you
could say that you know c also is going to be nonzero. But that essentially
just falls out of this information there. But if this is the case and if
and only if this is the case, then we can say that the
absolute value of the dot product of the two vectors
is equal to the product of their lengths. Now, this is all just
a review of what I did in the last video. Now what else can we do
that's useful with it? So let's just play around
a little bit. I can't claim to be
experimenting, I know where this is going to go. Let's see what happens
if I were to take the length of x plus y. So I'm going to add the two
vectors and then take the length of that vector squared. Well we know from a couple of
videos ago that the length squared can also be rewritten as
the dot product of a vector with itself. This right here, x
plus y, I know it looks like two vectors. But it's two vectors added
to each other. So it's really a vector. x
plus y is a real vector. I could graph x plus y. So the length of x plus y
squared, I can rewrite it as the dot product of that
vector with itself. So x plus y dot x plus y. And all of these are vectors. These aren't just numbers. And this is the dot product. It's just not normal
multiplication. But we saw two videos ago that
the dot product has the distributive and the
associative and the commutative properties just
like regular scalar multiplication. So you can kind of FOIL this out
if that's how you remember multiplying your binomials. Or I will think of it more as
just doing the distributive property twice. So this can be rewritten
as x dot x. Actually, let me write it as
the distributive property because that's sometimes not
obvious to a lot of people. So let me write this x as a
yellow x and let me write this whole term as x plus y. So this right here can be
rewritten as x dot-- so this x dot this x plus y. And then it would be plus
this y dot-- I want to just switch colors. Plus this y dot x plus y. It's good to see that when
you're multiplying these, you're just applying the
distributive property. All I did is I distributed this
term along each of these terms into sum right here. So then I got this. And then I can distribute each
of these into the sum. So then this becomes-- I'll be
careful with the colors-- x dot x plus x dot y. Maybe this was a little bit
overkill, but I think it's good to see that this isn't
just some magic here. And we're just using the exact
properties that we proved with the dot product. So that's that right there. And then it's plus y dot x. Plus this yellow y
dot the yellow x. Sorry, dot the blue y. So the magnitude or the length
of our vector x plus y squared can be rewritten like this. And I'll just switch
back to one color. So this equals that and all of
that-- what does this equal? This is equal to x dot x. What's x dot x? x dot x is just the magnitude. So let me write this is just
equal to the magnitude of our vector x. I should stop using the
word magnitude. The length of our vector
x squared. And then I have two
terms here. I have an x dot y
and a y dot x. We know that x dot y and y dot
x are really the same thing. We showed that order doesn't
matter when you take the dot product, just like it doesn't
matter with regular multiplication. So these are really the same
terms. So we could write plus 2 times x dot y. And then finally, we have that
last term sitting here. We have this y dot y. y dot y is the same thing
as the length of our vector y squared. Now, let's see if we can break
out our Cauchy-Schwarz Inequality. Or maybe Schwarz, I don't know
if I'm pronouncing it right. But x dot y. t We have the absolute value
of x dot y here. But we know that just x dot y is
going to be-- it has to be less than or equal to the
absolute value of x dot y. Why is that? Well this could be negative. I could show you
examples of dot products that are negative. In fact, if x has all positive
terms and y has all negative terms, you're going to have
a negative dot product. So this could be negative
or it could be positive. If it's positive the absolute
value-- their equal to each other. If this is negative, than this
absolute value is definitely going to be greater than it. We can add to the Cauchy-Schwarz
Inequality and this is a bit obvious. We could say look, we could add
a little x dot y is less than or equal to the absolute
value of x dot y. Which is less than or equal to
the length of x times the length of y. So x dot y is definite-- this,
the dot product of x with y is definitely less than it's
absolute value of that. Which is definitely less than
the lengths of those two multiplied. So if I rewrite this, this
statement right here is definitely less than or equal
to this exact statement. But if I replace these with the
lengths of the vectors. So that is definitely less than
or equal to-- I'm just rewriting this x squared and
I'll write the plus 2 there. Plus 2. But I want to make it very clear
what I'm replacing here. And then I have the
plus length of my vector y there squared. Now this I'm saying, this is
definitely less than the absolute value of x dot y. Which is definitely less, by the
Cauchy-Schwarz Inequality, definitely less than the product
of the two lengths. So I'm just replacing this
with the product of their two lengths. So I'm going to put the length
of x times the length of y. And since this is the
same as that, this is the same as that. But this is definitely
less than this. This whole term has to be less
than this whole term. Now let me just remind you
what we were doing. I said that this thing that I
wrote over here, this is the same as that. So this thing up here, which is
the same as that, which is less than that also. So we can write that the
magnitude of x plus y squared and not the magnitude, the
length of the vector x plus y squared is less than
this whole thing that I wrote out here. Or less than or equal to. Now, what is this thing? Remember, I mean this might look
all fancy with my little double lines around
everything. But these are just numbers. This length of x squared,
this is just a number. Each of these are numbers and I
can just say hey, look, this looks like a perfect
square to me. This term on the right-hand side
is the exact same thing as the length of x plus
the length of y. Everything squared. If you just squared this out
you'll get x squared plus 2 times the length of x times the length of y plus y squared. So our length of the vector x
plus y squared is less than or equal to this quantity
over here. And if we just take the square
root of both sides of this, you get the length of our vector
x plus y is less than or equal to the length of the
vector x by itself plus the length of the vector y. And we call this the triangle
inequality, which you might have remembered from geometry. Now why is it called the
triangle inequality? Well you could imagine
each of these to be separate side of a triangle. In fact, let's draw it. We can draw this in R2. Let me turn my graph paper on. Let me see where the
graphs show up. If I turn my graph paper
on right there, maybe I'll draw it here. So let's draw my vector x. So let's say that my vector x
look something like this. Let's say that's my vector x. It's a vector 2, 4. So that's my vector x. And let's say my vector y-- well
I'm just going to do it head to tail because I'm
going to add the two. So my vector y-- I'm going to do
it in nonstandard position. Let's say it's look something
like-- let's say my vector y looks something like this. Draw it properly. That's my vector y. What does x plus y look like? And remember, I can't
necessarily draw any two vectors on a two-dimensional
space like this. I'm just assuming that
these are in R2. But this is just to
give you the idea. So then this is their
sum, right? You took from the tail of
x to the head of y. So this vector right here
is the vector x plus y. And that's why it's called
the triangle inequality. It's just saying that look, this
thing is always going to be less than or equal to-- or
the length of this thing is always going to be less than or
equal to the length of this thing plus the length
of this thing. And that's kind of obvious
when you just learn two-dimensional geometry. That look, this is a much more
efficient way of getting from this point to this point
than going out here and then going out here. And then, what's the case in
which this length is equal to these lengths? Well if you keep flattening this
triangle out and you go to the extreme case where
maybe the vector x looks like this. And if the vector y is just
kind of going in the exact same-- vector y is going in
the exact same direction, maybe it's going a little
bit further. This is vector x, this
is vector y. Now x plus y will just
be this whole vector. Now that whole thing
is x plus y. And this is the case now where
you actually-- where the triangle inequality turns
into an equality. That's why that little
equal sign is there. The extreme case where essentially, x and y are collinear. And why does that work out? We can even go back to our
math and understand that. So let me turn my graph off. We can go back to
our math here. If I go back to this point,
remember, right here I made the statement, look, this thing
is definitely less than this thing over here. But what if I made
an assumption? What if I said that x is equal
to some scalar times y? And actually, I have to be
careful because just some scalar times y-- remember, our
Cauchy-Schwarz Inequality said that look, the inequality turns
into an equality if x is some nonzero scalar of y. And then we can apply this. We can say that the absolute
value of x dot y is the same as this over here. But I don't have the absolute
value of x dot y here. I don't know that this
is positive. I can say definitively that this
is a positive quantity because I took the absolute
value of it. No absolute value here. So the only way that I can
assure that this is a positive quantity, that this is the same
thing as the absolute value of x dot y is to enforce--
if I'm kind of going to go down this road, is to
enforce that this term right here, that c be positive. Because if c is positive, then
x dot y, if x dot y then that would be the same thing
as cy dot y. Which we know is just the same
thing as c times the magnitude of y squared. And the only way that I can
ensure that this expression right here is equal to the
absolute value of x dot y, the only way I can assure this
is that c is positive. If c is negative, then this is
going to be a negative number while this is a positive. So if I assume that this is
positive, then I can say that x dot y is equal to the absolute
value of x dot y. And since it's a scalar
multiple, then I could say that that term is equal to, not
just less than or equal to, the magnitude
of x's and y's. So hopefully I'm not
confusing you. So all I'm saying is, if I can
assume that x is some positive scalar multiple of y,
that this wouldn't be a less than sign. Then I could say that x dot
y is the same thing as the absolute value of x dot y
since this is positive. And if it's the same thing as
the absolute value of x dot y and it's some scalar multiple
of each other, than we could go down this other route. We could say that this
thing here-- I don't want to get too messy. We could say that this
is equal to that. If this is equal to that, then
this would have become an equal sign, not a less than
or equal to sign. And then we would have had the
limiting case-- I don't want to call it the limiting case. But we could say that x plus y--
we would've done the same work, but we would've had an
equal sign the whole way. Would equal the length of x. The length of x plus y would
equal the length of x plus the length of y in the situation
where x is equal to some positive scalar times y. So c is greater than 0. These two imply each other. And we saw that geometrically. I lost my axes here, but we see
that the only time that the length of x plus y is equal
to the length of x plus the length of y is when
they're collinear. Over here this plus this is
clearly-- you can just visually look at it-- longer
than this right there. So you might be saying Sal,
once again, this linear algebra's a little bit silly. We learned the triangle
inequality in eighth or ninth grade. Why did you go through all of
this pain to redefine it? And this is the interesting
thing. What I just drew here and this
is what you learned in ninth grade geometry. This is just in R2. This is just your Cartesian
coordinates, or I don't want to use the word dimension too
much because we're going to define that formally. But this is kind of your
two-dimensional space that's going on. What's interesting or what's
useful about linear algebra is, we've just defined the
triangle inequality for arbitrarily large vectors,
or vectors that have an arbitrarily high number
of components. Each of these, these don't
have to be in R2. This is true if we're in R100
where every vector has a hundred components to it. We've just defined some notion
of the triangle inequality. We've abstracted well beyond
just our two-dimensional Cartesian coordinates. Well beyond even our three
dimensions to essentially, n dimensional space. And I haven't defined dimensions
yet, but I think you're starting to appreciate
what they are. But anyway, hopefully you
found that useful. We can now take this result. And actually, that result with
this result and define what the notion of an angle between
two vectors are. Once again, you know, on some
levels you're like well, why do we have to define an angle? Isn't an angle just-- isn't
that just an angle? Well yeah, we know what an angle
is in two dimensions, but what does an angle mean when
you abstract things to n dimensions? Or when you're in Rn. So that's what we'll talk
about in the next video.",Vector triangle inequality | Vectors and spaces | Linear Algebra | Khan Academy,"Proving the triangle inequality for vectors in Rn

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/defining-the-angle-between-vectors?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/proof-of-the-cauchy-schwarz-inequality?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,PsNidCBr5II
Relatinginvertibilitytobeingontoandone-to-one_LinearAlgebra_KhanAcademy-QIU1daMN8fw.en.csv,"A couple of videos ago, we
learned that a function that is a mapping from the set x to
the set y is invertible if and only if-- and I'll write that as
a if with two f's --if and only if for every y-- so
let me write this down. I'll do this in yellow. For every y that is a member of
our co-domain, there exists a unique-- and I'll make that a
little bit bold --a unique x that is a member of our domain,
such that f of this x is equal to this y. So that's just saying that if
I take my domain right here, that's x, and then I take a
co-domain here, that is y, we say that the function
f is invertible. And we know what invertibility
means. It means that there's this
other function called the inverse that can essentially,
if you take that in composition with f, it's like
taking the identity on x. Or if you take f in composition
with it, it's like taking the identity on y. And we've done that multiple
times so I won't repeat that there. We know what invertibility
means, but we learned that it's invertible, if and only if,
for every y here, so you take any y here, any y that's
a member of your co-domain, there exists a unique x,
such that f of x is equal to that y. Let me write it this way. If this is an x, let's say
that's an x not, f of x not would be equal to y. So this y would be equal
to f of x not. You apply the function here. It's going to map it
to this point here. It wouldn't be invertible
if you had this. If you had two members
of x mapping here. That would break invertibility
if you had this situation, because then you wouldn't have
the unique condition. You have to have a unique x
that maps to this thing. And what I just drew here, this
other pink mapping, we don't have a unique x that maps
to y, we have two x's that map to y. Now, based on what I just told
you on that last video, what does this mean? If we have a unique x
that maps to each y? That means that we have to have
a one-to-one mapping. That f has to be one-to-one. Let me write that. Another way of saying
this, is that f is one-to-one, or injective. If we have two guys mapping to
the same y, that would break down this condition. We wouldn't be one-to-one and
we couldn't say that there exists a unique x solution to
this equation right here. Now, the other part of this is
that for every y -- you could pick any y here and there
exists a unique x that maps to that. There cannot be some y here. Let's say that there's some y
here, and no one maps to that. If that's the case, then we
don't have our conditions for invertibility. So that would be
not invertible. Everything in y, every element
of y, has to be mapped to. All of these guys have
to be mapped to. And they can only be mapped to
by one of the elements of x. Everything here has to be mapped
to by a unique guy. Now, in the last video, what did
we call it went a function maps to every element
of your co-domain? So this every here, what is
another way of saying that? That a function maps to every
element of your co-domain? On the last video I explained
that notion is called a surjective or onto function. So the whole reason why I'm
doing this video is because I really just want to restate
this condition for invertibility using the
vocabulary that I introduced to you in the last video. So given that the statement for
every y that's a member of our co-domain, there exists
a x that maps to it. We could just say that
f is surjective. If we just say that f is
surjective, that means that everything here is mapped to. But it could be mapped to, maybe
this person right here, could be mapped to
by more than one. Surjective doesn't, by itself,
make the condition that there's a unique mapping
from a member of x to that element of y. So in order to get that, in
order to satisfy the unique condition of this condition for
invertibility, we have to say that f is also injective. And obviously, maybe the less
formal terms for either of these, you call this onto,
and you could call this one-to-one. So using the terminology that we
learned in the last video, we can restate this condition
for invertibility. We can say that a function that
is a mapping from the domain x to the co-domain y is
invertible, if and only if -- I'll write it out -- f is both
surjective and injective. Or we could have said, that f is
invertible, if and only if, f is onto and one-to-one. And these are really just fancy
ways of saying for every y in our co-domain, there's a
unique x that f maps to it. There isn't more than one and
every y does get mapped to.",Relating invertibility to being onto and one-to-one | Linear Algebra | Khan Academy,"Relating invertibility to being onto (surjective) and one-to-one (injective)

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/determining-whether-a-transformation-is-onto?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/surjective-onto-and-injective-one-to-one-functions?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,QIU1daMN8fw
Simpler4x4determinant_Matrixtransformations_LinearAlgebra_KhanAcademy-QV0jsTiobU4.en.csv,"I have this 4 by 4
matrix, A, here. And let's see if we can figure
out its determinant, the determinant of A. And before just doing it the way
we've done it in the past, where you go down one of the
rows or one of the columns-- and you notice, there's no 0's
here, so there's no easy row or easy column to take
the determinant by. We could have gone down this
row and do all the submatrices, but this becomes
pretty involved. You end up doing four 3 by 3
determinants, and then each of those are composed of three
2 by 2 determinants. It becomes a pretty
hairy process. Let's see if we can use some
of the realizations we've discovered in the last
two videos to simplify this process. Well, one of the realizations is
that row operations, or if you subtract-- let me write it
this way-- if you replace row j with, let's say, row j minus
some scale or multiple, times row i, it does not change
the determinant of A. We saw that, I think it
was two videos ago. So this is a pretty
big realization. We can do these type of row
operations and it won't change the determinant. The other realization we had
was that these upper triangular matrices, you can
figure out their determinant. So what does upper triangular
look like? Let me just review it. The upper triangular--
everything below the diagonal. So let's say the diagonal has--
let me just draw its terms like that. These are some non-zero terms.
Oh, they don't have to be. Then upper triangular,
everything below the diagonal is a 0, and everything above the
diagonal probably isn't a 0, but you never know. But they're non-zero terms, so
all the red stuff here is non-zero, all this stuff
in green is 0. And I didn't touch on it in that
video, but there is also such a thing as a lower
triangular, that you might have guessed how it looks. Everything above the main
diagonal is 0, so this is the main diagonal right here, all
the way down like that. All of these guys are going
to be non-zero. All of that's going to be
non-zero, and then the 0's are going to be above the
diagonal, like that. We saw in the last video that
the determinant of this guy is just equal to the product of the
diagonal entries, which is a very simple way of finding
a determinant. And you could use the same
argument we made in the last video to say that the same is
true of the lower triangular matrix, that its determinant
is also just the product of those entries. I won't prove it here, but you
can use the exact same argument you used in the video
that I just did on the upper triangular. So given this, that the
determinant of this is just the product of those guys, and
that I can perform row operations on this guy and not
change the determinant, maybe a simpler way to calculate this
determinant is to get this guy into an upper
triangular form, and then just multiply the entries
down the diagonal. So let's do that. So we want to find the
determinant of A. Let me rewrite A right here. It's 1, 2, 2, 1, 1, 1, 2, 4,
2, 2, 7, 5, 2, minus 1, 4, minus 6, 3. Now let's try to get this into
upper triangular form. So let's replace the second
row with the-- so I'm just going to keep the first
row the same. 1, 2, 2, 1. And let's replace the second row
with the second row minus the first row. The second row minus the first
row is going to be equal to 1 minus 1 is 0. So in this case the constant
is just 1. So 1 minus 1 is 0. 2 minus 2 is 0. 4 minus 2 is 2. 2 minus 1 is 1. Now let's replace the third row
with the third row minus 2 times the second row. So 2 minus 2 times 1 is 0. 7 minus 2 times 2 is 3. 5 minus 2 times 2 is 1. 2 minus 2 times 1 is 0. Let me get a good color here. I'll do pink. Let's replace the last row
with the last row, essentially, plus
the first row. You could say minus minus 1
times the first row is the same thing as the last row
plus the first row. So minus 1 plus 1 is 0. 4 plus 2 is 6. Minus 6 plus 2 is minus 4. And then 3 plus 1 is 4. So there we have it like that. And this guy has two 0's
here, so maybe I want to swap some rows. So let me swap some rows. So if we swap rows,
what happens? I'm going to swap the middle
two rows just for fun. Well, not just for fun. Because I want a pivot
entry right here. I shouldn't say a pivot entry. I want to do it in upper
triangular form. So I want a non-zero
entry here. This is a 0, so I'm going
to move this guy down. So I'm going to keep the
top row the same. 1, 2, 2, 1. I'm going to keep the
bottom row the same. 0, 0, 6, minus 4, 4. And I'm going to swap these
guys right here. So this is going to
be 0, 3, 1, 0. And then 0, 0, 2, 1. Now, can I just swap
entries like that? Well, I can, but you have to
remember that when you swap entries, your resulting
determinant is going to be the negative of your original
determinant. So if we swap these two guys,
the determinant of this is going to be the negative
of this determinant. When you swap two rows, you
just flip the sign of the determinant. We saw that. That was one of the first videos
we did on these, kind of messing with the
determinants. Now, what do we want
to do here? To get this guy into upper
triangular form, it'd be nice to get this to be a 0. So to get that to be
a 0, let me keep everything else the same. So I have a 1, 2, 2, 1. I have a 0, 3, 1, 0. The third row is 0, 0, 2, 1. And now this last row, let me
replace it with the last row minus 3 times this row. So let me write it like this. I have to carry that negative
sign as well. So I'm going to replace this
last row with the last row minus 2 times the second row. want to zero it out. So 0 minus 2 times 0 is 0. 6 minus 2 times 3 is 0. Minus 4 minus 2 times
1 is minus 6. And then 4 minus 2 times
0 is just 4. We're almost there. Now we want to zero this
guy out, so let's replace this one. So I'm going to keep my top
three rows the same again. And let me see if I can write
it a little bit neater. So my first row is 1, 2, 2, 1. My second row is 0, 3, 1, 0. Fourth row is 0, 0, 2, 1. And I'm going to take
the matrix. I haven't written the
fourth row yet. And, of course, the negative
of this is going to be determinant of our original
matrix, because we had swapped those rows. But let's replace this last row
with the last row, plus 3 times the third row. So we get 0 plus
3 times 0 is 0. 0 plus 3 times 0 is 0. Minus 6 plus 3 times 2 is 0. 4 plus 3 times 1 is 7. And just like that, we have a
determinant of a matrix in upper triangular form. So this is going to be equal to
the product of these guys. We can't forget our
negative sign. Let's throw our negative sign
out there and put a parentheses just like that. This is going to be
the product of that diagonal entry. 1 times 3, times 3, times 2,
times 7, which is 6 times 7, which is 42. So the determinant of this
matrix is minus 42, which was pretty fast. This was a
pretty fast shortcut. And it actually turns out it
tends to be computationally more efficient to use these
takeaways to put things into upper triangular form first. And
then, you know, if you do swaps, you have to remember to
make the determinant negative. And then just multiply
down the diagonal. And we did that there, and
we got the determinant as being minus 42.",Simpler 4x4 determinant | Matrix transformations | Linear Algebra | Khan Academy,"Calculating a 4x4 determinant by putting in in upper triangular form first.

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-determinant-and-area-of-a-parallelogram?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-upper-triangular-determinant?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,QV0jsTiobU4
Checkforbalancedparenthesesusingstack-QZOLb0xHB_Q.en.csv,"In our previous lesson, we saw one simple
application of stack we saw that stack can be used to reverse a list or collection or may be to
simply traverse a list or collection in reverse order. In
this lesson, we will discuss another  famous problem that can be solved using
stack. And this is also a popular programming
interview question and the problem is, given an expression
in the form of a string comprising of let's say
constants,variables, operators and parenthesis and when I
say parenthesis I also want to include curly braces and brackets and my
definition of parenthesis. so my expression or string can contain
characters that can be upper or lower case letters, symbols for
operators and an opening or closing parenthesis or an opening or closing curly brace
on an opening or closing square bracket. Let's write down some expressions
here. I'm going to write a simple expression. We have one simple
expression with one pair of opening and closing parenthesis. Here in this expression we have nested
parenthesis. Now given such expressions we want to
write a program that would tell us whether parenthesis
in the expression are balanced or not and what do we
really mean by balanced parenthesis what we mean by balanced parenthesis is that corresponding to each opening
parenthesis or opening curly brace or opening
bracket we should have a closing counter part in correct order. These two expressions here are
balanced. However this next expression is not balanced.A closing curly brace is
missing here This next expression is also not balanced
because we're missing an opening square bracket here. This
next one is also not balanced because corresponding to this opening curly
brace we do not have a closing curly brace and corresponding
to this closing parenthesis we do not have an
opening parenthesis. if we are opening with a curly brace,we should also close
with a curly brace.These 2 count for each other.Checking for
balanced parenthesis is one of the tasks performed by a compiler, when we
write a program we often miss an opening or closing curly brace
or an opening or closing parenthesis. Compiler must check for this balancing
and if symbols are not balanced it should give you an error.In this
problem here what's inside parenthesis does not
matter, we do not want to check for correctness
of anything that is inside a parenthesis so in the string any character 
other than opening and closing parenthesis or opening and closing
curly brace or opening and closing square bracket can be ignored. This problem sometimes is
better stated like this ""Given a string comprising only of
opening and closing characters of parenthesis braces or brackets we want to check for balancing"". So only
these characters and their order is important. While parsing a real expression we can
simply ignore other characters. All we care about is these characters
and their order. Okay so now how do we solve this problem?.
One straight forward thing that comes to mind is that because we should have a
closing counter part for an opening parenthesis or opening curly
brace or opening square bracket what we can
do is, we can count the number of opening and closing symbols for each of
these three types and they should be equal. So
the number of opening parenthesis should be equal to number of closing parenthesis. and the number of opening curly braces
should be equal to number of closings curly braces and same should be true
for square brackets as well but it will not be good enough this
expression here has one opening parenthesis and one
closing parenthesis but it's not balanced this next one is balanced but this one with same number
of characters of each type as the second expression is
not balanced so this approach won't work. Apart from
count being equal that are some other properties that must be conserved. Every opening parenthesis must find a
closing counterpart to its right and every closing parenthesis must find
an opening counterpart in its left which is not true in the
first expression. And the other property that must be
conserved is that a parenthesis can close only when all the parenthesis opened after it are closed. This parenthesis has
been opened after this square bracket so this square
bracket can not close unless this parenthesis is
closed. Anything that is opened last should be closed first. Well actually it
should not be last opened first closed in this
example here this is getting opened last but this guy I that is open previous to this is closed
first and it is fine. The property that must be
conserved is that as we scan the expression from left to
right any closer should be for the previous
unclosed parenthesis any closer should be for the last
unclosed. Let's scan some expressions from left to
right and see how it's true. Let's scan this last one we will go from
left to right first character an opening of the
square bracket second one is an opening parenthesis Lets mark opening of closed parenthesis
in red. Okay now we have a closer here ,
the third character is a closer. this should be the closer for last
unclosed. So this should be the closer for this
one, this guy, this opening parenthesis. last unclosed
now is this guy. Next character once again is an opening
parenthesis. Now we have two unclosed parenthesis at
this stage and this one is the last  unclosed, the next one's a closure.So it
should be closer for the last unclosed. Now the last unclosed once again is the
opening of square bracket now when we have a closer it should be
closer for this guy. we can use this approach to solve this
problem what we can do is we can scan the expression from left to right and as we scan at any stage we can
keep track of all the unclosed parenthesis basically
what we can do is whenever we get an opening symbol an opening
parenthesis an opening curly brace or an opening square bracket, we can add it to a list. If we get up closing symbol it should be the closer for the last
element in the list, in case of an inconsistency like if the last opening symbol in the list is
not of the same type as the closing symbol or if there is no last
opening symbol at all because the list is empty. We can stop this whole process and
say that parenthesis are not balanced else we can
removed the last opening symbol in the list because we have got its counterpart and
continue this whole process. Things will be further clear if I will
run through an example. I will run through this last example
once again. We are going to scan this expression
from left to right and we will maintain a list to keep
track of all the opening parenthesis that are not yet
closed. We will keep the track of all the unclosed
parenthesis opened but not closed. Initially this
list is empty, the first character that we have got is
an opening of square bracket. This will go into the list and we will
move to the next character the next character is an opening parenthesis
so one stick, once again it should go to the list.
We should always insert at the end in the list. the next character is a closing of
parenthesis now we must look at the last opening symbol in the list and if it is
of the same type then we have got it's counterpart and we
should remove this. Now we move on to the next character
this is once again an opening parenthesis, it should go in the list at the end. The next character is a closing of
parenthesis so we will look at the last element in the list, it's an
opening parenthesis, so we can remove it from the list and
now we go to the last character which is a closing of square bracket once again
we need to look at the last element in the list we have one element only one element in the list at
this stage, its an opening of square bracket so once
again we can remove it from the list. Now we're done scanning the list and
the list is empty once again if everything is alright if parenthesis
are balanced we will always end with an empty list and if list is not empty then some
opening parenthesis haven't found its closing counterpart and expression is not balanced. One thing
worth noticing here is that we are always inserting and removing one element at a time from the same end
of the list in this whole process whatever is coming
in last in the list is going out first, there is a special kind of list that enforces this behavior that element should
be inserted and removed from the same end and we call it a
stack. In a stack we can insert and remove an
element one at a time from the same end in constant time. so what we can do
is whenever we get an opening symbol while scanning the
list we can push it onto the stack and when we get a closing symbol we can
check whether the opening symbol at the top of stack
is of the same type has the closing symbol, if its of the
same type we can pop, if it's not of the same type we can
simply say that parenthesis are not balanced I will quickly write pseudocode for this
logic I'm going to write a function named
CheckBalancedParenthesis() that will take an expression in the form of a string as argument. first of all iI will store the number
of characters in the string in a variable and then I will create a stack and I will create
a stack of characters and now I will scan  the expression
from left to right using a loop, while scanning if the character is
an opening symbol if it's an opening parenthesis or opening
curly brace or opening square bracket we can push that character onto the
stack, let's say this function Push() will push up character onto S else if exp[i] or the
character at ith position while scanning is a
closing symbol of any of the three types. We can have two
scenarios if stack is empty, or top of stack does not pair with the
closing symbol if we have a closing of Parenthesis then
the top of stack should be an opening of Parenthesis. It cannot be an opening of curly brace,
in such a scenario we can conclude that the parenthesis are not balanced else we can perform a pop. Finally once a scanning is over we can check whether a stack is empty or
not if it's empty Parenthesis are balanced if it's not they are not balanced. so this is my pseudo code let's run
through a couple of examples and see whether this works for all scenarios
all test cases or not. Let's first look at this expression, the
first thing that we're doing in our code is that we're creating a stack
of characters, I have drawn logical representation of a
stack here. Okay now let's scan this string, let's say
we have a zero-based index and a string is just are character array, we
are starting the scan and going inside the loop. This is a closing of Parenthesis
so this if statement will not hold true so we will go to the else condition and now we will go inside
the else to check for this condition whether stack
is empty or not or whether the top of stack pairs with this closing symbol or not, the stack
is empty, if the stack is empty there is no opening
counterpart for this closing symbol. so we will simply return false, returning
means exiting the function so we are simply concluding here that Parenthesis
are not balanced and exiting. Let's go through this one now, first we
have an opening squad bracket so here we go
to the first if and push, next one is an opening parenthesis once again it will
be pushed next one is a closing square bracket, so the
condition for this else if will be true we will go inside this else if, now this time to top of stack is an opening parenthesis it should have been an opening square bracket and then
only we would have a pair so this time also we will have
to return false and exit. Okay now let's go through this
one. First we'll have a push, the next one will also be a push, now next one is a
closer of parenthesis which pairs with the top of stack which
is opening of parenthesis so we will have a pop, we will go to the
next character and this one once again is an opening parenthesis so there will
be a push. next one is a closing parenthesis and
the top is an opening parenthesis ,they pair so there will be a pop, last
character is a closing curly brace so once again
we will see whether the top of stack is an opening curly brace or not? do we
have a pair or not? yes we have a pair so there will be a
pop with this our scanning will finish and finally
stack should be empty it is empty so we have balanced Parenthesis
here try implementing this pseudo code in the
language of your choice and see whether it works for all test cases or not. If you want to look at my implementation
you can check the description of this video for a link. In the coming lessons we will
see some more problems on stack. This is it for this lesson, thanks for
watching!!",Check for balanced parentheses using stack,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

Algorithm or program to check for balanced parentheses in an expression using stack data structure. This is a popular programming interview question.

See source code here:
https://gist.github.com/mycodeschool/7207410

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,QZOLb0xHB_Q
Linearcombinationsandspan_Vectorsandspaces_LinearAlgebra_KhanAcademy-Qm_OS-8COwU.en.csv,"One term you are going to hear
a lot of in these videos, and in linear algebra in general,
is the idea of a linear combination. And all a linear combination of
vectors are, they're just a linear combination. Let me show you what
that means. So let's say I have a couple
of vectors, v1, v2, and it goes all the way to vn. And they're all in, you know,
it can be in R2 or Rn. Let's say that they're
all in Rn. They're in some dimension of
real space, I guess you could call it, but the idea
is fairly simple. A linear combination of these
vectors means you just add up the vectors. It's some combination of a sum
of the vectors, so v1 plus v2 plus all the way to vn,
but you scale them by arbitrary constants. So you scale them by c1, c2,
all the way to cn, where everything from c1
to cn are all a member of the real numbers. That's all a linear
combination is. Let me show you a concrete
example of linear combinations. Let me make the vector. Let me define the vector a to
be equal to-- and these are all bolded. These purple, these are all
bolded, just because those are vectors, but sometimes it's
kind of onerous to keep bolding things. So let's just say I define the
vector a to be equal to 1, 2. And I define the vector
b to be equal to 0, 3. What is the linear combination
of a and b? Well, it could be any constant
times a plus any constant times b. So it could be 0 times a plus--
well, it could be 0 times a plus 0 times b, which,
of course, would be what? That would be 0 times 0,
that would be 0, 0. That would be the 0 vector, but
this is a completely valid linear combination. And we can denote the
0 vector by just a big bold 0 like that. I could do 3 times a. I'm just picking these
numbers at random. 3 times a plus-- let me do a
negative number just for fun. So I'm going to do plus
minus 2 times b. What is that equal to? Let's figure it out. Let me write it out. It's 3 minus 2 times 0,
so minus 0, and it's 3 times 2 is 6. 6 minus 2 times 3, so minus 6,
so it's the vector 3, 0. This is a linear combination
of a and b. I can keep putting in a bunch
of random real numbers here and here, and I'll just get a
bunch of different linear combinations of my
vectors a and b. If I had a third vector here,
if I had vector c, and maybe that was just, you know, 7, 2,
then I could add that to the mix and I could throw in
plus 8 times vector c. These are all just linear
combinations. Now why do we just call
them combinations? Why do you have to add that
little linear prefix there? Because we're just
scaling them up. We're not multiplying the
vectors times each other. We haven't even defined what it
means to multiply a vector, and there's actually several
ways to do it. But, you know, we can't square
a vector, and we haven't even defined what this means yet, but
this would all of a sudden make it nonlinear
in some form. So all we're doing is we're
adding the vectors, and we're just scaling them up by some
scaling factor, so that's why it's called a linear
combination. Now you might say, hey Sal, why
are you even introducing this idea of a linear
combination? Because I want to introduce the
idea, and this is an idea that confounds most students
when it's first taught. I think it's just the very
nature that it's taught. Over here, I just kept putting
different numbers for the weights, I guess we could call
them, for c1 and c2 in this combination of a and b, right? Let's ignore c for
a little bit. I just put in a bunch of
different numbers there. But it begs the question: what
is the set of all of the vectors I could have created? And this is just one
member of that set. But what is the set of all of
the vectors I could've created by taking linear combinations
of a and b? So let me draw a and b here. Maybe we can think about it
visually, and then maybe we can think about it
mathematically. So let's say a and b. So a is 1, 2. So 1, 2 looks like that. That's vector a. Let me do vector b in
a different color. We're going to do
it in yellow. Vector b is 0, 3. So vector b looks
like that: 0, 3. So what's the set of all of
the vectors that I can represent by adding and
subtracting these vectors? And we said, if we multiply them
both by zero and add them to each other, we
end up there. If we take 3 times a, that's
the equivalent of scaling up a by 3. So you go 1a, 2a, 3a. So that's 3a, 3 times a
will look like that. So this vector is 3a, and then
we added to that 2b, right? Oh no, we subtracted 2b
from that, so minus b looks like this. Minus 2b looks like this. This is minus 2b, all the way,
in standard form, standard position, minus 2b. So if you add 3a to minus 2b,
we get to this vector. 3a to minus 2b, you get this
vector right here, and that's exactly what we did when we
solved it mathematically. You get the vector 3, 0. You get this vector
right here, 3, 0. But this is just one
combination, one linear combination of a and b. Instead of multiplying a times
3, I could have multiplied a times 1 and 1/2 and just
gotten right here. So 1 and 1/2 a minus 2b would
still look the same. It would look like something
like this. It would look something like--
let me make sure I'm doing this-- it would look something
like this. And so our new vector that
we would find would be something like this. So I just showed you, I can find
this vector with a linear combination. I can find this vector with
a linear combination. And actually, it turns out that
you can represent any vector in R2 with some linear
combination of these vectors right here, a and b. Now, let's just think of an
example, or maybe just try a mental visual example. Wherever we want to go, we
could go arbitrarily-- we could scale a up by some
arbitrary value. So this is some weight on a,
and then we can add up arbitrary multiples of b. B goes straight up and down,
so we can add up arbitrary multiples of b to that. So we could get any point on
this line right there. Now, if we scaled a up a little
bit more, and then added any multiple b, we'd get
anything on that line. If we multiplied a times a
negative number and then added a b in either direction, we'll
get anything on that line. We can keep doing that. And there's no reason why we
can't pick an arbitrary a that can fill in any of these gaps. If we want a point here, we just
take a little smaller a, and then we can add all
the b's that fill up all of that line. So we can fill up any
point in R2 with the combinations of a and b. So what we can write here is
that the span-- let me write this word down. The span of the vectors a and
b-- so let me write that down-- it equals R2 or it equals
all the vectors in R2, which is, you know, it's
all the tuples. R2 is all the tuples
made of two ordered tuples of two real numbers. So it equals all of R2. This just means that I can
represent any vector in R2 with some linear combination
of a and b. And you're like, hey, can't I do
that with any two vectors? Well, what if a and b were the
vector-- let's say the vector 2, 2 was a, so a is equal to 2,
2, and let's say that b is the vector minus 2, minus
2, so b is that vector. So b is the vector
minus 2, minus 2. Now, can I represent any
vector with these? Well, I can scale a up and down,
so I can scale a up and down to get anywhere on this
line, and then I can add b anywhere to it, and
b is essentially going in the same direction. It's just in the opposite
direction, but I can multiply it by a negative and go
anywhere on the line. So any combination of a and b
will just end up on this line right here, if I draw
it in standard form. It'll be a vector with the same
slope as either a or b, or same inclination, whatever
you want to call it. I could never-- there's no
combination of a and b that I could represent this vector,
that I could represent vector c. I just can't do it. I can add in standard form. I could just keep adding scale
up a, scale up b, put them heads to tails, I'll just get
the stuff on this line. I'll never get to this. So in this case, the span--
and I want to be clear. This is for this particular a
and b, not for the a and b-- for this blue a and this yellow
b, the span here is just this line. It's just this line. It's not all of R2. So this isn't just some kind of
statement when I first did it with that example. It's like, OK, can
any two vectors represent anything in R2? Well, no. I just showed you two vectors
that can't represent that. What is the span of
the 0 vector? I'll put a cap over it, the 0
vector, make it really bold. Well, the 0 vector is just 0,
0, so I don't care what multiple I put on it. The span of it is all of the
linear combinations of this, so essentially, I could put
arbitrary real numbers here, but I'm just going to end
up with a 0, 0 vector. So the span of the 0 vector
is just the 0 vector. The only vector I can get with
a linear combination of this, the 0 vector by itself, is
just the 0 vector itself. Likewise, if I take the span of
just, you know, let's say I go back to this example
right here. My a vector was right
like that. Let me draw it in
a better color. My a vector looked like that. If I were to ask just what the
span of a is, it's all the vectors you can get by
creating a linear combination of just a. So it's really just scaling. You can't even talk about
combinations, really. So it's just c times a,
all of those vectors. And we saw in the video where
I parametrized or showed a parametric representation of a
line, that this, the span of just this vector a, is the line
that's formed when you just scale a up and down. So span of a is just a line. You have to have two vectors,
and they can't be collinear, in order span all of R2. And I haven't proven that to you
yet, but we saw with this example, if you pick this a and
this b, you can represent all of R2 with just
these two vectors. Now, the two vectors that you're
most familiar with to that span R2 are, if you take
a little physics class, you have your i and j
unit vectors. And in our notation, i, the unit
vector i that you learned in physics class, would
be the vector 1, 0. So this is i, that's the vector
i, and then the vector j is the unit vector 0, 1. This is what you learned
in physics class. Let me do it in a
different color. This is j. j is that. And you learned that they're
orthogonal, and we're going to talk a lot more about what
orthogonality means, but in our traditional sense that we
learned in high school, it means that they're 90 degrees. But you can clearly represent
any angle, or any vector, in R2, by these two vectors. And the fact that they're
orthogonal makes them extra nice, and that's why these
form-- and I'm going to throw out a word here that I
haven't defined yet. These form the basis. These form a basis for R2. In fact, you can represent
anything in R2 by these two vectors. line. I'm not going to even define
what basis is. That's going to be
a future video. But let me just write the formal
math-y definition of span, just so you're
satisfied. So if I were to write the span
of a set of vectors, v1, v2, all the way to vn, that just
means the set of all of the vectors, where I have c1 times
v1 plus c2 times v2 all the way to cn-- let me scroll over--
all the way to cn vn. So this is a set of vectors
because I can pick my ci's to be any member of the real
numbers, and that's true for i-- so I should write for i to
be anywhere between 1 and n. All I'm saying is that look, I
can multiply each of these vectors by any value, any
arbitrary value, real value, and then I can add them up. And now the set of all of the
combinations, scaled-up combinations I can get, that's
the span of these vectors. You can kind of view it as the
space of all of the vectors that can be represented by a
combination of these vectors right there. And so the word span,
I think it does have an intuitive sense. I mean, if I say that, you know,
in my first example, I showed you those two vectors
span, or a and b spans R2. I wrote it right here. That tells me that any vector in
R2 can be represented by a linear combination of a and b. And actually, just in case
that visual kind of pseudo-proof doesn't do you
justice, let me prove it to you algebraically. I'm telling you that I can
take-- let's say I want to represent, you know, I have
some-- let me rewrite my a's and b's again. So this was my vector a. It was 1, 2, and b was 0, 3. Let me remember that. So my vector a is 1, 2, and
my vector b was 0, 3. Now my claim was that I can
represent any point. Let's say I want to represent
some arbitrary point x in R2, so its coordinates
are x1 and x2. I need to be able to prove to
you that I can get to any x1 and any x2 with some combination
of these guys. So let's say that my
combination, I say c1 times a plus c2 times b has to be
equal to my vector x. Let me show you that I can
always find a c1 or c2 given that you give me some x's. So let's just write this right
here with the actual vectors being represented in their
kind of column form. So we have c1 times this vector
plus c2 times the b vector 0, 3 should be able to
be equal to my x vector, should be able to be equal to my
x1 and x2, where these are just arbitrary. So let's see if I can
set that to be true. So if this is true, then the
following must be true. c1 times 1 plus 0 times c2
must be equal to x1. We just get that from our
definition of multiplying vectors times scalars
and adding vectors. And then we also know that
2 times c2-- sorry. c1 times 2 plus c2 times 3, 3c2,
should be equal to x2. Now, if I can show you that I
can always find c1's and c2's given any x1's and x2's, then
I've proven that I can get to any point in R2 using just
these two vectors. So let me see if
I can do that. So this is just a system
of two unknowns. This is just 0. We can ignore it. So let's multiply this equation
up here by minus 2 and put it here. So we get minus 2, c1--
I'm just multiplying this times minus 2. We get a 0 here, plus 0
is equal to minus 2x1. And then you add these two. You get 3c2, right? These cancel out. You get 3-- let me write it
in a different color. You get 3c2 is equal
to x2 minus 2x1. Or divide both sides by 3,
you get c2 is equal to 1/3 x2 minus x1. Now we'd have to go substitute
back in for c1. But we have this first equation
right here, that c1, this first equation that says
c1 plus 0 is equal to x1, so c1 is equal to x1. So that one just
gets us there. So c1 is equal to x1. So you give me any point in R2--
these are just two real numbers-- and I can just perform
this operation, and I'll tell you what weights to
apply to a and b to get to that point. If you say, OK, what combination
of a and b can get me to the point-- let's say I
want to get to the point-- let me go back up here. Oh, it's way up there. Let's say I'm looking to
get to the point 2, 2. So x1 is 2. Let me write it down here. Say I'm trying to get to the
point the vector 2, 2. What combinations of a
and b can be there? Well, I know that c1 is equal
to x1, so that's equal to 2, and c2 is equal to 1/3
times 2 minus 2. So 2 minus 2 is 0, so
c2 is equal to 0. So if I want to just get to
the point 2, 2, I just multiply-- oh, I
just realized. This was looking suspicious. I made a slight error here,
and this was good that I actually tried it out
with real numbers. Over here, when I had 3c2 is
equal to x2 minus 2x1, I got rid of this 2 over here. There's a 2 over here. I divide both sides by 3. I get 1/3 times x2 minus 2x1. And that's why I was like, wait,
this is looking strange. So I had to take a
moment of pause. So let's go to my corrected
definition of c2. C2 is equal to 1/3 times x2. So 2 minus 2 times x1,
so minus 2 times 2. So it's equal to 1/3 times 2
minus 4, which is equal to minus 2, so it's equal
to minus 2/3. So if I multiply 2 times my
vector a minus 2/3 times my vector b, I will get
to the vector 2, 2. And you can verify
it for yourself. 2 times my vector a 1, 2, minus
2/3 times my vector b 0, 3, should equal 2, 2.",Linear combinations and span | Vectors and spaces | Linear Algebra | Khan Academy,"Understanding linear combinations and spans of vectors

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/linear_independence/v/linear-algebra-introduction-to-linear-independence?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/linear-algebra-parametric-representations-of-lines?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,Qm_OS-8COwU
Laplace_stepfunctiondifferentialequation_Laplacetransform_KhanAcademy-R0JY8oWsuOY.en.csv,"Let's apply everything we've
learned to an actual differential equation. Instead of just taking Laplace
transforms and taking their inverse, let's actually
solve a problem. So let's say that I have the
second derivative of my function y plus 4 times my
function y is equal to sine of t minus the unit step function
0 up until 2 pi of t times sine of t minus 2 pi. Let's solve this differential
equation, an interpretation of it. And I actually do a whole
playlist on interpretations of differential equations and how
you model it, but you know, you can kind of view this
is a forcing function. That it's a weird forcing
function of this being applied to some weight with, you
know, this is the acceleration term, right? The second derivative with
respect to time is the acceleration. So the mass would be 1 whatever
units, and then as a function of its position, this
is probably some type of spring constant. Anyway, I won't go there. I don't want to waste your time
with the interpretation of it, but let's solve it. We can do more about
interpretations later. So we're going take the Laplace
transform of both sides of this equation. So what's the Laplace
transform of the left-hand side? So the Laplace transform of the
second derivative of y is just s squared, so now I'm
taking the Laplace transform of just that. The Laplace transform of s
squared times the Laplace transform of y minus-- lower the
degree there once-- minus s times y of 0 minus
y prime of 0. So clearly, I must have to
give you some initial conditions in order to
do this properly. And then plus 4 times the
Laplace transform of y is equal to-- what's the Laplace
transform of sine of t? That should be second
nature by now. It's just 1 over s
squared plus 1. And then we have minus
the Laplace transform of this thing. And I'll do a little side note
here to figure out the Laplace transform of this thing
right here. And we know, I showed it to you
a couple of videos ago, we showed that the Laplace
transform-- actually I could just write it out here. This is going to be the same
thing as the Laplace transform of sine of t, but we're going to
have to multiply it by e to the minus-- if you remember that
last formula-- e to the minus cs, where c is 2 pi. Actually, let me write
that down. I decided to write it down,
then I decided, oh, no, I don't want to do this. But let me write that. So the Laplace transform of the
unit step function that goes up to c times some function
shifted by c is equal to e to the minus cs times the
Laplace transform of just the original function times the
Laplace transform of f of t. So if we're taking the Laplace
transform of this thing, our c is 2 pi. Our f of t is just
sine of t, right? So then this is just going to
be equal to-- if we just do this piece right here-- it's
going to be equal to e to the minus cs-- our c is 2 pi-- e to
the minus 2 pi s times the Laplace transform of f of t. f
of t is just sine of t before we shifted. This is f of t minus 2 pi. So f of t is just going
to be sine of t. So it's going to be times
1 over s squared plus 1. This is the Laplace transform
of sine of t. So let's go back to where
we had left off. So we've taken the Laplace
transform of both sides of this equation. And clearly, I have some initial
conditions here, so the problem must have given me
some and I just forgot to write them down. So let's see, the initial
conditions I'm given, and they are written kind of in the
margin here, they tell us-- I'll do it in orange, they tell
us that y of 0 is equal to 0, and y prime of
0 is equal to 0. That makes the math easy. That's 0 and that's 0. So let's see if I can simplify
my equation. So the left-hand side,
let's factor out the Laplace transform. So let's factor out this
term and that term. So we get the Laplace transform
of y times this plus this times s squared plus 4 is
equal to the right-hand side. And what's the right-hand
side? We could simplify this. Well, I'll just write it out. I don't want to do too
many steps at once. It's 1 over s squared plus 1
and then plus-- or minus actually, this is a minus--
minus the Laplace transfer of this thing, which was e to
the minus 2 pi s over s squared plus 1. So if we divide both sides of
this equation by the s squared plus 4, then we get the Laplace
transform of y is equal to-- and actually, I
can just merge these two. They're the same denominator. So before I even divide by
s squared plus 4, that right-hand side will
look like this. It will look like with a
denominator of s squared plus 1 and you have a numerator of 1
minus e to the minus 2 pi s. And, of course, we're dividing
both sides of this equation by s squared plus 4, so we're going
to have to stick that s squared plus 4 over here. Now, we're at the hard part. In order to figure out why, we
have to take the inverse Laplace transform
of this thing. So how do we take the
inverse Laplace transform of this thing? That's where the hard part is
always, you know, it makes solving the differential
equation's easy if you know the Laplace transforms. So it
looks like we're going to have to do some partial fraction
expansion. So let's see if we
can do that. So we can rewrite this
equation right here. Actually, let's write it as
this, because this'll kind of simplify our work. Let's factor this
whole thing out. So we're going to write it as 1
minus e to the minus 2 pi s, all of that times-- I'll do it
in orange-- all of that times 1 over s squared plus 1 times
s squared plus 4. Now, we need to do some partial
fraction expansion to simplify this thing
right here. We're going to do this
on the side. Maybe I should do this over
on the right here. This thing-- let me rewrite it--
1 over s squared plus 1 times s squared plus 4 should be
able to be rewritten as two separate fractions, s squared
plus 1 and s squared plus 4, with the numerators. This one would be As plus B. It's going to have to have
degree 1, because this is degree 2. Here And then we'd
have Cs plus D. And so when you add these two
things up, you get As plus B times s squared plus 4 plus Cs
plus D times s squared plus 1, all of that over the
common denominator. We've seen this story before. We just have to do some
algebra here. As you can tell, these
differential equations problems, they require
a lot of stamina. You kind of just have to say I
will keep moving forward and do the algebra that I need to do
in order to get the answer. And you kind of have to get
excited about that notion that you have all this
algebra to do. So let's figure it out. So this top can be simplified
to As to the third plus Bs squared plus 4As plus 4B. And then this one, you end up
with Cs to the third plus Ds squared plus Cs plus D. So when you add of these up
together, you get-- and this is all the algebra that we have
to do, for better, for worse-- A plus C over s to the
third plus B plus D times s squared plus 4A plus C times s--
let's scroll over a little bit-- plus 4B plus D. And now we just have to say,
OK, all of this is equal to this thing up here. This is the numerator. We just simplified
the numerator. This is the numerator. That's the numerator
right there. And all of this is going to be
over your original s squared plus 1 times your s
squared plus 4. And we established that this
thing should be-- let me just write this-- that 1 over s
squared plus 1 times s squared plus 4 should equal
this thing. And then you just pattern match
on the coefficients. This is all just intense partial
fraction expansion. And you say, look, A plus C is
the coefficient of the s cubed terms. I don't see any
s cubed terms here. So A plus C must
be equal to 0. And then you see, OK, B plus D
is the coefficient of the s squared terms. I don't see any
s squared terms there. So B plus D must
be equal to 0. 4A plus C, the coefficient of
the s terms. I don't see any s terms over here. So 4A plus C must
be equal to 0. And then we're almost done. 4B plus D must be the constant
terms. There is a constant term there. So 4B plus D is equal to 1. So let's see if we can
do anything here. If we subtract this from that,
we get minus 3A is equal to 0, or A is equal to 0. If A is equal to 0, then
C is equals to 0. And let's see what
we can get here. If we subtract this from
that, we get minus 3B. The D's cancel out. It's equal to minus 1,
or B is equal to 1/3. And then, of course, we have D
is equal to minus B, if you subtract B from both sides.
so D is equal to 1/3. So all of that work, and
we actually have a pretty simple result. Our equation, this thing here,
can be rewritten as-- the A disappeared. It's 1/3 over s squared
plus 1. B was the coefficient on the--
let me make it very clear. B was the coefficient on the--
or it was a term on top of the s squared plus 1, so that's
why I'm using B there. And then D is minus B,
so D is minus 1. So let me make sure
I have that. B is 1/3 minus-- let me make
sure I get that right. D is 1/3. So, sorry, B as in boy is
1/3, so D is minus 1/3. So B, there's a term on top
of the s squared plus 1. And then you have minus D over
the minus 1/3 over s squared plus 4. This takes a lot of stamina
to record this video. I hope you appreciate it. OK, so let me rewrite
everything, just so we can get back to the problem because
when you take the partial fraction detour, you forget--
not even to speak of the problem, you forget
what day it is. Let's see, so you get the
Laplace transform of y is equal to 1 minus e to the minus
2 pi s times what that mess that we just solved
for, times-- and I'll write it like this. 1/3 times 1 over s squared
plus 1 minus 1/3 times-- actually, let me write
it this way. Because I have this s squared
plus 4, so I really want to have a 2 there. So I want to have a 2 in the
numerator, so you want to have a 2 over s squared plus 4. So if I put a 2 in the numerator
there, I have to divide this by 2 as well. So let me change this to a 6. Minus 1/6 times 2
is minus 1/3. So I did that just so I get
this in the form of the Laplace transform
of sine of t. Now, let's see if there's
anything that I can do from here. This is an epic problem. I'll be amazed if I don't
make a careless mistake while I do this. So we can rewrite everything. Let's see if we can
simplify this. And by simplifying it, I'm just
going to make it longer. We can write the Laplace
transform of y is equal to-- I'm just going to multiply the
1 out, and then I'm going to multiply the e to the
minus 2 pi s out. So if you multiply the 1 out,
you get 1/3 times 1 over s squared plus 1-- I'm just
multiplying the 1 out-- minus 1/6-- these are all the 1's
times the 1-- times 2 over s squared plus 4. And then I'm going to multiply
the minus e. Let me just switch colors,
do the minus e. So then you get minus e to the
minus 2 pi s over 3 times 1 over s squared plus 1. And then the minus and the minus
cancel out, so you get plus e to the minus 2 pi
s over 6 times 2 over s squared plus 4. Now, taking the inverse Laplace
transform of these things are pretty
straightforward. So let's do that. Let's take the inverse Laplace
transform of the whole thing. And we get y is equal to the
inverse Laplace transform of this guy right here, is just 1/3
sine of t-- I don't have to write a parentheses there--
sine of t, and then this is minus 1/6 times-- this
is the Laplace transform of sine of 2t. That's that term right there. Now, these are almost the same,
but we have this little pesky character over here. We have this e to the
minus 2 pi s. And there, we just have to
remind ourselves-- I'll write it here in the bottom. We just have to remind ourselves
that the Laplace transform of the unit step
function-- I'll put the pi there, just 2 pi times f of t
minus 2 pi-- I should put as the step function of t-- is
equal to e to the minus 2 pi s times the Laplace transform of
just-- or let me just write it this way-- times the Laplace
transform of f of t. So if we view f of t as just
sine of t or sine of 2t, then we can kind of backwards
pattern match. And we'll have to shift
it and multiply it by the unit step function. So I want to make that clear. If you didn't have this guy
here, the inverse Laplace transform of this guy would be
the same thing as this guy. It'd just be sine of t. The inverse Laplace transform
of this guy would be sine of 2t. But we have this pesky
character here, which essentially, instead of having
the inverse Laplace transform just being our f of t, it's
going to be our f of t shifted by 2 pi times the unit
step function, where it steps up at 2pi. So this is going to be minus
1/3 times the unit step function, where c is 2 pi of t
times-- instead of sine of t-- sine of t minus 2pi. And then we're almost done. I'll do it in magenta
to celebrate it. Plus this very last term, which
is 1/6 times the unit step function 2 pi of t, the
unit step function that steps up at 2 pi times sine of-- and
we have to be careful here. Wherever we had a t before,
we're going to replace it with a t minus 2 pi. So sine of, instead of
2t, is going to be 2 times t minus 2 pi. And there you have it. We finally have solved our
very hairy problem. We could take some time
if we want to simplify this a little bit. In fact, we might as well. At the risk of making a careless
mistake at the last moment, let me see if I can make
any simplifications here. Well, we could factor out this
guy right here, but other than that, that seems about as
simple as we can get. So this is our function of t
that satisfies our otherwise simple-looking differential
equation that we had up here. This looked fairly
straightforward, but we got this big mess to actually
satisfy that equation, given those initial conditions
that we had initially.",Laplace/step function differential equation | Laplace transform | Khan Academy,"Hairy differential equation involving a step function that we use the Laplace Transform to solve.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/convolution-integral/v/introduction-to-the-convolution?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-to-solve-differential-equation/v/using-the-laplace-transform-to-solve-a-nonhomogenous-eq?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,R0JY8oWsuOY
Euler'smethodprogramcode_Firstorderdifferentialequations_KhanAcademy-SJVhtIGAkKs.en.csv,"- [Voiceover] In the first
video on Euler's Method we walked through an example where we were trying to approximate the solution to y prime is equal to y using the initial condition, start when x is equal
to zero y equals one. And you're probably thinking to yourself, well, it's very nice that
Sal was doing that by hand and it felt very home-brewed. But this looks like something that would be a good job for computers. And if you were thinking
that, you are right and that is why I took
a little time last night to actually write a computer program that implements Euler's Method. And so, what I want to
do in this video is one, show you how to use this program I had and it's sitting and I'll put
an annotation on this video so that you can click right to it, but it's sitting on the
tutorial on Khan Academy that is about Euler's Method. And so, let's first talk
about how to use this thing. So this first thing, this
first variable right over here xStep, this is how much we want to step. This is how much we want
to increase x by for each when we want to find each next point in our approximation. So in our right here xStep is one, we could make this point five, we could make this two, we could make this .001. As we see in the first video, the lower the number here the more precise of an
approximation we're going to get. On these next two variables are things that you might want to tweak. These are the initial conditions. This is the starting x. And when we're at the starting x we're assuming that
the particular solution will contain that starting y. So, the way it's set right now it says hey, the .01 is in
the particular solution. And if you go a little bit lower this is the function slope at point. I guess I could have called
it derivative at point as well or tangent slope at point. Those would involve legitimate
name for this function. This is really where I define what the differential equation is. And so you see it says like, it just says return y right over here. What it's saying is what
it's going to return is the slope at that point and you pass it at x and y and then it will give you
the slope of the point. So this is saying that the slope
of that point is equal to y or another way interpreting it is is that y prime is equal to y. And so, this is the way it's defined now. The differential equation
that we looked at in the first introductory video that at any point the derivative
is going to be equal to y. And since we stepped by one we see that. Where the .01, our
slope is going to be one until our next step, until
we increase our x by one we get to this point. Now our slope is two. We increase x by one and
then our y goes up by two. Now our slope is four. We increase x by one,
we increase y by four. Now we could do a different function here. You could say that dy,
dx is equal to negative x divided by Y. And we would get something like this. If our xStep is just one, if we have this initial condition our initial condition could
be something like that and you say even with an xStep of one something as course as that we're getting a pretty good
approximation right over here and if we want to get
a better approximation we can make this smaller. 0.5 is even better. If we wanted to get even better, 0.1. And you might have noticed something that just happened here. This thing got wacky as we got, as we started dividing by, as we started getting
close to dividing by zero. And this is a reminder that this is really just
an approximation tool. We're not analytically
finding the actual solution. We're just stepping from, you know, x equals zero to x equals point
one to x equals point two, and we're using the slopes
at each of those points and were you able to figure out the slope based on this function to figure out what their
next x and y should be. So I encourage you to play with this. It's actually a lot of fun. You can see how you get a
much better approximation as you, let me go back to
what we originally had. You can see how you get a
much better approximation as you get your xSteps
being close and closer and closer to zero. So, this is you'll notice
now when you just... We have an xStep of 0.1 at x equals one. This is getting pretty close to E. It's probably doing a pretty good job of simulating the exponential function y is equal E, y equals E to the x. So the main things to know
about, this is your xStep, these right over here are
your initial conditions, your x and y. And whatever you put in here, you're gonna say that
dy, dx is equal to that. Notice I say assumes that
your differential equation can be expressed as y prime is equal to a function of x and y which is also a function of x. And so, whatever you put here, that's essentially your
function of x and y of x. So if you just have y prime
is equal to negative x or y you put negative x divided by y, negative x divided by y over here. All of these is actually no way. I'd have to raise the
initial condition here to do something like that. And if you want to now know
how this program works, if you want to modify this and I encourage you to
modify it, make it better because this I just kind of
hacked this together last night. I'll now explain what the
rest of the program is doing. So these are all the variables for kind of establishing
for drawing the graph paper. This is our minimum x, minimum y, maximum x and maximum y. They kind of fall off
the page right over here. You have your x and y offset. If you change it you'll notice, if you change your xOffset it shows how much we move to the right or the left. The yOffset it moves
everything up or down. The background, that's
just the background color that we are... The background color for our canvas. Then the xScale is
really just trying to say well, how many of the pixels result to kind of one
incremental step in x or one incremental step in y. I'm sure I probably
could have tweaked this a little bit better to factor the offset and that's probably one of the reasons why I'm falling off the screen. But anyway, you can modify it if you like. These next two functions are really to just map between x and
y coordinates and pixels. So that's that. Then this is the color of the actual grid. You can see I could change that. I could change the color of the grid to whatever I like. I like something with a
reasonable level of contrast so I'll leave it there. And then these two things, this draws the vertical lines and then labels the numbers down here. You see this draws the vertical lines. This does the labels down here. Notice it starts at x
min, it goes up to x max. This does the same thing
for the horizontal lines so this right over here is going to go. So, it starts at the y
min, goes up to the y max, draws a bunch of lines and
also labels the y axis. So that's really just kind of the setup and then this is the actual
function that we call in order to draw our approximation. And it makes use of slope at point. So, for any point you're starting, you start your x in initX, initial x. You start your y in initial y. And then you say look, while x hasn't gotten to our maximum x yet figure out or draw a point at that point, and actually we might not even need that. I can comment that out. It doesn't change it really. That's actually my first iteration, actually let me take that out. Let me take that one out or I'll leave it here for now. You could modify it as you see fit. And then it figures out the slope. It figures out the slope at that, in that current x and y. So it uses that function. So it saying okay, let
me input that x and y and then it figures out what the derivative is at that point. And so that it uses that slope to figure out what the
next x and the next y are. The next x is gonna be x incremented by the delta that you passed to it. The next y is gonna be the current y plus the slope times the delta and then it just draws a line from the current x to the next, or the current point, the x, y point to the next x, y point. And then it makes the next x one. It makes the next x and the next y the current x and the current y, and then it just keeps on
going and going and going. And then finally, this is
actually where we call, where we call that function. And I used the variable xStep that we defined earlier
on at you know, point one, but if I change this to just... If I just change this to one you see that actually makes the change and I could actually draw
multiple approximations on the same screen. That actually might help us appreciate. That actually might help us appreciate how our approximation gets better as we get a little bit more granularity. So let's say let's draw an approximation. Approximation. And instead of having an xStep or a delta x of one every time, let's have a delta x of 0.5. And so you see it there. The delta x of 0.5 it gave me a more accurate representation. Let me do one more. Just show how all these works. Stroke. Let me change the color. So for the next line of
color let me make it, I don't know, I'll make it this kind of this green blue color. Let me draw. Whoops, let's draw. Draw Approximation. I'll just have to capitalize the A. Draw Approximation and I'll make this one even more fine. So there you go. That was even a better approximation. So the blue one is the most accurate one and you can do this with a bunch of ones. We could do it with what we
saw in the very first video where we're approximating
y is equal to E to the x. Well that case, the slope at a point is equal to the Y coordinate. Y prime is equal to y and our initial condition is 01, and you see the blue one is getting really close
to y is equal E to the x but you could play with all
sorts of neat things here. So, we could do things like... So we could say that y prime is equal to I don't know, x plus y. What does that do? What if we did x minus y? Well, that's actually a pretty neat one. We could change our range. We can make our x max. Let's say we want to like
zoom in a little bit here. Let's make our x max equal to four. And now you get a little
bit more fine grained here and then you could... Let's change our initial conditions. What if when x is equal
to zero y is a higher y? And so you can see how your
different approximations change. Anyway, hopefully you
found that interesting. I encourage you to modify
this and understand this because the whole point of Euler's Method it's a numerical method. It's to use something like a computer in order to approximate solutions.",Euler's method program code | First order differential equations | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/eulers-method-tutorial/e/euler-s-method?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/eulers-method-tutorial/v/example-eulers-method-exercise?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/eulers-method-tutorial/v/eulers-method?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,SJVhtIGAkKs
2ndorderlinearhomogeneousdifferentialequations2_KhanAcademy-SPVqgkOZMAc.en.csv,"I've spoken a lot about second
order linear homogeneous differential equations in
abstract terms, and how if g is a solution, then
some constant times g is also a solution. Or if g and h are solutions,
then g plus h is also a solution. Let's actually do problems,
because I think that will actually help you learn,
as opposed to help you get confused. So let's say I have this
differential equation, the second derivative of y, with
respect to x, plus 5 times the first derivative of y, with
respect to x, plus 6 times y is equal to 0. So we need to find a y where 1
times its second derivative, plus 5 times its first
derivative, plus 6 times itself, is equal to 0. And now, let's just do a little
bit of-- take a step back and think about what kind
of function-- if I have the function and I take its
derivative and then I take its second derivative,
most times I get something completely different. Like, if y was x squared, then
y prime would be 2x, and y prime prime would be 2. And then to add them together
you'd say, well, how would my x terms cancel out so that
you get 0 in the end? So draw back into your brain
and think, is there some function that when I take its
first and second derivatives, and third and fourth
derivatives, it essentially becomes the same function? Maybe the constant in front of
the function changes as I take the derivative. And if you've listened to a
lot of my videos, you'd realize that it probably is what
I consider to be the most amazing function
in mathematics. And that is the function
e to the x. And in particular, maybe e to
the x won't work here-- or you can even try it out, right? If you did e to the x,
it won't satisfy this equation, right? You would get e to the x, plus
5e to the x, plus 6e to the x. That would not equal to 0. But maybe y is equal to e to
some constant r, times x. Let's just make the assumption
that y is equal to some constant r times x, substitute
it back into this, and then see if we can actually solve
for an r that makes this equation true. And if we can, we've found the
solution, or maybe we've found several solutions. So let's try it out. Let's try y is equal to
e to the rx into this differential equation. So what is the first
derivative of it, first of all. So y soon. prime is
equal to what? Derivative chain rule. Derivative of the inside is r. And then derivative of
the outside is still just e to the rx. And what's the second
derivative? y prime prime is equal to
derivative-- r is just a constant-- so derivative of the
inside is r, times r on the outside, that's r squared,
times e to the rx. And now we're ready to
substitute back in. And I will switch colors. So the second derivative, that's
r squared times e to the rx, plus 5 times the first
derivative, so that's 5re to the rx, plus 6 times our
function-- 6 times e to the rx is equal to 0. And something might already be
surfacing to you as something we can do this equation
to solve for r. All of these terms on the left
all have an e to the rx, so let's factor that out. So this is equal to e to the rx
times r squared, plus 5r, plus 6 is equal to 0. And our goal, remember, was to
solve for the r, or the r's, that will make this true. And in order for this side
of the equation to be 0, what do we know? Can e to the rx ever equal 0? Can you ever get something to
some exponent and get 0? Well, no. So this cannot equal 0. So in order for this left-hand
side of the equation to be 0, this term, this expression
right here, has to be 0. And I'll do that in
a different color. So we know, if we want to solve
for r, that this, r squared plus 5r, plus
6, that has to be 0. And this is called the
characteristic equation. This, the r squared plus 5r,
plus 6, is called the characteristic equation. And it should be obvious
to you that now this is no longer calculus. This is just factoring
a quadratic. And this one actually is fairly straightforward to factor. So what is this? This is r plus 2, times r
plus 3 is equal to 0. And so the solutions of the
characteristic equation-- or actually, the solutions to this
original equation-- are r is equal to negative 2 and
r is equal to minus 3. So you say, hey, we found two
solutions, because we found two you suitable r's
that make this differential equation true. And what are those? Well, the first one is
y is equal to e to the minus 2x, right? We can call that y1. And then the second solution
we found, y2 is e to the-- what is this?-- r is minus 3x. Now my question to you
is, is this the most general solution? Well, in the last video, in
kind of our introductory video, we learned that a
constant times a solution is still a solution. So, if y1 is a solution, we also
know that we can multiply y1 times any constant. So let's do that. Let's multiply it by c1. That's a c1 there. This is also going
to be a solution. And now it's a little bit
more general, right? It's a whole class
of functions. The c doesn't have to just be
1, it can be any constant. And then when you use your
initial values, you actually can figure out what
that constant is. And same for y2. y2 doesn't have to be 1 times
e to the minus 3x, it has to be any constant. And we learned that in the
last video, that if something's a solution,
some constant times that is also a solution. And we also learned that if we
have two different solutions, that if you add them together,
you also get a solution. So the most general solution to
this differential equation is y-- we could say y of x, just
to hit it home that this is definitely a function of x--
y of x is equal to c1e to the minus 2x, plus c2e
to the minus 3x. And this is the general
solution of this differential equation. And I won't prove it because the
proof is fairly involved. I mean, we just tried
out e to the rx. Maybe there's some other wacko
function that would have worked here. But I'll tell you now, and you
kind of have to take it as a leap of faith, that this is
the only general solution. There isn't some crazy outside
function there that would have also worked. And so the other question that
might be popping in your brain is, Sal, when we did first order
differential equations, we only had one constant. And that was OK, because we
had one set of initial conditions and we solved
for our constants. But here, I have
two constants. So if I wanted a particular
solution, how can I solve for two variables if I'm only given
one initial condition? And if that's what you actually
thought, your intuition would be correct. You actually need two initial
conditions to solve this differential equation. You would need to know,
at a given value of x, what y is equal to. And, maybe at a given
value of x, what the first derivative is. And that is what we will
do in the next video. See",2nd order linear homogeneous differential equations 2 | Khan Academy,"Let's find the general solution!

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/linear-homogeneous-2nd-order/v/2nd-order-linear-homogeneous-differential-equations-3?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/linear-homogeneous-2nd-order/v/2nd-order-linear-homogeneous-differential-equations-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,SPVqgkOZMAc
Theconvolutionandthelaplacetransform_Laplacetransform_KhanAcademy-TJgBEI3drUc.en.csv,"Now that you've had a little
bit of exposure to what a convolution is, I can
introduce you to the convolution theorem, or at
least in the context of-- there may be other convolution
theorems-- but we're talking about differential equations
and Laplace transforms. So this is the convolution theorem
as applies to Laplace transforms. And it tells us that
if I have a function f of t-- and I can define its Laplace
transform as, let's see, the Laplace transform of
f of t is capital F of s. We've done that before. And if I have another function,
g of t, and I take its Laplace transform, that of
course is capital G of s. Then if we were to convolute
these two functions, so if I were to take f and I were to
convolute it with g, which is going to be another function
of t-- and we already saw this. We saw that in the last video. I convoluted sine and cosine. So this is going to be
a function of t. That the Laplace transform of
this thing, and this the crux of the theorem, the Laplace
transform of the convolution of these two functions is equal
to the products of their Laplace transforms. It equals
F of s, big capital F of s, times big capital G of s. Now, this might seem very
abstract and very, you know, hard to kind of handle
for you right now. So let's do an actual example. And actually, even better, let's
do an inverse Laplace transform with an example. And actually, let me write
one more thing. If this is true, then we could
also do it the other way. We could also say that f-- and
I'll just do it all in yellow; it takes me too much time to
keep switching colors-- that the convolution of f and g, this
is just a function of t, I can just say it's the inverse
Laplace transform. It's just the inverse Laplace
transform of F of s times G of s. Although I couldn't resist it. Let me switch colors. There you go. Now, what good does
all of this do? Well, we can take inverse
Laplace transforms. Let's just say that I had-- let me write
it down here-- let's say I told you that the following
expression or function, let's say H of s-- let me write it
this way-- H of s is equal to 2s over s squared plus 1. Now, we did this long
differential equations at the end, we end up with this thing
and we have to take the inverse Laplace transform
of it. So we want to figure out the
inverse Laplace transform of H of s, or the inverse Laplace
transform of this thing right there. So we want to figure out the
inverse Laplace transform of this expression right here, 2s
over s squared plus 1 squared. I don't want to lose that. Right there. Now, can we write this as the
product of two Laplace transforms that we do know? Let's try to do it. So we can rewrite this. And so this is the inverse
Laplace transform. So let me rewrite this
expression down here. So I can rewrite 2s over s
squared plus 1 squared. This is the same thing as-- let
me write it this way-- 2 times 1 over s squared plus 1,
times s over s squared plus 1. I just kind of broke it up. If you multiply the numerators
here, you get 2 times 1, times s, or 2s. If you multiply the denominators
here, s squared plus 1, times s squared plus 1,
well, that's just s squared plus 1 squared. So this is the same thing. So if we want to take the
inverse Laplace transform of this, it's the same thing as
taking the inverse Laplace transform of this right here. Now, something should
hopefully start popping out at you. If these were separate
transforms, if they were on their own, we know
what this is. If we call this F of s, if we
said this is the Laplace transform of some function, we
know what that function is. This is this piece right here. I'm just doing a little
dotted line around it. This is the Laplace transform
of sine of t. And then if we draw a little
box around this one right here, this is the Laplace
transform of cosine of t, G of s. So this is the Laplace transform
of sine of t, or we could write that this implies
that f of t is equal to sine of t. You should recognize
that one by now. And this implies that g of t,
if we define this as the Laplace transform of g, this
means that g of t is equal to cosine of t. And, of course, when you take
the inverse Laplace transforms, you could
take the 2's out. So now what can we say? We can now say that the-- let
me write it this way-- the inverse-- so actually, let
me write it this way. Or, actually, a better thing to
do, instead of taking the 2 out, so I can leave it nice
and clean, we could, if we were to draw a box around this
whole thing, and define this whole thing as F of s, then F of
s is the Laplace transform of 2 sine of t. I just wanted to
include that 2. I didn't want to leave that
out and confuse the issue. I wanted a very pure F
of s times G of s. So this expression right here is
the product of the Laplace transform of 2 sine of t, and
the Laplace transform of cosine of t. Now, our convolution theorem
told us this right here. That if we want to take the
inverse Laplace transform of the Laplace transforms of two
functions-- I know that sounds very confusing --but you just
kind of pattern match. You say, OK look, this thing
that I had here, I could rewrite it as a product
of two Laplace transforms I can recognize. This right here is the Laplace
transform of 2 sine of t. This is the Laplace transform
of cosine of t. And we just wrote that as
G of s, and F of s. So if I have an expression
written like this, I can take the inverse Laplace transform
and it'll be equal to the convolution of the original
functions. It'll be equal to the
convolution of the inverse of g or the inverse of f. Let me write it this way. I could write it like this. We know that f of t is equal
to the inverse Laplace transform of F of s. And we know that g-- I should
have done it in a different color, but I'll do g in green--
we know that g of t is equal to the inverse Laplace
transform of G of s. So we can rewrite the
convolution theorem as the inverse-- and this might maybe
confuse you more than help, but I'll give my best shot. The inverse Laplace transform
of-- and I'll try to stay true to the colors-- of F of s times
G of s is equal to-- I'm just restating this convolution theorem right here. This is equal to the convolution
of the inverse Laplace transform of F of s. So it's equal to the convolution
of the inverse Laplace transform of F of s
with the inverse Laplace transform of G of s. With the inverse Laplace
transform of capital G, of G of s. I'm not sure if that helps you
or not, but if you go back to this example it might. This is F of s, this is
F of s right here. 2 times-- I'll do it in the
light blue-- this is 2 over s squared plus 1. That's F of s in our example. And the G of s was s over
s squared plus 1. And all I got that from is I
just broke this up into two things that I recognize. If I multiply this together, I
get back to my original thing that I was trying to take the
inverse Laplace transform of. And so the convolution theorem
just says that, OK, well, the inverse Laplace transform of
this is equal to the inverse Laplace transform of 2 over s
squared plus 1, convoluted with the inverse Laplace
transform of our G of s, of s over s squared plus 1. And we know what these
things are. I already told them to you, but
they should be somewhat second nature now. This is 2 times sine of t. You take the Laplace transform
of sine of t, you get 1 over s squared plus 1, and then you
multiply it by 2, you get the 2 up there. And you're going to have to
convolute that with the inverse Laplace transform
of this thing here. And we already went over this. This is cosine of t. So our result so far--
let me be very clear. It's always good to take a step
back and just think about what we're doing, much less
why we're doing it. But let's see, the inverse
Laplace transform of this thing up in this top left
corner, 2s over s squared plus 1 squared, which before we did
what we're doing now was very hard to figure out-- actually,
this would be a curly bracket right here, but you get the
idea-- is equal to this. It's equal to 2 sine of t,
convoluted with cosine of t. And you're like, Sal, throughout
this whole process I've already forgotten what
it means to convolute two functions, so let's
convolute them. And I'll just write the
definition, or the definition we're using of the
convolution. That f convoluted with
g-- it's going to be a function of g. I'll just write this
short-hand-- is equal to the integral from 0 to t,
of f of t minus tau, times g of tau, dtau. So 2 sine of t convoluted with
cosine of t is equal to-- let me do a neutral color-- the
integral from 0 to t, of 2 sine of t, minus tau, times
the cosine of tau, dtau. Now if you watched the very last
video I made, I actually solved this, or I solved a very
similar thing to this. If we take the 2 out we get 2,
times the integral from 0 to t, of sine of t minus tau,
times the cosine of tau. I actually solved this in
the previous video. This right here, this is the
convolution of sine of t and cosine of t. It's sine of t convoluted
with cosine of t. And I show you in the previous
video, just watch that video, where I introduce a convolution,
that this thing right here is equal
to 1/2t sine of t. Now, if this thing is equal to
1/2 t sine of t, and I have to multiply it by 2, then we get,
our big result, that the inverse Laplace transform of
2s over s squared plus 1 squared is equal to the
convolution of 2 sine of t with cosine of t. Which is just 2 times this thing
here, which is 2 times 1/2-- those cancel out-- so
it equals t sine of t. And once you get the hang of
it, you won't have to go through all of these steps. But the key is to recognize that
this could be broken down as the products of two Laplace
transforms that you recognize. This could be broken down as
the product of two Laplace transforms we recognized. This is the Laplace transform
of 2 sine of t. This was the Laplace transform
of cosine of t. So the inverse Laplace transform
of our original thing, or original expression,
is just the convolution of that with that. And if you watched the previous
video, you'd realize that actually calculating that
convolution was no simple task, but it can be done. So you actually can get
an integral form. Even if it can't be done, you
can get your answer, at least, in terms of some integral. So I haven't proven
the convolution theorem to you just yet. I'll do that in a
future video. But hopefully, this gave you a
little bit of a sense of how you can use it to actually
take inverse Laplace transforms. And remember, the
reason why we're learning to take inverse Laplace transforms,
and we have all of these tools to do it, is because
that's always that last step when you're solving
these differential equations, using your Laplace transforms.",The convolution and the laplace transform | Laplace transform | Khan Academy,"Understanding how the product of the Transforms of two functions relates to their convolution.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/convolution-integral/v/using-the-convolution-theorem-to-solve-an-initial-value-prob?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/convolution-integral/v/introduction-to-the-convolution?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,TJgBEI3drUc
2ndorderlinearhomogeneousdifferentialequations1_KhanAcademy-UFWAu8Ptth0.en.csv,"We'll now move from the world
of first order differential equations to the world
of second order differential equations. And what does that mean? That means that we're now going
to start involving the second derivative. And the first class that I'm
going to show you-- and this is probably the most useful
class when you're studying classical physics-- are
linear second order differential equations. So what is a linear second order
differential equation? I think I touched on it a little
bit in our very first intro video. But it's something that
looks like this. If I have a of x-- so some
function only of x-- times the second derivative of y, with
respect to x, plus b of x, times the first derivative of
y, with respect to x, plus c of x, times y is equal to some
function that's only a function of x. So just to review our
terminology, y is the second order because the highest
derivative here is the second derivative, so that makes
it second order. And what makes it linear? Well all of the coefficients
on-- and I want to be careful with the term coefficients,
because traditionally we view coefficients as always being
constants-- but here we have functions of x as
coefficients. So in order for this to be a
linear differential equation, a of x, b of x, c of x and d
of x, they all have to be functions only of x, as
I've drawn it here. And now, before we start
trying to solve this generally, we'll do a special
case of this, where a, b, c are constants and d is 0. So what will that look like? So I can just rewrite that as
A-- so now A is not a function anymore, it's just a number-- A
times the second derivative of y, with respect to x, plus B
times the first derivative, plus C times y. And instead of having just a
fourth constant, instead of d of x, I'm just going to
set that equal to 0. And by setting this equal to 0,
I have now introduced you to the other form
of homogeneous differential equation. And this one is called
homogeneous. And I haven't made the
connection yet on how these second order differential
equations are related to the first order ones that I just
introduced-- to these other homogeneous differential
equations I introduced you to. I think they just happen to
have the same name, even though they're not
that related. So the reason why this one is
called homogeneous is because you have it equal to 0. So this is what makes
it homogeneous. And actually, I do see more of a
connection between this type of equation and milk where all
the fat is spread out, because if you think about it, the
solution for all homogeneous equations, when you kind of
solve the equation, they always equal 0. So they're homogenized, I guess
is the best way that I can draw any kind of parallel. So we could call this a second
order linear because A, B, and C definitely are functions just
of-- well, they're not even functions of x or y,
they're just constants. So second order linear
homogeneous-- because they equal 0-- differential
equations. And I think you'll see that
these, in some ways, are the most fun differential
equations to solve. And actually, often the most
useful because in a lot of the applications of classical
mechanics, this is all you need to solve. But they're the most fun to
solve because they all boil down to Algebra II problems.
And I'll touch on that in a second. But let's just think about
this a little bit. Think about what the
properties of these solutions might be. Let me just throw
out something. Let's say that g of
x is a solution. So that means that A times g
prime prime, plus B times g prime, plus C times
g is equal to 0. Right? These mean the same thing. Now, my question to you is,
what if I have some constant times g? Is that still a solution? So my question is, let's say
some constant c1 gx-- c1 times g-- is this a solution? Well, let's try it out. Let's substitute this into
our original equation. So A times the second derivative
of this would just be-- and I'll switch colors
here; let me switch to brown-- so A times the second derivative
of this would be-- the constant, every time you
take a derivative, the constant just carries over-- so
that'll just be A times c1 g prime prime, plus-- the
same thing for the first derivative-- B times c1 g prime,
plus C-- and this C is different than the
c1 c-- times g. And let's see whether
this is equal to 0. So we could factor out that c1
constant, and we get c1 times Ag prime prime, plus
Bg prime, plus Cg. And lo and behold,
we already know. Because we know that g of
x is a solution, we know that this is true. So this is going to
be equal to 0. Because g is a solution. So if this is 0, c1 times 0
is going to be equal to 0. So this expression up here
is also equal to 0. Or another way to view it is
that if g is a solution to this second order linear
homogeneous differential equation, then some constant
times g is also a solution. So this is also a solution to
the differential equation. And then the next property I
want to show you-- and this is all going someplace,
don't worry. The next question I want to ask
you is, OK, we know that g of x is a solution to the
differential equation. What if I were to also
tell you that h of x is also a solution? So my question to you is, is g
of x plus h of x a solution? If you add these two functions
that are both solutions, if you add them together, is that
still a solution of our original differential
equation? Well, let's substitute this
whole thing into our original differential equation, right? So we'll have A times
the second derivative of this thing. Well, that's straightforward
enough. That's just g prime prime, plus
h prime prime, plus B times-- the first derivative of
this thing-- g prime plus h prime, plus C times-- this
function-- g plus h. And now what can we do? Let's distribute all
of these constants. We get A times g prime prime,
plus A times h prime prime, plus B times the first
derivative of g, plus B times the first derivative of
h, plus C times g, plus C times h. And now we can rearrange them. And we get A-- let's take this
one; let's take all the g terms-- A times the second
derivative of g, plus B times the first derivative, plus C
times g-- that's these three terms-- plus A times the second
derivative of h, plus B times the first derivative,
plus C times h. And now we know that both g
and h are solutions of the original differential
equation. So by definition, if g is a
solution of the original differential equation, and this
was the left-hand side of that differential equation, this
is going to be equal to 0, and so is this going
to be equal to 0. So we've shown that this whole
expression is equal to 0. So if g is a solution of the
differential equation-- of this second order linear
homogeneous differential equation-- and h is also a
solution, then if you were to add them together, the sum of
them is also a solution. So in general, if we show that
g is a solution and h is a solution, you can add them. And we showed before that
any constant times them is also a solution. So you could also say that some
constant times g of x plus some constant times h
of x is also a solution. And maybe the constant
in one of the cases is 0 or something. I don't know. But anyway, these are useful
properties to maybe internalize for second order
homogeneous linear differential equations. And in the next video, we're
actually going to apply these properties to figure out the
solutions for these. And you'll see that they're
actually straightforward. I would say a lot easier than
what we did in the previous first order homogeneous
difference equations, or the exact equations. This is much, much easier. I'll see you in the
next video.",2nd order linear homogeneous differential equations 1 | Khan Academy,"Introduction to 2nd order, linear, homogeneous differential equations with constant coefficients.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/linear-homogeneous-2nd-order/v/2nd-order-linear-homogeneous-differential-equations-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/homogeneous-equations/v/first-order-homogenous-equations-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,UFWAu8Ptth0
DefiningaplaneinR3withapointandnormalvector_LinearAlgebra_KhanAcademy-UJxgcVaNTqY.en.csv,"Let's take a little bit of a
hiatus from our more rigorous math where we're building the
mathematics of vector algebra and just think a little bit
about something that you'll probably encounter if you ever
have to have to write a three-dimensional computer
program or have to do any mathematics dealing with
three dimensions. And that's the idea of just the
equation of a plane in R3. And you know what a plane is. I mean we live in a
three-dimensional world and we see planes all around us. The surface of your monitor, of
your computer monitor is a plane, regardless of what
angle you hold it at. And I can draw here in
three dimensions. Let me do a little bit
better job than that. So let's say that that
is the x-axis. This is my y-axis. And then that's my z-axis. And we know what a
plane looks like. it looks something like that. I'm just drawing it at an
arbitrary angle and it goes off in every direction. Now, the equation of a
plane-- and you've probably seen this before. It's a linear function
of x, y and z. So it's ax plus by plus
cz is equal to d. If this is the graph on that
plane, then that means that every point on this plane, every
x, y and z on this plane satisfies this equation. Now another way, just as valid
a way to specify a point or specify a plane is to give you
an actual point on the plane. So we'll say, look, that's
the point on the plane. Let's say that this is the
point x0, y0, and z0. It could be one of the instances
of this point right here, but I'm just saying
this is another point that's on the plane. That obviously by itself isn't
going to specify the plane. You could pivot the plane
around that point in an infinite number of ways. But if you specify that point
and you specify a vector that's perpendicular to the
plane-- and I can draw that starting from here, but I can
shift a vector wherever. But let me just draw
it right there. So if I also specify a normal
vector to the plane. And I just used a word that I
haven't defined for you yet. But when I say a normal
vector, so n is a normal vector. Or which just means that it's
perpendicular to the plane. It's perpendicular to everything
on the plane. It's perpendicular to every
vector on the plane. Perpendicular to, I guess the
best way to say it, I'll just say it in very imprecise
terms-- everything on the plane. So if you have some vectors
lying on the plane, if I have some vector here, let's say
that's lying on the plane. If you imagine the plane as
a piece of cardboard, that yellow arrow I just drew-- I
would've actually drawn that on the cardboard. It's sitting on the plane. If this yellow vector, let me
call it vector a, then if this is just some arbitrary vector
sitting on the plane and this is the normal vector through
the plane, we know from our definition of vector angles that
this is perpendicular to this if and only if, n dot a--
only if the dot product of these two things
are equal to 0. And that's true for any vector
that we pick that actually lies on the plane. So let's see if we can use this
definition of a plane, if we can use the-- I'll call it
the normal or let me call it the n plus-- let me
do it this way. The n plus some x0,
y0, z0 definition. And if I can go from that to
just the standard linear equation definition, ax plus
by plus cz is equal to 0. Let's see if there's some way
based on what we already know and using this information
that we can do that. So the way to think about it,
this point, this little blue point that lies on the plane,
I can specify it by a position vector. So let me set some position
vector x0 to be equal to-- so I'm going to define x0
to be equal to the scalar x0, y0, z0. And I want to be very clear. This specifies the coordinate
that lies on the plane. This vector does not lie
entirely on the plane. The way I drew it right here,
it's starting at the origin. It's a position vector. And the way I drew it it's
behind the plane. The tip of its arrow
sits on the plane. But this vector itself,
it's not necessarily drawn on the plane. This plane might not even go
through the origin, while this vector does touch
on the origin. It just specifies some
point on the plane. Similarly, let me define
another vector. I said this was some other
arbitrary point on the plane xyz, and so you know,
this is true for any point on the plane. Let me define another vector
x, and I'm going to define that as x, y, and z. So once again, like x0, the
vector x-- let me draw it right there. This vector x does not
lie on the plane. It goes from the origin. It's a position vector
that specifies a point on the plane. So it goes from the origin
and it goes out. And you can almost view them
as if the plane was like a coffee table that this would
kind of be these vectors. Let me see if I can draw it. If this was the flat surface of
the plane that the vector x0 is going from the origin
to specify some point on the plane. And then the vector x is also
going from the origin to specify-- let me do it
in a different color. The vector x is also going from
the origin to specify some other point on the
plane right there. I just took the plane and made
it flat, so you see it right along its side. If you could imagine sitting
right at the surface of the plane and then you could see
that these guys clearly do not lie in the plane. But using these guys, I can
construct a vector that does lie on the plane. What does the vector x
minus x0 look like? Well, I just drew a little
triangle here. x minus x0-- I'll do it in this
green color. It'll look exactly like this. x
minus x0 will be this green line right here. This is x minus x0. We could view x0 plus this
vector plus x minus x0 is going to be equal to x. If I were to do it on this
graph, it's going to look like this. It's going to be like this. So let me draw it better
than that. It's going to go from that
point from x0, the point specified by x0 to the
point specified by x. And it's going to lie
along the plane. So this right here
is x minus x0. I know this drawing is getting
very dirty, but you can see that this is definitely
lying on the plane. So this vector right here must
be perpendicular to n. Perpendicular to our
normal vector. Now, if my normal vector-- let's
say my normal vector n. So this vector is perpendicular
to this guy right here. It's perpendicular to the
vector n1, n2, n3. Now using this information, how
can we get to this type of an expression, just this linear
equation of x, y and z? Well, we know that n-- let me
switch to a neutral color. We know that n-- actually, I
didn't want to do this caret here. n is not a unit vector. But let's say n, so it's
perpendicular to this. So the dot product of it,
we saw that right there. We saw it in the
previous video. The dot product of n with this
vector right here-- actually, let me draw it. You know, I already drew the
plane sideways, so I can actually draw my n vector. My n vector's going to look
something like this. It's going to be popping
straight out of the plane. And I could shift it over, but
it's always going to be in that same direction. It's going to be perpendicular
to this vector right here. So n is perpendicular
to x minus x0. Which means that their dot
product is equal to 0. Well what does x minus
x0 look like? So this is going to look
like this expression. If I write out the vectors
themselves it's the vector n1, n2, n3 being dotted with-- well,
if I take x minus x0, that's just the scalar x
minus the scalar x0. The first term subtracted. And then the scalar y
minus the scalar y0. And then the scalar z
minus the scalar z0. We know that this whole thing
has to be equal to 0 because they're perpendicular. And then if we take the dot
product here, we get n1 times x minus x0 plus n2 times y minus
y0 plus n3 times z minus z0 is equal to 0. And you might not completely
recognize it, but this is-- you'll have to do a little
algebra to clean it up-- but this is the form ax plus by
plus cz is equal to d. And actually, I think I
made a mistake here. This should be not 0,
this is equal to d. This is the general form
for a plane in R3. A plane is just a linear
surface in R3. I shouldn't have written
a 0 there. So this does take this form. And if you don't believe
me, we can do it with an actual example. So let's say we have--
I gave you my normal-- I specify a plane. If I give you a normal vector
and I tell you that normal vector is the point 1, 3, minus
2 and I say that it intersects the point, or a point
that lies on the plane-- The normal vector and the point
don't necessarily have to intersect. But let's say for a point that
lies on the plane, I have the point 1, 2 and 3. And I say give me the equation
for this plane. Well, I would say well, if I
take any other point on that plane-- so if I take any other
point on that plane, xyz and it's specified by this vector,
the vector that's defined by the difference between
these two is going to lie on the plane. This point and this point
lie on the plane, so the difference between these two
vectors, the whole vector will lie on the plane. Let me take the difference. So x minus x0 is equal to x
minus 1, y minus 2, and then z minus 3. I'm saying this will
lie on the plane. This is on the plane. And it's going to
be perpendicular to our normal vector. So if I dot my normal vector, 1,
3, minus 2, with this thing right here, with x minus 1,
y minus 2, z minus 3, I should get 0. Because this has to be
perpendicular to anything that lies on the plane. So what do we get? We get 1 times x minus
1 is x minus 1. Plus 3 times y minus 2. Just taking the dot product. Minus 2 times z minus
3 is equal to 0. Let's if we can do a little bit
of algebra here to clean this up a little bit. I get x minus 1 plus 3y
minus 6 minus 2z plus 6 is equal to 0. And let's see. Minus 6 and a plus
6 cancel out. And then I can take
this minus 1. I could add 1 to both sides and
I get x plus 3y minus 2z-- add that 1 to both sidess--
is equal to 1. And there you have it. Just by using the simple fact
that this is a point on the plane and this is a normal
vector, I was able to use the idea that this has to be normal
or its dot product with any point, with any vector that
lies on the plane, I was able to get this right here. I didn't have to go
through this whole business right here. You could have just used this
formula right here. You could have just said n1
is 1 times x minus x1. Or x0 I could call it. So x minus this 1 plus n2, 3
times y minus 2 plus minus 2 times z minus 3 is equal to 0. And then if you just did
a little bit of math. a little bit of algebra, you
would've gotten there. So hopefully find this
reasonable useful. This is actually quite useful
if you ever have to do anything that involves any
type of three-dimensional mathematics. And if you ever become a game
programmer this would be-- there's thousands of
other applications. But this is kind of a useful
byproduct of some of the formal mathematics that
we've been doing.",Defining a plane in R3 with a point and normal vector | Linear Algebra | Khan Academy,"Determining the equation for a plane in R3 using a point on the plane and a normal vector

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/linear-algebra-cross-product-introduction?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/defining-the-angle-between-vectors?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,UJxgcVaNTqY
Transposeofamatrixproduct_Matrixtransformations_LinearAlgebra_KhanAcademy-UdHgWK13x5I.en.csv,"I've got a handful
of matrices here. I have the matrix A
that's an m by n matrix. You can see it has n
columns and m rows. And actually let me
throw in one entry there. It might be useful. This is the jth column. So the row is going to
look like this-- amj. That's that entry right there. And then I have matrix
B defined similarly, but instead of being an m by n
matrix, B is an n by m matrix. And so this entry right here. Let me just-- I realize
this might be useful. This is going to be my nth row. And it's going to
be my jth column. And then I also wrote
out their transposes. So if you look at the transpose
of B, B was an n by m matrix. Now the transpose is going
to be an m by n matrix. And each of its rows
become its columns. And the same thing I did for A.
It's transpose is right there, A was m by n. The transpose is n by m. And each of these rows
because each of these columns. Now fair enough. Let's define two new
matrices right now. Let's define the matrix
C. Let me do it over here. I think the real estate will
be valuable in this video. Let's define my
matrix C as being equal to the product of A and B. So what are going to
be the dimensions of C? Well, an m by n matrix times
an n by m matrix, these two have to be equal even for the
matrix product to be defined. And that's going to result
with an m by m matrix. Now let's define another matrix. Let's call it D. And
it's equal to B transpose times A transpose. And the dimensions are going
to be the same, because this is an m by n times an n by m. So these are the same. So which is a requirement for
this product to be defined. And so the dimensions of
B are going to be m by m. So let's explore a little bit
what the different entries of C are going to look like. So let me write my
matrix C right here. So it's just going to have a
bunch of entries-- c11, c12, all the way to c1m. You can imagine because
it's an m by n matrix, you're going to
have cmm over here. You know how this drill goes. But what I'm
curious about is how do we figure out what
the general cij is? How do we figure out what
a particular entry is? We know that C is the
product of A and B. So to get to a
particular entry in C-- and we've seen this
before-- so cij-- It's going to be--
you can view it as the dot product
of the ith row in A with the jth column
in B, just like that. And what's that
going to be equal to? It's going to be equal to ai1
times b1j plus ai2 times b2j. And you're just
going to keep going until you get to
the last term here, ain times the last
term here, bnj. Fair enough. Now what about our matrix D? What are its entries
going to look like? So D, similarly, it's
going to look like-- you're going to have d11, d12,
all the way to d1m. You're going to have dmm. I could keep putting
entries here. But I'm curious about just
that sum in general entry here. Let's say I want
to find d sub ji. That's what I want to find. So I want to find a general way
for any particular entry of d. The jth row and
ith column, which is a little bit different
than the convention we normally use
for these letters. But it's fine. The first one is D's row. The second one is D's--
is this entry's column. So how do we figure that out? So d sub j i. It's going to be equal to-- D is
the product of these two guys. So to get the jth row and
ith column entry here, we essentially take the
dot product of the jth row here, which is that right there,
with the ith column of A, which is that right there. So I'm going to take
the dot product of that. And you might already see
something interesting here. This thing right here is
equivalent to that thing right there. And this thing right here
is equivalent to that thing right there, because
we took the transposes. But let's actually
just write it out. So what is this dot product
going to be equal to? Well, it's going to be bij. Let me write it this way. It's going to bij times ai1. Or we could write
it as ai1 times b1j. And it's going to be
plus b2j times ai2, which is the same thing
as ai2 times b2j. And you're going to keep going
until you get b and j times ain. Or you could write
that as ain times bnj. Now notice something. These two things are equivalent. They're completely
equivalent statement. The d sub ji is
equivalent to c sub ij. Let me write that. Or I could write c sub ij
is equivalent to d sub ji. Or another way you could say
it is, all the entries that's at row i, column j in C is
now in row j, column i in D. And this is true
for all the entries. I stayed as general as possible. So what does this mean? This is the definition
of a transpose. So we now get that C
transpose is equal to D. Or you could say that C
is equal to D transpose. Now this is pretty
interesting, because how did we define these two? We said that our matrix C is
equal to the matrix product A and B. And we said that D is
equal to our matrix product B transpose times A transpose. I did those definitions
right there. Here are the definitions. And now we just found out that D
is equal to the transpose of C. So we could write that
C transpose, which is the same thing as A times
B transpose, is equal to D. So it is equal to D, which is
just B transpose A transpose. And this is a pretty
neat takeaway. If I take the product
of two matrices, and then transpose it, it's
equivalent to switching the order, or transposing
them, and then taking the product of the
reverse order-- B transpose, A transpose--
which is a pretty, pretty neat take away. And you could
actually extend this to an arbitrary
number of matrices that you're taking
the product of. I'm not proving it
here, but it's actually a very simple extension
from this right now. If you take the
matrices, let's say A-- let me do different
letters-- X, Y, Z, if you take their product
and then transpose it, it's equal to Z transpose,
Y transpose, X transpose. I haven't proven
this general case, and you could keep doing
it with four or five or n matrices multiplied by each
other, but it generally works. And you could
essentially prove it using what we proved
in this video right here, that you take the
product of two matrices, take their transpose,
it's equal to the product of their transposes
in reverse order.",Transpose of a matrix product | Matrix transformations | Linear Algebra | Khan Academy,"Taking the transpose of the product of two matrices

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-transposes-of-sums-and-inverses?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-determinant-of-transpose?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,UdHgWK13x5I
2ndorderlinearhomogeneousdifferentialequations3_KhanAcademy-UyCwAFQt4v0.en.csv,"In the last video we had this
second order linear homogeneous differential
equation and we just tried it out the solution y is equal
to e to the rx. And we figured out that if you
try that out, that it works for particular r's. And those r's, we figured out in
the last one, were minus 2 and minus 3. But it came out of factoring
this characteristic equation. And watch the last video if
you forgot how we got that characteristic equation. And we ended up with this
general solution for this differential equation. And you could try it
out if you don't believe me that it works. But what if we don't want the
general solution, we want to find the particular solution? Well then we need initial
conditions. So let's do this differential
equation with some initial conditions. So let's say the initial
conditions are-- we have the solution that we figured
out in the last video. Let me rewrite the differential
equation. So it was the second derivative
plus 5 times the first derivative plus 6 times
the function, is equal to 0. And the initial conditions we're
given is that y of 0 is equal to 2. And the first derivative
at 0, or y prime at 0, is equal to 3. What does y equal at the point
0, and what is the slope at 0-- at x is equal to 0--
and the slope is 3. So how do we use these to
solve for c1 and c2? Well, let's just use the first
initial condition. y of 0 is equal to 2, which is equal
to-- essentially just substitute 0 in into
this equation. So it's c1 times e to the
minus 2 times 0, that's essentially e to the 0,
so that's just 1. So it's c1 times 1, which is
c1, plus c2 times e to the minus 3 times 0. This is e to the 0,
so it's just 1. So plus c2. So the first equation we get
when we substitute our first initial condition is essentially
c1 plus c2 is equal to 2. Now let's apply our second
initial condition that tells us the slope at x
is equal to 0. So y prime is 0. So this is our general solution,
let's take its derivative, and then
we can use this. So y prime of x is
equal to what? The derivative of this is equal
to minus 2 c1 times e to the minus 2x. And what's the derivative
of this? It's minus 3 c2 times
e to the minus 3x. And now we can use our initial
condition, y prime at 0. So when x is equal
to 0, what's the right-hand side equal? It's minus 2 times c1 and then
e to the minus 0, e to the 0, that's just 1. Minus 3 c2, and then once again
x is 0, so e to the minus 3 times 0,
that's just 1. So it's just 1 times
minus 3 c2. And it tells us that when x is
equal to 0, what does this whole derivative equal? Well, it equals 3, right? Y prime of 0 is equal to 3. So now we go back into your
first year of algebra. We have two equations-- two
linear equations with two unknowns-- and we could solve. Let me write them in
a form that you're probably more used to. So the first one is c1 plus
c2 is equal to 2. And the second one is minus 2
c1 minus 3 c2 is equal to 3. So what can we do? Let's multiply this
top equation by 2. There's a ton of ways to solve
this, but if you multiply the top equation times 2, you'll
get-- and I'll do this is a different color, just so that
it's changed-- I'm just multiplying the top one by 2,
you get 2 c1 plus 2 c2 is equal to 4. And now we can add these
two equations. Minus 2 c1 plus 2,
those cancel out. So minus 3 plus 2, you get
minus c2 is equal to 7. Or we could say that c2
is equal to minus 7. And now we can substitute
back in here. We have c1 plus c2-- c2 is minus
7-- so minus 7, is equal to 9, or we know that c--
oh sorry, no I'm already confusing myself. My brain was getting
ahead of myself. c1 plus c2, that's minus 7,
is equal to 2, right? I'm just substituting back
into this differential equation-- sorry, to this
equation, not a differential it's just a simple linear
equation-- and then we get c1 is equal to 9. And now we have our particular
solution to the differential equation. So this was our general
solution. We can just substitute our c1's
and our c2's back in. We have our particular solution
for those initial conditions. And I think that warrants
a different color. So our particular solution is
y of x is equal to c1, which we figured out is 9e to the
minus 2x, plus c2-- well, c2 is minus 7-- minus 7e
to the minus 3x. That is the particular solution
to our original differential equation. And it might be a good exercise
for you to actually test it out. This particular solution to this
differential equation. I'll do another example
in the next video. I'll see you soon.",2nd order linear homogeneous differential equations 3 | Khan Academy,"Let's use some initial conditions to solve for the particular solution.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/linear-homogeneous-2nd-order/v/2nd-order-linear-homogeneous-differential-equations-4?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/linear-homogeneous-2nd-order/v/2nd-order-linear-homogeneous-differential-equations-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,UyCwAFQt4v0
DoublyLinkedList-ImplementationinC_C++-VOQNf1VxU3Q.en.csv,"In our previous lessons, we saw what
doubly linked list are. Now in this lesson, we're going to
implement doubly linked list in C. We are going to write simple
operations like insertion, traversal and deletion. In a doubly
linked list as we saw in our previous lessons Each node contains three fields. I have
drawn logical representation of a doubly linked list. One to
store data one to store address of next node and
one to store address of previous node. For a linked list of integers node
will be defined like this in a C or C++ program. In the
logical representation i'll fill in some data in each node. Let's say these node are at address 400, 600 and 800 respectively. I'll also fill in
next and previous fields, and we must also have a pointer variable
pointing to the head node. Quite often we name this pointer variable
head. In my implementation I'm going to write
these functions. I'm going to write a function to insert
a node at beginning of head of linked list. This function will
take an integer as argument. I'll write another function to
insert a node at tail of linked list. I'll write one function to
print element in a linked list, while
traversing it from head to tail. I'll write another one to print the
elements in reverse order while traversing the
list from tail to head. Reverse print function
will validate whether reverse link for each
node is created properly or not. Let's now write these functions in a
real C program. In my C program here, I have define node as
a structure with three fields. first field is of type Integer to store data, second field is of type pointer to
node to store a reference of next node and
the third field is a pointer to know to store the
reference of previous node. I have defined a variable named head
which once again is a pointer to node and I have defined this variable in
global scope, head is a global variable. When we defined
a variable inside a function its called a local variable. The lifetime of local
variable is lifetime of a function call, it's created during a
function call execution and it's cleared from the memory when function call execution finishes
but global variables live in the memory for
a whole lifetime of an application, they live till the time
program is executing. Global variables can be accessed everywhere
in all functions. Local variables are not accessible
everywhere unless you access them through pointers. In all our previous
implementations, we have mostly declared head as global
variable. Okay so let's now write the functions.
The first function that I want to write is insert at head. This function will take an integer as argument. The
first thing that we want to do here is we want to create a node, we can always
declare a node like this, just like declaration of any other
variable, we can say struct node and then we can give an identifier or name, and now in this my node that i have created, i
can fill in all the fields but the problem here is that when i'm
creating a node like this, I'm creating it as a
local variable and it will be cleared from memory when
function call will finish. A local variable lives in what we call
stack section of applications memory and we cannot
control its lifetime, it's cleared from memory when function
call finishes. We do not want this. Our requirement is
that a node should be in memory unless we explicitly remove
it. So that's why we create a node in in dynamic memory or what we call heap
section of memory. Anything in heap is not cleared
unless we explicitly free it. To create a node in heap we use
malloc function in C or new operator in C++. All
malloc function does is, it reserves some memory in heap and this memory can be used for writing
anything any variable any object. Access to this memory always happens through
a pointer variable. We have talked about this concept quite
a bit in our previous lessons, but I keep on repeating because this is
really important concept. So here with this statement i have
created a node in dynamic memory or heap, that can be reference through a variable
which is pointer to node. I have named this variable temp. Now I
can used this pointer variable to fill in
values in various fields of the node. I'll have to dereference this pointer
variable using asterisk operator, and then I can access various feilds like
data, prev or next.  There is an alternate syntax for this (*temp).data, we can simply write 
temp-&gt;data and similarly I can access other fields
also. So to access prev field, i can say
temp-&gt;prev. Let's set this as null and let's
also set the next field as null. If you want to understand or refresh the
concept of stack and heap in memory, then you can
check the description of this video for a link to a lesson on dynamic memory
allocation. Okay so in my function InsertAtHead, i
have created a node in heap section of memory and I'm
referencing that node using this pointer variable named temp. Temp is not have a very meaningful name.
Let's use a name like newNode or newNode
pointer. I would like to separate out this logic
of node creation, these lines for node creation in a
separate function. I've written a function here, named get
newNode that will take an integer as arguement create a node filling in data field as X and setting both previous and next
pointers as null. This function will return a
pointer to node, so i will return new node from here. I'm
writing a separate function because I can avoid duplicate code by using a separate function for creation of node
because I'm going to create a node for function in function InsertAtHead
as well as in function InsertAtTail that i'll be
writing after some time. Now in InsertAtHead function I can
simply call this function GetNewNode   passing it X. This function is returning a pointer
to newly created node  that I'm going to receive in this
variable which once again is a pointer to node named temp. We can name this variable also as newNode. This newNode in InsertAtHead is different from this
newNode in getNewNode. These are local variables, this newNode
is local to InsertAtHead and this newNode is local to getNewNode. Now there will be
two cases in insertion at head. List could be empty so
head will be equal to null. In this case we can simply set head as
to address of new node, and return or exit. Things would be
clear if i'll show everything in logical view also.
Right now my linked list is empty here. In this
logical view that I'm showing, let's say I have made a call to  InsertAtHead
passing it number 2. GetNewNode function will give me a
new node. Let's say a new node is created at address
400. With this statement head equal newNode, we are 
setting the address stored in newNode variable in head.
Null is nothing but address zero. As soon as
this function InsertAtHead finished this variable newNode will be cleared from memory, but the node
itself will not be cleared. If we would have created a node like this,
struct node newNode and in this declaration newNode is not
pointer  to node. Its node, we are not saying struct node* so if we would have created node like this.
The node also would have been cleared. Okay coming back
to the function here, let's write rest of the logic. To insert a node when list is not empty
this is what I'll do. Now I'm making the call InsertAtHead
passing at number 4. Once new node is created, I'll first set the
previous field of existing existing head node as address
of this new node. So I'm building this link, then i'll set the
next field of new node as the address of current head and now I can
break this link and build this link so I'll set head as address of new node. this is how things will
still look like finally. Let's also quickly see how things will
actually move in various sections of applications memory. The memory that is
allocated to a program is typically divided into these four segments. We have seen this diagram quite a bit in
our earlier lessons. Code or text segments stores all the
instructions to be executed. There is a segment to
store global variables. There is a section that
we call stack, that is used just like scratch pad on
whiteboard for function call execution. Stack is where
all the local variable go and not just local variable, all
information about function call  execution. Heap is what we also a dynamic memory.
I'm showing stack heap and global section separately here. In our
program we had to decleared head as a global variable. Initially for an empty list, we will set
head as null or zero. Let's say we will do that in
main function. Now when a call to insert at head is made
at this stage, let's say I'm making the call passing
number two as argument. Let's say we are making a call to
InsertAtHead from main function. When program starts execution first main
function is invoked, whenever a function is invoked some
amount of memory from the stack is allocated for
execution of that function. That section is called stack frame of
that function and all the local variables of that
function live inside it's stack frame. When function call
execution finishes the stack frame is reclaimed. When
main will make a call to InsertAtHead, the execution of main will pause at at the line where it's making a call. A
stacke frame will be allocated for execution of InsertAtHead.
I am writing shortcut IAH for InsertAtHead because I'm short of space here. All the
arguments of insert at had all the local variables
will live inside this stack frame. We are creating a variable name newNode
named newNode which is a pointer to node as local variable and we are making a
call to get newNode function. Execution of InsertAtHead will pause 
and we will go on to execute getNewNode. We could
write GetNewNode like this. Here I'm treating a node on stack. x is a
local variable in GetNewNode also.  Then i'm creating a node filling in
data as the value of X which is 2. i'm setting
previous and next feilds as null or zero and then because I need
to return a pointer to node, I have used &amp;
operator here. Using &amp; operator gives us pointer
to a variable, Let's say this new node that we have in the stack frame of 
GetNewNode, has address 50. With this return when GetNewNode will
finish, the value in this newNode of insert at head will be 50. Please note that with this code this newNode
in GetNewNode function is of type struct node, while this newNode in insert at head is of type pointer to
struct node so there different types. We can return
this address 50, that's fine but the stack frame for GetnewNode
will be reclaimed once the function finishes. So now even
though you have the address 50 there is no node there. We cannot control
allocation and the deallocation of memory on stack. It happens automatically that's
why we use a memory on heap. If I'm using this code for creation of
new node, then what I'm doing is I'm declaring this variable new node, not
as strut node but as struct node*
that is pointer to node. I'm using malloc to create the actual
node in heap section. Let's say i'm getting address 400 for this
node. Now for a section of memory in heap for something in heap, we cannot have a
direct name. The only way to access some thing heap
is through a pointer. If we will lose this pointer we will lose
this node. Okay so now what we're doing is using
this pointer new node which is local to GetNewNode function. We are accessing this
node filling in date, filling in address fields and
now the at returning this address 400. Now when GetNewNode is finishing, I'm
collecting the return this address for 400 in this variable in this local
variable newNode. We are returning back to insert at head
function at this line. Head at this stage is null.
So now we're saying that set head equal equal newNode. Head is a global variable, it's
not going to be cleared for whole life time of application and
now we are returning. Stack frame of insert at head will be
cleared and this is what we finally have. When we will make another call to insert
at head, once again fresh stack frames will be allocated in
the execution of functions appropriate links will be created So our linked list will be modified
accordingly. I hope all of this is making some sense.
With another call to insert at head, when everything will finish and control will
return back to main. We can have a picture like this. Let's say
I got a node at 600. Right cell is for next node. Right cell is
storing the address of next node and left cell is storing the address of
previous node. So this will and this is what we will have. Let's now
go and write rest of the functions. Print function will be same as printing for
singly linked list. We will take a temporary pointer to node
initially set it to head, and then we will use this
statement temp=temp-&gt;next to go to the next node and we will keep on printing. In reverse
print we will first go to the end node of to list using
next pointer, and then be will traverse backward using
this statement temp=temp-&gt;prev. So we will use the previous
pointer and while traversing backward will print the data. Okay let's now test all these
functions that we have written so far. In the main function, i'm setting head as
null to say that the list is empty initially, and now I'm writing couple of
inserts statements. I'm making couple of calls to
InsertAtHead function and after each call i'm printing the list both in forward as
well as in reverse direction. Let's run this code
and see the output. This is what I'm getting and I think
this is as expected. There is one more function insert at tail
that i have said i'll write. if you have understood thing so far, it
should not be very difficult for you to write this function InsertAtTail. I leave this as an exercise for you. I'll
stop here now If you want to get the source code, check
the description of this video for a link. In coming lessons we're going to talk
about circular linked list and we will see some more interesting
problem on linked list. Thanks for watching.",Doubly Linked List - Implementation in C/C++,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have implemented doubly linked list data structure in C. We have written basic operations for traversal and insertion.

See source code here:
https://gist.github.com/mycodeschool/7429492

Lesson on Dynamic memory allocation:
https://www.youtube.com/watch?v=_8-ht2AKyH4

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,VOQNf1VxU3Q
Uppertriangulardeterminant_Matrixtransformations_LinearAlgebra_KhanAcademy-VX7K8iqoiRc.en.csv,"Let's say I have a matrix where
everything below the main diagonal is a 0. And I'll start-- just for the
sake of argument, let's start with a 2 by 2 matrix. I have the values
a, b, 0, and d. Instead of a c, I have a 0
there, so everything below the main diagonal is a 0. What is the determinant
of this going to be? Let's call that matrix a. The determinant of a is going
to be equal to ad minus b times 0. That's just a 0, so you don't
have to write it. It's equal to a times d. Now, let's say I have
another matrix. Let's call it b. We'll say it's a
3 by 3 matrix. And let's say its entries
are a, b, c. We've got a 0 here. Then you-- let's say you have
a d here, e, then you have another 0 here, another 0
here, and you have an f. Once again, all of the entries
below the main diagonal are 0. What's this guy's determinant? Well, we learned several videos
ago that you can always pick the row in the column that
has the most 0's on it. That simplifies your
situation. Let's find the determinant along
this column right here. The determinant of b is going
to be equal to a times the submatrix if you were to ignore
a's row and column. a times the determinant of d,
e, 0, f, and then minus 0 times its submatrix. You could cancel out-- or times
the determinant of its submatrix, that row
and that column. You'd get b, c, 0, f. And then you have plus 0 times--
you get rid of that row, that column, you
get b, c, d, e. Obviously, these two guys
are going to be 0. I don't care what these 2 by
2 matrices-- what their determinants end up
evaluating to. These are both going to be
equal to 0, because we're multiplying by 0. We're left with a times the
determinant of this, and the determinant of this is pretty
straightforward. We're going to have-- it's just
going to be equal to a times the determinant of this,
which is df minus 0 times e. It's just going to be df. The determinant of b is adf. Notice that the determinant
of a was just a and d. Now, you might see a pattern. In both cases we had 0's below
the main diagonal, right? This was the main diagonal
right here. And when we took the
determinants of the matrix, the determinant just ended up
being the product of the entries along the
main diagonal. And if you think that that's
a general trend that always applies, you are correct. We can do it in the
general case. Let's do it with our
general case. Let's say we have some matrix,
a, and it is equal to a, 1, 1. And you have a, 2, 2. You're going to have
a 0 right there. And then you just keep going all
the way down to a, n, n. In this row, everything's going
to be a 0, except for that last column. This is all a 0 right here. So everything below the main
diagonal is a 0, just like this one, but we're doing it
in the general n by n case. And everything up here is--
well, it doesn't have to be 0. This is a, 1, 2, all
the way to a, 1, n. This is a, 2, n. Keep going down. So everything at the main
diagonal or above isn't necessarily equal to 0. If you wanted to find the
determinant of a, we could do the same thing we did here. We could go down that first
row right there. The determinant of our matrix,
a, is equal to this guy-- a, 1, 1-- times the determinant
of its submatrix. That's going to be a, 2, 2. It goes all the way to a, 2, n,
and then a, 3, 3, all the way to a, n, n. And then, everything down here
is-- these are all 0's. Once again, we have another
situation where all of the entries below the main
diagonal are 0. What's the determinant of
this guy right here? And what-- you might say
hey, what about the rest of that row? Well, the rest of the row is
just a bunch of 0's, just like we had here. 0 times the determinant of its
submatrix, and then that would be a minus and a plus. 0 times the determinant of its
submatrix, so on and so forth. We just have to pay attention
to this term right there. Now, the same argument
we can do here. To find this determinant, we
can just go down that row. The determinant of this is just
going to be equal to-- let's write out-- let's not
forget our a, 1, 1 out there. The determinant of this is going
to be a, 2, 2 times the determinant of its submatrix. Get rid of its row and its
column, and you're just left with a, 3, 3 all the way
down to a, n, n. Everything up here is non-zero,
so its a, 3n. Then everything below the
diagonal, once again, is just a bunch of 0's. Everything down here
is a bunch of 0's. This is another of
what we call an upper triangular matrix. Let me write that down. This whole class, where you
have 0's below the main diagonal, these are called upper
triangular matrices. Matrices, just like that. Now, we keep doing the process
over and over again. If you just keep following this
pattern over and again, now you're going to have the
determinant of this is a, 3, 3 times its submatrix. And every time, the
submatrix is getting smaller and smaller. You'll eventually get to a, 1,
1 times a, 2, 2 times-- all the way to an minus 2 times
a 2 by 2 matrix over here. This is going to be an minus
1, n minus 1, an. Then this is going to be
a sub n minus 1, n. Then you're going to have
a 0 right here. It's just the bottom right-hand
corner of our original matrix, is what you're
going to be left with. And what is the determinant
of this? Well, it's just the product
of these two things. It's just this guy times this
guy minus this guy times that guy, but that's just 0. The determinant of a ends up
becoming a, 1, 1 times a, 2, 2, all the way to a, n, n, or
the product of all of the entries of the main diagonal. Which is a super important take
away, because it really simplifies finding the
determinants of what would otherwise be really hard
matrices to find the determinants of. You could imagine if this
was a 100 by 100 matrix. Now, we could just multiply
the diagonal. Just to make sure that
things are clear, let me do an example. Let's say we find the
determinant of 7, 3, 4, 2. So we have 0's here. This is a minus 2, 1, and a 3,
a 0 here-- sorry, we don't want 0's there. We don't need to
have 0's there. 6, 7-- we actually could have
0's there, but we don't need to have 0's there. And a 0 there, and we
have 0's there. Just like that. So its upper triangular matrix--
if you want to evaluate this determinant, you just multiply
these entries right here. The determinant is equal to 7
times minus 2 times 1 times 3. So it's 7 times minus 6 which
is equal to minus 42. And it's that easy.",Upper triangular determinant | Matrix transformations | Linear Algebra | Khan Academy,"The determinant of an upper triangular matrix

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-simpler-4x4-determinant?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-determinant-after-row-operations?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,VX7K8iqoiRc
Determinantwhenrowisadded_Matrixtransformations_LinearAlgebra_KhanAcademy-VrB3LaSD_uo.en.csv,"Let's keep messing with our
determinants to see if we can get more useful results. And they might not be obviously
useful right now, but maybe we'll use them later
when we are exploring other parts of linear algebra. So let's say I have
some matrix, let's call it matrix X. Matrix X is equal to-- I'll just
start with a 3 by 3 case because I think the 2 by 2
case is a bit trivial. Actually, why don't I just
start with a 2 by 2 case. Let's say matrix X is a, b,
and then it has x1, x2. I could have called these c and
d, but you'll see why I called them x1 and
x2 in a second. And I'll say I have
another matrix. Let's say matrix Y is identical
to matrix X except for this row. So matrix Y is a, b y1 and y2. And let's say we have
a third matrix Z. That's identical to the first
two matrices on the first row. So a, b. but on the second row it's
actually the sum of the two rows of x and y. So it's going to be, this
entry's going to be x1 plus y1, and this entry right
here is x2 plus y2. Just like that. I want to be very clear,
Z is not X plus Y. All of the terms of Z are
not the sum of all the terms of X and Y. I'm only focusing on
one particular row. And this is just a general theme
that you'll see over and over again, and we saw it in
the last video and I guess you'll see it here, is that
determinants or finding the determinants of matrices
aren't linear on matrix operations, but they are linear
on operations that you do just to one row. So in this case, everything else
is equal except for this row, and Z has the same first
row as these guys, but its second row is the sum of the
second row of these guys. So let's explore how
the determinants of these guys relate. So the determinant-- let
me do it in X's color. The determinant of X-- I'll
write it like that-- is equal to a ax2 minus bx1. You've seen that
multiple times. The determinant of Y is equal
to ay2 minus by1. And the determinant of Z is
equal to a times x2 plus y2 minus b times x1 plus y1, which
is equal to ax2 plus ay2-- just distributed the
a-- minus bx1 minus by1. And if we just rearrange things,
this is equal to a-- let me write it this
way-- this is equal to ax2 minus bx1. That's that term and that term,
we switched colors. So that's those two guys. And then plus ay2 minus by1. Now what is this right here? That is the determinant of X. And this right here is
the determinant of Y. So there you have it. If we have matrices that are
completely identical except for one row-- and in this case
it's a 2 by 2 matrix, so it looks like half of the matrix--
and Z's, that row that we're referring to that's
different, Z's is the sum of the other two guys' rows, then
Z's determinant is the sum of the other two determinants. So this is a very
special case. I want to keep reiterating it. It only works in the case where
this row and only this row is the sum of this row and
this row, and the matrices are identical everywhere else. Let me show you the 3 by 3 case,
and I think it'll be a little bit more general. And then we'll go to n by n. The n by n is actually, on some
level, the easiest to do, but it's kind of abstract so I
like to save that for the end. So let's redefine all those
guys into the 3 by 3 case. So let's say that X is equal
to a, b, c-- let's just do, let's make the third row the
row we're going to use to determine our determinant. a,
b, c, d, e, f-- actually let me do the middle row, because I
don't want to make you think it always has to be
the last row. So let's say it's x1, c2, x3,
and you have d, e, f. And what's the determinant
of X going to be? The determinant of X is going
to be equal to-- let's say we're going along this
row right here, that's the row in question. It's going to be equal to--
well you remember your checkerboard pattern-- so it's
going to be-- remember, plus, minus, plus, minus, plus--
you remember all the rest how it goes. So it's going to start with
a minus x1 times the sub matrix-- you get rid of that
column, that row-- b, c, e, f. Then you have plus x2 times the
sub matrix-- get rid of that column, that row--
a, c, d, f. And then finally minus x3--
you get rid of its row and column-- you have a, b, d, e. Now let me define another matrix
Y that is identical to matrix X, except for that row. So it's a, b, c. Then down here d, e, f. That middle row is different. It's y1, y2, and y3. What's the determinant
of Y going to be? Determinant of Y? Well it's going to be identical
to the determinant of X because all the
sub-matrices are going to be the same when you cross
out this row and each of the columns. But the coefficients are
going to be different. Instead of an x1,
you have a y1. So it's going to be equal to
minus y1 times the determinant b, c, e, f plus y 2 times the
determinant of a, c, d f minus y3 times the determinant
of a, b, d, e. I think you see where
this is going. Now I'm going to create
another matrix. I'm going to create another
matrix Z just like that that is equal to-- it's identical to
these two guys on the first and third rows, a,
b, c, d, e, f. Just like that. But this row just happens
to be the sum of this row and this row. And when we figured out this
determinant we went along that row-- you can see that
right there. So this row right here is going
to be x1 plus y1, that's its first term. x2 plus y2, and then you
have x3 plus y3. Now what's the determinant
of Z going to be? Well, we can go down this
row right there. So it's going to be minus x1
plus y1 times its sub-matrix-- get rid of that row, that
column-- you get b, c, e, f. I think you definitely see
where this is going. Plus this coefficient, plus x2
plus y2 times its sub-matrix-- get rid of that row, that
column-- a, c, d, f. And then you have minus this
guy right here, x3 plus y3 times its sub matrix-- get
rid of that column and row-- a, b, d, e. Now what do you have
right here? This is the determinant of Z. This right here is the
determinant of Z. This thing right here. I think you can see immediately
that if you were to add this to this you would
get this right here, right? Because you have this
coefficient and this coefficient on that. If you added them up you would
get minus x1 plus y1. This guy and this guy
add up to this guy. And then if I were to do
this guy and this guy, add up to that guy. Let me do another one. And then finally that
term plus that term add up to that term. So you immediately see that the
determinant, or hopefully you immediately see, that the
determinant of X plus the determinant of Y is equal
to the determinant of Z. So we did it for the 2 by
2 case, we just did it for the 3 by 3 case. Might as well do it for
the n by n case so we know that it works. But the argument is identical
to this 3 by 3 case. So that's good to keep in your
mind because 3 by 3 is easy to visualize, n by n is sometimes
a little bit abstract. So let me re-define
my matrices again. I'm just going to do the
same thing over again. So I'm going to have
a matrix X. But it's an n by n matrix. So let me write it this way. Let's say it is a 1, 1, a 1,
2, all the way to a 1, n. And there's some row here, let's
say that there's some row here on row i-- let's call
this row i right here-- and here it has the terms x1, x2,
all the way to xn, but everything else is just
the regular a's. So then you have a-- let
me make this as a21, all the way to a2n. And then if you went all the way
down here you would have an1, and you'd go all
the way to ann. So essentially you could imagine
our standard matrix where everything is defined in
a, but I replaced row i with certain numbers that are maybe
a little different. And I think you'll see
where I'm going. Now let me define
my other matrix. Let me define matrix Y. Let me define matrix Y to be
essentially the same thing. This is a11-- it's
the same a11. This is a12, all
the way to a1n. This is a21, we could go
all the way to a a2n. And then on row i, the same row,
this is n by n, this is the same n by n-- if this was
10 by 10, this is 10 by 10. If this is row seven, then
this is row seven. It has different terms. It's
identical to matrix X except for row i. In row i it is y1, y2,
all the way to yn. And if you keep going down, of
course, you have an1, all the way to ann. Fair enough. Now let's say we have
a third matrix. Let's have a third matrix. Let me draw it right here. So you have Z, Z is equal to--
I think you could imagine where this is going. Z is identical to these two
guys except for row i. So let me write that out. So Z looks like this. You have a11, a12, all
the way to a1n. And then you go down and then
row i happens to be the sum of the row i of matrix
X and matrix Y. So it is x1 plus y1, x2 plus y2,
all the way to xn plus yn. And then it you keep going
down, everything else is identical, an1 all
the way to ann. So all of these matrices are
identical except for row X has a different row i than
matrix Y does. And row Z is identical
everywhere except its row i is the sum of this row
i and that row i. So it's a very particular case,
but we can figure out their determinants. So what are the determinants? The determinant of X, the
determinant of matrix X-- and hopefully you're maybe a bit
comfortable with writing sigma notation, we did this
in the last matrix. We can go down this row right
there, and for each of these guys we can say so the
determinant is going to be equal to the sum. Let's say we start from j is
equal to 1-- j's going to be the column, so we're going to
take the sum of each of these terms from j is equal
to 1 to n. And then remember our
checkerboard pattern, so we don't know if this is a
positive or negative. We can figure it out by taking
negative 1 to the i plus j-- remember, this is the ith row
that we're talking about-- times xj-- xj is the
coefficient, xsubj, times the sub matrix for xsubj. So if you get rid of this
guy's row and this guy's column, what is it
going to be? We could say that that's the
same thing as the sub matrix, if we called this guy-- let me
write it this way-- if we got rid of this guy's row and this
guy's column, if we had just our traditional matrix where
this wasn't replaced. If we just had an ai1 here, ai2,
its sub matrix would be the same thing, because we're
crossing out this row and this column. So it would be all of these
guys and all of these guys down here. So it would be the sub matrix--
this is a n minus 1 by n minus 1 matrix-- it would
be the sub matrix for aij. That's for the first term--
sorry, the determinant. Don't want to lose the
determinant there-- times the determinant of the
sub matrix aij. And so that's for the first
term, and then you're going to add it to the second term, and
then you're just going to keep doing that. That's what this sigma
notation is. That's the determinant of X. Now what's the determinant
of Y? The determinant of Y is equal
to the sum-- we could do the same thing-- j is equal to
1 to n of negative 1 to the i plus j. We're going to go along this row
right here, the ith row. So we're going to have ysubj--
right, we're going to start with ysub1, then plus ysub2,
times the determinant of its sub matrix, which is
the same as the determinant of this sub matrix. So you get rid of that row and
that column for each of these guys, that everything else on
the matrix is the same. So aij. The matrix of aij. Now what is the determinant
of Z. I'm pretty sure you know exactly
where this is going. The determinant-- this should
be a capital Y right there-- the determinant of Z is equal to
the sum, from j is equal to 1 to n, of negative
1 to the i plus j. We're going along this row. But now the coefficients are xj,
that's what we're indexing along, xj plus yj. And then times its sub matrix,
which is the same as these sub matrices. So aij, which you might
immediately see is the sum of these two things. If I, for every j, I just summed
these two things up, you're having two coefficients--
you could have this coefficient and that
coefficient on your aij term, and then when you add them up
you can factor this guy out and you will get this
right here. So you get the determinant of X
plus the determinant of Y is equal to the determinant of Z. So hopefully that shows
you the general case. But I want to make it very
clear, this is just for a very particular scenario where three
matrices are identical, except for on one row. And one of the matrices on that
special row just happens to be the sum of the other two
matrices for that special row, and everything else
is identical. That's the only time where the
determinant of-- not the only time, but that's the only time
we can make the general statement where the determinant
of Z is equal to the determinant of X plus
the determinant of Y. It's not the case-- let me write
what is not the case-- so not the case that if Z is
equal to X plus Y, it is not the case that the determinant
of Z is necessarily equal to the determinant of X plus
the determinant of Y. You cannot assume this. Determinant operations are not
linear on matrix addition. They're linear only on
particular rows getting at it. Anyway, hopefully you found
that vaguely useful.",Determinant when row is added | Matrix transformations | Linear Algebra | Khan Academy,"The determinant when one matrix has a row that is the sum of the rows of other matrices (and every other term is identical in the 3 matrices)

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-duplicate-row-determinant?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-correction-scalar-muliplication-of-row?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,VrB3LaSD_uo
Vectordotproductandvectorlength_Vectorsandspaces_LinearAlgebra_KhanAcademy-WNuIhXo39_k.en.csv,"  We've already made a few
definitions of operations that we can do with vectors. We've defined addition in
the context of vectors and you've seen that. If you just have two vectors,
say a1, a2, all the way down to a n. We defined the addition of this
vector and let's say some other vector, b1, b2,
all the way down to bn as a third vector. If you add these two, we defined
the addition operation to be a third-- you will result
in a third vector where each of its components are
just the sum of the corresponding components of the
two vectors you're adding. So it's going to be a1 plus b1,
a2 plus b2, all the way down to a n plus bn. We knew this and we've done
multiple videos where we use this definition of
vector addition. We also know about scalar
multiplication.   Maybe we should just call it
scaling multiplication.   And that's the case of look, if
I have some real number c and I multiply it times some
vector, a1, a2, all the way down to a n, we defined scalar
multiplication of a vector to be-- some scalar times its
vector will result in essentially, this vector were
each of its components are multiplied by the scalar. ca1, ca2, all the way
down to c a n. And so after seeing these two
operations, you might be tempted to say, gee, wouldn't
it be nice if there was some way to multiply two vectors. This is just a scalar times a
vector, just scaling it up. And that's actually the actual
effect of what it's doing if you visualize it in three
dimensions or less. It's actually scaling the
size of the vector. And we haven't defined size,
very precisely just yet. But you understand at least
this operation. For multiplying vectors or
taking the product, there's actually two ways. And I'm going to define one
of them in this video. And that's the dot product.   And you signify the dot product
by saying a dot b. So they borrowed one of the
types of multiplication notations that you saw, but you
can't write across here. That'll be actually a different
type of vector multiplication. So the dot product is-- it's
almost fun to take because it's mathematically pretty
straightforward, unlike the cross product. But it's fun to take and it's
interesting because it results-- so this is a1, a2,
all the way down to a n. That vector dot my b vector: b1,
b2, all the way down to bn is going to be equal to the
product of each of their corresponding components. So a1 b1 added together plus a2
b2 plus a3 b3 plus all the way to a n, bn. So what is this? Is this a vector? Well no, this is
just a number. This is just going to
be a real number. You're just taking the product
and adding together a bunch of real numbers. So this is just going to be
a scalar, a real scalar. So this is just going to be
a scalar right there. So in the dot product you
multiply two vectors and you end up with a scalar value. Let me show you a couple of
examples just in case this was a little bit too abstract. So let's say that we take the
dot product of the vector 2, 5 and we're going to dot that
with the vector 7, 1. Well, this is just going to be
equal to 2 times 7 plus 5 times 1 or 14 plus 6. No, sorry. 14 plus 5, which
is equal to 19. So the dot product of this
vector and this vector is 19. Let me do one more example,
although I think this is a pretty straightforward idea. Let me do it in mauve. OK. Say I had the vector 1, 2, 3 and
I'm going to dot that with the vector minus 2, 0, 5. So it's 1 times minus 2 plus
2 times 0 plus 3 times 5. So it's minus 2 plus
0 plus 15. Minus 2 plus 15 is
equal to 13. That's the dot product
by this definition. Now, I'm going to make
another definition. I'm going to define the
length of a vector.   And you might say, Sal,
I know what the length of something is. I've been measuring things
since I was a kid. Why do I have to wait until a
college level or hopefully you're taking this before
college maybe. But what is now considered a
college level course to have length defined for me. And the answer is because we're
abstracting things to well beyond just R3 or just
three-dimensional space is what you're used to. We're abstracting that these
vectors could have 50 components. And our definition of length
will satisfy, will work, even for these 50 component
vectors. And so my definition of length--
but it's also going to be consistent with what
we know length to be. So if I take the length of a
and the notation we use is just these double lines
around the vector. The length of my vector a is
equal to-- and this is a definition. It equals the square root of
each of the terms, each of my components, squared. Add it up. Plus a2 squared plus all the
way to plus a n squared. And this is pretty
straightforward. If I wanted to take let's
call this was vector b. If I want to take the magnitude
of vector b right here, this would be what? This would be the square root
of 2 squared plus 5 squared, which is equal to the square
root of-- what is this? This is 4 plus 25. The square root of 29. So that's the length
of this vector. And you might say look,
I already knew that. That's from the Pythagorean
theroem. If I were to draw my vector
b-- let me draw it. Those are my axes. My vector b if I draw
it in standard form, looks like this. I go to the right 2. 1, 2. And I go up 5. 1, 2, 3, 4, 5. So it looks like this. My vector b looks like that. And from the Pythagorean theorem
you know look, if I wanted to figure out the length
of this vector in R2, or if I'm drawing it in kind
of two-dimensional space, I take this side which is length
2, I take that side which is length 5; this is going to be
the square root from the Pythagorean theorem of 2
squared plus 5 squared. Which is exactly what
we did here. So this definition of length is
completely consistent with your idea of measuring things
in one-, two- or three-dimensional space. But what's neat about it is that
now we can start thinking about the length of a vector
that maybe has 50 components. Which you know, really to
visualize it in our traditional way,
makes no sense. But we can still apply this
notion of length and start to maybe abstract beyond what
we traditionally associate length with. Now, can we somehow relate
length with the dot product? Well what happens if I
dot a with itself? What is a dot a? So that's equal to-- I'll
just write it out again. a1, all the way down to a n
dotted with a1 all the way down to a n. Well that's equal to a1 times
a1, which is a1 squared. Plus a2 times a2. a2 squared. Plus all the way down, keep
doing that all the way down to a n times a n, which
is a n squared. But what's this? This is the same thing
as the thing you see under the radical. These two things
are equivalent. So we could write our definition
of length, of vector length, we can write it
in terms of the dot product, of our dot product definition. It equals the square root of the
vector dotted with itself. Or, if we square both sides,
we could say that our new length definition squared is
equal to the dot product of a vector with itself. And this is a pretty neat--
it's almost trivial to actually prove it, but this is
a pretty neat outcome and we're going to use this
in future videos. So this is an introduction
to what the dot product is, what length is. In the next video I'm going
to show a bunch of properties of it. It will almost be mundane, but
I want to get all those properties out of the
way, so we can use them in future proofs.  ",Vector dot product and vector length | Vectors and spaces | Linear Algebra | Khan Academy,"Definitions of the vector dot product and vector length

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/proving-vector-dot-product-properties?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/subspace_basis/v/linear-algebra-basis-of-a-subspace?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,WNuIhXo39_k
(correction)scalarmultiplicationofrow_Matrixtransformations_LinearAlgebra_KhanAcademy-WY6QG0mZ7uQ.en.csv,"I want to make a quick
correction or clarification to the last video that you may or
may not have found confusing. You may not have noticed it,
but when I did the general case for multiplying a row by a
scalar, I had this situation where I had the matrix A and I
defined it as-- it was n by n matrix, so it was a11, a12,
all the way to a1n. Then we went down this way. Then we picked a particular row
i, so we called that ai1, ai2, all the way to ain. And then we keep going down ,
assuming that this is the last row, so an1 all the
way to ann. When I wanted to find the
determinant of a, and this is where I made a-- I would call
it a notational error. When I wanted to find the
determinant of a, I wrote that it was equal to-- well, we could
go down, and in that video, I went down this row. That's why I kind of highlighted
it to begin with, and I wrote it down. So it's equal to-- do the
checkerboard pattern. I said negative 1
to the i plus j. Well, let's do the first term. I plus 1 times ai1 times
its submatrix. That's what I wrote in the last.
So if you have ai1, if you get rid of that row, that
column, you have the submatrix right there: ai1. That's what I wrote
in the last video, but that was incorrect. And I think when I did the 2 by
2 case and the 3 by 3 case, that's pretty clear. It's not times the matrix, it's
times the determinant of the submatrix, so this right
here is incorrect. And, of course, you keep adding
that to-- and I wrote ai2 times its submatrix
like that. ai2 all the way to ain
times its submatrix. That's what I did
in the video. That's incorrect. Let me do the incorrect in a
different color to show that this is all one thing. I should have said the
determinant of each of these. The determinant of a is equal
to minus 1 to the i plus 1 times ai1 times the determinant
of ai1 plus ai2 times the determinant of ai2,
the determinant of the submatrix all the way to ain
times the determinant of the submatrix ain. It doesn't change the logic of
the proof much, but I just want to be very careful that
we're not multiplying the submatrices because
that becomes a fairly complicated operation. Well, it's not that bad. It's a scalar. But when we find a determinant,
we're multiplying times the determinant
of the submatrix. We saw that when we first
defined it using the recursive definition for the n by n
determinant, but I just wanted to make that very clear.",(correction) scalar multiplication of row | Matrix transformations | Linear Algebra | Khan Academy,"Correction of last video showing that the determinant when one row is multiplied by a scalar is equal to the scalar times the determinant

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-determinant-when-row-is-added?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-determinant-when-row-multiplied-by-scalar?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,WY6QG0mZ7uQ
Datastructures-IntroductiontoQueues-XuCbpw6Bj1U.en.csv,"Hello everyone ! We have been talking about
data structures for some time now. As we know, data structures are ways to store
and organize data in computers. So far in this series, we have discussed some
of the data structures like arrays, linked lists and in last couple of lessons, we have
talked about stack. In this lesson, we are going to introduce
you to Queues. We are going to talk about Queue ADT. Just the way we did it for stack, first we
are going to talk about queue as abstract data type or ADT. As we know, when we talk about a data structure
as abstract data type, we define only the features or operations available with the
data structure and do not go into implementation details. We will see possible implementations in later
lessons. In this lesson, we are only going to discuss
logical view of queue data structure. Ok ! so let's get started. Queue data structure is exactly what we mean
when we say queue in real world. A queue is a structure in which whatever goes
in first, comes out first. In short, we call Queue a FIFO structure. Earlier, we had seen stack which is a last-in-first-out
structure which is called a last in first out structure or in short LIFO. A stack is a collection in which both insertion
and removal happen from the same end that we call the top of stack. In queue however, an insertion must happen
from one end that we call rear or tail of the queue and any removal must happen from
the other end that we can call front or head of the queue. If i have to define queue formally, as an
abstract data type, then a queue is a list or collection with the restriction or the
constraint that insertion can be and must be performed at one end that we call the rear
of queue or the tail of queue and deletion can be performed at other end that we can
call the front of queue or head of queue. Lets now define the interface or operations
available with queue. Just like stack, we have two fundamental operations
here. An insertion is called Enqueue operation. Some people also like to name this operation
push. Enqueue operation should insert an element
at tail or rear end of queue. Deletion is called Dequeue operation. In some implementation, people call this operation
pop also. Push and pop are more famous in context of
stack. Enqueue and Dequeue are more famous in context
of Queues. While implementing, you can choose any of
these names in your interface. Dequeue should remove an element from front
or head of the queue. And Dequeue typically also returns this element
that it removes from the head. The signatures of Enqueue and Dequeue for
a queue of integers can be something like this. Enqueue is returning void here while Dequeue
is returning an integer. This integer should be the removed element
from the queue. You can design Dequeue also to return void. Typically a third operation front or Peek
is kept just to look at the element at the head. Just like the top operation that we had kept
in stack. This operation should just return the element
at front and should not delete anything. Ok, we can have few more operations. We can have one operation to check whether
queue is empty or not. If queue has a limited size, then we can have
one operation to check whether queue is full or not. Why I am calling out these alternate names
for operations is also because most of the time, we do not write our own implementation
of a data structure. We use in-built implementations available
with language libraries. Interface can be different in different libraries. For example, if you would use the in-built
queue in C++, the function to insert in push which in C# its Enqueue. So, we should not confuse. I'll just keep more famous names here. OK ! so these are the operations that i have
defined with queue ADT - Enqueue, Dequeue, Front and IsEmpty. We can insert or remove one element at a time
from the queue using Enqueue and Dequeue. front() is only to look at the element at
head. InEmpty is only to verify whether Queue is
empty or not. All these operations that i have written here
must take constant time or in other words, their time complexity should be big-oh of
one. Logically, a queue can be shown as a figure
or container open from two sides. So, an element can be inserted or Enqueued
from one side and and an element can be removed or de-queued from other side. If you remember stack, we show a stack as
a container open from one side. So, an insertion or what we call push in context
of stack and removal or pop, both must happen from the same side. In queue, insertion and removal should happen
from different sides. Let's say I want to create a queue of integers,
lets say initially we have an empty queue. I will first write down one of the operations
and then show you the simulation in logical view. Lets say i first want to enqueue number 2. This figure that I'm showing here right now,
is an empty queue of integers and I am saying that I'm performing and Enqueue operation
here. In a program, I would be calling an Enqueue
function passing it number 2 as argument. After this Enqueue, we have one element in
the queue, we have one integer in the queue. Because we have only one element in the queue
right now, front and rear of the queue are same. Lets Enqueue one more integer. Now, i want to insert number 5. 5 will be inserted at rear or tail of the
queue. Let's Enqueue one more. And now, I want to call Dequeue operation. So, we will pick 2 from head of the queue
and it will go out. If Dequeue is supposed to return this removed
integer, then we will get integer 2 as return. Enqueue and Dequeue are the fundamental operations
available with Queue. In our design, we can have some more for our
convenience. Like we have front and IsEmpty here. A call to front at this stage will get us
number 5, integer 5 as return. No integer will be removed from the queue. Calling IsEmpty at this stage can return us
a boolean false or a zero fro false and 1 for true. So, this pretty much is Queue works. Now, one obvious question can be, what are
the real scenarios where we can use Queue, what are the use cases of Queue data structure. Queue is most often used in a scenario where
there is a shared resource that's supposed to serve some request, but the resource can
handle only one request at a time. It can serve only one request at a time. In such a scenario, it makes most sense to
Queue up the requests. The request that comes first, gets served
first. Lets say we have a printer shared in a network. Any machine in the network can send a print
request to this printer. Printer can serve only one request at a time,
it can print only one document at a time. So, if a request comes when its busy, it can't
be like - I'm busy, request later. That will be really rude of the printer. What really happens is that the program that
really manages the printer, puts the print request in a queue. As long as there is something in the Queue,
printer keeps picking up a request from the front of the queue and serves it. Processor on your computer is also a shared
resource. A lot of running programs or processes need
time of the processor and the processor can attend to only one process at a time. Processor is the guy who has to execute all
the instructions , who has to perform all the arithmetic and logical operations. So, the processes are put in a queue. Queue in general can be used to simulate wait
in a number of scenarios. We will discuss some of these applications
of queue in detail while solving some problems in later lessons. This is good for an introduction. In next lesson, we will see how we can implement
Queue. This is it for this lesson. Thanks for watching !",Data structures: Introduction to Queues,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described queue data structure as abstract data type. 

See source code in C++ here:
https://gist.github.com/mycodeschool/7331785

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,XuCbpw6Bj1U
LinkedListinC_C++-Deleteanodeatnthposition-Y0n86K43GO4.en.csv,"in our previous lesson we wrote program
to insert a node at nth position or a given position in
a list, in a linked list now in this lesson, we will write a
program to delete a node at any given position in a
linked list. So, once again I have drawn a linked list here. We have four nodes in
this list at addresses 100 200 150 and 250 respectively so this is my example of
a linked list of integers. and let say we number the positions on a one
based index, so this is the first Node in the list
and this is the second Node this is the third Node and this is the fourth Node when we talk about deleting a Node
from the linked list. We will have to do two things
first we will have to fix the links so that
the Node is no more a part of the list let's say, in this case we want to delete
the node at 3rd position so will go to the second node. For nth Node
we will have to go to the (n-1)th node and we will have to
set the link part of the (n -1)th node as the link of the nth mode which will be the (n+1)th node
so we will cut this link and now this Node with address 150 is not
part of the linked list because when we will traverse the
linked list, we will go from address 100 to 200 and from 200, we will go to 250. This is
one scenario for deletion in which we have a node
before and a node after there will be special cases like we may
want to delete the node at the first position or the head itself. In that case we will have to point
head to the second node. We will have to build
this link We will talk about all these
special cases in our implementation. Let's first understand the
logic. Now fixing the links is not good enough
because all that we do when we fix the links is that we detach the node from the
linked list so that it is no more accessible but it is still
occupying space in the memory as we knoe Node is allocated space
from what we call the dynamic memory or the heap section of the memory. we
have talked about this earlier In C or C++ we have to explicitly
free this memory when we are done using it because it is not automatically deallocated and memory being a crucial resource we
do not want to consume it unnecessarily when we do not
need it so the second thing that we will have to
do is we will have to free the space that's being taken by the Node and that's when the
Node will actually be deleted from the memory
so let us now write code for this. I am
writing my C program here the first thing that I have done is I
have defined a Node which is a structure with two fields one to store data and another to store
address of the next node. so, the second field
is a pointer to node. Now to create a linked list, we will have to first create
a pointer to Node a variable which is pointed to Node and
that will store the address of the head node or the first
node in the list and now I want to define three functions first insert function that will take some value, some data to be inserted into
the list and always insert this value at the end
of the list, then I want to define up print function that will print all
the elements in the list. We have defined this
variable head as a global variable, so it will be accessible to all these functions and the third function
that I want to write is delete that will take the position n of the node to be deleted and delete
the node at  that particular position. We will go back
to implementing these methods. First I'll write the main method
so in the main method, first what I'll do is I'll
set head as NULL, so at this stage the list is empty and then I'll make couple of calls to insert
function to insert some integers in the list so after this fourth insert, the list will
be 2,4,6,5 because we're always inserting at the end of the list. this insert function will
insert the node at the end of the list now, what I want to do in my main method
is that I want to ask user for a position and I'll input this position from the console
and then I'll delete the node at this particular position and then I'll print the whole linked
list Let's also make a call to print after all inserts. Okay, so this is what we want
to do in our main method, we want to 
80
00:04:50,000 --&gt; 00:04:53,090
insert 4 integers in a linked list to create a list. 2, 4, 6, 5 in this order and then I want to print the list. then
I want to input a number from the console and delete the Node that particular
position. Now, let us  assume that we will always give a valid
position and in my implementation also I will not handle the error condition
when position will not be valid We have seen implementation of
insert and print earlier, so i will not go into their
implementation details what I do now is I will implement delete
function Now in my delete function let's
first handle the case when there is a Node before the
Node that we want to delete so we'll have no (n -1)th node what I'll do is first i'll create a
temporary variable that is pointer to Node and point this to head and using this
96
00:05:44,410 --&gt; 00:05:47,410)
temporary variable, we will go to (n-1)th Node. To go to the (n-1)th Node, we
will have to run a loop  n-2 times and we will have to do something like this temp1 = temp1-&gt;next Now, what I'll do is, I'll create a variable
to point  to the nth Node, name this temp2, and this
will be equal to temp1-&gt;next and now I can fix the
link I can say that adjust the link section,
the link part of  (n-1)th Node to point to (n+1)th Node which will be temp2-&gt;next. 
now, our link is fixed and this variable temp2 stores the nth node, reference to
the nth Node, so we can make a call to Free function.
Free function deallocates whatever memory is
allocated through malloc if we were using c plus plus and used and if we would have used new operator
we should have said delete temp2. Okay now we should
be good this much code will work for scenarios
when we have an (n-1)th Node and even if there is
no (n+1)th node If (n+1)th position is null, this will
work for that scenario I leave that as an
exercise for you to validate Now, we have not handled one special case when
we want to delete the head Node, so if n = 1 then what we want to do is, we just want
to set head as temp1-&gt;next. temp1 is right
now equal to head and now head has moved on to point to
the second Node and temp1 still points to the first
node. so links are fixed and we can free the
first node which is not detached from the linked
list because head is now pointing to the second node okay, so this is our delete function. I have missed one thing here. for n not equal
to 1, we should not execute this section of the code. So either we put an else statement after this or what we can do is, we can say return
after we execute these statements for this condition. Now this code should work if I've got everything right. so let us
now run this and see what happens I have already written the insert and
print functions I'll come back to this main function
this is my list 2,4,6,5 and I can enter any of the
positions - one two three or four so let's first say we want to delete
the head node and we are printing the list after deleting a particular Node, so the list now is
4, 6, 5. this seems to be correct Let us run this again and this time I
delete number 5 from position 4 the list is now 2,4, 6 which is correct again similarly if I enter position 2, the list
is 2,6,5 which is correct. so we seem to be good.
I'll quickly walk you through this code in the logical view to make thanks further clear. Let's say we first make a call to delete Node from
the first position that is we want to delete the head node.
So, in this code, what we are doing is we are first creating a variable temp1
which is pointer to Node Initially temp1 is equal to head
So, it stores the address 100,
so it points to the head Node now n =1, so we come to
this instruction head = temp1-&gt;next actually this is temp arrow dot next, but while reading we read this as  temp1 dot next. This is nothing but a
syntactical sugar for this statement (*temp1).next So, we are dereferencing this pointer
variable to go to this Node and then accessing the
next field of this node now we're saying head= temp1-&gt;next,
so head is now 200. So, we are building this link and breaking this link and now in the next line we see free(temp1)
so we want to free the memory which is being pointed to by this
variable temp1 temp1 still points to this
node at address 100 so, this node now will be cleared from
the memory and now we return, so this function does not
execute any further, it finishes its execution. Once the function
execution  finishes, temp1 which was a local
variable also gets cleared from the memory. head
is a global variable so it does not get cleared this is how we know the linked list. This
is the identity of the linked list this particular variable head let's rerun this code again and this
time I want to delete the Node at 3rd position in the list. I have
drawn this initial list. So, once again we create
this variable temp1. We say that the address
here is equal to 100 so it points to the head Node or the
first Node and now n is not equal to 1. it is equal
to 3 so we come to this particular loop
n is equal to 3,  so this loop will execute exactly once.
this statement will execute exactly once so temp1 will now move to address 200 so temp one is now pointing to the
second node this is what we wanted to do. we 
wanted temp1 to point to (n-1)th node, n is 3 here. Now, we create another
variable another pointer to Node, temp2 and we
set this guy as temp1-&gt;next. temp1-&gt;next is 150.  so we set this guy as 150. so this guy
points to the nth node or the third Node. Now, in the next line we are saying that temp1-&gt;next this value which is 150 right now is now temp2-&gt;next, address of the (n+1)th
node or 4th node So this guy will now be 250 So, we are building this link and we're
breaking this link so we have fixed the links and now
finally we are seeing that free the memory which is being pointed to by temp2.
so now this third Node the memory block will be deleted from
the memory and once this function execution finishes all the local variables temp1 and
temp2 will be cleared and this is what the list will be. This
Node at address 250 will now be the third node so, this was deleting a Node at a
particular position in the linked list we can also have a problem where we may
want to delete a Node with a particular value. You
can try implementing it. in the coming lessons, we will see more
problems are linked list so, thanks for watching !",Linked List in C/C++ - Delete a node at nth position,"See complete series on linked list here:
http://www.youtube.com/watch?v=NobHlGUjV3g&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=3
In this lesson, we have written C code to delete node at nth position in a linked list. 

Additional Resources:
Series on pointers:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_

Lesson on Dynamic memory allocation:
http://www.youtube.com/watch?v=_8-ht2AKyH4&list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_&index=7",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,Y0n86K43GO4
Repeatedrootsofthecharacteristicequationspart2_KhanAcademy-YezsgIlcb68.en.csv,"Let's do another problem
with repeated roots. So let's say our differential
equation is the second derivative of y minus the first
derivative plus 0.25-- that's what's written here--
0.25y is equal to 0. And they've actually given us
some initial conditions. They said that y of 0 is equal
to 2, and y prime of 0 is equal to 1/3. So like we've done in every
one of these constant coefficient linear second order
homogeneous differential equations, let's get the
characteristic equation. So that's r squared minus r
plus 0.25-- or we can even call it plus 1/4. So let's see, when I just
inspected this, it always confuses me when I
have fractions. So it becomes very
hard to factor. So let's just do the
quadratic formula. So the roots of this are
going to be r is equal to negative b. Well, b is negative 1. So negative b is
going to be 1. Plus or minus the square
root of b squared. b is negative 1. So that squared is 1. Minus 4 times a, which
is 1, times c. Well, 4 times 1 times
0.25, that's 1. Ah-ha. So notice that when you have a
repeated root, this under the square root becomes 0. And that makes sense, because
it's this plus or minus in the quadratic formula that gives you
two roots, whether they be real or complex. But if the square root is 0,
you're adding plus or minus 0 and you're only left
with one root. Anyway, we're not done yet. What's the denominator of
a quadratic equation? 2a. So a is 1, so over 2. So our one repeated root is 1
plus or minus 0 over 2, or it equals 1/2. And like we learned in the last
video, you might just say, oh well, maybe the solution
is just y is equal to ce to the 1/2 x. But like we pointed out last
time, you have two initial conditions. And this solution is not general
enough for two initial conditions. And then last time, we said,
OK, if this isn't general enough, maybe some solution that
was some function of x times e to the 1/2 x, maybe that
would be our solution. And we said, it turns
out it is. And so that more general
solution that we found, that we figured out that v of x
is actually equal to some constant plus x times
some other constant. So our more general solution is
y is equal to c1 times e to the 1/2 x soon. plus c2
times xe to the 1/2 x. I forgot the x here. Let me draw a line here so
you don't get confused. Anyway, that's the reasoning. That's how we came up
with this thing. And it is good to know. Because later on when you want
to know more theory of differential equations-- and
that's really the whole point about learning this if your
whole goal isn't just to pass an exam-- it's good to know. But when you're actually solving
these you could just kind of know the template. If I have a repeated root, well
I just put that repeated root twice, and one of them gets
an x in front of it, and they have two constants. Anyway, this is our general
solution and now we can use our initial conditions to
solve for c1 and c2. So let's just figure out the
derivative of this first. So it becomes easy to substitute
in for c2. So y prime is equal to 1/2 c1
e to the 1/2 x, plus-- now this becomes a little bit more
complicated, we're going to have to use the product rule
here-- so plus c2 times-- derivative of x is 1-- times
e to the 1/2 x, that's the product rule. Plus the derivative of e
to the 1/2 x times x. So that's 1/2 xe to the 1/2 x. Or we can write-- I don't want
to lose this stuff up here-- we can write that it equals--
let's see, I have 1/2-- so I have c2 times e to the 1/2
x and I have 1/2 times c1 e to the 1/2 x. So I could say, it's equal
to e to the 1/2 x times c1 over 2. That's that. Plus c2. That takes care of these two
terms. Plus c2 over 2 xe to the 1/2 x. And now let's use our
initial conditions. And let me actually clear up
some space, because I think it's nice to have our initial
conditions up here where we can see them. So let me delete all
this stuff here. That, hopefully, makes
sense to you by now. You know the characteristic
equation. We figured out the general
solu-- I don't want to erase our initial conditions-- we
figured out the general solution was this. I'll keep our general
solution there. And so, now we just substitute
our initial conditions into our general solution and the
derivative of the general solution, and hopefully we can
get meaningful answers. So substituting into our general
solution, y of 0 is equal to 2. So y is equal to 2 when
x is equal to 0. So c1-- when x is equal
to 0, all the e terms you become 1, right? This one will become 1. And then notice, we have
an xe to the 0. So now this x is 0. So this whole term is going
to be equal to 0. So we're done. c1
is equal to 2. That was pretty straightforward. This x actually made
it a lot easier. So c1 is equal to 2. And now we can use
the derivative. So let's see, this is the
first derivative. And I'll substitute c1
in there so we can just solve for c2. So our first derivative is y
prime is equal to-- let's see c1-- 1/2 plus c2-- so it's--
well I'll write this first-- it's equal to 2 over 2. So it's 1 plus c2 times e to the
1/2 x plus c2 over 2 times xe to the 1/2 x. There was an x here. So when x is equal to 0, y
prime is equal to 1/3. So 1/3 is equal to-- well, x is
equal to 0, this'll be 1-- so it's equal to 1 plus c2. And then this term, when x is
equal to 0, this whole thing becomes 0, right? Because this x just cancels
out the whole thing. You multiply by 0 you get 0. So then we get 1/3 is equal to 1
plus c2, or that c2 is equal to 1/3 of minus 1 is
equal to minus 2/3. And now we have our particular
solution. Let me write it down and
put a box around it. So this is our general
solution. Our particular solution, given
these initial conditions for this repeated root problem, is
y is equal to c1-- we figured that out to be 2 fairly
quickly-- 2e to the 1/2 x plus c2. c2 is minus 2/3. So minus 2/3 xe to the 1/2 x. And we are done. There is our particular
solution. So once again, kind of
the proof of how do you get to this. Why is there this x in there? And it wasn't a proof, it was
really more of just to show you the intuition of where
that came from. And it did introduce you to a
method called, reduction of order, to figure out what that
function v was, which ended up just being c1 plus c2 times x. But all that can be pretty
complicated. But you see that once you know
the pattern, or once you know that this is going to be the
general solution, they're pretty easy to solve. Characteristic equation. Get your general solution. Figure out the derivative
of the general solution. And then substitute your initial
conditions to solve for your constants. And you're done. Anyway, I'll see you
in the next video. And actually, we're going to
start solving non-homogeneous differential equations. See",Repeated roots of the characteristic equations part 2 | Khan Academy,"An example where we use initial conditions to solve a repeated-roots differential equation.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/undetermined-coefficients/v/undetermined-coefficients-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/complex-roots-characteristic-equation/v/repeated-roots-of-the-characteristic-equation?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,YezsgIlcb68
Simplifyingconditionsforinvertibility_Matrixtransformations_LinearAlgebra_KhanAcademy-Yz2OosyMTmY.en.csv,"Well the whole premise of the
last series of videos was really just trying to get at
trying to figure out whether some transformation T-- let's
have some transformation that is a mapping from, let's say
it's a mapping from Rn to Rm, --the whole question is,
is T invertible. And we showed several videos
ago that a function, and a transformation is really just a
function, that a function is invertible if it meets
two conditions. So invertible. So I don't have to keep writing
the word over again. You have to have
two conditions. It has to be onto or essentially
it has to map to every member of your codomain
and it also has to be one-to-one. Another way of saying one-to-one
is that every member of your codomain is
mapped to by at most one member of your domain. And we did several videos where
we thought well if we had a transformation, a linear
transformation, that's defined by a matrix, A, where this would
be an m-by-n matrix, we said that this is going to be
met if the rank-- This is only met if the rank of A is equal to
the number of rows in your transformation matrix
is equal to m. And in the last video I just
showed that this is only true if every one of your column
vectors are linearly independent or that they all
are basis vectors for your column space or that the rank
of your matrix it has to be equal to n. Now in order for something to
be invertible, in order for the transformation to be
invertible, both of these things have to be true. Your rank of A has to be equal
to m and your rank of A has to be equal to n. So in order to be invertible,
a couple of things have to happen. In order to be invertible your
rank of your transformation matrix has to be equal to m,
which has to be equal to n. So m has to be equal to n. So we have an interesting
condition. You have to have a
square matrix. Your matrix has to be n-by-n. That's what this implies. If both of these are true, then
m has to be equal n and you're dealing with
a square matrix. Even more, you're dealing with
the square matrix where every one of the columns are
linearly independent, so this is our A. A looks like this. A1, A2, all the way to An. Since the rank of A is equal to
n, and this is of course an n-by-n matrix. We just said that this has to
be the case because its rank has to be equal to m, which is
the number of rows, and its rank has to be equal to n,
which is the number of columns, so the rows and columns
have to be the same. But the fact that your rank
is equal to the number of columns, that means that all
of your column vectors are bases for your column space, or
that if you put them into reduced row echelon form, what
are you going to get? Well all of these guys are basis
vectors so they're all going to be associated with
pivot vectors or they're all going to be associated
with pivot columns. So this is going to be 1, 0,
bunch of 0's, and then you're going to have a 0, 1, a bunch
of 0's like this. They're all going to be
associated with pivot columns when you go into reduced
row echelon form. So all of them are
pivot columns. It's an n-by-n matrix. So what is an n-by-n
matrix where every column is a pivot column? What is an n-by-n matrix? Let me write this. So you have an n. So the reduced row echelon form
of A has to be equal to an n-by-n matrix, cause A is
n-by-n, where every column is a linearly independent
pivot column. And I mean by definition of
reduced row echelon form you can't have the same pivot
column twice where every column is a linearly independent
pivot column. It's a little bit redundant, but
I think you get the idea. So what is an n-by-n matrix
where every column is a linearly independent
pivot column? Well that is just a matrix that
has 1's down the diagonal and everything else is a 0. Or, you've seen this matrix
before, this is just an n-by-n identity matrix or the identity
matrix on n or on Rn. So if you multiply this matrix
times any member of Rn, you're just going to get that
matrix again. But this is interesting. We now have a pretty usable
condition for invertibility. We can say that the
transformation T that is a mapping from Rn to-- well it
has to map to the same dimension space so
from Rn to Rn. It's equal to some square matrix
n-by-n, it has to be an n-by-n matrix, times our
vectors in our domain. And it's only going to be
invertible if the reduced row echelon form of our
transformation matrix is equal to the identity matrix on n. I mean I could have written an
m here and I could've said this is an m-by-n matrix, but
the only way that this is going to be true is if
this is also an n and this is also an m. But maybe I could leave
them there. Let me leave those
m's there because that's the big takeaway. The big takeaway is that in
order for the transformation matrix to be invertible, the
only way it's invertible is if the reduced row echelon form of
our transformation matrix is equal to an n-by-n
identity matrix. The identity matrix is always
going to be n-by-n. So that's a big takeaway. Now we'll use that in the future
to actually solve for transformations or solve for
inverses of transformations.",Simplifying conditions for invertibility | Matrix transformations | Linear Algebra | Khan Academy,"Showing that a transformation is invertible if and only if rref(A) is equal to the identity matrix

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/linear-algebra-showing-that-inverses-are-linear?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/linear-algebra-matrix-condition-for-one-to-one-trans?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,Yz2OosyMTmY
Moreonmatrixadditionandscalarmultiplication_LinearAlgebra_KhanAcademy-Z19-ObbmHJE.en.csv,"In the last video we started
off with two linear transformations. We had the linear transformation
s that was a mapping from Rn to Rm. And then we had the linear
transformation t, that was also a mapping from Rn to Rm. And we defined the idea of
the addition of these two transformations. So s plus t, this transformation
of x we defined as being equal to s of x,
this vector plus t of x. And of course, this input is
still from Rn, and then each of these are vectors in Rm. If we add two vectors in Rm to
each other, we get another vector in Rm because Rm
is a valid subspace. It's also closed
under addition. So this is still a mapping. So s plus t is still a mapping
from Rn to Rm. And we also said that every
linear transformation we've shown in a previous video, can
be represented as a matrix. We could say that s of
x is equal to some matrix a times x. And we could also say that
t of x is equal to some matrix b times x. And both of these would
be m by n matrices. And let me write that m
by n, both of these. Because these are both mappings
from Rn to Rm. And what we did is we made
a another definition. This was a definition right here
and then we made another definition. We defined the addition
of two matrices. We said any matrix a plus b,
they both have to have the same dimensions. So they're both m by
n in this case. And we defined this addition to
be a new matrix, where each column of this matrix is the
sum of the corresponding columns of these matrices. So this matrix's first column
will be the sum of a's first column and b's first column. So a1 plus b1, the second column
I'll do a little line here is, a2 plus b2. And it goes all the
way to An plus Bn. This was a definition. And the whole reason why we
made this definition, is because if you defined matrix
addition in this way, then this thing, when you replace it
with Ax plus Bx, you get to that this thing over here is
equal to the corresponding matrices by this definition,
a plus b times x. This was the motivation to get
to a nice expression, like this, for defining matrix
addition in this way. Now this all seems very
abstract, so let's actually add a matrix, or let's
add two matrices. So we'll start off with
a two-by-two case. So let's say I'm adding the
matrix 1, 3, minus 2, 4 to the matrix, remember they have to
have the same dimensions, to the matrix 2, 7, minus
3, minus 1. What do we get? Well by definition, you
just add up their corresponding columns. You add up the first column. When you add up the
corresponding columns, what happens when you add up two
columns, two vectors? Well, you just add up their
corresponding entries. So essentially, when you add
up to matrices, you're just adding up all of the
corresponding entries. I'll talk about it in this way,
just because that's how I defined it, but they're
all equivalent. The first thing, the first
column, in this matrix right here, is going to be this
column plus this column. So it's going to be 1 plus 2,
let me write it like this, and then minus 2, minus 3. And then the second column, that
one right there, is going to be 3 plus 7 and
then 4 minus 1. And so this will be equal
to 3, 10, minus 5, and 3, just like that. And notice, even though the
definition is I'm adding up corresponding columns. Well, what in effect happened? Well, I'm just adding up the
corresponding entries. I added the 1 to the 2, the 3
to the 7, the minus 2 to the minus 3, the 4 to the minus 1. It's that straightforward. Nothing fancier than that. In fact, we could have rewritten
this definition. If we say that the vector or the
matrix a is equal to a11 a12, all the way to a1n. And then if you go down this
is a21 all the way to a1n. And then you go all the
way down there to ann. We've seen that before. And then the matrix b, just
by the same argument or by similar definition, this is b11,
that entry is b11, that's b12, all the way to b1n. This is b21, second row, all the
way down to bn, sorry this is m, we have m rows,
so this is mn. So this right here is bm1, this
would be bm2, all the way down to this is bmn,
right there. Want to be very careful, these
are m by n matrices. So this row down here is the
mth row in both cases. But we could redefine our
matrix, or another way of stating this matrix addition
definition, is to say, if I'm going to add a plus b, I'm
just going to add up the corresponding entries. So this entry up here is going
to be-- do it in a different color --it's going to be a11
plus b11 this one's going to be a21 plus b21 all the way
down to am1 plus bm1. And then this is going to be,
of course, a12 plus b12 all the way to a1n-- let me scroll
over a little bit --all the way over to a1n plus b1n,
and then all the way down to amn plus bmn. These are equivalent
definitions. This takes a lot less space
to write in and I felt comfortable doing it because
we've already defined vector addition. But it essentially boils down
to you just add up all the corresponding entries. That's all matrix addition is. It's probably one of the
simplest things that you've seen in your recent mathematical
experience. Now, matrix scalar
multiplication, very similar idea. We defined scalar multiplication
times a transformation of x to be equal
to a scalar times the transformation of x. This was a definition. And we also defined scalar
times some matrix a to be equal to the scalar. A new matrix where each of its
columns are the scalar times the column vectors of a. So a1, and then the next column
is ca2, and then you go all the way to can. And the whole motivation for
this was, because this could be simplified to-- well t I've
said was equal to Bx, a times the transformation of x
--the transformation t of x was equal to. So we still have our c. So it's going to be c
times the matrix B, times the vector x. That's what the transformation
of x could be written as. And so this would be equal to by
just manipulating-- and we did this in the last video by
actually breaking this up in the column vectors multiplying
them by each of the components of x, and then distributing the
c and rearranging them a little bit. We can now say, using this
definition, that this is equal to some new matrix cB. We're using this definition,
some new matrix cB, where it's essentially c times
each of the column vectors of B times x. This right here was
our motivation. We wanted to be able express
this as a product of some new matrix and a vector, because
any linear transformation should be expressible
in that way. And that's why we made
this definition. Now let's apply it. And I wanted to show you that
this is perhaps even simpler than matrix addition. So if we want to multiply the
scalar 5 times the matrix, I'll do a 3 by 2 matrix. So 1, minus 1, 2, 3, 7, 0. This will just be equal to--
by this definition I'm just saying, I'm multiplying the
scalar times each of the column vectors. So it's 5 times 1, 2, 7. But what's that? That's just 5 times each
of the entries. It's 5 times 1, which is 5. 5 times 2, which is 10. 5 times 7, which is 35. Then the next column is going
to be 5 times this column right here, which is just 5
times each of its entries. So 5 times minus 1 is minus 5. 5 times 3 is 15. 5 times 0 is 0. It's that simple. You literally, if we go back
to this definition, we can define scalar multiplication
of a matrix. So we could also define cA as
being equal to, if we'd say this is a representation for A,
of the scalar c times each of the entries of A. That's it. So it's c times a11,
c times a12 all the way to c times a1n. You go down this way, c times
a21 all the way down to c times am1 and then if you
go down the diagonal, it's be c times amn. You literally just take your
scalar and multiply it times every entry in A. And that's all you have to do. So hopefully this clarified
things up a little bit, or maybe it was a bit of a review
from things you might have learned in highschool.",More on matrix addition and scalar multiplication | Linear Algebra | Khan Academy,"More on Matrix Addition and Scalar Multiplication

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/linear-transformation-examples-scaling-and-reflections?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/sums-and-scalar-multiples-of-linear-transformations?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,Z19-ObbmHJE
Multiplyingavectorbyascalar_Vectorsandspaces_LinearAlgebra_KhanAcademy-ZN7YaSbY3-w.en.csv,"Let's say that I have the vector a, and let's say that it's equal to (2,1) So we could draw it right over here, So it's equal to (2,1), so if we were to start at the origin and we would move 2 in the horizontal direction, and 1 in the vertical direction so we would end up right over here. Now what I want to do is think about, how we can define multiplying this vector by a scalar for example, if I were to say 3 times the vector a. which is the same thing as saying 3 times (2,1) So 3 is just a number. One way to think about a scalar quantity, it is just a number, versus a vector is giving you how much you're moving in the various directions. It's giving you both the magnitude and a direction. while this is just a plain number right over here. But how do we define multiplying 3 times this vector? Well one reasonable thing that might jump out at you is, why don't we just multiply the 3 times each of these components? So this could be equal to.. we have 2 and 1.. And we're going to multiply each of these with 3. So 3 times 2 and 3 times 1. And then the resulting vector is still going to be a 2-dimensional vector. And it's going to be the 2-dimensional vector (6,3). Now I encourage you to get some graph paper out and to actually plot this vector, and think about how it relates to this vector right over here. So let me do that.. So the vector (6,3), if we started at the origin.. We would move 6 in the horizontal direction.. 1, 2, 3, 4, 5, 6.. And 3 in the vertical.. 1, 2, 3.. So it gets us right over there, so it would look like this. So what just happened to this vector? Well notice, one way to think about it is what has changed, and what has not changed about this vector? Well what's not changed is still pointing in the same direction. So this right over here has the same direction. Multiplying by the scalar, at least the way we defined it.. did not change the direction that my vector is going in. Or at least in this case it didn't.. But it did change its magnitude. Its magnitude is now 3 times longer, which makes sense! Because we multiplied it by 3. One way to think about it is we scaled it up by 3. The scalar scaled up the vector. That might make sense. Or it might make an intuition of where that word scalar came from. The scalar, when you multiply it, it scales up a vector. It Increased its magnitude by 3 without changing its direction. Well let's do something interesting.. Let's multiply our vector a by a negative number. Let's just multiply it by -1 for simplicity. So let's just multiply -1 times a. Well using the convention that we just came up with.. We would multiply each of the components by -1. So 2 times -1 is -2, and 1 times -1 is -1. So now -1 times a is going to be (-2,-1) So if we started at the origin, we would move in the horizontal direction -2, and in the vertical -1 So now what happened to the vector? When I did that? Well now it flipped its direction! Multiplying it by this -1, it flipped it's direction. Its magnitude actually has not changed, but its direction is now in the exact opposite direction. Which makes sense, that multiplying by a negative number would do that. In fact when we dealt with the traditional number line, that's what happened If you took 5 times -1, well now you're going in the other direction you're at -5, you're 5 to the left of zero. So it makes sense that this would flip its direction. So you could imagine, if you were to take something like -2 times your vector a, -2 times your vector a.. And I encourage you to pause this video and try this on your own.. What would this give? And what would be the resulting visualization of the vector? Well let's see, this would be equal to -2 times 2 is -4, -2 times 1 is -2, so this vector.. if you were to start at the origin! remember you don't have to start at the origin.. but if you were.. it would go 0, 1, 2, 3, 4.. 1, 2.. It looks just like this.. And so just to remind ourselves.. our original vector a looked like this.. (2, 1) looks like this.. And then when you multiply it by -2.. you get a vector that looks like this.. Let me draw it like this.. I'm purposely not having them all start at the origin, because they don't HAVE to all start at the origin.. But you get a vector that looks like this.. So what's the difference between a and -2 times a? well the negative flipped it over, and then the two flipped it over and now it has twice the magnitude but because of the negative it has twice the magnitude in the other direction.",Multiplying a vector by a scalar | Vectors and spaces | Linear Algebra | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/e/scaling_vectors?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/linear-algebra-vector-examples?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/adding-vectors?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,ZN7YaSbY3-w
GraphRepresentationpart01-EdgeList-ZdY1Fp9dKzs.en.csv,"Hello everyone ! In our previous lessons we introduced you to graphs and we also
looked at and talked about some of the properties of graph but so far we have not discussed how the
can implement graph, how they can create a logical structure
like graph of in computer's memory, So, let us try to discuss this. A graph as
we know contains a set of vertices and a
set of edges and this is how we define graph in pure mathematical terms. A graph G is defined as an ordered pair of set V of vertices and a set E of edges. Now to create and store a graph in
computer's memory, the simplest thing that we
probably can do is that we can create two list, one to store all the vertices and
another to store all the edges. For a list, we can use an array of appropriate size or we can use an
implementation of a dynamic list. In-fact we can use a
dynamic list available to us in language libraries,
something like vector in C++ or ArrayList
in Java. Now a vertex is identified by its name, so the first list the list of
vertices would simply be a list of names or
strings. I just filled in names of all the vertices for this example graph here. Now what
should we fill in this edge list here. An edge is identified by it's two endpoints, so
what we can do is we can create an edge as an object with two fields. We can definde edge as a structure or class with two fields. One to store the start vertex and another to store the
end vertex. Edge list would basically be an array
or list of this type struct edge. In these two definitions of edge that have written here, in the first
one I have used character pointers because in C we typically use
character pointers to store or refer to strings. We could use character array also. In C++
or Java where we can create classes, we have
string available to us as a data-type, so we
can use that also. So we can use any of these for the
feilds. We can use character pointer or character array or string
data-type, if it's available depends on how you want to design your
implementation. Now let's fill this edge list here for
this example graph. Each row now here has two boxes. Let's
say the first one is to store the start vertex and the
second one is to store the end vertex. The graph that we have
here is an undirected graph, so any vertex can be
called start vertex and any vertex can be called end
vertex. Order of the vertices is not important here. We have nine edges here, one between A and B another between A and C another between A and D and then we have B E and B F, instead of having B F as an
entry we could also have F B but we just need one of them and then
we have C G D H, E H and F H. Actually there is one more. We also have G H. We have 10 edges
in total here not 9. Now once again, because this is an
undirected graph, if we are saying that there is a edge
from F to H.  We are also saying that there is an edge from H to F. There is no need to have another
entry as H F, we will necessarily be using
extra memory. If this was a directed graph F H and H F would have meant two different
connections which is the start vertex which is the
end vertex would have mattered. Maybe in case of
undirected graphs we should name the fields as first
vertex and second vertex and in case of directed graphs we should name the fields as start
vertex and end vertex. Now our graphs here could also be a
weighted graph. We could have some cost or weight associated with the edges. As we know in
an unweighted graph cost of all the connection is equal but in a weighted graph, different
connections would have different weight or different cost.
Now in this example graph here, I have associated some weights to these edges. Now how do you
think we should store this data, the weight of edges. Well if the graph
is weighted we can have one more field in the edge
object to store the weight. Now an entry in my edge-list has 3 fields. One to store the start vertex, one to store the end vertex and one more to store the weight.
So this is one possible way of storing a graph. We can simply create two lists, one to
store the vertices and another to store the edges, but this is not very efficient. For any possible
way of storing and organizing data we must also see its cost and when we
say cost we mean two things - time cost of various
operations and the memory usage. Typically we measure the rate of growth
of time taken with size of input or data, what the also call time complexity and we measure the rate of growth of memory consumed with size of input data, what we also call space complexity. Time
and space complexities are most commonly expressed in terms of
what we call Big-Oh notation. For this lesson, I am
assuming that you already know about time and space complexity analysis and
Big-Oh notation. If you want to revise some of these
concepts then you can check the description up of this
video for link to some lessons. We always want to minimize the time
cost of most frequently performed operations and we always want to make sure that we
do not consume unreasonably high number. Okay, so let's now analyze this particular
structure that you're trying to use to store our graph. Let's first
discuss the memory usage. For the first list, the vertex list, least
number of rows needed or consumed would be equal to number of vertices. Now each row here in this vertex list is
a name or string and string can be of any length. Right now all strings have just one
character because I simply named the node A B C and so on but we could have
names with multiple characters and because strings can be of
different lenghts. All rows may not be consuming the same amount of memory like here. Here, I'm showing an intra-city road network as
weighted graph. Cities are my nodes and road distances
are my weights. Now for this graph as you can see names are of different lengths, so all rows
in vertex list or all rows in edge list would not cost us
same. More characters will cost us more bytes.
But we can safely assume that the names will not be too long. We can
safely assume that in almost all practical scenarios average length of strings will be a
really small value. if we assume it to be always lesser
than some constant then the total space consumed in this
vertex list will be proportional to the number of
rows consumed that is the number of vertices or
in other words we can say that space complexity here is Big-Oh of number
of vertices. This is how we right number of
vertices with two vertical bars. What we basically mean here is number
of elements in set V. Now for the edge list, once again we are storing strings in first two fields
of edge object. So once again each row here will not
consume same amount of memory but if we are just storing the
reference or pointer to a string like here in the first row instead of
having values filled in these two fields, we could
have references or pointers to the names
in the vertex list. If we will design things like this, each
will consume same memory. This in fact is better because
references in most cases would cost us a lot lesser than a copy of the name and as reference we can have the actual
address of the string and that's what we're doing when we're
saying that start vertex and end vertex can be character pointers or may be a better design would be
simply having the index of the name or string in vertex list. Let's say A is at index 0 in
vertex list and B is that index 1 and C is at index two and I'll go on like this. Now for start vertex and end vertex, we
can have two integer fields. As you can see in both my definitions of edge, start vertex and
end vertex are of type int now and in each row of edge list
first and second field are filled with integer values. I have
filled in appropriate values of indices. This definitely is a better
design and if you can see now each row in edge
list would cost us the same amount of memory.
So overall space consumed in edge list would be proportional to number of edges or in other words, space complexity
here is Big-Oh of number of edges. Okay, so
this is analysis of our memory usage. Overall space
complexity of this design would be Big-Oh of number of vertices
plus number of edges. Is thiis memory usage is reasonably high ?
Well, we cannot do a lot better than this if
we want to store a graph in in computer's memory. So we are alright in
terms of memory usage. Now let's discuss time cost of
operations. What do you think can be most frequently
performed operations while working with graph. One of the most
frequently performed operations while working with graph would be finding all nodes adjacent to a given node, that is finding
all nodes directly connected to a given node. What
do you think would be time cost of finding all nodes directly
connected to a given node. Well, we will have to scan the whole edge
list. We will have to perform a linear search. We will have to go through
all the entries in the list and see if the start or end
node in the entry is our given node. For a directed graph, we would see
if the start node in the entry is our given node or not
and for an undirected graph we would see both the start as well as the end node. Running time would be proportional to
number of edges or in other words time complexity of
this operation would be Big-Oh of number of edges. Okay, now another frequently performed operation
can be finding if two given nodes are connected or
not. In this case also, we will have to perform a linear search on the edge list. In
worst case we will have to look at all the entries in the edge list. So
worst-case running time would be proportional to number of edges. So for
this operation too, time complexity is Big-Oh of number of edges. Now let's try to see how good or bad this running time Big-Oh of number
of edges is. If you remember this
discussion from our previous lesson in a simple graph, in a graph with no self
loop or multi edge. If number of vertices that is the number of elements in set V is equal to n, then maximum number of edges would be N * N-1. if the graph is directed. Each node will be connected to every
other node and of course minimum number of edges
can be zero. We can have a graph with no edge.
Maximum number of edges would be N * N-1 / 2 if the graph is undirected but all in
all if you can see number of edges can go almost up to
square of number of vertices. Number of edges can be of to order of
square of number of vertices. Let's denote number of vertices
here as v, so a number of edges can be of to order of v^2.
In a graph, typically any operation running in order of number
of edges would be considered very costly. We try
to keep things in order of number of vertices. When we are comparing the two running times
this is very obvious Big-Oh of v is a lot better than Big-Oh
v^2. All in all this vertex list and edge
list kind of the representation is not very efficient in terms of time
cost of operations. We should think of some other efficient
design. We should think of something better. We will talk about another possible way of
storing and representing graph in next lesson. This is it for this
lesson. Thanks for watching.",Graph Representation part 01 - Edge List,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described how we can represent and store a graph in computer's memory as vertex-list and edge-list. We have analyzed the time and space complexities of such a representation. 
In next two lessons, we will talk about adjacency matrix and adjacency list representations. 

Next Lesson : https://www.youtube.com/watch?v=9C2cpQZVRBA&index=41&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

Time Complexity analysis playlist:
https://www.youtube.com/playlist?list=PL2_aWCzGMAwI9HK8YPVBjElbLbI3ufctn

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,ZdY1Fp9dKzs
Proof-Anysubspacebasishassamenumberofelements_LinearAlgebra_KhanAcademy-Zn2K8UIT8r4.en.csv,"Let's say I've got some set
A of the vectors a1, a2, all the way to an. And I know for a fact that
it's a basis for the subspace V. What I want to show you in this
video is that if this guy has n elements right here, that
any set that spans V has to have at least n elements,
[typing] or n members, or cardinality
of n. There's all different ways
of saying you had n vectors in this set. I'm saying that every set that
spans V must have at least n elements, if the sum basis
set has n elements for V. Let's see if we can kind of run
with the set that has less than n elements and see if we
reach any contradictions. So let's say that I have sum set
B here and it's equal to the vectors b1, b2,
all the way to bm. And m is less than n, so I have
sum set of vectors here that have fewer elements
than my set A. So you come to me one day and
say, look I found you this set of vectors right here. And not only does it have
fewer elements than A, but it spans V. I look at you very suspiciously
because I always thought that this green
statement was true. So we start a little bit of
a thought experiment. And I say OK, you claim
that your set spans V, so let's do something. Let me define a new set. Let me call this new set B1
prime, and you'll see why I'm doing this kind of
strange notation. What's essentially going to be
is a set B plus my vector a1. So it's a1, and then I have
all of my elements of B. So be b1, b2, all
the way to bm. Now I think you and I could both
agree that this set is linearly dependent. How do I know that? Linear dependence means that at
least one of the elements of the set can be represented
as a linear combination of the others. Well, we know that a1 is one of
the basis vectors for V for this definition of a basis. But all the basis vectors
are members of V. If this set is a basis for V,
then this means that this set spans V, or that every member
of V can be represented as a linear combination
of these guys. Or in other ways every
linear combination of these guys is in V. And one of the linear
combinations of these guys is you just set the coefficient
on a1 to be 1, and the coefficients on everyone
else to be 0. So obviously a1 is
also in the set. So if a1 is in V, and all
of these guys span V, by definition if these guys span
V some linear combination of these guys can be used to
construct any member of V. So you can take some linear
combination of these guys to construct a1. So you could say a1 is equal to
d1, where the d's are the constants, d1 b1 plus d2 b2, all
the way to dm bm, and at least one of these have
to be non-zero. We know that a is a
non-zero vector. If it was a 0 vector, this
couldn't be a basis because it wouldn't be linearly
independent, because you can always represent a 0 vector
as really just 0 times any other vector. So this won't be a 0 vector. So at least one of these
are non-zero. So let's just say, for the sake
of argument, that dj -- so the coefficient on
bj is non-zero. So dj does not equal 0. So we could actually solve
for that term. So over here someplace you have
the term dj bj, plus a bunch of other stuff. We can solve for this term if we
subtract it from both sides of the equation, and then divide
both sides by minus dj, and put this minus a1 on the
other side, what do we get? I know that was a lot of
operations, but that's just straight up algebra. I think you can say that we
could rewrite this right here. We can solve for bj. That should be equal to minus
1 over its coefficient. And, if we subtract the a1 from
both sides and then plus all of these guys, plus d1 b1
plus all the way -- you're going to have a little
bit of a gap here. I'll just draw it like that. It's very unconventional
notation where this guy sat. All the way to dm bm. I'm doing this all of this to
show you that, by definition, you can write a1 as a
linear combination of these other guys. But you can just rearrange
things. You can rearrange it so that you
can write one of the other guys as a linear combination
of the rest of the other guys and a1. This guy's now redundant. I don't need this guy any longer
to continue to span V. Clearly this set
still spans V. I added an extra vector here. But I can remove this guy right
here from my set b1 prime and still span V. And how do I know that? Because I can achieve him. By removing him, I don't
lose anything. Because if I needed this vector
to create some other vector, I can construct him with
a linear combination of the rest of the b's,
plus my a1. So let's get rid of him,
and call that set v1. And actually, just for the sake
of notation, let me just change his name. This is little unconventional. You won't see it done like
this in any textbook. But I think it's a little bit
easier, instead of having to keep talking about these little
guys that are embedded someplace in the middle
of the stream. I mean these names, b1, b2, bn,
they're arbitrary names. Let me swap the labels. Let me just say that bj is equal
to b1, and that b1 is equal to bj. I'm just swapping their names. I took that guy, I
renamed him b1. I renamed b1, bj, so that
I could swap them. So I'm essentially just going
to remove b1 one from the vector just to make my
notation easier. You could just keep saying I'll
remove this bj from the middle, but it becomes
very confusing then. So let me call my new set after
removing the bj that I've renamed as b1, let me just
call that straight up B1. So my straight set B1 is equal
to a1, and then remember I removed the bj and I renamed
that as b1, and then I renamed b1 as bj. So now my set looks like
this -- let me go to the other color. b2 -- and for all we know
bj might have been b1, we don't know. There are probably multiple of
these that are non-zero, so we could pick any of those
to be our bj. But anyway, we took our
bj renamed it b1, and removed the b1. So now out set looks like this:
b3 all the way to bm. This set still spans V. And we know that because the
guy we removed can be constructed with any linear
combination of these guys. So we haven't lost our ability
to construct all of the vectors in V. Now let me create
another vector. We'll do a new color. Let's say I have the
vector B2 prime. And what I'm going to do here
is now I'm going to take another element from
our basis of V. I'll take the second element;
I'll take a2. I'll take a2 and throw
it on this guy. So now we have the set B2 prime
is equal to -- I'm going to add a2 to this guy. So you have a1, a2, and then you
have all the rest of these guys, b2, b3 all the way bm. Of course this still spans V,
I just added something here. But this is definitely
linearly dependent. Remember I didn't say in the
beginning whether this was linear dependent or not. It may or may not be. But when you add this other
vector that's in V, you definitely know that you're
linear dependent, because these guys can construct
that guy. Similarly we know that this
vector B1 spans V. So when we add this new element
here, we know that it can be written as a linear
combination of the other one. So we know that this right here
is linearly dependent. And we could say that a2 is
equal to some constant times c1 times a1 plus c2 b2 plus c3
b3, all the way to cm bm. Now what I'm going to claim is
that at least one of these coefficients is non-zero. So at least one of the ci's
does not equal to 0. And I'll make the further claim
that there's at least one that's outside
of this one. That at least one of the
coefficients on these B terms has to be non-zero. And the way you can think about
is, what if all of these guys were 0? If all of these guys were 0,
then that means that a2 is a linear combination of a1. All of these guys would cancel
out, and you'd have a2 is equal to some non-zero
constant times a1. We know that's not the case
because these two guys come from the same linearly
independent set. They both come from that
spanning basis. The fact that they are a basis
-- the word spanning basis, I shouldn't say it like that,
because it's redundant. A basis is a spanning set that
is linearly independent. If they're linearly independent
we know that a2 cannot be represented as some
linear combination of the rest of these guys. So we know that one of the
coefficients on the B terms has to be non-zero. And let's just say that you're
going to have a cj bj, this is a different one than
we had before. And we know that this guy, at
least one of them has to be non-zero, because if all of
these guys were non-zero, then you wouldn't be able to say
that this vector and that vector are linearly independent,
because they would be scalar multiples
of each other. So we're going to do
the same exercise. This guy right here, cj bj,
obviously this coefficient is non-zero so we can
solve for our bj. Once again we can say that bj is
equal minus 1 over cj times minus a2 plus c1 a1, all
the way to cm bm. So we have some bj here that can
be represented as a linear combination of the rest of the
people, including our new a2. And so, just like we did before,
let's remove him. Let's take him out of the set. And before I take him
out of the set, I'm going to rename him. Just solely for the purpose of
notational simplicity, I'm just going to rename our bj, b2,
and our b2 is equal to bj. So I'm just rearranging
the names. And I'm going to
remove our b2. Or I'm going to remove
what I now call b2. It was whatever was out here
that could be represented as a linear combination of
everything else, including our new a2. When I remove one of those
terms right here, and I renamed it B2. And now it's equal to a1
a2, and now I have the leftovers of my b's. So I have b3, b4, all
the way to bm. Notice I still have exactly
m elements, and this still spans V. It spans V because the element
that I took out of it can be represented as a linear
combination of these guys. So if I ever want to construct
anything that need that, I can construct that vector with some combination of these guys. So it wasn't necessary. It still spans V. So this process I'm doing, I
can just keep repeating it. I can add an a3. I can define B3 prime. I can just add a3 to this
set right here, a2 a3. And then I have my b3, b4,
all the way to bm. And I'll say this is linearly
dependent because this guy spans V. So everything but this
guy spans V. So obviously you can construct
this guy with a linear combination of the
rest of them. So you could say a3 is equal to
sum a1 plus sum a2 plus c3 b3, all the way to cm bm. And we know that at least one
of the coefficients on the B terms has to be non-zero. Because if all of those were
0, then you would be saying that a3 could be a linear
combination of the A terms. And we know that a3 can't be
a representative linear combination of the A terms,
because all these a terms come from a linearly independent
set. So you do the same operation. Let's say that cj is non-zero. Then you could solve
for that bj. And then I do that little
renaming thing I do, where I rename the bj b3, and rename b3
bj, and then I remove b3. And I get the set B3 is
equal to a1, a2, a3. And I have b4 all
the way to bm. And this still spans V. And I keep doing it. So what's going to happen
eventually? What's going to happen if I keep
doing this process over and over and over again? Eventually I'll essentially
replace all of the bm's. Or I'll replace all of the n
terms, so eventually I'll have a set that looks like this. I'll have a set that looks Bm,
where I will have replaced each of these guys with an a. So I have a1, a2, a3,
all the way to am. You can always do this by
definition if you started with that initial set B that
is a spanning set. And once you do this process
you'll get the same result that this also spans V. Now let me let me write this. This is the result we got by
starting off with a spanning set B that has m elements,
where we said that m is less than n. So we always have enough a
elements to do this, because we have more a elements
than there were b elements to begin with. And we get result that
this spans V. But we already said that the
set A which is equal to a1, a2, all the way to am, and then
am plus 1, I don't know how many more terms there are
between m and n, but then you go all the way to an. Remember we said that
n is greater than m. Or when we defined B, we said
that m is less than n. Same thing, that this
was a smaller set. Now we're saying that this spans
V, but at the same time we said this was a basis. This is just our starting
fact, that this is a basis for V. Basis means two things: it means
it spans V and it means it's linearly independent. Now we just got this result by
assuming that we had some set B that's smaller than this
set here that spans V. We were able to construct this
by saying that a1 through am also spans V. The result we got is
that this spans V. But if this subset of A spans
V, then A becomes linearly independent. Because if this subset spans V,
that means that an can be represented as some linear
combination of these guys. So that implies that you're
linearly dependent, which is a contradiction with our original
statement that set A is a basis for V, because
that means it's linearly independent. If you're able to do this, then
this means that there was some smaller spanning set, you
get the result that A has to be linearly dependant, even
though we said it was linearly independent. So we now know, we get our
contradiction, we say that there cannot be [typing] a spanning set B that has
fewer elements than A. And this is a pretty neat
outcome, because now, if I come up to you and say I
found some set X spans the subspace V again. Then you know that X
has five elements. You now know that no set that
spans the subspace V can have fewer than five elements. Even better, if I told you that
X is a basis for V, and I told you it has five elements,
and Y is a basis for V. [typing] You know that Y also has to have
exactly five elements. How do I know that? Well, if Y is a basis, then that
means that it spans V. And we know it can't
have anything less than five elements. We just proved that. One way we know that Y has to
have greater than or equal to five elements. But on the other hand we know if
Y is a basis for V and X is a basis, X also spans V. So we know that X has to have
fewer elements than Y. So we know that [typing] Y's elements have to be greater
than X's elements, because any spanning set has to
have more elements, or at least as many elements, as a
basis set, X's elements. And then since X is a spanning
set, X's elements have to be greater than or equal
to Y's elements, because why is a basis. But if this guy's elements are
less than this guy's elements, but it's also greater than or
equal to, we know that the number of elements that X has--
X's elements, or the cardinality or the number of
elements in it --is equal to Y's elements. And so now that we know that any
basis for a vector space-- Let me just go back
to our set A. A is equal to a1 a2,
all the way to an. We can now say that any basis
for some vector, for some subspace V, they all have the
same number of elements. And so we can define a
new term called the dimension of V. Sometimes it's written just as
dimension of V, is equal to the number of elements,
sometimes called the cardinality, of any
basis of V. And I went through great pains
in this video to show that any basis of V all has the same
number of elements, so this is well-defined. You can't have one basis that
has five elements and one that has six. By definition they would either
both have to have five, or they both would
have to have six. And so we can define
our dimensionality.",Proof: Any subspace basis has same number of elements |  Linear Algebra | Khan Academy,"Proof: Any subspace basis has same number of elements

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/dimension-of-the-null-space-or-nullity?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/visualizing-a-column-space-as-a-plane-in-r3?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,Zn2K8UIT8r4
Workedexample-Euler'smethod_Differentialequations_APCalculusBC_KhanAcademy-_-a-yNubpk8.en.csv,"- [Voiceover] Now that we are
familiar with Euler's method, let's do an exercise that
tests our mathematical understanding of it, or at
least the process of using it. So, it says consider the
differential equation: the derivative of y with respect to x is equal to three x minus two y. Let y is equal to g of x be a solution to the differential equation
with the initial condition g of zero is equal to
k where k is constant. Euler's method starting at x equals zero with the a step size of
one gives the approximation that g of two is approximately 4.5. Find the value of k. So once again, this is saying
hey, look, we're gonna start with this initial condition
when x is equal to zero, y is equal to k, we're
going to use Euler's method with a step size of one. So, we're essentially going
to use, we're going to step once from zero to one, and
then again from one to two. And then that approximation
is going to give us 4.5. And so, given that we started
at k, we should be able to figure out what k was to get us to g of two being approximated as 4.5. So with that, I encourage
you to pause the video, and try to figure this out on your own. I am assuming you have tried
to figure this out on your own. Now we can do it together. And I'll do the same thing that we did in the first video on Euler's method. I'll make a little table here
so let me make a little table. I can draw a straighter line than that. That's only marginally straighter, but it will get the job done. So let's make this column
x, I'm going to give myself some space for y, I might do some calculation here, y, and then dy/dx. Now, we can start at
our initial condition. When x is equal to zero, y is equal to k. When x is equal to zero, y is equal to k. And so, what's our derivative
going to be at that point? Well, dy/dx is equal
to three x minus two y. So in this case, it's three
times zero minus two times k, which is just equal to negative two k. And so now we can increment one more step. We have a step size of
one, so at each step we're going to increment x by one, and so we're now going to be at one. Now what's our new y going to be? Well, if we increment
x by one, and our slope is negative two k, that means
we're going to increment y by negative two k times
one, or just negative two k. So, negative two k. So k plus negative two k is negative k. So, our approximation using
Euler's method gets us the point one negative
k, and then what is going to be our slope starting at that point? So one negative k, our slope
is going to be three times our x, which is one, minus
two times our y, which is negative k now, and this is
equal to three plus two k. And now we'll do another step of one, because that's our step size. Another, whoops, I'm going to get to two. Now this is the one that
we care about right? Because we're trying to
approximate g of two. So we have to say, what
does our approximation give us for y when x is equal to two? And we're going to have
something expressed in k, but they're saying that's going to be 4.5, and then we can use that to solve for k. So what's this going to be? So if we increment by one in x, we should increment our y by
one times three plus two k. So we're going to increment
by three plus two k, or negative k plus three plus two k is just going to be three plus k. And they're telling us that our approximation gets that to be 4.5. So three plus k is equal to 4.5. So the k that we started
with must have been, if we just subtract three from both sides, this is a decimal here, it must have been k must be equal to 1.5,
and you can verify that. If this initial condition right over here, if g of zero is equal to 1.5,
then you put 1.5 over here. Then over here you would
get 4.5, and we're done.",Worked example: Euler's method | Differential equations| AP Calculus BC | Khan Academy,"Finding the initial condition based on the result of approximating with Euler's method.

Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/ap-calculus-bc/bc-diff-equations/bc-eulers-method/e/euler-s-method?utm_source=YT&utm_medium=Desc&utm_campaign=APCalculusBC 

Watch the next lesson: https://www.khanacademy.org/math/ap-calculus-bc/bc-diff-equations/bc-exp-models/v/modeling-population-with-simple-differential-equation?utm_source=YT&utm_medium=Desc&utm_campaign=APCalculusBC

Missed the previous lesson? https://www.khanacademy.org/math/ap-calculus-bc/bc-diff-equations/bc-eulers-method/v/eulers-method?utm_source=YT&utm_medium=Desc&utm_campaign=APCalculusBC

AP Calculus BC on Khan Academy: Learn AP Calculus BC - everything from AP Calculus AB plus a few extra goodies, such as Taylor series, to prepare you for the AP Test

About Khan Academy: Khan Academy is a nonprofit with a mission to provide a free, world-class education for anyone, anywhere. We believe learners of all ages should have unlimited access to free educational content they can master at their own pace. We use intelligent software, deep data analytics and intuitive user interfaces to help students and teachers around the world. Our resources cover preschool through early college education, including math, biology, chemistry, physics, economics, finance, history, grammar and more. We offer free personalized SAT test prep in partnership with the test developer, the College Board. Khan Academy has been translated into dozens of languages, and 100 million people use our platform worldwide every year. For more information, visit www.khanacademy.org, join us on Facebook or follow us on Twitter at @khanacademy. And remember, you can learn anything. 

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to Khan Academy's AP Calculus BC channel: https://www.youtube.com/channel/UC5A2DBjjUVNz8axD-90jdfQ?sub_confirmation=1
Subscribe to Khan Academy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,_-a-yNubpk8
Modelingpopulationasanexponentialfunction_Firstorderdifferentialequations_KhanAcademy-_JpS8k1a9yE.en.csv,"-[Voiceover] Let's
think a little bit about modeling population and
what I have pictures here are some of the most known, actually this gentleman right over here might be the most known
person when people think about population and the limits
to grow the population. This is Thomas Malthus. He was a British cleric
and writer and scholar at the end of the 1700s, at
the end of the 18th century, early 19th century. He really challenged the notion that population could grow indefinitely and that we would always
through technology be able to feed ourselves and that really that the
environment would eventually put some caps on how much or where the population could grow to. P.F. Verhulst and I'm sure I'm mispronouncing his name here. He was a Belgian mathematician
who read MalthusÃ¢â‚¬â„¢ work and tried to model the behavior that Malthus was talking about that, okay when there aren't
environmental constraints, maybe population does grow
somewhat exponentially but then as it approaches
kind of the limits set by the environment it's going to essentially asymptote towards some type of population. Malthus in particular,
he actually doesn't think it's just going to be
a nice clean asymptote. He actually thinks that the population would kind of go above the limit and you'd have these catastrophes and then they would go
crashing below the limit and you kind of oscillate
right around the limit through these catastrophes. You can tell Malthus was
a fairly optimistic guy but let's go through a
little bit of the math and a little bit of the
differential equations although it's not too,
these aren't overly hairy differential equations to
think about population. The first way to think about population and I'll express it as
a differential equation. Actually let me just
set some variables here. Let's say that N is our population, so that's our population and we are going to assume
that N is a function of T. N as a function of T is what we're going to
be thinking about in this and frankly the next series of videos. One way to think about how to model this is just so what is the rate of change of population with respect to time? How does that relate to things? We could say, okay, well
what is the rate of change of population with respect to time? D, capital N, DT. Well one way to think about it is it's going to be
proportional to the population. You could say well maybe
this is going to be some proportionality constant times the population, times the population itself. This makes sense if the
population is smaller then you're not going to have as much change per unit time as if
the population is larger. The larger the population the more it's going to grow in a
particular unit of time. Actually this is actually
a fairly simple to solve differential equation, you
might have done it before. I encourage you to pause this video if you feel inspired to do so but I'll solve it right here and you'll see that we get
an exponential function here for N, so let's do that. Let's solve this and we'll essentially separate the variables,
separate the N from the Ts although we only see DT here but I'll do that in a second. If I divide both sides by N. I get one over N and if I
multiply both sides by DT if you kind of think about the DT is something that you can multiply. I'm going to multiply both sides or I'm going to divide both sides by and multiply both sides by DT. I'm going to get one over N, DN on the left-hand side and on the right-hand
side I'm going to get R times DT. Notice I got the DT
onto the right-hand side by multiplying both sides of that and then I divided both sides by N and I got the one over N right over here. Now what we can do is we
can take the antiderivative of both sides. We can take the
antiderivative of both sides and what do we get on the left-hand side? Well this is just going
to be the natural log of the absolute value of our population and actually if we assume
that the population is always going to be non-zero then we can actually take
this absolute value off but I'll do that in a second. That's going to be equal to R times T and then we could have
added the constant here but I'm just going to do it on one side. It's R times T plus C. Now, if we actually want to solve for N, we could take ... If this is equal to this
then E to this power should be the same as E to this power or another way of thinking about it, E, the natural log of
the absolute value of N is equal to this. Is another way of saying that E to this is going to be equal to that. Well actually let me just do it this way. Let me just take E to this power and to that power. If that's equal to that
then E to that power should be the same as E to that power. We're going to be left
with E to the natural log of the absolute value of N. That's going to give you
the absolute value of N. Let's just assume N positive, let's just assume population
is greater than zero. Then we can this left-hand
side right over here we'll just simplify to N and then our right-hand
side it's going to be ... Well it could be E to the RT plus C or this is the same thing. This thing right over
here is the same thing as E to the RT, E to the R times T, times, actually let me do that
E in that same color. E to the RT, times E to the C, times E to the C, right? I'm just taking E to the
sum of these two exponents. That's going to be E to
the RT, times E to the C. If we want to, we could
just hey you know what, this is still just going to be some arbitrary constant here. Actually let's just call this C. It's E to the RT times C or we could say C times E to the RT. Notice, so we have solved
the differential equation. We haven't gotten to this kind of less than optimistic reality of Malthus where we're limiting it. This is just hey, if we
just assume population is going to ... The rate of change of
population with respect to time is going to be proportional to population. When we solve that differential equation, we get that population
is a function of time. Actually let me make it explicit that this is a function of time. Let me just move the N over a little bit, so let me write it this way. N of T is going to be equal to this. This was our solution to
this differential equation. Once again this is going
to just grow forever and if we know the initial conditions and so let's say that
we knew that N of zero when time is equal to zero. Let's just say that's N sub naught so what would C be? Well N of zero is going to be equal to C. C times E to the zero power. You know the zero power is just one so this is going to be equal to C, so C is equal to N sub naught. Now we can even write it that the solution to this
thing right over here is N as a function of T is going to be equal to C times ... Be careful, N naught,
our initial population, times E to the E to the RT. Now once again this is an exponential. Essentially our population
is going to look like this. If I were to graph it, it's going to look if that's my time axis, that's my N axis right over here. I could say it's Y equals N axis, however I want to denote it. That would be N naught and it's going to grow
exponentially from there. The rate of this exponential function is going to be dictated by
this constant right over there but it's going to be
look something like this and it's just going to grow
faster and faster and faster forever and ever and ever and ever. Now, as I mentioned at the
beginning of the video, Malthus does not believe that this is going to be true. He thinks that we're going
to hit some natural limits that are going to start to
constrain the population. In his mind the more natural or more realistic function
to model population would look something like this or even potentially something
that you keep going crashing around that kind of limit. What we'll see in the next
video is that P.F. Verhulst actually came up with a very
good one differential equation and solution to the differential equation that does model a lot
better, that better describes the reality that Malthus
believed that we were in.",Modeling population as an exponential function | First order differential equations | Khan Academy,"Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/logistic-differential-equation/v/logistic-differential-equation-intuition?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/modeling-with-differential-equations/v/applying-newtons-law-of-cooling-to-warm-oatmeal?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,_JpS8k1a9yE
'Shifting'transformbymultiplyingfunctionbyexponential_DifferentialEquations_KhanAcademy-_X_QwpXsdOs.en.csv,"Now I think is a good time
to add some notation and techniques to our Laplace
Transform tool kit. So the first thing I want to
introduce is just kind of a quick way of doing something. And that is, if I had the
Laplace Transform, let's say I want to take the Laplace
Transform of the second derivative of y. Well, we proved several videos
ago that if I wanted to take the Laplace Transform of the
first derivative of y, that is equal to s times the Laplace
Transform of y minus y of 0. And we used this property in the
last couple of videos to actually figure out the Laplace
Transform of the second derivative. Because if you just, you know,
if you say this is y prime, this is the anti-derivative
of it, then you could just pattern match. You could say, well, the Laplace
Transform of y prime prime, that's just equal to s
times the Laplace Transform of y prime minus y prime of 0. This is the derivative of this,
just like this is the derivative of this. I'll draw a line here just so
you don't get confused. So the Laplace Transform of y
prime prime is this thing. And now we can use this, which
we proved several videos ago, to resubstitute it and get it
in terms of the Laplace Transform of y. So we can expand this part. The Laplace Transform of the
derivative of y, that's just equal to s times the Laplace
Transform of y minus y of 0. And then we have the
outside, right? We have s minus y prime of 0. And then when you expand it all
out, and we've done this before, you get s squared times
the Laplace Transform of y minus s times y of 0
minus y prime of 0. Now there's something
interesting to note here, and if you learn this it'll
make it a lot faster. You won't have to go through
all of this and risk making careless mistakes when you have
scarce time and paper on your test. Just notice that
when you take the Laplace Transform of the second
derivative, what do we end up? We end up with s
squared, right? This was the second
derivative. So I end up with s squared times
the Laplace Transform of y, minus s times y of 0 minus
1 times y prime of 0. So every term, we started with s
squared, and then every term we lower the degree of s one,
and then everything except the first term is a negative sign. And then we started with the
Laplace Transform of y, and then you can almost view the
Laplace Transform as a kind of integral, so we kind of take
the derivatives, so then you get y. And then you take
the derivative again, you get y prime. And of course every other
term is negative. And these aren't the
actual functions. These are those functions
evaluated at 0. But that's a good way to help
you, hopefully, remember how to do these. And once you get the hang of it,
you can take the Laplace Transform of any arbitrary
function very, very quickly. Or any arbitrary derivatives. So let's say we wanted to take
the Laplace Transform of, I don't know, this should hit
the point home, the fourth derivative of y. That 4 in parentheses means
the fourth derivative. I could have drawn four prime
marks, but either way. So what is this equal to? If we use this technique and
substitute it, we're bound to make some form of careless
mistake or other, and it would take us forever and it would
waste a lot of paper. But now we see the pattern, and
so we can just say, well, the Laplace Transform of this,
in terms of the Laplace Transform of y, right, that's
what we want to get to, is going to be s to the fourth
times the Laplace Transform of y-- now every other term is
going to have a minus in front of it-- minus-- lower the
degree on the s-- minus s to the third. And then you could kind of say,
let's take the, you know, so form of derivative, so you
get y of 0-- it's not a real derivative. The Laplace Transform really
isn't the anti-derivative of y of 0, but anyway, I think
you get the idea. And then we lower the degree on
s again, minus s squared, take the derivative. And of course these
aren't functions. But we're evaluating the
derivative of that function now of 0. So y prime of 0, minus-- now we
lower the degree one more-- minus s, times-- this is an s--
times y prime prime of 0. We have one more term. Lower the degree on the
s one more time. Then you get s to the
0, which is just 1. So minus-- and 1 is a
coefficient-- and then you have y, the third derivative
of y-- let me scroll over a little bit-- the third
derivative of y evaluated at 0. So I think you see
the pattern now. And this is a much faster way
of evaluating the Laplace Transform of an arbitrary
derivative of y, as opposed to keep going through that pattern
over and over again. Another thing I want to
introduce you to is just a notational savings. And it's just something that
you'll see, so you might as well get used to it. And it actually saves time over,
you know, keep writing this curly L in this bracket. If I have the Laplace Transform
of y of t, I can write as, and people tend to
write it as-- well, it's going to be a function of s, and what
they use is a capital Y to denote the function of s. It makes sense, because normally
when we're doing antiderivatives, you just take--
you know, when you learn the fundamental theorem
of calculus, you learn that the integral of f with respect
to dx, you know, from 0 to x, is equal to capital F of x. So it's kind of borrowing that
notation, because this function of s is kind of
an integral of y of t. The Laplace Transform, to some
degree, is like a special type of integral where you have a
little exponential function in there to mess around with
things a little bit. Anyway, I just wanted you to
get used to this notation. When you see capital Y of s,
that's the same thing as a Laplace Transform of y of t. And you might also
see it this way. The Laplace Transform of f of t
is equal to capital F of s. And the clue that tells you that
this isn't just a normal antiderivative, is the fact that
they're using that s as the independent variable. Because in general, s represents
the frequency domain, and if people were to
use s with just a general antiderivative, people
would get confused, et cetera, et cetera. Anyway, I'm trying to think
whether I have time to teach you more fascinating concepts
of Laplace Transform. Well, sure, I think we do. So my next question for you--
and now we'll teach you a couple more properties, and
this'll be helpful in taking Laplace Transforms. What is the
Laplace Transform of e to the at times f of t? Fascinating. Well, let's just should go back
to our definition of the Laplace Transform. It is the integral from 0 to
infinity of e to the minus st times whatever we have between
the curly brackets. So, with the curly brackets we
have e to the at f of t dt. And now we can add
these exponents. We have a similar base, so
this is equal to what? This is equal to the integral
from 0 to infinity. And let's see, I want to write
it as, I could write it minus s plus a, but I'm going to write
it as minus s minus a t. And you could expand this out. It becomes minus s plus a, which
is exactly what we have here, times f of t dt. Now let me show you something. if I were to just take the
Laplace Transform of f of t, that is equal to some
function of s. Whatever we essentially have
right here for s, it becomes some function of that. So this is interesting. This is some function of s. Here, all we did to go
from-- well actually let me rewrite this. The Laplace, which is equal to
0 to infinity e to the minus st f of t dt. The Laplace Transform of just f
of t is equal to this, which is some function of s. Well, the Laplace Transform of
e to the at, times f of t, it equals this. And what's the difference
between this and this? What's the difference
between the two? Well, it's not much. Here, wherever I have an s,
I have an s minus a here. So if this is a function of s,
what's this going to be? It's going to be that
same function. Whatever the Laplace Transform
of f was, it's going to be that same function, but instead
of s, it's going to be a function of s minus a. And once again, how
did I get that? Well I said the Laplace
Transform of f is a function of s, and it's equal to this. Well if I just replace an s with
an s minus a, I get this, which is a function
of s minus a. Which was the Laplace Transform
of e to the at times f of t. Maybe that's a little
confusing. Let me show you an example. Let's just take the Laplace
Transform of cosine of 2t. We've shown is equal to-- well
I'll write the notation-- it's equal to some function of s. And that function of s is
s over s squared plus 4. We've shown that already. And so the Laplace Transform of
e to the, I don't know, 3t times cosine of 2t, is going
to be equal to the same function, but instead of
s, it's going to be a function of s minus a. So s minus 3, which is equal
to s minus 3 over s minus 3 squared plus 4. Notice, when you just multiply
something by this, either the 3t and then or either the at,
you take the Laplace Transform of it, you just-- it's the
same thing as the Laplace Transform of this function, but
everywhere where you had an s, you replace it with
an s minus this a. Anyway, I hope I didn't
confuse you too much with that last part. I think my power adaptor
actually just went on. I hope the video keeps
recording. I'll see you in the next one.","""Shifting"" transform by multiplying function by exponential | Differential Equations | Khan Academy","A grab bag of things to know about the Laplace Transform.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-of-l-t?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-6?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,_X_QwpXsdOs
Findheightofabinarytree-_pnqMz5nrRs.en.csv,"In this lesson, we're going to write code
to find height or what we can also call maximum depth
of a binary tree. We have already discussed
depth and height in our first introductory lesson on trees but I'll do a quick recap here.
First of all, I have drawn a binary tree here. I have not filled in any data 
the nodes. Data can be anything. Binary tree, as
we know is a tree in which each node can have
atmost 2 children. So a node can have 0 1 or 2
children. I'll just number these nodes so I can
refer to them. I'll say this root node is number one and
I'll go level by level from left to right, counting 2, 3, 4 and so on. Now height of a
tree is defined as number of edges in 
longest path from root to a leaf node. In this example tree, 4 6 7 8
and 9 are leaf nodes. A leaf node is a node with 0
children. Number of edges in longest path from root to a
leaf node is 3. For both 8 and 9 number of edges in path from root is 3. So height of the tree is 3. Actually
we can define height of a node in the tree as number of edges in longest path from that node to a leaf node, so height of a tree
basically is height of the root node. In this example tree, height of node 3 is 1. Height of node 2 is 2 and
height of node 1 is 3 and because this is the root
node, this is also the height of the tree. Height of leaf node would be 0,
so if a tree has only one node then the root node itself would be a
leaf node and so height of the tree would be 0. So this is definition
of height of a tree. We often also talk about depth and we often confused between depth and
height but these 2 are different properties. depth of a node is defined as number of
edges in path from root to that node. Basically, Depth is distance from root and height is distance from the best accessible
leaf node. For node 2 in this example tree, depth is
1 and height is 2. For node number 9 which is a
leaf node depth is 3 and height is 0. For
root node depth is 0 and height is 3. Height of a tree would be equal to maximum depth of any
node in the tree so height and max depth, these two
terms are used for each other. Okay, let's now see how we can calculate
height or max depth of a binary tree. I'm going to write a function named FindHeight that will take a reference or address of root
node as argument and return me the height of the binary
tree. Now the logic to calculate how it can be
something like this. For any node, if we can somehow calculate
the height of its left subtree and also the height of its right subtree
then the height of that node would be greater of the heights of left and right
subtrees + 1. For the root node in this tree height of the left subtree is 2 and height of the right subtree is 1, so height of the root node would be
greater of these 2 values + 1. + 1 for the edge connecting the root node to the subtree,
so height of the root node which would also
be the height of the tree is 3 here. In our code, we can calculate height of left and
right subtrees using recursion. What I'll do here in
FingHeight function is, I'll first make a recursive call to find
height of the left subtree. We can say to find out if left subtree or to find height of left child both
will mean the same. I'm collecting the return of this recursive
call in a variable named left height and now I'll make
another recursive call to calculate height of right subtree
or right child. Now height of the tree or height of
whatever node for which we have made this function call would be greater of
these 2 values, Left height and right height + 1. Now there is only one more thing missing
in this recursion. We need to write the base or exit condition. We cannot go into the
recursion infinitely. What we can do is we can go on until we
make our to recursive call with root equal null and if the root
is null that is if the tree or sub tree is empty, we can return something. What should be done here. Give this some
thought. If I have made a call to find height of
let's say this leaf node this node with number 7 then for this guy both
left and right children are null. In call for this node number 7, we
will make two recursive calls passing null in both the call, so what
should we return. Should we return 0. If these 2 calls
will return 0 then height of 7 will be 1. Because in the return statement here, we're
saying max of left and right height + 1. But as we had discussed earlier,
height of a leaf node should be 0. So if we are
returning 0 for root equal null, it's not alright. What we
can do is, we can to return -1. When we are returning -1 then this edge
to null that does not exist but still was getting counted will be balanced
with this -1. I hope this is making sense and going by
convention also height of an empty tree is set to be -1. So this is pseudo code for my function
to find height of a binary tree. Some people define height
as number of node in longest path from root to a leaf node.
We are counting edges here and this is the right definition. If you
want to count number of nodes then for a leaf node height would be 1 and for empty tree height would be 0.
So all you need to do is return 0 here, and this is the code if you want to
contact number of nodes but I think the right definition is number of
edges so I'll return -1 here. Time complexity of this
function is O(N) where N is number of
nodes in the tree. We will make one recursive call
corresponding to each node in the tree, so we're kind of visiting each node in
the tree once and so running time will be
proportional to number of nodes. I'll skip the detailed analysis of running
time in this lesson. This is what my FineHeight function will
look like inn C or C++.  Max here is a function that the return
greater of two values passed to it as arguments. So this is it for this lesson. Thanks for
watching.",Find height of a binary tree,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have written code to find height of a binary tree using a simple recursion. 

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,_pnqMz5nrRs
Nullspaceandcolumnspacebasis_Vectorsandspaces_LinearAlgebra_KhanAcademy-_uTAdf_AsfQ.en.csv,"What I want to do in this video
-- and it'll probably occur over several videos -- is
really integrate everything we know about matrices, and
null spaces, and column spaces, and linear
independence. So I have this matrix
here, this matrix A. And I guess a good place to
start is, let's figure out its column space and
its null space. The column space is actually
super easy to figure out. It's just the span of the
column vectors of A. So we can right from the get-go
write that the column space of our matrix A-- Let
me do it over here. I can write the column space of
my matrix A is equal to the span of the vectors 1, 2, 3. 1, 1, 4. 1, 4, 1. And 1, 3, 2. I'm done. That was pretty straightforward,
a lot easier than finding null spaces. Now this may or may not
be satisfying to you. And there's a lot of
open questions. Is this a basis for the
space, for example? Is this a linear independent
set of vectors? How can we visualize
this space? And I haven't answered
any of those yet. But if someone just says, hey
what's the column space of A? This is the column space of A. And then we can answer some
of those other questions. If this is a linearly
independent set of vectors, then these vectors would
be a basis for the column space of A. We don't know that yet. We don't know whether these
are linearly independent. But we can figure out if they're
linearly independent by looking at the
null space of A. Remember these are linearly
independent if the null space of A only contains
the 0 vector. So let's figure out what
the null space of A is. And remember, we can do a
little shortcut here. The null space of A is equal to
the null space of the row, the reduced row echelon
form of A. And I showed you that when we
first calculated the null space of a vector, because when
you performed these -- essentially if you want to solve
for the null space of A, you create an augmented
matrix. And you put the augmented matrix
in reduced row echelon form, but the 0's
never change. So essentially you're just
taking A and putting it in reduced row echelon form. Let's do that. So I'll keep row one the
same, 1, 1, 1, 1. And then let me replace
row two with, row two minus row one. So what do I get? No, actually I want to
zero this out here. So row two minus,
2 times row one. Actually even better because
I eventually want to get a 1 here. So let me do 2 times row
one, minus row two. So let me say 2 times row
one, and I'm going to minus row two. So 2 times 1 minus 2 is
0, which is exactly what I wanted there. 2 times 1 minus 1 is 1. That's nice to have
right there. 2 times 1 minus 4 is minus 2. 2 times 1 minus 3 is minus 1. All right, now let me see if I
can zero out this guy here. So what can I do? I could do any combination,
anything that essentially zeroes this guy out. But I want to minimize my number
of negative numbers. So let me take this third row,
minus 3 times this first row. So I'm going take minus 3 times
that first row and add it to this third row. So 3 minus 3 times 1 is 0. These are just going to
be a bunch of 3's. 4 minus 3 times 1 is 1. 1 minus 3 times 1 is minus 2. And 2 minus 3 times
1 is minus 1. Now if we want to get this into
reduced row echelon form we need to target that one
there and that one there. And what can we do? So let's keep my middle
row the same. My middle row is not
going to change. 1, 1, minus 2, minus 1. And to get rid of this one up
here I can just replace my first row with my first row
minus my second row. Because then this
won't change. I'll have 1 minus 0 is 1. 1 minus 1 is 0. That's what we wanted. 1 minus minus 2 is 3. That's 1 plus 2. 1 minus minus 1. That's 1 plus 1. That is 2. Fair enough? Now let me do my third row. Let me replace my third row with
my third row subtracted from my first row. They are obviously
the same thing. So if I subtract the third row
from the second row I'm just going to get a bunch of 0's. 0 minus 0 is 0. 1 minus 1 is 0. Minus 2 minus minus 2 is 0. And minus 1 minus minus 1. That's minus 1 plus 1. That's equal to 0. And just like that
we have it now in reduced row echelon form. So this right here is the
reduced row echelon form of A. That straightforward. Now the whole the reason why
we even went through this exercise is we wanted
to figure out the null space of A. And we already know that the
null space of A is equal to the null space of the reduced
row echelon form of A. So if this is the reduce row
echelon form of A, let's figure out its null space. So the null space is the set
of all of vectors in R4, because we have 4
columns here. 1, 2, 3, 4. The null space is the set of
all of vectors that satisfy this equation, where
we're going to have three 0's right here. That's the 0 vector in R3,
because we have three rows right there, and you
can figure it out. This times this has
to equal that 0. That dotted with that
essentially is going to equal that 0. That dotted with that
is equal to that 0. I say essentially because I
didn't define a row vector dot a column vector. I've only defined column vectors
dotted with other column vectors. But we've been over that in a
previous video, where you can say this is a transpose
of a column vector. So let's just take this,
and write a system of equations with this. So we get 1 times x1. So this times this is going
to be equal to that 0. So one times x1, that is x1. Plus 0 times x2. Let me just write that out. Plus 3 times x3. Plus 2 times x4 is
equal to that 0. And then -- I'll do it in
yellow right here -- I have 0 times x1. Plus 1 times x2. Minus 2 times x3. Minus x4 is equal to 0. And then this gives
me no information. 0 times all this
is equal to 0. So it just turns into
0 equals 0. So let's see if we can solve for
our pivot entries, or our pivot variables. What are our pivot entries? This is a pivot entry. That's a pivot entry. That's what reduced row echelon
form is all about, getting these entries that are
1 and they're the only non-zero term in their
respective columns. And that every pivot entry
is to the right of a pivot entry above it. And then the columns that don't
have pivot entries? These columns represent
the free variables. So this column has
no pivot entry. And so when you take the dot
product, this column turned into this column in our
system of equations. So we know that x3 is
a free variable. x3 is free. We can set it equal
to anything. Likewise x4 is a
free variable. X1 and x2 are pivot variables,
because their corresponding columns in our reduced row
echelon form have pivot entries in them. Fair enough. So let's see if we
can simplify this into a form we know. And we've seen this before. So if I solve for x1 --
this 0 I can ignore. That 0 I can ignore -- I could
say that x1 is equal to minus 3x3 minus 2x4. I just subtracted these two
from both sides of the equation and I can say that x2
is equal to 2x3 plus x4. And if we want to write our
solution set now, so if I wanted to find the null space of
A, which is the same thing as the null space of the reduced
row echelon form of A, is equal to all of the vectors
-- let me do a new color. Maybe I'll do blue -- is equal
to all of the vectors x1, x2, x3, x4 that are equal to -- So what are they going
to be equal to? X1 has to be equal to
minus 3x3 minus 2x4. Just to be clear, these are free
variables because I can set these to be anything. And these are pivot variables
because I can't just set them to anything. When I determine what my x3's
and my x4's are, they determine what my x1's and
my x2's have to be. So these are pivoted
variables. These are free variables. I can make this guy pi. And I can make this
guy minus 2. We can set them to anything. So x1 is equal to -- let's see,
let me write it this way -- they're equal to x3 -- let me
do it in a different color -- do x3 like this. So it's equal to x3 times some
vector plus x4 times some other vector. So any solution set in my null
space is going to be a linear combination of these
two vectors. We can figure out what these
two vectors are just from these two constraints
right here. So -- let me do it in a neutral
color -- x1 is equal to minus 3 times x3
minus 2 times x4. Straightforward enough. x2 is equal to 2 times
x3 plus x4. What's x3 equal to? Well x3 is equal to itself. Whatever we set x3 equal to,
that's going to be x3. So x3 is going to be 1 times
x3 plus 0 times x4. It is not going to have
any x4 in it. X3 is going to be kind of
an independent variable. It's going to be free. We can set whatever it is. We set it and then that's
going to be x3 in our solution set. x4 is not going to have
any x3 in it. It's just going to
be 1 times x4. And so our null space is
essentially all of the linear combinations of these
two vectors. This can be any real number. This is just any real number and
x4 is just a member of the real space. So all of these, the set of all
of the valid solutions to Ax is equal to 0 -- where
did I write that. Did I even write that down? No I haven't even written
that anywhere. The set of all Ax is equal to
0, where this is my x, it equals all the linear
combinations of this vector and that vector right there. And we know what all of the
linear combinations mean. It means my null space is equal
to the span of these two guys, the span of minus
3, 2, 1, 0. And minus 2, 1, 0, 1. Now let me ask you a question. Are the columns in A, are they
a linearly independent set? Are they a linearly
independent set? So if we write these vectors
right there, these are the column vectors of A. So let me write that down. So are the column vectors of
A -- so what were they? Let's see. 1, 3, 2. No it's 1, 2, 3. 1, 1, 4. 1, 4, 1. And 1, 3, 2. So this is just the column
vectors of A. I could just write A is just
this much of columns, but my question is, is this a linearly
independent set? And here you might immediately
start thinking, well when we said that something is linearly
independent -- so linearly independence implies
that there's only one solution -- we saw this I think two
videos ago, that there's only one solution -- one solution
to Ax is equal to 0. And that is the 0 solution,
that x is equal to the 0 vector. Or another way to say that is
that the null space of my matrix A is equal to
just the 0 vector. That's what linear independence
implies. And it goes both ways. If my null space is just a 0
vector, then I know it's linearly independent. If my null space includes other
vectors, then I am not linearly independent. Now my null space of A,
what does it include? Is it just the 0 vector? Well, no it includes
every linear combination of these guys. It includes actually an infinite
number of vectors, not just one solution. Obviously 0 vector is contained
here, if you just multiply both of these -- if you
pick 0 for that and that. It's contained, but you can get
a whole set of vectors. So because the null span of A,
the null space, sorry, the null space of A does not just
contain the 0 vector. So it has more than just 0. So what does that mean? Well that means that
there's more than one solution to this. And that means that this is
a linearly dependent set. And what does that mean? At the very beginning of the
video I said, what's the column space of A. And we said, the column space
of A is just the span of the column vectors. I just wrote it out like that. And I said, well it's not clear
whether this is a valid basis for the column
space of A. And what's a basis? A basis is a set of vectors that
span a subspace, and they are also linearly independent. And we just showed that these
guys are not linearly independent. So that means that they are
not a basis for the column space of A. They do span the column space
of A, by definition really. But they're not a basis. They need to be linearly
independent for them to be a basis. So let's see if we can figure
out what a basis for this column space would be. And to do that we just
have to get rid of some redundant vectors. If I can show you that this guy
can be represented by some combination of these two
guys, then I can get rid of that guy. He's not adding any
new information. Same with that guy. Who knows? So let's see if we can figure
this piece of the puzzle out. So we know already that x1, let
me write it this way, that x1 times -- Maybe I'll just kind
of leave you hanging and continue this in
the next video. But we know that x1
times 1, 2, 3. Plus x2 times 1, 1, 4. Plus x3 times 1, 4, 1. Plus x4 times 1, 3, 2. We know that this
is equal to 0. Now if we are able to solve for
x4 in terms of -- let me just think that I can solve
for the vectors that are associated with my
free variables using the other vectors. Let me see if I can do that. And you'll see it's actually
pretty straightforward. So let's say I want
to solve for x4. So if I subtract this from
both sides of this equation, I get what? Let me put it this way, let
me set x3 equal to 0. It was a free variable. I can do that. So if I set x3 is equal to 0,
then what do I get here? If I said x3 equals 0,
this guy disappears. And if I subtract this from both
sides of this equation, I get x1 times 1, 2, 3. Plus x2 times 1, 1, 4. Is equal to -- I'm just
setting x3 equal to 0. That was a free variable. So I'm setting x3 equal to 0. So this whole thing
disappears. So that is equal to minus
x4 times 1, 3, 2. Now I set x3 equal to 0. Let me set x4 to be
equal to minus 1. If x4 is equal to minus
1, what is minus x4? Well then this thing will
just be equal to 1. And I'll have x1
times 1, 2, 3. Plus x2 times 1, 1, 4 will
equal this fourth vector right here. And can I always find
things like this? Well sure I can actually find
the particular ones. If x3 is equal to 0, and x4 is
minus 1 -- Let me copy and paste this that I have up
here -- Let me scroll down a little bit. This is what we got when we
figured out our null space, right there. So if I'm setting -- remember
these are the free variables -- if I set x3 equal to
0 and x4 is equal to minus 1, what is x1? Then this will imply that x1 is
equal to minus 3 times x3, that's just 0, minus
2 times x4. If x4 is minus 1, minus
2 times minus 1, x1 will equal 2. And then what will
x2 be equal to? x2 is equal to 2 times x3,
which is 0, plus x4. So it's equal to minus 1. So I just showed you that if I
set this equal to 2 and this equal to minus 1, I have a
linear combination of this vector and this vector
that can add up to this fourth vector. And you can even verify it. 2 times 1 minus 1
is equal to 1. 2 times 2 minus 1
is equal to 3. 2 times 3 is 6, minus
4 is equal to 2. So it checks out. So I just showed you using,
really, our definitions looking at what were
our free variables versus our pivot variables. We were able to show you, kind
of just very simply solve for this third, this fourth
vector, in terms of these first two. So we know, if we go back to
the set that this fourth vector is really unnecessary,
really not adding anything to the span of the set
of vectors. Because this guy can be written
as a combination of this guy and this guy. Now let's see if this guy, this
third guy, we can do the same exercise. This is also dictated
by a free variable. So let's see if I can write
him as a combination of these first two. Well we'll do the exact
same thing. Instead of setting x3 equal to 0
and x4 equal to minus 1, let us set x4 is equal to
0 because I want to cross that out. And let me set x3 is
equal to minus 1. If x3 is equal to minus
1, what does this equation reduce to? We get x1 times 1, 2, 3. Plus x2 times 1, 1, 4. Is equal to -- if this is
minus 1 times 1, 4, 1. And then we add it to both sides
of this equation, we get plus 1 times 1, 4, 1. And once again we can just
solve for our x1 and x2. If x4 is 0 and x3 is minus
1, then x1 x4 is 0. So x3 is just minus 3,
times x3, so x1 would be equal to 3, right? Minus 3 times minus 1. And what would x2 be equal to? x4 is 0, we can ignore that. x2 would be equal to minus 2. So this would be 3, and then
this would be minus 2. Let's see if it works out. 3 times 1 minus 2 is 1. 3 times 2 minus 2 is 4. 3 times 3 minus 8 is 1. It checks out. So I'm able to write this
vector, that was associated with the free variable,
as a linear combination of these two. So we can get rid of
him from our set. So now I've shown that this guy
can be written as a linear combination of these two. This guy can be written
as a linear combination of these two. So the span of all of those guys
should be equal to the span -- So let me write
it this way. The column space of A,
I can now re-write. Before it was the span of
all of those vectors. It was the span of all of
the column vectors, v1, v2, v3, and v4. Now I just showed you that v3
and v4 can be rewritten in terms of v1 and v2. So they're redundant. So that is equal to the span
of v1 and v2 which are just those two vectors. Vector 1, 2, 3, and
vector 1, 1, 4. Now are any of these
guys redundant? Can I express one of
them as a linear combination of the other? Essentially when I'm talking
about the linear combination of only one other
vector it's just multiplying it by a scalar. Well let's think about that. There are multiple ways you can
show this, but the easiest way is well look, to go from
this entry to that entry I'm just multiplying by 1. But if I multiply this whole
vector times 1, then I'm going to get a 2 here and I'm
going to get a 3 here. So it won't work. If I want to represent this guy
as a scalar multiple of that guy, so any scalar multiple
of 1, 2, 3 is going to be equal to 1c, 2c, 3c. Right? And so we're saying this guy has
to be represented somehow like that, if we say that this
guy is somehow a scalar, somehow can be represented
by that guy. So that would have to
be equal to 1, 1, 4. When you look at this top entry
it implies that c would have to be equal to 1. But when you look at this second
entry you think that c would have to be equal to 1/2. So you get a contradiction. Over here c would have
to be equal to 4/3. So there's no c where
this will work. There's no multiple of c. And you can work
that both ways. So there's no way that you can
represent one of these guys as a linear combination
of the other. And you can actually prove
other ways, maybe more formally, that this is
linearly independent. But given that this is linearly
independent -- I think you're satisfied with that
-- we can then say that the set of vectors 1, 2, 3, and
1, 1, 4, this is a basis for the column span of A. Now I'm going to let you go in
this video because I think I've gone well over time. But what I'm going to do in
the next few videos is now that I've established that this
is a basis for the column span of A, we can attempt
to visualize it. Because we can say that the
column span of A is equal to the span of these two vectors. And we can think about
what the span of those two vectors are. We're going to see that
it's a plane in R3. Span of 1, 1, 4. And this is a quick reminder,
I've said a couple times. When I say it's a basis all I'm
saying is that these guys, they both span the column
space of A. When I had four vectors,
they also spanned the column space of A. But what makes them a basis is
that these guys are linearly independent. There's no extra information, or
redundant vectors that can be represented by other vectors
within the basis. They are linearly independent. Anyway, I'll let
you go for now.",Null space and column space basis | Vectors and spaces | Linear Algebra | Khan Academy,"Figuring out the null space and a basis of a column space for a matrix

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/visualizing-a-column-space-as-a-plane-in-r3?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/column-space-of-a-matrix?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,_uTAdf_AsfQ
Exactequationsintuition2(proofy)_Firstorderdifferentialequations_KhanAcademy-a7wYAtMjORQ.en.csv,"In the last video I introduced
you to the idea of the chain rule with partial derivatives. And we said, well, if I have a
function, psi, Greek letter, psi, it's a function
of x and y. And if I wanted to take the
partial of this, with respect to-- no, I want to take the
derivative, not the partial-- the derivative of this, with
respect to x, this is equal to the partial of psi, with respect
to x, plus the partial of psi, with respect
to y, times dy, dx. And in the last video I didn't
prove it to you, but I hopefully gave you a little bit
of intuition that you can believe me. But maybe one day I'll prove
it a little bit more rigorously, but you can find
proofs on the web if you are interested, for the chain rule
with partial derivatives. So let's put that aside and
let's explore another property of partial derivatives, and then
we're ready to get the intuition behind exact
equations. Because you're going to find,
it's fairly straightforward to solve exact equations, but the
intuition is a little bit more-- well, I don't want to say
it's difficult, because if you have the intuition,
you have it. So what if I had, say, this
function, psi, and I were to take the partial derivative of
psi, with respect to x, first. I'll just write psi. I don't have to write
x and y every time. And then I were to take the
partial derivative with respect to y. So just as a notation, this you
could write as, you could kind of view it as you're
multiplying the operators, so it could be written like this. The partial del squared times
psi, or del squared psi, over del y del, or curly d x. And that can also be written
as-- and this is my preferred notation, because it doesn't
have all this extra junk everywhere. You could just say, well, the
partial, we took the partial, with respect to x, first. So
this just means the partial of psi, with respect to x. And then we took the partial,
with respect to y. So that's one situation
to consider. What happens when we take the
partial, with respect to x, and then y? So with respect to x, you hold
y constant to get just the partial, with respect to x. Ignore the y there. And then you hold the x
constant, and you take the partial, with respect to y. So what's the difference between
that and if we were to switch the order? So what happens if we were to--
I'll do it in a different color-- if we had psi, and we
were to take the partial, with respect to y, first, and then
we were to take the partial, with respect to x? So just the notation, just so
you're comfortable with it, that would be-- so partial
x, partial y. And this is the operator. And it might be a little
confusing that here, between these two notations, even though
they're the same thing, the order is mixed. That's just because it's
just a different way of thinking about it. This says, OK, partial first,
with respect to x, then y. This views it more as the
operator, so we took the partial of x first, and then
we took y, like you're multiplying the operators. But anyway, so this can also be
written as the partial of y, with respect to x-- sorry,
the partial of y, and then we took the partial of that
with respect to x. Now, I'm going to tell you right
now, that if each of the first partials are continuous--
and most of the functions we've dealt with in
a normal domain, as long as there aren't any
discontinuities, or holes, or something strange in the
function definition, they usually are continuous. And especially in a first-year
calculus or differential course, we're probably going to
be dealing with continuous functions in soon. our domain. If both of these functions are
continuous, if both of the first partials are continuous,
then these two are going to be equal to each other. So psi of xy is going to
be equal to psi of yx. Now, we can use this knowledge,
which is the chain rule using partial derivatives,
and this knowledge to now solve a certain
class of differential equations, first order
differential equations, called exact equations. And what does an exact
equation look like? An exact equation
looks like this. The color picking's
the hard part. So let's say this is my
differential equation. I have some function
of x and y. So I don't know, it could
be x squared times cosine of y or something. I don't know, it could be
any function of x and y. Plus some function of x and y,
we'll call that n, times dy, dx is equal to 0. This is-- well, I don't know if
it's an exact equation yet, but if you saw something of this
form, your first impulse should be, oh-- well, actually,
your very first impulse is, is this separable? And you should try to play
around with the algebra a little bit to see if it's
separable, because that's always the most straightforward
way. If it's not separable, but you
can still put it in this form, you say, hey, is it
an exact equation? And what's an exact equation? Well, look immediately. This pattern right here
looks an awful lot like this pattern. What if M was the partial of
psi, with respect to x? What if psi, with respect
to x, is equal to M? What if this was psi,
with respect to x? And what if this was psi,
with respect to y? So psi, with respect to
y, is equal to N. What if? I'm just saying, we don't
know for sure, right? If you just see this someplace
randomly, you won't know for sure that this is the partial
of, with respect to x of some function, and this is the
partial, with respect to y of some function. But we're just saying,
what if? If this were true, then we
could rewrite this as the partial of psi, with respect to
x, plus the partial of psi, with respect to y, times
dy, dx, equal to 0. And this right here, the left
side right there, that's the same thing as this, right? This is just the derivative of
psi, with respect to x, using the partial derivative
chain rule. So you could rewrite it. You could rewrite, this is just
the derivative of psi, with respect to x, inside
the function of x, y, is equal to 0. So if you see a differential
equation, and it has this form, and you say, boy, I can't
separate it, but maybe it's an exact equation. And frankly, if that was what
was recently covered before the current exam, it probably
is an exact equation. But if you see this form,
you say, boy, maybe it's an exact equation. If it is an exact equation-- and
I'll show you how to test it in a second using this
information-- then this can be written as the derivative of
some function, psi, where this is the partial of psi,
with respect to x. This is the partial of psi,
with respect to y. And then if you could write it
like this, and you take the derivative of both sides--
sorry, you take the antiderivative of both sides--
and you would get psi of x, y is equal to c as a solution. So there are two things that we
should be caring you about. Then you might be saying, OK,
Sal, you've walked through psi's, and partials,
and all this. One, how do I know that it's
an exact equation? And then, if it is an exact
equation, which tells us that there is some psi, then how
do I solve for the psi? So the way to figure out is it
an exact equation, is to use this information right here. We know that if psi and its
derivatives are continuous over some domain, that when
you take the partial, with respect to x and then y, that's
the same thing as doing it in the other order. So we said, this is
the partial, with respect to x, right? And this is the partial,
with respect to y. So if this is an exact equation,
if this is the exact equation, if we were take the
partial of this, with respect to y, right? If we were to take the partial
of M, with respect to y-- so the partial of psi, with respect
to x, is equal to M. If we were to take the partial
of those, with respect to y-- so we could just rewrite that as
that-- then that should be equal to the partial of N,
with respect to x, right? The partial of psi, with respect
to y, is equal to N. So if we take the partial, with
respect to x, of both of these, we know from this that
these should be equal, if psi and its partials are continuous
over that domain. So then this will
also be equal. So that is actually the
test to test if this is an exact equation. So let me rewrite all of that
again and summarize it a little bit. So if you see something of the
form, M of x, y plus N of x, y, times dy, dx is equal to 0. And then you take the partial
derivative of M, with respect to y, and then you take the
partial derivative of N, with respect to x, and they are equal
to each other, then-- and it's actually if and only
if, so it goes both ways-- this is an exact equation, an
exact differential equation. This is an exact equation. And if it's an exact equation,
that tells us that there exists a psi, such that the
derivative of psi of x, y is equal to 0, or psi of x, y is
equal to c, is a solution of this equation. And the partial derivative of
psi, with respect to x, is equal to M. And the partial derivative of
psi, with respect to y, is equal to N. And I'll show you in the next
video how to actually use this information to solve for psi. So here are some things
I want to point out. This is going to be the partial
derivative of psi, with respect to x, but when we
take the kind of exact test, we take it with respect to y,
because we want to get that mixed derivative. Similarly, this is going to be
the partial derivative of psi, with respect to y, but when we
do the test, we take the partial of it with respect
to x so we get that mixed derivative. This is with respect to y,
and then with respect to x, so you get this. Anyway, I know that might be a
little bit involved, but if you understood everything I did,
I think you'll have the intuition behind why
the methodology of exact equations works. I will see you in the next
video, where we will actually solve some exact equations See",Exact equations intuition 2 (proofy) | First order differential equations | Khan Academy,"More intuitive building blocks for exact equations.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/exact-equations-example-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/exact-equations-intuition-1-proofy?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,a7wYAtMjORQ
Dimensionofthenullspaceornullity_Vectorsandspaces_LinearAlgebra_KhanAcademy-abYAUqs_n6I.en.csv,"Let's say I have this matrix
B, here, and I want to know what the null space of B is. And we've done this multiple
times but just as a review, the null space of B
is just all of the x's that are a member. It's all the vector x's that
are member of what? 1, 2, 3, 4, 5 that are members
of r to the fifth, where B, my matrix B, times any of these
vector x's, is equal to 0. That's the definition
of the null space. I'm just trying to find the
solution set to this equation right here. And we've seen before, that the
null set of the reduced row echelon form of B is equal
to the null set of B. So what's the reduced row
echelon form of B? And this is actually almost
trivially easy. Let me just take a couple of
steps right here-- to get a 0 here, let's just replace row
2 with row 2 minus row 1 So what do we get? Row 2 minus row 1. Row 1 doesn't change, it's
just 1, 1, 2, 3, 2. And then row 2 minus row 1. 1 minus 1 is 0. 1 minus 1 is 0. 3 minus 2 is 1. 1 minus 3 is minus 2. 4 minus is 2 is 2. We're almost there. Let's see, so this is a free
variable right here. This is a pivot variable
right here. We have a 1. So let me get rid of that
guy right there. And I can get rid of that guy
right there, by replacing row 1 with row 1 minus
2 times row 2. So now row 2 is going
to be the same. 0, 0, 1 minus 2, 2. And let me replace row 1 with
row 1 minus 2 times row 2. So 1 minus 2 times 0 is 1. 1 minus 2 times 0 is 1. 2 minus 2 times 1 is 0. 3 minus 2 times minus 2. So that's 3 plus
4 is 7, right? 2 times this is minus 4 and
we're subtracting it. And then 2 minus 2 times
2-- that's 2 minus 4-- it's minus 2. So this is the reduced row
echelon form of B is equal to that right there. And then if I wanted to figure
out its null space, I have x1, x2, x3, x4, and x5 equaling--
I'm going to have two 0's right here. Now I can just write this
as just a set of or a system of equations. So let me do that. I get x1. I'm going to write my pivot
variables in a green color. x1 plus 1 times x2, so plus
x2, plus 0 times x3. Plus 7 times x4. Minus 2 times x5 is equal
to that 0 right there. And then I get my--
this is x3, right? 0 times x1 plus 0 times
x2 plus 1 times x3. So I get x3 minus 2 times x4
plus 2 times x5 is equal to that 0 right there. And then if we solve for our
pivot variables, right? These are our free variables. We can set them equal
to anything. If we solve for our pivot
variables what do we get? We get x1 is equal to-- I
should do that in green. The color coding helps. I get x1 is equal to minus x2
minus 7x4 plus 2x5, just subtracted these from both
sides of the equation. And I get x3 is equal to--
we've done this multiple times-- 2x4 minus 2x5. And so if I wanted to write
the solution set in vector form, I could write my solution
set or my null space, really, is-- or all
the possible x's. x1, x2, x3, x4, x5. This is my vector
x, that's in r5. It is equal to a linear
combination of these. So let me write it out. The free variables are x2 times
some vector right there. Plus x-- is x3, no x3 is
not a free variable. Plus x4, that's my next free
variable, times some factor. Plus x5 times some vector. I've run out of space. Plus x5 times some vector. And what are those vectors? Let's see. I don't want to make this too
dirty, so let me see if I can maybe move-- nope that's not
what I wanted to do. Let me just rewrite this. I haven't mastered this pen
tool yet, so let me rewrite this here. So x3 is equal to
2x4 minus 2x5. Let me delete this right
over here so I get some extra space. Cross that out. I think that's good enough. So I can go back to what
I was doing before. x5 times some vector
right here. And now what are
those vectors? We just have to look
at these formulas. x1 is equal to minus
1 times x2. So minus 1 times x2. Minus 7 times x4. Plus 2 times x5. Fair enough. And what is x3 equal to? x3 is equal to 2x4. 2x4, right? It had nothing to do with x2
right here, so it's equal to 2x4 minus 2x5. And then 0 times x2, right? Because it had no x2
term right here. And then what is x2 equal to? Well x2 is just equal
to 1 times x2. And so all of these terms
are 0 right there. And I want you to pay
attention to that. I'll write it right here. x2 is a free variable, so it's
just equal to itself, right? 1 and you write a 0 and a 0. x4 is a free variable. And this is the important
point of this exercise. So it's just equal to
1 times itself. You don't have to throw in any
of the other free variables. And x5 is a free variable. So it just equals 1 times itself
and none of the other free variables. So right here we now say that
all of the solutions of our equation Bx equals 0, or the
reduced row echelon form of B times x is equal to 0,
will take this form. Or they are linear combinations
of these vectors. Let's call this v1,
v2, and v3. These are just random
real numbers. I can pick any combination here
to create this solution set, or to create
our null space. So the null space of A, which is
of course equal to the null space of the reduced row echelon
form of A, is equal to all the possible linear
combinations of these 3 vectors, is equal to the span
of my vector v1, v2, and v3. Just like that. Now, the whole reason I went
through this exercise-- because we've done this multiple
times already-- is to think about whether these guys
form a linear independent set. So my question is are these
guys linearly independent? And the reason why I care is
because if they are linearly independent then they
form a basis for the null space, right? That we know that they span the
null space, but if they're linearly independent,
then that's the 2 constraints for a basis. You have to span the subspace,
and you have to be linearly independent. So let's just inspect these
guys right here. This v1, he has a
1 right here. He has a 1 in the second term
because he corresponds to the free variable x2, which is
the second entry, so we just throw a 1 here. And we have a 0 everywhere
else in all of the other vectors in our spanning set. And that's because for the other
free variables we always wanted to multiply them
times a 0, right? And this is going to
be true of any null space problem we do. For any free variable, if this
free variable represents a second entry, we're going
to have a 1 in the second entry here. And then a 0 for the second
entry for all of the other vectors associated with the
other free variables. So can this guy ever be
represented as a linear combination of this
guy and that guy? Well there's nothing that I can
multiply this 0 by and add to something that I multiply
this 0 by to get a 1 here. It's just going to get 0's. So this guy can't be
representated as a linear combination of these guys. Likewise, this vector
right here has a 1 in the fourth position. Why is it a fourth position? Because the fourth position
corresponds to its corresponding free
variable, x4. So this guy's a 1 here. These other guys
will definitely always have a 0 here. So you can't take any linear
combination of them to get this guy. So this guy can't be represented
as a linear combination of those guys. And last, this x5 guy, right
here, has a 1 here. And these guys have 0's here. So no linear combination of
these 0's can equal this 1. So all of these guys are
linearly independent. You can't construct any of
these vectors with some combination of the other. So they are linearly
independent. So v1, the set v1, v2, and v3
is actually a basis for the null space, for the null space
of-- Oh, you know what, I have to be very careful. For the null space of B. Just for variety, I defined my
initial matrix as matrix B, so let me be very careful here. So the null space of B was equal
to the null space of the reduced row echelon form of B. It's good to switch things up
every once in a while, you start thinking that
every matrix is named A if you don't. And that's equal to the
span of these vectors. So these vectors, and we just
said that they're linearly independent. We just showed that because
there's no way to get that one from these guys, that one from
these guys, or that one from these guys. These guys form a basis for
the null space of B. Now this raises an interesting
question. In the last video, I defined
what dimensionality is. And maybe you missed
it because that video was kind of proofy. But the dimensionality, the
dimension, of a subspace-- I'll redefine it here-- is the
number of elements in a basis for the subspace. And in the last video I took
great pains to show that all bases for any given subspace
will have the same number of elements. So this is well defined. So my question to you now is:
what is the dimension of my null space of B? What is that the dimension
of my null space of B? Well, the dimension is just
the number of vectors in a basis set for B. Well this is a basis set
for B right there. And how many vectors
do I have in it? I have 1, 2 3 vectors. So the dimension of the
null space of B is 3. Or another way to think about
it-- or another name for the dimension of the null space
of B-- is the nullity, the nullity of B. And that is also equal to 3. And let's think about
it, you know I went through all this exercise. But what is the nullity of any
matrix going to be equal to? It's the dimension of
the null space. Well the dimension of the null
space-- you're always going to have as many factors here as
you have free variables. So in general, the nullity of
any matrix of any matrix-- let's say matrix A-- is equal
to the number of I guess you could call it free variable
columns or the number free variables in, well, I guess we
call it in the reduced row echelon form, or I guess we
could say the number of non-pivot columns. The number of non-pivot columns
in the reduced row echelon form of A. Because that's essentially the
number of free variables-- all of those free variables have
an associated, linearly independent vector with
each of them, right? So the number of variables is
the number of vectors you're going to have in your basis
for your null space. And the number of free variables
is essentially the number of non-pivot columns
in your reduced row echelon form, right? This was a non-pivot column,
that's a non-pivot column, that's a non-pivot column. And they're associated
with the free variables x2, x4, and x5. So the nullity of a matrix is
essentially the number of non-pivot columns in the reduced
row echelon form of that matrix. Anyway, hopefully you found
that vaguely useful.",Dimension of the null space or nullity | Vectors and spaces | Linear Algebra | Khan Academy,"Dimension of the Null Space or Nullity

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/dimension-of-the-column-space-or-rank?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/proof-any-subspace-basis-has-same-number-of-elements?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,abYAUqs_n6I
Vectortripleproductexpansion(veryoptional)_Vectorsandspaces_LinearAlgebra_KhanAcademy-b7JTVLc_aMk.en.csv,"What I want to do
with this video is cover something called the
triple product expansion-- or Lagrange's
formula, sometimes. And it's really just
a simplification of the cross product
of three vectors, so if I take the cross product
of a, and then b cross c. And what we're
going to do is, we can express this really
as sum and differences of dot products. Well, not just
dot products-- dot products scaling
different vectors. You're going to see what I mean. But it simplifies this
expression a good bit, because cross products
are hard to take. They're computationally
intensive and, at least in my
mind, they're confusing. Now this isn't
something you have to know if you're going to
be dealing with vectors, but it's useful to know. My motivation for
actually doing this video is I saw some problems for the
Indian Institute of Technology entrance exam that seems to
expect that you know Lagrange's formula, or the triple
product expansion. So let's see how we
can simplify this. So to do that,
let's start taking the cross product of b and c. And in all of these
situations, I'm just going to assume--
let's say I have vector a. That's going to be a,
the x component of vector a times the unit of vector i
plus the y component of vector a times the unit vector j
plus the z component of vector a times unit vector k. And I could do the same
things for b and c. So if I say b sub y,
I'm talking about what's scaling the j component
in the b vector. So let's first take this
cross product over here. And if you've seen me
take cross products, you know that I like to do
these little determinants. Let me just take it over here. So b cross c is going to be
equal to the determinant. And I put an i, j, k up here. This is actually the definition
of the cross product, so no proof necessary to
show you why this is true. This is just one way to
remember the dot product, if you remember how
to take determinants of three-by-threes. And we'll put b's x
term, b's y coefficient, and b's z component. And then you do the same
thing for the c, cx, cy, cz. And then this is going
to be equal to-- so first you have the i component. So it's going to be the
i component times b. So you ignore this
column and this row. So bycz minus bzcy. So I'm just ignoring
all of this. And I'm looking
at this two-by-two over here, minus bzcy. And then we want to
subtract the j component. Remember, we alternate signs
when we take our determinant. Subtract that. And then we take out
that column and that row, so it's going to be bxcz--
this is a little monotonous, but hopefully, it'll have
an interesting result-- bxcz minus bzcx. And then finally,
plus the k component. OK, we're going to have
bx times cy minus bycx. We just did the dot product, and
now we want to take the-- oh, sorry, we just did
the cross product. I don't want to
get you confused. We just took the cross
product of b and c. And now we need take the
cross product of that with a, or the cross product of a with
this thing right over here. So let's do that. Instead of rewriting
the vector, let me just set up
another matrix here. So let me write
my i j k up here. And then let me
write a's components. So we have a sub x,
a sub y, a sub z. And then let's clean
this up a little bit. Let's ignore this. We're just looking at-- no,
I want to do that in black. Let's do this in black, so
that we can kind of erase that. Now this is a
minus j times that. So what I'm going
to do is I'm going to get rid of the
minus and the j, but I am going to rewrite
this with the signs swapped. So if you swap the signs,
it's actually bzcx minus bxcz. So let me delete
everything else. So I just took the negative
and I multiplied it by this. I hope I'm not making any
careless mistakes here, so let me just check and make
my brush size little bit bigger, so I can erase that a
little more efficiently. There you go. And then we also want to get
rid of that right over there. Now let me get my brush size
back down to normal size. All right. So now let's just take
this cross product. So once again, set it
up as a determinant. And what I'm only
going to focus on-- because it'll take the video,
or it'll take me forever if I were to do the i,
j, and k components-- I'm just going to focus
on the i component, just on the x component
of this cross product. And then we can
see that we'll get the same result for
the j and the k. And then we can see
what, hopefully, this simplifies down to. So if we just focus on
the i component here, this is going to be
i times-- and we just look at this two-by-two
matrix right over here. We ignore i's column, i's row. And we have ay
times all of this. So let me just multiply it out. So it's ay times bxcy, minus
ay times by, times bycx. And then we're going
to want to subtract. We're going to have
minus az times this. So let's just do that. So it's minus, or
negative, azbzcx. And then we have a
negative az times this, so it's plus azbxcz. And now what I'm
going to do-- this is a little bit of a
trick for this proof right here, just so that we
get the results that I want. I'm just going to add and
subtract the exact same thing. So I'm going to add an axbxcx. And then I'm going to subtract
an axbxcx, minus axbxcx. So clearly, I have not
changed this expression. I've just added and
subtracted the same thing. And let's see what
we can simplify. Remember, this is
just the x component of our triple product. Just the x component. But to do this,
let me factor out. I'm going to factor out a bx. So let me do this,
let me get the bx. So if I were to
factor it out-- I'm going to factor it out of
this term that has a bx. I'm going to factor
it out of this term. And then I'm going to
factor it out of this term. So if I take the bx out,
I'm going to have an aycy. Actually, let me write it
a little bit differently. Let me factor it out
of this one first. So then it's going
to have an axcx. a sub x, c sub x. So I used this one up. And then I'll do this one now. Plus, if I factor the
bx out, I get ay cy. I've used that one now. And now I have this one. I'm going to factor the bx out. So I'm left with a plus az, cz. So that's all of those. So I've factored that out. And now, from these
right over here, let me factor out a negative cx. And so, if I do that-- let me go
to this term right over here-- I'm going to have an axbx
when I factor it out. So an axbx, cross that out. And then, over here, I'm
going to have an ayby. Remember, I'm factoring
out a negative cx, so I'm going to have
a plus ay, sub by. And then, finally, I'm going
to have a plus az, az bz. And what is this? Well, this right
here, in green, this is the exact same thing as
the dot products of a and c. This is the dot product
of the vectors a and c. It's the dot product of
this vector and that vector. So that's the dot
of a and c times the x component
of b minus-- I'll do this in the same--
minus-- once again, this is the dot product of
a and b now, minus a dot b times the x component of c. And we can't forget,
all of this was multiplied by the unit vector i. We're looking at the x
component, or the i component of that whole triple product. So that's going
to be all of this. All of this is times
the unit vector i. Now, if we do this exact
same thing-- and I'm not going to do it, because
it's computationally intensive. But I think it won't be a
huge leap of faith for you. This is for the x component. If I were to do the exact same
thing for the y component, for the j component--
so it'll be plus-- if I do the same thing
for the j component, we can really just
pattern match. We have bx, cx, that's
for the x component. We'll have by and c y
for the j component. And then this is not
component-specific, so it will be a dot c over here,
and minus a dot b over here. You can verify any of
these for yourself, if you don't believe me. But it's the exact same
process we just did. And then, finally, for the z
component, or the k component-- let me put parentheses
over here-- same idea. You're going to have bz, cz. And then you're going to
have a dot b over there. And then you're going to
have a dot c over here. Now what does this become? How can we simplify this? Well, this right over here,
we can expand this out. We can factor out
an a dot c from all of these terms over here. And remember, this is going
to be multiplied times i. Actually, let me not
skip too many steps, just because I want you
to believe what I'm doing. So if we expand the i here--
instead of rewriting it, let me just do it like this. It's a little bit
messier, but let me just-- so I could write this i
there and that i there. I'm kind of just distributing
that x unit vector, or the i unit vector. And let me do the
same thing for j. So I could put the j there. And I could put the
j right over there. And then I could do the
same thing for the k, put the k there, and
then put the k there. And now what are these? Well, this part right
over here is exactly the same thing as
a dot c times-- and I'll write it
out here-- bx times i plus by times j,
plus bz times k. And then, from that,
we're going to subtract all of this, a dot b. We're going to subtract a dot
b times the exact same thing. And you're going to
notice, this right here is the same
thing as vector b. That is vector b. When you do it over here,
you're going to get vector c. So I'll just write it over here. You're just going
to get vector c. So just like that, we
have a simplification for our triple product. I know it took us a
long time to get here, but this is a simplification. It might not look like one,
but computationally it is. It's easier to do. If I have-- I'll try to
color-code it-- a cross b cross-- let me do it in
all different colors-- c, we just saw that this is going
to be equivalent to-- and one way to think about it is,
it's going to be, you take the first vector times the dot
product of-- the first vector in this second dot
product, the one that we have our
parentheses around, the one we would have
to do first-- you take your first vector there. So it's vector b. And you multiply that times the
dot product of the other two vectors, so a dot c. And from that, you subtract
the second vector multiplied by the dot product of the
other two vectors, of a dot b. And we're done. This is our triple
product expansion. Now, once again,
this isn't something that you really have to know. You could always,
obviously, multiply it. You could actually
do it by hand. You don't have to know this. But if you have
really hairy vectors, or if this was some type
of math competition, and sometimes it simplifies
real fast when you reduce it to dot products, this is
a useful thing to know, Lagrange's formula, or the
triple product expansion.",Vector triple product expansion (very optional) | Vectors and spaces | Linear Algebra | Khan Academy,"A shortcut for having to evaluate the cross product of three vectors

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/normal-vector-from-plane-equation?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/dot-and-cross-product-comparison-intuition?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,b7JTVLc_aMk
Vectorintroforlinearalgebra_Vectorsandspaces_LinearAlgebra_KhanAcademy-br7tS1t2SFE.en.csv,"A vector is something that has
both magnitude and direction. Magnitude and direction. So let's think of an example
of what wouldn't and what would be a vector. So if someone tells
you that something is moving at 5 miles per hour,
this information by itself is not a vector quantity. It's only specifying
a magnitude. We don't know what
direction this thing is moving 5 miles per hour in. So this right over
here, which is often referred to as a speed, is not a
vector quantity just by itself. This is considered to
be a scalar quantity. If we want it to be a
vector, we would also have to specify the direction. So for example,
someone might say it's moving 5 miles
per hour east. So let's say it's moving
5 miles per hour due east. So now this combined 5
miles per are due east, this is a vector quantity. And now we wouldn't
call it speed anymore. We would call it velocity. So velocity is a vector. We're specifying the
magnitude, 5 miles per hour, and the direction east. But how can we actually
visualize this? So let's say we're
operating in two dimensions. And what's neat
about linear algebra is obviously a lot
of what applies in two dimensions
will extend to three. And then even four, five, six,
as made dimensions as we want. Our brains have trouble
visualizing beyond three. But what's neat is
we can mathematically deal with beyond three
using linear algebra. And we'll see that
in future videos. But let's just go back to
our straight traditional two-dimensional vector
right over here. So one way we
could represent it, as an arrow that
is 5 units long. We'll assume that each of our
units here is miles per hour. And that's pointed
to the right, where we'll say the right is east. So for example, I could start
an arrow right over here. And I could make its length 5. The length of the arrow
specifies the magnitude. So 1, 2, 3, 4, 5. And then the direction
that the arrow is pointed in specifies
it's direction. So this right over here could
represent visually this vector. If we say that the
horizontal axis is say east, or the positive horizontal
direction is moving in the east, this would be
west, that would be north, and then that would be south. Now, what's interesting
about vectors is that we only care about the magnitude
in the direction. We don't necessarily
not care where we start, where we place it when we think
about it visually like this. So for example, this would
be the exact same vector, or be equivalent vector to this. This vector has the same length. So it has the same magnitude. It has a length of 5. And its direction
is also due east. So these two vectors
are equivalent. Now one thing that you might say
is, well, that's fair enough. But how do we represent
it with a little bit more mathematical notation? So we don't have to
draw it every time. And we could start
performing operations on it. Well, the typical
way, one, if you want a variable to
represent a vector, is usually a lowercase letter. If you're publishing a
book, you can bold it. But when you're doing
it in your notebook, you would typically put a
little arrow on top of it. And there are several
ways that you could do it. You could literally say,
hey 5 miles per hour east. But that doesn't feel
like you can really operate on that easily. The typical way is to specify,
if you're in two dimensions, to specify two
numbers that tell you how much is this vector moving
in each of these dimensions? So for example,
this one only moves in the horizontal dimension. And so we'll put our
horizontal dimension first. So you might call
this vector 5, 0. It's moving 5, positive 5
in the horizontal direction. And it's not moving at all
in the vertical direction. And the notation might change. You might also see notation, and
actually in the linear algebra context, it's more
typical to write it as a column vector
like this-- 5, 0. This once again,
the first coordinate represents how much we're moving
in the horizontal direction. And the second coordinate
represents how much are we moving in the
vertical direction. Now, this one isn't
that interesting. You could have other vectors. You could have a vector
that looks like this. Let's say it's moving 3 in
the horizontal direction. And positive 4. So 1, 2, 3, 4 in the
vertical direction. So it might look
something like this. So this could be another
vector right over here. Maybe we call this
vector, vector a. And once again, I want to
specify that is a vector. And you see here that if
you were to break it down, in the horizontal direction,
it's shifting three in the horizontal direction,
and it's shifting positive four in the vertical direction. And we get that by
literally thinking about how much we're moving
up and how much we're moving to the right when we
start at the end of the arrow and go to the front of it. So this vector might
be specified as 3, 4. 3, 4. And you could use the
Pythagorean theorem to figure out the actual
length of this vector. And you'll see because this is
a 3, 4, 5 triangle, that this actually has a magnitude of 5. And as we study more
and more linear algebra, we're going to start extending
these to multiple dimensions. Obviously we can visualize
up to three dimensions. In four dimensions it
becomes more abstract. And that's why this type
of a notation is useful. Because it's very hard to draw
a 4, 5, or 20 dimensional arrow like this.",Vector intro for linear algebra | Vectors and spaces | Linear Algebra | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/e/scaling_vectors?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/real-coordinate-spaces?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,br7tS1t2SFE
LinkedListinC_C++-Insertinganodeatbeginning-cAZ8CyDY56s.en.csv,"In our previous lesson, we saw how we can
map the logical view of a linked list into a C or C++ program. We saw how
we can implement two basic operations: one traversal of the linked list and
another inserting a Node at the end of the linked list. In this lesson we
will see a running code that will insert a Node
at the beginning of the linked list. So let's get started. I will write a 'C'
program here. the first thing that we want to do in
our program is that we want to define a Node. A Node
will be a structure in C. It will have two fields: One to store the data, let's say we
want to create a linked list of Integers, so our data type will be integer. If we
wanted to create a linked list of characters, then
our type would be character here. So we will have
another field that will be pointer to Node, that will
store the address of the next Node. We can name this variable link or
some... some people also like to name this
variable next because it sounds more intuitive. This variable will store the
address of the next Node in the linked list. In C, whenever we have to declare Node or pointer to Node, we will have
to write struct Node or struct Node* (star). In C++, we will have to write
only Node*, and that's one difference. Okay, so this
is the definition of a Node. Now to create a linked list
we will have to create a variable that will be pointer to Node
and that will store the address of the first Node in the
linked list, what we also call the head Node. so I will create a pointer to Node here.
struct Node*, we can name this variable
whatever. Often for the sake of understanding, we name this variable head. Now I have declared this variable as a
global variable. I have not declared this variable inside
any function and I'll come back to why I am doing so. And now I'll write the main method. This
is the entry point to my program. The first thing that I want to do is I
want to see if head is equal to null which will mean
that this pointer variable points nowhere. So right now the list is empty. So far
what we have done here in our code, is that we have created a global
variable named head which is of type pointer to Node and the value in
this pointer variable is null, so So far the list is empty. Now, what I want to do
in my program is that I want to ask the user to input some numbers and I want to
insert all these numbers into the linked list. so I'll print
something like how many numbers? Let's say the user
wants to input n number so I'll collect this number in this variable 'n' and then I'll
define another variable 'i' to run the loop and so I'm running a loop here. If it was C++
I could declare this integer variable right here inside the loop. Now i'll write a print statement like this, and I'll define another variable 'x' and
each time I'll take this variable 'x' as input from
the user and now I will insert this particular
number 'x', this particular integer 'x' into the
linked list, by making a call to the method 'insert' and
then each time we insert, we will print all the Nodes in the linked list, the
value of all the Nodes in the linked list by calling a function named print. There
will be no argument to this function print. Of course we need
to implement these two functions insert and print. Let me first
write down the definition of these two functions. So let us implement these two functions:
insert and print. Let's first implement the
function insert that will insert a Node at the beginning
of the linked list. Now in the insert function what we
need to do is we first need to create a Node. In C we
can create a Node using malloc() function. We have
talked about this earlier. malloc() returns a pointer to the starting
address of the memory block we are having to
type cast here because malloc returns a void pointer and we need a pointer to
Node, a variable that is pointer to Node and
then only if we dereference we derefernce using an Astrix(*) sign
then we will be able to access the fields of the Node, so that the data part will be 'x' and we
have an alternate syntax for this particular syntax. We could simply
write something like temp and this arrow and it will mean the same thing and
this is more common. With these two lines in the insert
function, all we're doing is, we're creating a
Node. Let's say we get this Node and let's assume that the address that we get for this Node is 100.
Now there is a variable temp where we are storing the
address. We can do one thing whenever we
create a Node, we can set data to whatever we want to set and we can set
the link field initially to null and if needed we can
modify the link field. So I'll write one more statement temp-&gt;
next is equal to null. Remember temp is a pointer variable here
and we are dereferencing the pointer variable to modify the value at this
particular Node. temp will also take some space in the
memory that's why I have shown this rectangular block for both the pointer
variables head and temp. and Node has two parts: one for the
pointer variable and one for the data. So this part, the link part is null, we can
either write null here or we can write it like this. It's the same
thing. Logically it means the same. Now if we want to insert this Node in
the beginning of the list, there can be two scenarios: one when
the list is empty, like in this case. So the only thing that
we need to do is, we need to point head to this particular Node, instead of pointing to null. So I will
write a statement like head is equal to temp and the value in head now will be
address 100. And that's what we mean when we say a
pointer variable points to a particular Node. We store the address of
that Node. So this is our linked lis, after we insert
the first Node. Let us now see what we can do to
insert a Node at the beginning if the list is not
empty like what we have right now. Once again we can create a Node, fill in
the value 'x' here that is passed as argument.
Initially, we may set the link field as null,
and let's say this Node gets address 150 in the memory and
we have this variable temp through which we are referencing this particular memory
block. Now unlike the previous case, if we just
set head = temp, this is not
good enough because we also need to build this link. We need to
set the next or the link of the newly created Node
to whatever the previous head was. So what we can do is, we can write
something like if head is not equal to null or if the list is not empty, first set
temp-&gt;next equal head so we first build this link. The address
here will be 100 and then we say head = temp, so we cut this link and point head to this newly created Node, and this is our
modified linked list after insertion of this second Node at the
beginning of the list. Now one final thing here: this
particular line the third line temp-&gt;next = null, this is getting
used only when the list is empty. If you see, when the list is empty
head is already null. So we can avoid writing two statements.
We can simply write this one statement, temp-&gt;next = head and this will also cover the scenario
when the list is empty. Now the only thing remaining in this
program to get this running, is the implementation of this print
function, so let's implement this print function.
What I will do here is that I'll create a local variable which is pointer to Node,
named temp and I need to write struct Node here.
I keep missing this. In C, you need to write it like
this and I want to set this as address of the head Node so
this global variable has the address of the head Node. Now I want to traverse the linked list.
so I will write a loop like this: while temp is not equal to null, I'll keep going to the next Node using
this statement temp is equal to temp dot next and at each stage I'll print the value in that Node as temp-&gt;data. Now I'll write two more print. One outside this while
loop, and one outside after this while loop to
print an end of line. Now why did we use a
temporary variable? Because we do not want to modify head, because we will lose the reference of
the first Node. So first we collect the address in head
in another temporary variable, and we are modifying the addresses in this
temporary variable using temp is equal to temp-&gt;next to traverse the list. Let us now run this program and
see what happens. So this is asking how many numbers you
want to insert in the list. Let's say we want to insert 5 numbers.
Initially the list is empty. Let's say the first number that we want
to insert is 2. At each stage, we are printing the list so
the list is now 2. The first element and the last element is 2. We will insert another number. The list
is now 5 2. 5 is inserted at the beginning of the list. Again we insert 8 and 8 is also
inserted at the beginning of the list. Ok... Let's insert number 1. The list
is now 1 8 5 2. And finally I insert the number 10.
so the final list is 10 1 8 5 2. This seems to be working. Now if we were writing this code in C++,
we could have done couple of things. We could have written a class and
organize the code in an object-oriented manner. We
could also have used new operator, in place of the malloc function. Now,
coming back to the fact that we have declared this head as global variable. What if this was
not a global variable, this was declared inside this main function as a local
variable? so I'll remove this global declaration.
Now this head will not be accessible in other
functions, so we need to pass address of the first Node as argument
to other functions: to both these functions, print and
insert. So to this print method, we'll pass, let say we name this
argument as head. We can name this argument...argument as
head or a or temp or whatever. If we name
this argument as head, this head in print will be a local variable of print
and will not be this head in main. And these two heads
will be different, these two variables will be different. When the main function calls print,
passing its head then the value in this
particular head in the main function is copied to this another head in the print
function. So now in the print function, we may not use this temp variable.
What we can do is, we can use this variable head itself to traverse the list and this should be
good. We're not modifying this head here in the main. Similarly to the insert function we will
have to pass the address of the first Node. And this head again is just a copy. This
is again a local variable, so after we modify the linked list, the
head in main method, should also be modified
and there are two ways to do it. One: we can pass the pointer to Node as return from this method. So in the main
method, insert function will take another argument head, and we will have to collect the
return into head again so that it is modified. Now this code will work fine. Oops, I
forgot to write a return here, return head and we can run
this program like before. We can give all the values and see that the list is
building up correctly. There was another way of doing this.
Instead of asking this insert function to return
the address of head, we could have passed this particular
variable head by reference. So we could have passed insert
&amp;head. head is already a pointer to Node, so in the insert function we will have
to receive pointer to pointer. Node** and to avoid confusion
let's name this variable something else. This time, let's name this pointertohead. So to get head, we will have to write
something like we will have to dereference this
particular variable and write *pointertohead every where and
the return type will be void. Sometimes we want to name this
variable as head, this local variable as head. Doesn't
matter, but we'll have to take care of using it properly. Now this code will
also work. As you can see here, we can insert Nodes
and this seems to be going well. If you do not understand this concepts of
scope, you can refer to the description of this video for additional
resources. So this was inserting a Node at the
beginning of the linked list. Thanks for watching!",Linked List in C/C++ - Inserting a node at beginning,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P
In this lesson we will write C program to insert a node at the beginning of a linked list.

Pre-requisites:
Good knowledge of pointers, scope of variables and dynamic memory allocation. 
Check this lesson on dynamic memory allocation:
http://www.youtube.com/watch?v=_8-ht2AKyH4&list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_&index=7
See complete series on pointers here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_

Please drop your questions (if any) in comments. We will be glad to answer.",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,cAZ8CyDY56s
Formulafor2x2inverse_Matrixtransformations_LinearAlgebra_KhanAcademy-eEUK_ThrHuQ.en.csv,"I've got a 2 by 2 matrix here. Let's say A is equal
to a, b, c, d. So I'm going to keep
it really general. So this is really any
2 by 2 matrix. What I want to do is use our
technique for finding an inverse of this matrix to
essentially find a formula for the inverse of a
2 by 2 matrix. So I want to essentially find a
inverse, and I want to do it just using a formula that it
just applies to this matrix right here. So how can I do that? Well, we know a technique. We just create an augmented
matrix. So let's just create an
augmented matrix right here. So we have a, b, c, d, and then
we augment it with the identity in R2, so 1, 0, 0, 1. And we know if we perform a
series of row operations on this augmented matrix to get the
left-hand side in reduced row echelon form. The right-hand side, if the
reduced row echelon form here gets to the identity, then the
right-hand side is going to be the inverse. So let's do it in this general
case, not dealing with particular numbers here. So the first thing I want to do,
or I would like to do, is I would like to zero
this guy out. What we want to do is we want
to zero that out, zero that out, and then these two terms
have to become equal to 1. So the best way to zero this
out, let's perform a little transformation here. So if I perform the
transformation on the columns, C1, so those are the entries
of a column-- this would be one column right here, that
would be another column right there, that's the third column, that's the fourth column. But the transformation I'm going
to perform on each of these columns, and we know this
is equivalent to a row operation, is going to be equal
to-- since I want to zero this one out, I'm going to
keep my first row the same, so it's going to be C1, and I'm
going to replace my second row with a times my second row
minus c times my first row. Now why am I doing that? Because a times c minus c times
a is going to be 0. So this guy's going to be 0. That's the row operation
I'm going to perform. And I'm doing this so we can
kind of keep track, account for what we're doing because
the algebra's going to get hairy in a little bit. So let me perform
this operation. So if I perform that operation
on our matrix, what do we have. So our first row's going
to be the same. Let me start with our second
row because that's a little bit more complicated. So I'm going to replace c with
a times c minus c times a. That's ac-- so let me put it
this way-- so that's going to be 0 right there. I'm going to replace d with d
times a or a times d minus c times C1 in this
column vector. So minus c times b. Let me write this as bc. And then let me augment it. And then this guy's going to be
a times 0, because he's C2 minus c times C1. So it's going to be minus c. And then finally, this guy right
here is going to be a times 1-- a times this 1 right
here-- minus c times 0. So that's just going
to be an a. And then the first row is
pretty straightforward. We know that the first row or
the first entries in our column vectors just stay
the same through this transformation. So it's a, b, 1, 0. And just to make sure you're
clear what we're doing, when you perform this transformation
on this column vector right here, you
got this column vector right there. When you perform the
transformation on this column vector right there, you
get this column vector right there. Now I just want to make that
clear because I did all of the second entries of all of the
column vectors at once because we all were essentially
performing the same row operation, so that just helped
me simplify at least my thinking a little bit. Let me stay in this mode. So let's continue to get this
in reduced row echelon form. The next thing we want to do
is, let's make another transformation, we'll
call this T1. That was our first
transformation. Let's do another
transformation. T2, or another set of
row operations. So if I start with the column
vector C1, C2, what I want to do now is I want to keep my
second row the same and I want to zero out this character
right here. I want to zero him out. I know I'm going to keep my
second row the same, so C2 is just going to still be C2. But in order to zero this out,
what I can do is I can replace the first row with this scaling
factor times the first row minus this scaling factor
times the second row. So it'll be ad minus bc times
your first entry in your column vector minus b times
your second entry. And the whole reason why I'm
doing that is so that this guy zeroes out. So if we apply that to this
matrix up here-- let's do the first row first. So this first entry right here
is going to be ad minus bc times a, because that's C1--
let me write that down. So it's ad minus bc times a
minus b times C2 minus 0. So it's just going to be--
that second term just becomes 0. Fair enough. Now what is this guy
going to be? He's going to be-- I'll
write it out. He's going to be ad minus bc
times b minus b times your C2 in this column vector, minus
b times ad minus bc. And you can see immediately that
these two guys are going to cancel out and you're
going to get a 0 there. And then we've got
to augment it. I want to make sure I don't run
out of space, I should've started to the left
a little bit more. So what's this guy
going to be? Well I'm going to have this guy
times ad minus bc-- I'll do it in pink-- so you're going
to have ad minus bc times 1, which is just ad minus
bc minus b times C2, so minus b times minus c. So that's plus bc. So 1 times ad minus bc
minus b times minus c is equal to that. And you can immediately see
that these two guys will cancel out. You're just [INAUDIBLE] ad. And then this guy over here,
you're going to have 0 times ad minus bc, which is just
a 0, minus b times a. So you have minus ab-- just
squeeze it in there. And we know that our second
row just stays the same. Our second row just stays the
same in this transformation. So we had a 0 here, we're
still going to have a 0. We had an ad minus bc. We'll still have
an ad minus bc. We had a minus c. Then we had an a. Just like that. Now let me re-write this matrix
just so it gets cleaned up a little bit. So let me re-write
it right here. I'll do it in my orange--
well, let me do it in this yellow. So I have ad minus bc times a. And then this term right
here just became a 0. This term right here is a 0. This term right here
is an ad minus bc. And then our augmented part,
this part was just an ad. This was a minus ab. This is a minus c. And then this is an a. Now we're almost at reduced row
echelon form right here. These two things just have to be
equal to 1 in order to get reduced row echelon form. So let's define a transformation
that'll make both of these equal to 1. So if this was T2 let me define
my transformation T3. You give it a column
vector, C1, C2. And it's just going to scale
each of the column vectors. So what I want to do is I want
to divide my first entries by this scaling factor right here
so that this becomes a 1. So I'm essentially going to
multiply 1 over ad minus bc times a, so 1 over ad, bc, a
times my first entry in each of my column vectors. And then my second one I
want to divide by this. So that this guy becomes a 1. So I'm doing two scalar
divisions in one transformation. So this one's going to be 1
over ad minus bc times C2. So I'm just scaling everything
by these two scaling factors. So if you apply this
transformation to that right there, what do we get? We get a matrix. And this guy, I'm going to
divide him by ad minus bc times a, so I'm dividing
it by itself, so that guy's going to be 1. I'm going to divide 0 by
this, but 0 divided by anything is just 0. Then we're in an
augmented part. ad divided by-- so let me
write it like this. So ad-- I'm going to divide by
this-- so it's going to be ad minus bc times a-- you
immediately see that the a's cancel out. This is going to be minus
ab divided by ad minus bc times a. Once again, the a's
cancel out. And then in my second row are my
second entries in my column vectors, 0 divided
by anything is 0. So 0 divided by this thing is
going to be 0, assuming we can divide by that, and we're
going to talk about that in a second. This guy divided by this guy,
we're just dividing by himself, so it's going
to be equal to 1. Now we have minus c divided
by this, or ad minus bc. And then we have an a. a divided by ad, ad minus bc. And we're done. We put the left-hand side of
our augmented matrix into reduced row echelon form. And now this is going
to be our inverse. So let me clean it
up a little bit. So, so far we started off with
a matrix-- I'll do it in purple-- we started off
with a matrix a is equal to a, b, c, d. And now just using our technique
we figured out that a inverse is equal to this
thing right here. And just to simplify-- well let
me just write it the way I have it there, because I don't
want to skip any steps-- this is equal to d over
ad minus bc. Right, this guy and that
guy canceled out. And then we have a minus b over
ad minus bc because that guy and that guy canceled out. Then you have a minus
c over ad minus bc. And then finally you have
an a over ad minus bc, which is our inverse. But one thing might just pop out
at you immediately is that everything in our inverse is
being divided by this. So maybe an easier way
to write our inverse. We could also write our
inverse like this. We could just write it as 1
over ad minus bc times the matrix d minus b
minus c and a. And just like that we have come
up with a formula for the inverse of a 2 by 2 matrix. You give me any real numbers
here and I'm going to give you its inverse. That straightforward. Now one thing you might be
saying, hey, but not all 2 by 2 matrices are invertible. How can this be the case
for all of them. And I'll give you a question,
when will this thing right here not be defined? When is this thing
not defined? Every operation I did, I can do
with any real numbers, and this applies to any
real numbers. But when is this thing
not defined? Well it's not defined
when I divide by 0. And when would I divide by 0? Everything else you can multiply
and subtract and add a zero to anything, but you
just can't divide by 0. We've never defined what it
means when you divide something by 0. So it's not defined if ad
minus bc is equal to 0. So this is an interesting
thing. I can always find the inverse of
a 2 by 2 matrix as long as ad minus bc is not equal to 0. We came up with all of these
fancy things for invertability, you've got to
put it into reduced row echelon form, and before
that we talked being on 2 and 1 to 1. For at least a 2 by
2 matrix we've really simplified things. As long as ad minus bc does not
equal 0, we can use this formula and then we know that
a-- and it goes both ways-- a is invertible. And not only is it invertible,
but we can just apply this formula to it. So immediately something
interesting might-- you might say hey, this is an interesting
number. We should come up with
some name for it. And lucky for us, we have come
up with a name for it. This is called the
determinant. Let me write it in pink. Determinant. So the determinant of a, and
it's also written like this with these little straight lines
around a, and you could also write it like
this, a, b, c, d. But most people kind of think
this is redundant to have brackets and these lines. So then they just write it like
this, this is equal to just, they just write the
lines, a, b, c, d. I want to make this
very clear. If you have the brackets you're
dealing with a matrix. If you have just these straight
lines you're talking about the determinant
of the matrix. But this is defined for
the 2 by 2 case to be equal to ad minus bc. This is a definition
of the determinant. So we can re-write, if we have
some matrix here, we have some matrix a which is equal
to a, b, c, d. We can now write its inverse,
a inverse is equal to 1 over this thing, which we've defined
as the determinant of a times-- and let's just
see a good way of kind of memorizing this. We're swapping these two
guys, right, the a and the d get swapped. So you get a d and an a. And then these two guys
stay the same, they just become negative. So minus b and minus c. So that's the general
formula for the determinant of a 2 by 2 matrix. Let's try to do a couple. Let's try to find the
determinant of the matrix 1, 2, 3, 4. Easy enough. So the determinant of-- let's
say this is the matrix B. So the determinant of B, or we
could write it like that, that's equal to the
determinant of B. That is just equal to-- that's
this thing right here-- 1 times 4 minus 3 times 2, which
is equal to 4 minus 6, which is equal to minus 2. So the determinant is minus
2, so this is invertible. Not only is it invertible, but
it's very easy to find its inverse now. We can apply this formula. The inverse of B in this case--
let me do it in this color-- B inverse is equal to
1 over the determinant, so it's 1 over minus 2 times the
matrix where we swap-- well, this is the determinant of B. I want to be careful. B is the same thing,
but with brackets. 1, 2, 3, 4. So B inverse is going to be 1
over the determinant of B, which is equal to minus 2. So 1 over minus 2. We swap these two guys, so they
get a 4 and a 1, and then these two guys become
negative-- minus 2 and then minus 3. And then if we were to multiply
this out it would be equal to minus 1/2 times
4 is minus 2. Minus 1/2 times minus 2 is 1. Minus 1/2 times minus
3 is 3/2, minus 1/2 times 1 is minus 1/2. So that there is the
inverse of B. Now let's say we have
another matrix. Let's say we have the
matrix C, and C is equal to 1, 2, 3, 6. What is the determinant of C? It is equal to-- we could write
this way-- 1, 2, 3, 6. And it is equal to 1 times 6
minus 3 times 2, which is equal to 6 minus 6, which
is equal to 0. And there you see it's equal to
0, so you cannot find-- so this is not invertible. So we can't find its inverse
because if we would try to apply this formula right here
you'd have a 1 over 0. But we know this formula just
comes out-- that attempt to put it into reduced row echelon
form, and in that last step we just had to essentially
divide everything by these terms. So these terms
would be 0 in this matrix C that I just constructed
for you. And the reason why I knew-- I
just pulled this out of my brain-- I knew this wasn't going
to be invertible because I constructed a situation where
I have columns that are linear combinations
of each other. I have 1, 3-- you multiply that
by 2 you get 2 and 6. So I knew that these aren't
linearly independent columns. So you know that its rank wasn't
going to be equal to, so I knew it wasn't going to be
invertible, but we see that here by just computing
its determinant.",Formula for 2x2 inverse | Matrix transformations | Linear Algebra | Khan Academy,"Figuring out the formula for a 2x2 matrix. Defining the determinant.

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-3x3-determinant?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-example-of-finding-matrix-inverse?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,eEUK_ThrHuQ
Determiningwhetheratransformationisonto_LinearAlgebra_KhanAcademy-eR8vEdJTvd0.en.csv,"  Let's say I have a linear
transformation T that's a mapping between Rn and Rm. We know that we can represent
this linear transformation as a matrix product. So we can say that T of x, so
the transformation T-- let me write it a little higher to save
space-- so we can write that the transformation T
applied to some vector x is equal to some matrix times x. And this matrix, since it's a
mapping from Rn to Rm, this is going to be a m by n matrix. Because each of these entries
are going have n components, they're going to be members of
Rn, so this guy has to have n columns in order to be able
to have this matrix vector product well defined. So we can go back to what we've
been talking about now. In the last couple of videos,
we've have been talking about invertibility of functions,
and we can just as easily apply it to this transformation,
because transformations are
just functions. We just use the word
transformations when we start talking about maps between the
vector spaces or between sets of vectors, but they are
essentially the same thing. Everything we've done
the last two videos have been very general. I never told you what the set
of our domain and the set of our co-domains were
made up of. Now we're dealing with vectors,
so we can apply the same ideas. So T is a mapping right
here from Rn to Rm.   So if you take some vector here,
x, T will map it to some other vector in Rm. Call that Ax. If we take this matrix vector
product right there and this is the mapping T right there. So let's ask the same questions
about T that we've been asking in general
about functions. Is T invertible?   And we learned in the last
video that there's two conditions for invertibility. T has to be onto, or the other
way, the other word was surjective.   That's one condition
for invertibility. And then T also has
to be 1 to 1.   And the fancy word for that was
injective, right there. So in this video, I'm going to
just focus on this first one. So I'm not going to prove to you
whether T is invertibile. We will at least be able to try
to figure out whether T is onto, or whether it's
surjective. So just as a reminder, what does
onto or surjective mean? It means that you take any
element in Rm, you take any element in your co-domain, so
you give me any element in your co-domain-- let's call that
element b; it's going to be a vector-- the fact, if T is
surjective or if T is onto, that means that any b that you
pick in our co-domain, there's always going to be some vector,
at least one vector, in our domain. That if you apply the
transformation to it you're going to get b. Or another way to think about
it is the image of our transformation is all of Rm. All of these guys
can be reached. So let's think about
what that means. So we know that the
transformation is Ax. It's some matrix A. So the transformation of x--
I'll just rewrite it-- is equal to some matrix A-- that's
an m by n matrix-- times the vector x. Now, if T has to be onto, that
means that Ax, this matrix vector product, has to be equal
to any member of our co-domain can be reached by
multiplying our matrix A by some member of our domain. So what's another way of
thinking about it? Another way of thinking about
it is for any b, so onto, implies that for any vector b
that is a member of Rm-- so any b here-- there exists at
least one solution to a times x is equal to b. Where, of course, x is, the
vector x is, a member of Rn. It's just another way of saying
exactly what I've been saying in the first part
of this video. You give me any b in this set,
and then there has to be, if we assume that T is onto, or for
T to be onto, there has to be at least one solution
to Ax is equal to b. There has to be at least one x
out here, that if I multiply it by A, I get to my b. And this has to be true for
every, maybe I should write, for every instead of any. But they are the same idea. But, for every b in Rm, we have
to be able to find at least one x that makes
this true. So what does that mean? That means that A times x has
to be equal to-- you can construct any member of Rm by
taking a product of A and x, where x is a member of Rn,
where x is a member here. Now what is this? If x is an arbitrary member of
Rn, Let me write like this. We know that matrix A would
look like this. It'll be a bunch of
column vectors. a1, a2 and it has n columns,
so it looks like that. That's what our matrix
A looks like. So we're saying if you take this
product, you have to be able to reach any guy,
any member of Rm. Well, what does this product
look like if where taking this product instead of writing
an x there, I could write x like this. x1, x2, all the way to xn. So this product is going to be
x1 times the first column vector of A, plus x2 times the
second column vector of A, all the way to plus xn times the
nth column vector of A. That's what this product is. And in order for T to be onto,
this combination has to be equal to any vector in Rm. Well, what does this mean? These are just linear
combinations of the column vectors of A.   So another way to say that is
for T to be onto, So for T to be surjective or onto, the
column vectors of A have to span Rm, have to span
our co-domain. They have to span
this right here. You have to be able to get any
vector here with a linear combination of these guys. Right? And the linear combination is
set up because the weights are just arbitrary members
of the real numbers. This vector is just a bunch
of arbitrary real numbers. So for T to be onto, the span of
a1, a2, all the way to an, has to be equal to Rm, has to
be equal to your co-domain. That just means that you can
achieve any vector in your co-domain with the linear
combinations of the column vectors of this. What's the span of a matrices'
column vectors? By definition that is the
matrices' column space. So we could say, that means that
the span of these guys have to be Rn, or another way
is that the column space of A-- let me switch colors-- the
column space of A has to be equal to Rm. So how do we know if
a vector's column space is equal to Rm? So here, maybe it might be
instructive to think about, when can we not find solutions
to the equation Ax is equal to b? So whenever you're faced
with this type of an equation, what do we do? We can set up an augmented
matrix that looks like this, where you put A on this side,
and then you put the vector b on the right-hand side. And then you, essentially,
perform a bunch of row operations. You have to perform the entire
rows in both cases, on both sides, and we've done
this multiple times. Your goal is to get the
left-hand side into reduced row echelon form. So what you want to do is,
eventually, get your augmented matrix to look like this. Where the left-handed side is--
let me define R, capital R, to be the reduced row
echelon form of A. And we've done many
videos on that. That's just, you have a matrix
where you have your pivots and the pivot will be the only
non-zero entry in its column. But not every column has
to have a pivot in it. Maybe, you have a free column
or non-pivot column and then they could have a
bunch of 0's. And maybe this has a pivot. This would have to be 0 if
there is a pivot there. These would have to be 0,
and so on and so forth. And maybe the next pivot
is right there. These would have to be 0,
and you get the idea. You could have some columns
the don't have pivots, but whenever you do have a pivot,
they have to be the only non-zero entry in
their column. This is reduced row
echelon form.   So, what we do with any matrix
is we keep performing those row operations so that we
eventually get it into a reduced row echelon form. And as we do that we are
performing those same operations on the
right-hand side. We're performing on
the entire row of these augmented matrices. So this vector b right here, I
guess I could write it as a vector, it's eventually going
to be some other vector c right here. You know, if this is 1, 2, 3,
maybe I will perform a bunch of operations and this
will be 3, 2, 1, or something of that nature. Now, when does this not
have a solution?   We reviewed this early on. The only time where you don't
have a solution, remember, there are three cases, where
you have many solutions.   and that's the situation where
you have free variables. We've talked about
that before. You have the case where you have
only one unique solution, that's the other case. And then you have
the final case where you have no solutions.   And when do you have
no solutions? What has to happen to
have no solution? To have no solutions, when you
perform these row operations, you have to eventually get to
a point where your matrix looks something like this. I don't know what all this stuff
looks like maybe there's a 1 here, a bunch of stuff. There is a 1 here and a 0. But if you have a whole row, at
least one whole row of 0's, you just have a bunch
of 0's like that. And over here you have something
that is non-zero.   This is the only time that
you have no solution. So let's remember what
we're even talking about this stuff for. We are saying that our
transformation is onto, if its column vectors or if its column
space is Rm, if its column vectors span Rm. And what I'm trying to figure
out is how do I know that it spans Rm? So, essentially, for it to span
Rm, you can give me any b here, any b that's a member of
Rm, and I should be able to get a solution. So we asked ourselves the
question, when do we not get a solution?   Well, we definitely don't get a
solution if we have a bunch of 0's in a row. And then we have something
non-zero here. That's definitely not going
to be a solution. Now there's the other case where
we have a bunch of 0's. So there's the other case
where we do have some solutions, where it's only
valid for certain b's. So that's the case-- let
me draw it like this. Let me start it like this. So let's say I have my matrix
A, and I have my b1, b2, let me write it all the way,
and then you have bm. Remember, this is
a member of Rm. And we do our reduced row
echelon form with this augmented matrix, and
A goes to its reduced row echelon form. Let's say it's reduced row
echelon form has a row of 0's at the end of it. So it just has a row
of 0's right there. Everything else looks
like your standard stuff, 1's and 0's. But the last row, let's say
it's a bunch of 0's. And when we perform the row
operations here on this generalized member of Rm, this
last row has some function. Maybe it just looks like 2b1
plus 3b2-- I'm just writing a particular case, it won't always
be this-- minus b3. And it will essentially
be some function of all of the b's. So let me write it this way. I'm writing a particular case
in here, maybe I shouldn't have written a particular
case. This will be some function of
b1, b2, all the way to bm. Now, clearly if this
is non-zero, we don't have a solution. And so if we don't have a
solution for some cases of b, then we are definitely
not spanning Rm. So, let me write that down. If we don't have a solution for
some cases of b, then we don't span Rm. I don't know if I'm overstating
something that is maybe obvious to you, but I
really want to make sure you understand this. Anytime you just want to solve
the equation Ax is equal to b-- and remember, we want to
make sure that this can be true for any b we chose-- what
we could do is we just set up this augmented matrix like this,
and we perform a bunch of row operations until we get
A, we get this matrix A to reduced row echelon form. As we do this, the right-hand
side is going to be a bunch of functions of b. So maybe the first
row is b1 minus b2, plus b4, or something. And then the next row will
be something like that. We've seen examples of this in
the past. And if you end up by doing the reduced row echelon
form with a row of 0's here, the only way that you're going
to have a solution is if your vector b, if its entries satisfy
this function here on the right, so that this
thing equals 0. So it's only going to be
true for certain b's. And if this only has a solution
for the certain b's that make this equal to 0, then
we definitely are not spanning all of Rm. Let me do it visually. So if that is Rm, and if we
put-- if this is only 0 for a couple of b's, for, let's say
for some handful of b's, then these are the only guys that we
can reach by multiplying A times some vector in Rm. And we definitely won't
be spanning all of Rm. In order to span all of Rm, when
we put this in a reduced row echelon form, we have to
always find a solution. And the only way we are always
going be finding a solution is if we don't run into this
condition where we have a row of 0's. Because when you have a row 0's,
then you have to put the constraint that this right-hand
side has to be 0. So what's the only reduced row
echelon form where you don't have a row of 0's at the end? Well, any row in reduced row
echelon form either has to have all 0's or it has to have
a pivot entry in every row. So the only way that you span--
so T is onto, if and only if, it's the column space
of its transformation vector is equal to Rm. Its column vectors
span all of Rm. And the only way that that's
happening is if the reduced row echelon form of A has a
pivot entry in every row. And how many rows
does it have? This is an m by n matrix. It has m rows and n columns. So it has a pivot entry
in every row. That means that it has to have
m pivot entries, right there. Now, what's another way of
thinking about that? Remember, earlier on, several
videos ago, we thought about how do you figure out-- and this
might confuse things a little bit-- how do you
figure out the basis for your column space? So the basis for the column
space of a matrix, and this is a bit of review. What we did is we say, look, you
take your matrix, and you put it in reduced row echelon
form of your matrix, and then, essentially-- let me draw it a
little bit different heree-- well, you put it in reduced
row echelon form. So let's say that's just reduced
row echelon form. And you look at which columns
have pivot entries. And the corresponding columns in
your original matrices, in your original matrix,
forms the basis for your column space. So let me draw that out. So, I'll do a particular
instance. So, let's say that it has its
column vectors a1, a2, all the way to an. That's what A looks like. And when you put it in reduced
row echelon form, let's say that this column right here
has a pivot entry. That column has a pivot entry. Let's say that this
one doesn't. Let's say this is a 2 there. I'm just picking particular
numbers.   Let's say there's a 3. Let's say all of these are
non-pivot entries, and then our last entry n is
a pivot entry. So it just has a bunch of 0's,
and then a 1 like that. How do you determine what are
the basis vectors for the column space? Well, obviously, the column
space is everything that's spanned by all these guys. But, what's the minimum
set you need to have that same span? Well, you look at which one
has a corresponding pivot entries or pivot columns. And you say, I have a pivot
column here, and I have a pivot column there. So the basis for my column space
must be this column in my original matrix, and that
column in my original matrix. And then we said, well, how do
you define the dimension of it's column space? And you just essentially count
the number of vectors you need for your basis, and we call
that the rank of A. This is all review. The rank of A was equal to the
dimension of the column space of A, which is equal to number
of basis vectors for the column space. And this is how you
determine it. You essentially figure out how
many pivot columns you have, the number of pivot columns
you have is the number of basis vectors you have,
and so that's going to be the rank of A. Now, the whole reason why I
talked about this is we just said that our transformation T
is onto, if and only if, its column space is Rm, which is
the case if it has a pivot entry in every row in its
reduced row echelon form. Or, since it has m rows, it has
to have m pivot entries. So for every row, you have a
pivot entry, but every pivot entry corresponds to
a pivot column.   So if you have m pivot entries,
you also have m pivot columns, which means that if you
were to do this exercise right here, you would have m
basis vectors for your column space, or that you would
have a rank of m.   So this whole video was
just a big long way of saying that T is onto.   And another way of saying that
is that if you have your domain here, which was Rm, and
you have your co-domain here, that is Rm, that every member
of Rm can be reached by T by some member of Rn. Any guy here, there's always at
least one guy here, that if you apply T to it, you
get right there. There might be more than one. We're not even talking
about 1 to 1 yet. So we say that T is onto, if and
only if, the rank of its transformation matrix,
A, is equal to m. So that was the big takeaway
of this video. Let's just actually do an
example, because sometimes when you do things really
abstract it seems a little bit confusing, when you see
something particular. Let me define some
transformation S. Let's say the transformation S
is a mapping from R2 to R3. And let's say that S applied to
some vector x is equal to the matrix 1, 2, 3, 4, 5,
6, times the vector x. So this is clearly
a 3 by 2 matrix. Let's see if S is onto. Well, based on what we just did,
we just have to go and put this guy in reduced
row echelon form. So let's do that. So if you put this guy into
reduced row echelon form, so let's keep 1, 2, 3, 4, 5, 6. Now, let's keep the first row
the same, that's 1, 2. Let's replace the second row
with the second row minus 3 times the first row. Actually, let's replace it with
3 times the first row minus the second row. So, 3 times 1 minus 3 is 0. 3 times 2 minus 4, that's
6 minus 4, is 2. Now let's replace the third
row with 5 times the first row, minus the third row. So 5 times 1 minus 5 is 0. 5 times 2 is 10, minus 6 is 4. Now, let's see if we can
get a 1 right here. So I'm going to keep my
middle row the same. Or, actually, let's just divide
the middle row by 2, or multiply it by 1/2 So, you
get 0, 1 and then you have a 0, 4, 1, 2. And now let's try to make these
0, get it into reduced row echelon form. So I'm going to keep my middle
row the same, 0, 1. And let's replace the top row
with the top row minus 2 times the second row. So 1 minus 2 times 0 is 1. 2 minus 2, times 1 is 0. Now, let's replace this last row
with the last row minus 4 times this row. So we get 0 minus 4,
times that, is 0. 4 minus 4, times 1, is 0. So notice, we have a
row with 0's here. We have two pivot entries or two
rows with pivot entries, and we also have two pivot
columns right there. So the rank of this guy right
here, of 1, 2, 3, 4, 5, 6. The rank of that is equal
to 2, which is not equal to our co-domain. It is not equal to R3. It's not equal to R3, so S is
not onto, or not surjective. It's one of the two conditions
for invertibility. So, we definitely know that
S is not invertible. Hopefully that's helpful. Now, in the next video we're
going to focus on the second condition for invertibility,
and that's being 1 to 1.",Determining whether a transformation is onto | Linear Algebra | Khan Academy,"Determining whether a transformation is onto

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/linear-algebra-exploring-the-solution-set-of-ax-b?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/relating-invertibility-to-being-onto-and-one-to-one?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,eR8vEdJTvd0
Exactequationsexample3_Firstorderdifferentialequations_KhanAcademy-eu_GFuU7tLI.en.csv,"Welcome back. I'm just trying to show you as
many examples as possible of solving exact differential
equations. One, trying to figure
out whether the equations are exact. And then if you know they're
exact, how do you figure out the psi and figure out
the solution of the differential equation? So the next one in my book is
3x squared minus 2xy plus 2 times dx, plus 6y squared minus
x squared plus 3 times dy is equal to 0. So just the way it was
written, this isn't superficially in that form
that we want, right? What's the form that we want? We want some function of x and
y plus another function of x and y, times y prime, or
dy dx, is equal to 0. We're close. How could we get this equation
into this form? We just divide both sides of
this equation by dx, right? And then we get 3x squared
minus 2xy plus 2. We're dividing by dx, so that
dx just becomes a 1. Plus 6y squared minus
x squared plus 3. And then we're dividing by dx,
so that becomes dy dx, is equal to-- what's
0 divided by dx? Well it's just 0. And there we have it. We have written this
in the form that we need, in this form. And now we need to prove to
ourselves that this is an exact equation. So let's do that. So what's the partial of M? This is the M function, right? This was a plus here. What's the partial of this
with respect to y? This would be 0. This would be minus 2x,
and then just a 2. So the partial of this with
respect to y is minus 2x. What's the partial of
N with respect to x? This would be 0, this
would be minus 2x. So there you have it. The partial of M with respect
to y is equal to the partial of N with respect to x. My is equal to Nx. So we are dealing with
an exact equation. So now we have to find psi. The partial of psi with respect
to x is equal to M, which is equal to 3x squared
minus 2xy plus 2. Take the anti-derivative with
respect to x on both sides, and you get psi is equal to x
to the third minus x squared y-- because y is just a
constant-- plus 2x, plus some function of y. Right? Because we know psi is a
function of x and y. So when you take a derivative,
when you take a partial with respect to just x, a pure
function of just y would get lost. So it's like the constant,
when we first learned taking anti-derivatives. And now, to figure out psi, we
just have to solve for h of y. And how do we do that? Well let's take the partial
of psi with respect to y. That's going to be equal
to this right here. So The partial of psi with
respect to y, this is 0, this is minus x squared. So it's minus x squared-- this
is o-- plus h prime of y, is going to be able to what? That's going to be equal
to our n of x, y. It's going to be able to this. And then we can solve
for this. So that's going to be equal
to 6y squared minus x squared plus 3. You can add x squared
to both sides to get rid of this and this. And then we're left with h
prime of y is equal to 6y squared plus 3. Anti-derivative-- so h of y is
equal to what is this-- 2y cubed plus 3y. And you could put a plus c
there, but the plus c merges later on when we solve the
differential equation, so you don't have to worry
about it too much. So what is our function psi? I'll write it in a new color. Our function psi as a function
of x and y is equal to x to the third minus x squared
y plus 2x. Plus h of y, which we
just solved for. So h of y is plus 2y to
the third plus 3y. And then they're could be a plus
c there, but you'll see that it doesn't matter much. Actually I want to do something a little bit different. I'm not just going to chug
through the problem. I want to kind of go back
to the intuition. Because I don't want this to
be completely mechanical. Let me just show you what the
derivative-- using what we knew before you even learned
anything about the partial derivative chain rule-- what is
the derivative of psi with respect to x. What is the derivative of
psi with respect to x? Here we just use our implicit
differentiation skills. So the derivative of this-- I'll
do it in a new color-- 3x squared minus-- now we're going
to have to use the chain rule here-- so the derivative
of the first expression with respect to x is-- well, let me
just put the minus sign and I could put like that-- so it's
2x times y plus the first function, x squared times the
derivative of the second function with respect to x. Well that's just
y prime, right? It's the derivative of y with
respect to y is 1, times the derivative of y with respect to
x, which is just y prime. Fair enough. Plus the derivative of this with
respect to x is easy, 2. Plus the derivative of this
with respect to x. Well let's take the derivative
of this with respect to y first. We're just doing implicit
differentiation of the chain rule. So this is plus 6y squared. And then we're using the chain
rule, so we took the derivative with respect to y. And then you have to multiply
that times the derivative of y with respect x, which
is just y prime. Plus the derivative of this
with respect to why is 3 times-- we're just doing the
chain rule-- the derivative of y with respect to x. So that's y prime. Let's try to see if we
can simplify this. So we get this is equal to 3x
squared minus 2xy plus 2. So that's this term, this
term, and this term. Plus-- let's just put the y
prime outside-- y prime times-- let's see, you have a
negative sign out here-- minus x squared plus 6y
squared plus 3. So this is the derivative of
our psi as we solved it. Look at this closely and notice
that that is the same-- hopefully it's the same--
as our original problem. What was our original problem
that we started working with? The original problem was 3x
squared minus 2xy plus 2, plus 6y squared minus x square
plus 3, times y prime, is equal to 0. So this was our original
problem. And notice that the derivative
of psi with respect to x just using implicit differentiation
is exactly this. So hopefully this gives you a
little intuition of why we can just rewrite this equation as
the derivative with respect x of psi, which is a function
of x and y, is equal to 0. Because this is the derivative
of psi with respect to x. I wrote out here. It's the same thing-- this
right here-- right? So that equals 0. So if we take the
anti-derivative of both sides, we know that the solution of
this differential equation is that psi of x and y is equal
to c as the solution. And we know what psi is, so we
just set that equal to c, and we have the implicit-- we have a
solution to the differential equation, I'll just
define implicitly. So the solution-- you don't have
to do this every time. This step right here you
wouldn't have to do if you're taking a test, unless
the teacher explicitly asked for it. I just wanted kind of make sure
that you know what you're doing, that you're not just
doing things completely mechanically. That you really see that the
derivative of psi really does give you-- we solved for psi. And I just wanted to show you
that the derivative of psi with respect to x, just using
implicit differentiation and our standard chain rule,
actually gives you the left hand side of the differential
equation, which was our version of problem. And then that's how we know that
that the derivative of psi with respect x is equal
to 0, because our original differential equation
was equal to 0. You take the anti-derivative of
both sides of this, you get psi is equal to C, is
the solution of the differential equation. Or if you wanted to write it
out, psi is this thing. Our solution to the differential
equation is x to the third, minus x squared y,
plus 2x, plus 2y to the third, plus 3y, is equal to c, is the
implicitly defined solution of our original differential
equation. Anyway I've run out
of time again. I will see you in
the next video.",Exact equations example 3 | First order differential equations | Khan Academy,"One more exact equation example

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/integrating-factors-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/exact-equations-example-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,eu_GFuU7tLI
Compositionsoflineartransformations1_Matrixtransformations_LinearAlgebra_KhanAcademy-f_DTiXZpb8M.en.csv,"Let's see if we can build a bit
on some of our work with linear transformation. I have two linear
transformations. I have the transformation S,
that's a mapping, or function, from the set X to the set Y. And let's just say that X
is a subset of of Rn. Y is a subset of Rm. Then we know S is a linear
transformation. It can be represented by a
matrix vector product. We can write S of X. Let me do it in the same color
as I was doing it before. We can write that S of some
vector X, is equal to some matrix A times X. The matrix A, it's going to be
X, whatever X we input into the function, although we
take the mapping of. It's going to be in this set,
right here, is going to be a member of Rn. This is going to
be right here. Let me do it like this. X is going to be
a member of Rn. Well, it's actually going to be
a member of X, which is a subset of Rn. I'm just trying to figure out
what the dimensions of matrix A are going to be. This is going to have n
components right here. Matrix A has to have
n columns. Matrix A is going to be, let's
just say, is an m by n matrix. Fair enough. Let's say we have another
linear transformation. Let me draw what I've
done so far. We have sum set X, right
here, that is set X. It is a subset of Rn. Rn, I can draw out there. We have this mapping, S, or this
linear transformation, from X to Y. It goes to a new set,
Y, right here. Y is a member of Rm. The mapping X, right here. You take some element here,
and you apply the transformation S. I've told you it's a linear
transformation. You'll get to some value in
set Y, which is in Rm. I said that the matrix
representation of our linear transformation is going to
be an m by n matrix. You're going to start with
something that has n entries, or a vector that's
a member of Rn. You want to end up with
a vector that's in Rm. Fair enough. Now, let's say I have another
linear transformation, T. It's a mapping from the
set Y to the set Z. Let me draw. I have another set here
called set Z. I can map from elements of Y, so
I could map from here, into elements of Z using the linear
transformation T. Similar to what I did before. We know that Y is
a member of Rm. You know that this is a subset,
not a member, more of a subset of Rm. These are just arbitrary
letters. It could be 100 or
5, or whatever. I'm just trying to
stay abstract. Z is a member, I'm running out
of letters, let's say Z is a member of Rl. Z is a member of Rl. Then, what's the transformation
T, what's it's matrix representation
going to be. You know it's a linear
transformation. I told you that. We know it can be represented
in this form. We could say that T of X, where
X is a member of Rm, is going to be equal to some
matrix B times X. What are the dimensions of
matrix B going to be. X is going to be a member of Rm,
so B is going to have to have m columns. And then it's a mapping into a
set that's a member of Rl. It's going to map from members
of Rm to members of Rl. It's going to be
l by m matrix. When you see this, a very
natural question might arise in your head. Can we construct some mapping
that goes all the way, that goes all the way, from set
X all the way to set T. Maybe we'll call that the
composition of-- I mean we can create that mapping using a
combination of S and T. Let's just make up some word. Let's just call T, with this
little circle S, let's just call this a mapping from
X all the way to Z. We'll call this the composition
of T with S. We're essentially just combining
the two functions in order to try to create some
mapping that takes us from T, from set X, all the
way to set Z. We still haven't defined this. How can we actually
construct this. A natural thing might be to
first apply transformation S. Let's say that this is our X
we're dealing with right here. Maybe the first thing we want to
do is apply S, and that'll give us an S of X. That will give us this value,
right here, that's in set Y. And then what if we were to take
that value and apply the transformation T to it? We would take this value, and
apply the transformation T to it, to maybe get
to this value. This would be the linear
transformation T applied to this value, this member of the
set Y, which is in Rm. We are just going to apply that
transformation to this guy, right here, which was the
transformation S applied to X. This might look fancy, but all
this is, remember this is just a vector, right here,
in the set Y, which is a subset of Rm. This is a vector that is in X. When you apply mapping,
you get another vector that's in Y. You apply the linear
transformation T to that, then you get another vector
that's at set Z. Let's define the composition
of T with S. This is going to be
a definition. Let's define the composition of
T with S to be-- first we apply S to some vector in X. Apply S to some vector
in X to get us here. Then we apply T to that vector
to get us to set Z. To get us to set-- so we apply
T to this thing right there. The first question might be,
is this even a linear transformation? Is the composition of two linear
transformations even a linear transformation? Well there are two requirements
to be a linear transformation. The sum of the linear
transformation of the sum of two vectors, should be the
linear transformation of each of them summed together. I know when I just say that
verbally, it probably doesn't make a lot of sense. Let's try to take the
composition, the composition of T with S of the sum
of two vectors in X. I'm taking the vectors
x and the vectors y. By definition, what
is this equal to? This is equal to applying to
linear transformation T to the linear transformation S,
applied to our two vectors, x plus y. What is this equal to? I told you at the beginning of
the video, that S is a linear transformation. So by definition, of a linear
transformation, one of our requirements, we know that S of
x plus y is the same thing as S of x plus S of y, because
S is a linear transformation. We know that is true. We know that we can replace this
thing right there with that thing right there. We also know that T is a
linear transformation. Which means that the
transformation applied to the sum of two vectors is equal to
the transformation of each of the vectors summed up. The transformation of S of x, or
the transformation applied to the transformation of S
applied to x, I know the terminology is getting confused,
plus T of S of y. We can do this because we
know that T is a linear transformation. But what is this right here? All this statement right here is
equal to the composition of T with S, applied to x, plus the
composition of T with S, applied to y. Given that both T and S are
linear transformations, we got our first requirement. That the composition applied to
the sum of two vectors is equal to the composition
applied to each of the vectors summed up. That was our first requirement
for linear transformation. Our second one is, we need
to apply this to a scalar multiple of a vector in X. So, T of S, or let me say it
this way, the composition of T with S applied to some scalar
multiple of some vector x, that's in our set X. This is a vector x,
that's our set X. This should be a capital X. This is equal to what. Well, by our definition of our
linear, of our composition, this is equal to the
transformation T applied to the transformation S, applied
to c times our vector x. What is this equal to? We know that this is a linear
transformation. Given that this is a linear
transformation, that S is a linear transformation, we know
that this can be rewritten as T times c times S
applied to x. This little replacing that I
did, with S applied to c times x, is the same thing as
c times the linear transformation applied to x. This just comes out of the
fact that S is a linear transformation. We've done that multiple
times. Now we have T applied
to some scalar multiple of some vector. We can do the same thing. We know that T is a linear
transformation. We know that this is equal to,
I'll do it down here, this is equal to c times T applied to
S applied to some vector x that's in there. What is this equal =? This is equal to the constant c
times the composition T with S of our vector x right there. We've met our second requirement
for linear transformation. The composition as we've defined
it is definitely a linear transformation. This means that the composition
of T with S can be written as some matrix-- let
me write it this way-- the composition of T with
S applied to, or the transformation of, which is
a composition of T with S, applied to some vector x, can
be written as some matrix times our vector x. And what will be the dimensions
of our matrix? We're going from a n dimension
space, so this is going to have n columns, to a
l dimension space. So this is going
to have l rows. This is going to be
an l by n matrix. I'll leave you there
in this video. I realize I've been making too
many 20 minutes plus videos. The next video, now that we
know this is a linear transformation, and that we know
that we can represent it as a matrix vector product. We'll actually figure out how
to represent this matrix, especially in relation to the
two matrices that define our transformations, S and T.",Compositions of linear transformations 1 | Matrix transformations | Linear Algebra | Khan Academy,"Introduction to compositions of Linear Transformations

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/composition_of_transformations/v/compositions-of-linear-transformations-2?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/expressing-a-projection-on-to-a-line-as-a-matrix-vector-prod?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,f_DTiXZpb8M
Laplacetransformofcostandpolynomials_Laplacetransform_KhanAcademy-fyJkXBvcA2Q.en.csv,"In the last video, we showed
that the Laplace transform of f prime of t is equal to s times
the Laplace transform of our function f minus f of 0. Now, what we're going to do
here is actually use this property that we
showed is true. And use it to fill in some more
of the entries in our Laplace transform table, that
you'll probably have to memorize, sooner or later,
if you use Laplace transforms a lot. But we already learned that the
Laplace transform of sine of a t is equal-- and we did
a very hairy integration by parts problems to show that
that is equal to a over s squared plus a squared. So let's use these two things we
know to figure out what the Laplace transform of
cosine of a t is. So the Laplace transform
of cosine of a t is equal to what? Well, if we assume that the
Laplace transform of cosine of a t is the derivative of some
function, what is it the derivative of? Right? Let me do it on the side. If f prime of t is equal to
cosine of a t, what is a potential f of t? Well, it's the antiderivative. And we can just forget about the
constant, because we just have to know nf of t for
which this is true. So what's the antiderivative
cosine of it? It's 1/a sine of a t. Right? So if this is f prime of t, then
that is equal to s times the Laplace transform of its
antiderivative, or 1/a sine of a t minus the antiderivative
evaluated at 0. Minus 1/a sine of-- well,
a times 0 is 0. Well, sine of 0 is 0. So this whole term goes away. This is a constant, right? This 1/a. And we showed that the Laplace transform is a linear operator. So we can take it out. So this is equal to s/a times
the Laplace transform of sine of a t. And that is equal to
s/a times a over f squared plus a squared. And the a's cancel out. And that was much simpler than
the integration by parts we had to do to figure this out. So then we get that the Laplace
transform of cosine of a t is equal to s over s
squared plus a squared. And in three minutes, we filled
in another table in our Laplace transform table. And now we have the two most
important trig functions. Let's keep going. We haven't really done much
with polynomials. We know a couple of things. We did this already. We know that the Laplace
transform of 1 is equal to 1/s. So let's see if we could use
this and the fact that the Laplace transform of f prime
is equal to s times the Laplace transform of
f minus f of 0. Or another way. Let's rearrange this. If we know f, how can we
figure out some Laplace transforms in terms of
f prime and f of 0? So let's just rearrange
this equation. So we get the Laplace transform
of f prime. I could write of t, but
that gets monotonous. Plus f of 0 is equal to
s times the Laplace transform of f. Divide both sides by s. Let me put the Laplace transform
of-- and I'm also going to the sides. So I guess the Laplace
transform-- my l's are getting funky. The Laplace transform of
f is equal to 1/s. I'm just dividing both sides
by s, so 1/s times this. Times the Laplace transform of
my derivative plus my function evaluated at 0. And let's see if we can use this
and this to figure out some more useful Laplace
transforms. Well what is the Laplace
transform of f of t is equal to t? Well, just use this property. This is going to be equal
to 1/s times the Laplace transform of the derivative. Well, what's the derivative
of t? The derivative of t is 1. So it's the Laplace transform
of 1 minus f of 0. When t equals 0,
this becomes 0. Minus 0. So the Laplace transform of t
is equal to 1/s times the Laplace transform of 1. Well that's just 1/s. So it's 1 over s squared
minus 0. Interesting. The Laplace transform of 1 is
1/s, Laplace transform of t is 1/s squared. Let's figure out what the
Laplace transform of t squared is. And I'll do this one in green. And maybe we'll see
a pattern emerge. The Laplace transform
of t squared. Well, it equals 1/s times the
Laplace transform of it's derivative. So what's it's derivative? Times the Laplace transform of
2t plus this evaluated at 0. Well, that's just 0. So this is equal to-- well
we can just take this constant out. This is equal to 2/s times the
Laplace transform of t. Well, what does that equal? We just solved it. 1/s squared. So it's 2/s times 1/s squared. So it's equal to 2/s
to the third. Fascinating. Well, let me just
do t the third. And I think then you'll
see the pattern. The pattern will emerge. The Laplace transform. And this is actually
kind of fun. I recommend you do it. It's somehow satisfying. It's much more satisfying than
integration by parts. So the Laplace transform of t to
the third is 1/s times the Laplace transform of it's derivative, which is 3t squared. Which is-- take the constant
out because it's a linear operator. 3/s times the Laplace transform
of t squared. So it equals what? What's the Laplace transform
of t squared? It's 2/s to the third. So this equals 3 times 2 over
what? s to the fourth. And you can put a t/n here and
use an inductive argument to figure out a general formula. And that general formula
is-- I think you see the pattern here. Whatever my exponent is, the
Laplace transform has an s in the denominator with one
larger exponent. And then the numerator is the
factorial of my exponent. So in general, and this is one
more entry in our Laplace transform table. The Laplace transform of t to
the nth power is equal to n factorial over s to
the n plus 1. That's a parenthesis. I guess I didn't have to write
those parenthesis. That just confuses it. But anyway, when you see this in
a Laplace transform table, it seems intimidating. Oh boy, I have n's and I have n
factorials and all of that. But it's just saying with this
pattern we showed, t to the third increase it by 1, so
s the fourth, put another denominator and take three
factorial on the numerator, which is 6, right? And that's all it is. So using the derivative property
of Laplace transform, we figured out the Laplace
transform of cosine of a t and the Laplace transform of really
any polynomial, right? Because it's a linear
operator. So now we know t to the
nth power, t to the whatever power. And we can multiply
it by a constant. So we know the basic
trig functions. We know the exponential
function. And we know how to take the
Laplace transform of polynomials. See you in the next video.",Laplace transform of cos t and polynomials | Laplace transform | Khan Academy,"Laplace transform of cosine and polynomials!

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/more-laplace-transform-tools?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-5?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,fyJkXBvcA2Q
Determinantasscalingfactor_Matrixtransformations_LinearAlgebra_KhanAcademy-g3MqSdO5Ubc.en.csv,"Let me graph our coordinates
in R2. So let's see, let me do
it fairly neatly. I want to do it neater
than that. So that is my vertical
coordinate, this is my horizontal coordinate. Good enough. So let's say I have four points
in R2 specified by four position vectors. So this is R2 right here. So my first position vector
is the zero vector. So it just specifies the point
right there, so it's 0, 0. My second point is specified the
by the vector say k 1, 0, so some constant times 0. Let me write it a little
bit neater than that, a little bit bigger. So it's k 1, 0, so that's my
second position vector, which would specify that point
right there. So let me draw my vector
right there. Let's say my third point
is going to be up here. As you can, see I'm creating
a rectangle. Let's say it's specified
by the position vector. Let me draw the position
vector like that. And that position vector is
going to be the vector k1. That's going to be its
horizontal component and then k2 is its vertical component. If we wanted to graph it on the
coordinates, this would be the k2 coordinate right there. And let's say that the last
point is this point right here, and it is specified by
the position vector 0, k2. And let me define a set. Let me call that set rectangle, say R for rectangle. Let me just call it Rec. Let's say that rectangle is
equal to the set of all of the points when you connect the
points specified by those position vectors. So the rectangle formed by
connecting points specified by these guys here. So if we call this vector a,
this is vector b, this is vector c, and then this is
vector d right here, so rectangle specified
by connecting the points a, b, c and d. Now let's say-- so let me draw
what our set rectangle is going to be. It's going to be all of these
points here, all of these points there, all of those
points there, and then all of those points there, including
our vertices. So that is my rectangle. Now, what is the area within
this rectangle? So this is the area
of rectangle. What's the area within
this rectangle? Well, it's just base
times height. The base has length k1. The distance from here to here
is k1, so it's just k1. And what's the height? It's the distance from here
to here, which is just k2. So it's just k1 times k2. That's fairly straightforward. I haven't shown you anything
that fascinating just yet. But let's say we're going
to transform this set. We're going to transform this
rectangle and we're going to transform it with the
transformation T. Let me pick a nice
color for T. Let's say we have the
transformation T. It is a mapping from R2 to R2,
and it can be represented as-- so when you apply the
transformation T to some vector x, it is equal to the
matrix a, b, c, d times your vector x, just like that. Now, let's see what happens
when we apply the transformation to each
of these points. We saw many videos ago that if
you want essentially the image of our rectangle under this
transformation, you can essentially just get the
transformation of each of the end points and then connect
the dots in your codomain, which is also going to be R2. So we just have to figure out
the transformation of each of these guys. So what is my transformation? I'll do it over here. I'll do it in the colors. What is the transformation
applied to the zero vector, applied to point
a right there? Well, it's just going to be
a times 0 plus b times 0, which is just 0. And then the second term is
going to be c times 0 plus d times 0, which is just 0. That's vector a. Vector b. If I apply the transformation
to vector b, vector b is k1, 0, just like that. If I apply the transformation,
it's going to be a times k-- so the first entry in the
transformed vector or what we're mapping to in our codomain
is going to be a times k1 plus b times
0, so it's just ak1. And then the second entry's
going to be c times k1 plus d times 0. So it's going to
be c times k1. All I'm doing is taking the
matrix vector product of this guy and that guy. And then let's move
on to point c. So the transformation of point
c of k1, k2 is equal to-- or the transformation of
vector c, we could say, is equal to what? The first entry's going to be
a times k1 plus b times k2. a times k1 plus b times k2, and
the second entry's going to be c times k1 plus
d times k2. We have one point left. The transformation, if we take
the transformation of our vector 0, k2, what do we get? We get a times 0 plus b times
k2, which is just b times k2, and then c times 0 plus d times
k2, which is just d times k2, just like that. So let's draw the image of
our rectangle under our transformation. So let me redraw my axes. So this is my vertical
axis right there. This is my horizontal
axis right there. And so a gets mapped to the
zero vector right there. So this is the transformation
of 0, 0 right like that. Now, what does the vector
b get transformed? The vector b gets transformed
to ak1, ck1, so let me draw it like this. The vector b gets transformed
to something that looks like this, where this is the vector--
so this is the transformation of k1 and 0,
which is equal to ak1, ck1. We saw that already. Now, what does this yellow
guy get transformed to? Let me do the blue one first.
So the blue one gets transformed here. Let me finish here. So if we come down here,
this is going to be ak1 right there. If we go to the left like that,
that's going to ck1. That's how we graph it. Now this last guy, this blue
guy, maybe he looks something like this. This is the transformation of
that vector right there by this linear transformation, 0,
k2, which is equal to the vector bk2 and dk2, so this
point right here is bk2 and then this coordinate
right there is dk2. Now this last guy, this yellow
point, when I transformed it, what do I get? I get ak1, plus bk2, so ak1 plus
bk2 will get you right about there, so that's going
to be its x-coordinate. And then its y-coordinate
is ck1 plus dk2. So ck1, and then I'm going to
add that much again to it. So it's going to get me
someplace over here. So I'm going to add this
distance to this whole distance over here, so
I'm going to get up here some point. I'm going to get right
over here. So that vector's going to look
something like that. That is the transformation
of k1, k2. That's the transformation
of that guy. And then if we connect the
dots, remember, the transformation of this set of
this rectangle, or we could say the image of this
rectangle under the transformation, we just take
each of the points that define that rectangle and then
we connect the dots. We saw that awhile ago. So let me draw it this way. This line right here that
connects those two dots will be transformed to this line that
connects these two dots right there. This line-- I was going to do
that in a different color. This line that connects those
two dots is going to be transformed to this line that
connects those two dots. And then we have this line that
connects those two dots is going to be transformed to
this line that connects these two dots right there. And then finally, this line that
connects these two dots is going to be transformed to
this line that connects these two dots right there. Now, just out of curiosity,
what is-- let me just write this. So this rectangle right
here is the image. We could write this as T of our
rectangle, or if we wanted to write it in words, this is
equal to the image of the rectangle under our
transformation T. Now, what is the area of the
image of our rectangle under our transformation? What is the area
of this thing? What is this area right there? Well, we could view this
parallelogram essentially as a parallelogram generated by this
vector and that vector. Or if we wanted to write it
another way, if we had a matrix, if we had some matrix
whose column vectors are this guy and that guy, so let's say,
it's first column vector is this guy, so ak1, ck1, And
this one right here, this was the transformation of k1, 0. And then its second column
vector is this guy right here, which was bk2 and dk2. This parallelogram is a
parallelogram generated by these two column vectors. This was the transformation
right here. This was the transformation
of 0, k2, right? And in the last video, we said
that the area of this parallelogram is equivalent
to-- let me write this right now. So the area of the
parallelogram, which is the same thing as the area of the
image of our original rectangle under our
transformation, the area this parallelogram is equivalent to
the absolute value-- let me call this determinant
right here, let me call this I for image. So it's equal to the absolute
value of the determinant of the matrix whose column
vectors generate that parallelogram. So it should be equal to the
determinant of the absolute value of the determinant of I. We saw that in the last video. That's what the area of this
thing is going to be. Well, what is the determinant
of this? Well, this is going to be equal
to-- we've got to keep our absolute value signs. So the determinant of this is
ak1 times dk2, so we could right this as-- let
me switch colors. We could write it
as k1, k2, ad. All I did is multiply that term
times that term minus this term times that term. So minus k1, k2, bc. That's just the definition
of the determinant of a 2-by-2 matrix. We saw this in the last video. This is nothing new here, or
maybe it might be relatively new if you just watched the last
video, but all I'm saying is, look, if we want to figure
out this parallelogram, this is the parallelogram
generated by that vector and that vector. And if we say that those two
guys are the column vectors of some matrix right there, we saw
on the last video that the area of this parallelogram is
equal to the absolute value of the determinant of
this matrix. Now, what is the equal to? This is equal to-- we can
factor out a k1, k2. So it's the absolute value of
k1, k2 times ad minus bc. Now what is this equal to? Well, ad minus bc, that is
the determinant of our transformation vector. So if we say that T of x-- if we
called that vector-- or our transformation matrix. If we call this matrix A, if we
call it A, this is equal to k1, k2 times the determinant
of A, which is a pretty interesting takeaway. What this is telling us is,
look, if I have some region, or in this case, I just have the
rectangle, but if I have some region in my domain and I
apply a transformation, and let's say my region
has some area. Let's say in this case,
it has some area A. Let me write this
right as area. This was my original area in
my original region, right? And then I apply some
transformation to it where the transformation is equal to some
matrix A times any member of your domain. I apply some transformation
to it. I get some new region. I get the image of this set
under my transformation. Your new area is going to be
equal to the absolute value of the determinant of your
transformation matrix. That's the determinant of the
transformation matrix. That's the transformation
matrix. So it's equal to the
determinant of the transformation matrix times
the area of your original rectangle in this case, right? This was your original
rectangle. You take the absolute value,
just because sometimes you swap these vectors you might
get a negative sign, so you take the absolute value. But that's a really neat idea. The determinant of the
transformation matrix is essentially a scaling
factor on the area of a certain region. Now, I'm not going to prove it
to you here, but you can kind of imagine it. Let's say I have some-- let
me go abstract now. Let's say I have some region in
R2-- let me do a better-- let me do a shape that
you might recognize. Let's say I have something
like that. Let's say it's an
ellipse, right? And this is our domain. It's R2. And let's say that the area
here, the area of this region right here, is equal to A. So area is equal to A. And let's say I have some
transformation T that is a mapping from R2 to R2 And T is
defined, so T applied to some vector x in my domain is equal
to-- well, I already used A, so let's say it's equal to some
matrix B times any vector in my domain. If I take the image of this area
under T, so this is my domain right here. Let me do it in the codomain. Let's say the image of this
under B, let's say it looks something like-- or my image
under T-- let's say it looks something like this. I don't know what it's going to
look like, but let's say it looks something like this. Let's say it looks something
like that right there, so this right here. So if we call this set-- let
me call it E for ellipse. That's this whole thing
right here. This is the ellipse
right there. This is the image of my
ellipse under the transformation T. If I take every point of this
ellipse, I'll construct this right here. Or I guess maybe just to keep
the analogy straight for this example, let's say that the
ellipse is the set of just the boundary, but it also applies
actually if you were to fill up the whole region. So this is boundary gets
mapped to this boundary right here. But it would have worked
just as well if we filled up the region. Since I'm not proving either to
you very rigorously, you'll have to accept it as
a leap of faith. So this is the image of this
boundary under our transformation. And if the area surrounded by
this boundary, or if you could say the area of this region is
A, then the area here, the area of the image of our
ellipse under our transformation is going to be
equal to the absolute value of our area, our original area,
right there times the determinant of our
transformation matrix. If you find it a little bit of
a big leap to go from just an arbitrary rectangle
transformation to maybe these more generalized shapes, you
can imagine-- so T is going from there to there. It's always nice to
draw that arrow. But if you view it as a bit of
a leap to make that jump from rectangles to curves, you can
imagine this shape to be able to be constructed by a bunch
of arbitrary rectangles. So you could essentially fill
this space with a bunch of arbitrary rectangles like
this, and you could keep making them infinitely
small so that you completely fill the space. You completely fill that
space with rectangles. And if you were to map each of
those rectangles using T, each of those rectangles might look
something like this. Maybe they look something
like this. I don't know what they'll
look like. They'll look like a bunch of
parallelograms. Maybe they'll look something like that. I'm not drawing it
that neatly. They'll look like a bunch of
parallelograms, and they will essentially fill this
space right there. So that's a way you can get your
head around the idea of jumping from just the arbitrary
rectangles to these arbitrary curves or
shapes or regions. But this is a pretty neat
outcome, and it's a very interesting way to view
a determinant. A determinant of a
transformation matrix is essentially a scaling factor for
area as you map from one region to another region, or
as we go from one region to the image of that region under
the transformation.",Determinant as scaling factor | Matrix transformations | Linear Algebra | Khan Academy,"Viewing the determinant of the transformation matrix as a scaling factor of regions

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-transpose-of-a-matrix?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-determinant-and-area-of-a-parallelogram?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,g3MqSdO5Ubc
Vectortransformations_Matrixtransformations_LinearAlgebra_KhanAcademy-gAbadNuQEjI.en.csv,"In the last video we saw, a
little bit more formally than you might have been exposed to
the past, that a function is just a mapping of the members
of one set to another set. So if this is my first set, x. We call that the domain. And the set that we're mapping
to, y, in this case, that's called the codomain. And the function just maps each
of the specific entries of x to an entry in y. When I say map, it really just
creates an association. If we think of these in even
less abstract terms -- which, on some levels is more abstract
-- you could view x as a basket of bananas and
y as a basket of apples. And for every banana, you're
associating it with one of the apples. The mapping of going from each
of those bananas to each of those apples would
be a function. I don't know if that helps you
or not, but I just want to broaden your preconceived notion
of what a function is. I mean everything that you've
probably seen before probably took a form that looks
something like that. Where you said, oh, a function
is, you just give me some number and I'll give
you another number. Or I'll do something
to that number. While it can be much more
general than that. It's an association between any
member of one set and some other members of another set. Now, we know that vectors
are members of sets. Right? In particular, if we say that
some vector x is a member of some set -- let me just say it's
a member of rn, because that's what we deal with -- all
that means is that this is just a particular representation
of an n-tuple. Remember what rn was. rn we defined way back at the
beginning of the linear algebra playlist. We defined it
as the set of all n-tuples -- x1, x2, xn, where your x1's,
x2's, all the way to xn's are a member of
the real numbers. So your rn is most
definitely a set. This could be rn. And obviously the use of the
letter n is arbitrary. It could be rm, it
could be rs. n is just kind of a placeholder
for how many tuples we have. It
could be r5. It could be 5 tuples. And when we say that a vector
x is a member of rn, we're just saying that it's another
way of writing one of these n-tuples. And all of our vectors so far
are column vectors -- that's the only type that we've defined
so far -- and we say it's this ordered list where
each of the members are a member of r's. It's an ordered list of n --
it's an ordered list of n-components -- x1, x2, all the
way to xn -- where each of those guys, or each of those
x1's, x2's all the way to xn's, are a member of
the real numbers. That's, by definition, what we
mean when we say that x is a member of rn. So if x is a member of rn -- so
let me draw two sets right here -- let's say that this set
right here is rn and then let me just change, just to be
general, let me create another set right there and call that
set right there rm. Just a different number. It it could be the same as
n, it could be different. This is m-tuples,
that's n-tuples. We've defined that vectors
can be members of rn. So you could have some vector
here and then, if you associate with that vector in rn
-- if you associate it with some vector in are rm -- if you
associate it with, let's call that vector y, if you make
this association, that too is a function. And that might have already been
obvious to you and this would be a function that's
mapping from rn to rm. And actually, I just want
to make one little special note here. When I just drew the arrow like
this, this shows that I'm mapping between two sets. I'm taking elements of this set
and I'm associating with them with elements
of that set. Now, in the last video you
probably saw this. I wanted to do the side note
note because I realized it might've been confusing. I introduced you to another
way of writing a function like this. Where I said f could be defined
as a mapping for any given x to x squared. And I just want to make a
note on the notation. When I just have a regular arrow
I'm going between sets. When I have this little vertical
line at the base of the arrow, that's kind of
the function definition. It tells me for any x you give
me in the first set, in the second set I'm going to
associate this x with, in this case, x squared. Anyway, I just wanted to
make that side note. But the whole direction I was
going in is that vectors are valid elements of sets,
functions are just mappings between elements of sets,
so you could have functions of vectors. And I even touched on that a
little bit in the last video when I talked about
vector-valued functions. If your codomain is a subset of
rm, where m is greater than 1, then we say your function
is vector-valued. It's not just mapping into
the real numbers. It's mapping into some m-tuple
of real numbers. So if you mapped two-dimensional
space, you're dealing with a vector-valued
function. Now I've been all abstract and
whatnot, so let me actually deal with some vectors and it
might make everything a little bit more concrete. So let's say I define the
function f as f of x1, x2, and x3, is equal to x1 plus
2x2 and the second coordinate is just 3x3. And actually, I haven't formally
defined coordinates for you yet, but I think you
understand that just from your basic algebra training. So let's say that that's my
function definition based on the notation that we've
been introduced to. We could say that f is a mapping
from -- its domain is r3 -- and it maps from r3, or it
associates all values in r3 with some value in r2. This is a 2-tuple. Right? So this is an r2 This
is 3-tuple. Right? Or another way we could do this,
if we just wanted to write it in vector notation, I
could write that f -- if you pass f to some vector x1, x2,
x3, I could say this will be equal to the vector -- and
now it's going to have a two-component vector. It's going to be a vector in r2
where the first term is x1 plus 2x2 and the second
term is 3x3. So let's play around with
this a little bit. See what it does for us, what
it does to the vectors. So what is f of the
vector 1, 1, 1? Well, I get 1 plus 2 times 1
is, I get the vector 3, and then my second term is just 3
times this one, so I get the vector 3, 3. Fair enough, let me
do another one. Just to really experiment
with this mapping. If I take the f of the vector in
r3 2, 4, 1, what do I get? That equals 2 plus 2 times 4. That goes to the vector 10. 2 plus 2 times 4 and
then 3 times the third term right there. So the vector 10, 3. So how can we visualize this? Well, three-dimensional vectors
-- or vectors in r3 -- are not always the easiest to
visualize, but I think we can attempt to visualize
these two guys. So let's say that this is the
x1-axis, that's the x2-axis, that's the x3-axis. So this first vector right here,
this yellow one, 1, 1, 1, it will look like
this -- 1, 1, 1. And so if I were to go out here,
then go out here, then go up 1, the point would be
right there and if I were to draw it in standard position,
I'd start at the origin, and the vector looks something
like that. And then the second guy, 2, 4,
1, it would look like this. It would go 2 out here,
we'd go 4 this direction, 1, 2, 3, 4. And then we'd go 1 up. So it looks something
like this. 2, 4, 1. I think you get the idea. So I've drawn these two vectors
that are essentially in my domain. Our domain is r3. This is our r3 right here. And let's see what
our function maps these vectors to. So what's our codomain? Our codomain is r2, so this
is much easier to visualize for us. So we just have to draw
two axes like this. Let's call this x1 and
let's call this x2. And so what does f of 1, 1, 1 --
of this yellow vector -- it becomes 3, 3. So if I do it in yellow,
1, 2, 3, 1, 2, 3. So it gets me this one. If I draw it in standard
position the vector looks like this. So, literally, our function
went from mapped from this vector in r3 to this
vector in r2. That was what our
function did. Likewise, if we take the other
vector, we went from this 2, 4, 1 vector to sector 10, 3. So 1, 2, 3, 4, 5,
6, 7, 8, 9, 10. So it's going to look
something like this. And it's going to be 3 up,
so it's going to look something like this. So this vector right here, by
our function, f, got mapped -- let me do a different color
-- to this vector. This vector right here in r3 got
mapped to this vector in r2 by our function. Now this is just a switch
of terminology. When we talk about functions
of vectors the term that we tend to use is the word
transformation. But it really is the exact
same thing as a function. I don't want to confuse you,
because if you watch the differential equations playlist,
you saw the idea of a Laplace transformation, which
is really an operation that takes a function
as an argument. But in this case, and when
we're dealing into linear algebra world, a transformation
is really just a function operating on vectors
-- or the way we're going to use it -- it's just a
function operating on vectors. And so the general notation,
instead of writing a lowercase f like that, for a function,
people use an uppercase T to say it's a transformation. Although it doesn't have
to be an uppercase T. But that's the one that people
use the most. Just like this could be a g or an h,
but people always use a lowercase f. So the same way we could have
written this, we could have called this a transformation. And my sense of why, in the
linear algebra world, they use this, is because you kind of
imagine that this vector is being changed into
that vector. Or that this is vector is being transformed into that vector. I think that's why they call it
a transformation as opposed to a function. And it actually makes a lot
more sense when you start going into things like video
game programming. And a lot of what we're
embarking on with our transformations is key to
video game programming. But you're kind of transforming
one image into another image if you're viewing
at it from a different angle or whatever else
you might want to do. We'll talk a lot more about
that in the future. But I just wanted to introduce
you to this notation. So these statements, I could
have replaced all my f's with T's and I could have defined
some transformation. And I just want to make you
comfortable the notation. I could have defined it
similarly, a transformation from r3 to r2 and I could have
said that T of x1, x2, x3 is equal to the 2-tuple x1 plus 2
x1 comma 3x3 And I could have, just as similarly put a T up
here because I have defined it the same way. I could have said T of
my vector 1, 1, 1 is equal to 3, 3. Now, you might say, hey Sal, why
are you going through all this trouble of replacing
T's with f's? I'm just doing this so you
don't get confused. So that when you see in your
linear algebra book, when you see linear algebra problems,
when you see this big capital T and you're like, wow, I've
never seen that before and they're using this fancy word
called a transformation. This is completely identical to
your notion of a function. It is a function. In the next video I'm going
to talk about linear transformations. That's really just
linear functions. And I'll define that
a little bit more precisely in the next video. But hopefully by watching this
video you at least have a sense that you can apply
functions to vectors and, in the linear algebra world,
we tend to call those transformations. And hopefully this example
right here gives you, at least, a visual representation
of why it's called a transformation. We're transforming from
one vector to another.",Vector transformations | Matrix transformations | Linear Algebra | Khan Academy,"Introduction to the notion of vector transformations

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/linear-transformations?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/a-more-formal-understanding-of-functions?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,gAbadNuQEjI
L{sin(at)})-transformofsin(at)_Laplacetransform_DifferentialEquations_KhanAcademy-gMcs6RF_LrQ.en.csv,"  Let's keep building our table of
Laplace transforms. And now we'll do a fairly hairy problem,
so I'm going to have to focus so that I don't make
a careless mistake. But let's say we want to take
the Laplace transform-- and this is a useful one. Actually, all of them we've
done so far are useful. I'll tell you when we start
doing not-so-useful ones. Let's say we want to take the
Laplace transform of the sine of some constant times t. Well, our definition of the
Laplace transform, that says that it's the improper
integral. And remember, the Laplace
transform is just a definition. It's just a tool that
has turned out to be extremely useful. And we'll do more on that
intuition later on. But anyway, it's the integral
from 0 to infinity of e to the minus st, times-- whatever
we're taking the Laplace transform of-- times
sine of at, dt. And now, we have to go back and
find our integration by parts neuron. And mine always disappears,
so we have to reprove integration by parts. I don't recommend you do
this all the time. If you have to do this on an
exam, you might want to memorize it before the exam. But always remember, integration
by parts is just the product rule in reverse. So I'll just do that
in this corner. So the product rule tells
us if we have two functions, u times v. And if I were take the
derivative of u times v. Let's say that they're
functions of t. These are both functions of t. I could have written u
of x times v of x. Then that equals the derivative
of the first times the second function, plus the
first function times the derivative of the second. Now, if I were to integrate both
sides, I get uv-- this should be review-- is equal to
the integral of u prime v, with respect to dt-- but I'm
just doing a little bit of shorthand now-- plus the
integral of uv prime. I'm just trying to help myself
remember this thing. And let's take this and subtract
it from both sides. So we have this integral of u
prime v is going to be equal to this, uv minus the integral
of uv prime. And, of course, this
is a function of t. There's a dt here
and all of that. But I just have to do this in
the corner of my page a lot, because I always forget this,
and with the primes and the integrals and all that,
I always forget it. One way, if you did want to
memorize it, you said, OK, the integration by parts says if
I take the integral of the derivative of one thing and then
just a regular function of another, it equals the two
functions times each other, minus the integral
of the reverse. Right? Here, when you take the
subtraction, you're taking the one that had a derivative,
now it doesn't. And the one that didn't have
a derivative, now it does. But anyway, let's apply
that to our problem at hand, to this one. Well, we could go either
way about it. Let's make u prime is equal to--
we'll do our definition-- u prime is equal to e to the
minus st, in which case you would be the antiderivative of
that, which is equal to minus 1 over s e to the
minus st, right? And actually, this is going to
be an integration by parts twice problem, so I'm just
actually going to define the Laplace transform as y. That'll come in useful
later on. And I think I actually did a
very similar example to this when we did integration
by parts. But anyway, back to the
integration by parts. So that's u. And let me do v in a
different color. So when v-- if this
is u prime, right? This is u prime,
then this is v. So v is equal to sine of at. And then what is v prime? Well, that's just a cosine
of at, right? The chain rule. And now, we're ready to
do our integration. So the Laplace transform, and
I'll just say that's y, y is equal to-- y is what we're
trying to solve for, the Laplace transform of sine
of at-- that is equal to u prime v. I defined u prime in v, right? That's equal to that. The integral of u
prime times v. That equals uv. So that's minus 1 over s e to
the minus st, times v, sine of at, minus the integral. And when you do the integration
by parts, this could be an indefinite
integral, an improper integral, a definite
integral, whatever. But the boundary stays. And we can still say, from 0
to infinity of uv prime. So u is minus 1 over s e to the
minus st, times v prime, times a cosine of at--
fair enough-- dt. Well, now we have another hairy integral we need to solve. So this might involve another
integration by parts, and it does. Let's see if we can simplify
it at [? all. ?] Let's take the constants
out first. Let me just rewrite this. So we get y is equal to minus
e to the minus st over s, sine of at. So you have a minus minus plus a
over s-- a divided by s, and then these two negative signs
cancel out-- times the integral from 0 to infinity,
e to the minus st, cosine of at, dt. Let's do another integration
by parts. And I'll do this in a purple
color, just so you know this is our second integration
by parts. Over here. Let's define once again, u prime
is equal to e the minus st. So this is u prime. Then u is equal to minus 1
over s e to the minus st. We'll make v equal
to cosine of at.   The hardest part about this is
not making careless mistakes. And then v prime-- I just want
it to be on the same row-- is equal to minus a sine
of at, right? The chain rule, derivative
of cosine is minus sine. So let's substitute that back
in, and we get-- this is going to get hairy; actually, it
already is hairy-- y is equal to minus e to the minus st over
s, sine of at, plus a over s, times-- OK. Integration by parts. uv. So that's minus 1 over s e to
the minus st, times v, times cosine at, minus the integral
from 0 to infinity. This problem is making
me hungry. It's taking so much glucose
from my bloodstream. I'm focusing so much not to
make careless mistakes. Anyway, integral from
0 to infinity. And now, we have uv prime, so
u is minus 1 over s e to the minus st. That's u. And then v prime
times minus a. So let's make that minus cancel
out with this one. So that becomes a plus. a sine of at, dt. I'm starting to see the light
at the end of the tunnel. So then, let's simplify
this thing. And, of course, we're going to
have to evaluate this whole thing, right? Actually, we're going to have
to evaluate everything. Let's just focus on the
indefinite integral for now. We're going to have to take
this whole thing and evaluate-- let's just say that
y is the antiderivative and then evaluate it from
infinity to 0. From 0 to infinity. So y is equal to minus
e to the minus st over s, sine of at. Now let's distribute this. Minus a over s squared, e to
the minus st, cosine of at. Right? OK, now I want to make sure I
don't make a careless mistake. OK. Now, let's multiply this times
this and take all of the constants out. So we have an a and an s. a over s. There's a minus sign. We have a plus a to the s. So we'll have a minus a squared
over s squared, times the integral from 0-- well, I
said I'm just worrying about the indefinite integral right
now, and we'll evaluate the boundaries later. e to the minus st,
sine of at, dt. Now, this is the part, and we've
done this before, it's a little bit of a trick with
integration by parts. But this expression, notice,
is the same thing as our original y. Right? This is our original y. And we're assuming we're doing
the indefinite integral, and we'll evaluate the
boundaries later. Although we could have kept the
boundaries the whole time, but it would have made
it even hairier. So we can rewrite this
integral as y. That was our definition. And actually, I just realized
I'm running out of time, so I'll continue this hairy problem
in the next video. See you soon.  ",L{sin(at)}) - transform of sin(at) | Laplace transform | Differential Equations | Khan Academy,"Laplace Transform of sin(at) (part 1)

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-tutorial/v/laplace-transform-4?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-tutorial/v/laplace-transform-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,gMcs6RF_LrQ
Datastructures-Introductiontographs-gXgEDyodOJU.en.csv,"Hello everyone. So far in the series on
data structures, we have talked about some of the linear
data structures like array, linked list, stack and queue. In all these
structure, data is arranged in a linear or sequential manner, so we can call
them linear data structures and we've also talked about tree which
is a non-linear data structure. Tree is a hierarchical structure. Now as
we understand data structures are ways to store and organize data, and for different kinds of data we use
different kinds of data structures. In this lesson, we're going to introduce
you to another non linear data structure that has got its application in a wide
number of scenarios in computer science. It is used to model and represent a
variety of systems and this data structure is graph. When we study data structures, we often
first study them as mathematical or logical models. Here
also, we will first study graph as a
mathematical or logical model and we will go into implementation
details later. Okay so let's get started. A graph just
like a tree is a collection of objects or entities that
we call  nodes or vertices, connected to each
other through a set of edges. But in a tree connections are bound to be in a certain
way. In a tree that our rules dictating the connection among the nodes.
In a tree with N Nodes, we must have exactly N - 1 edges. One edge for each parent child relationship. As
we know an edge in a tree is for a parent child
relationship and all nodes in a tree except the root node would have apparent
would have exactly 1 parent and that's why if they are N nodes, it
must be exactly N - 1 edges. In a tree, all nodes must be reachable
from the root and there must be exactly one possible
path from root to a node. Now in a graph there are no
rules dictating the connection among the nodes.
A graph contains a set of nodes and a set of edges and edges can be connecting nodes in any
possible way. Tree is only a special kind of graph.
Now graph as a concept has been studied
extensively in mathematics. If you have taken a course on discrete
mathematics then you must be knowing about graphs
already. In computer science, we basically study and implement the same concept
of graph from mathematics. The study of graph is often referred to
as graph theory. In pure mathematical terms we can define graph something like this. A graph G is in order pair of a set
V of vertices and a set E of edges. Now I'm using
some mathematical jargon here. An ordered pair is just a pair of
mathematical objects in which the order of objects in the pair matters. This is how we write and
represent an ordered pair, objects separated by comma put
within parenthesis. Now because the order here matters. We
can say that V is the first object in the pair and E
is the second object. An ordered pair A, B is not equal to B, A unless A and B are equal. In our definition of graph here, first
object in the pair must always be a set of vertices and
the second object must be a set of edges that's why we are calling the pair 
an ordered pair. We also have concept of unordered pair.
An unordered pair is simply a set of two elements. Order is
not important here. We write an unordered pair using curly
brackets or braces. Because the order is not important here,
unordered pair A, B is equal to B, A. It doesn't matter
which object is first and which object is second. Okay coming back,
so a graph of is an ordered pair of a set of
vertices and a set of edges and G = (V,E) is a formal
mathematical notation that we use to define a graph. Now I
have a graph drawn here in the right. This graph is 8 vertices
and 10 edges. What I want to do is I want give some
names to these vertices because each node in a graph must
have some identification. It can be a name or it can be an index. I'm naming these vertices as V1, V2 V3, V4, V5 and so on, and this
naming is not indicative of any order. There is no 1st, 2nd and 3rd Node here. I could
give any name to any node. So my set of 
vertices here is this. We have 8 elements in the
set V1, V2, V3, V4, V5, V6, V7 and V8. So this is my set of
vertices for this graph. Now what's my set of edges. To answer
this we first need to know how to represent
an edge. An edge is uniquely identified by it's
2 endpoints, so we can just write the names
of the two endpoint of an edge as a pair and it can be
a representation for the edge. But edges can be of two types. We can
have a directed edge in which connection is
one-way or we can have an undirected edge in
which connection is two way. In this example graph that I'm showing
here, edges are undirected but if you remember the tree that I had
shown earlier then we had directed edges in that tree.
With this directed edge that I'm showing you here, we are saying that there is link or path from vertex U to V but we cannot
assume a path from V to U. This connection is one way. For
a directed edge, one of the endpoints would be the
origin and other end point would be the destination and we draw the edge with an arrow head pointing towards the
destination. For our edge here, origin is U and
destination is V. A directed edge can be to represented as
an ordered pair, first element in the pair can be the
origin and second element can be the destination. So with this directed edge represented
as ordered pair (U,V), we have a path from U to V. If we want a path from V to U, when need
to draw another directed edge here with V as 
origin and U as destination and this edge can be
the represented as ordered pair (V,U), the upper one here is (U,V) and the
below one is (V,U) and they are not same. Now if the edge is undirected, the
connection is 2 way and undirected edge can be
to represented as an unordered pair here because the edge is
bi directional origin and destination are not fixed. We
only need to know what two end points have been connected by the edge. So now that we know how to present edges,
we can write the set of edges for this example graph here. We have an undirected edge between V1
and V2 then we have 1 between V1 and V3 and
then be have V1 V4. This is really simple and just go ahead
and write all of them. So this is my set of edges. Typically in
a graph, all edges would either be directed or
undirected. It's possible for a graph to have both
directed and undirected edges but we are not going to study such
graphs, we are only going to study graphs in which all edges would either be
directed or undirected. A graph with all directed
edges is called a directed graph or digraph and a graph with all undirected ages is
called an undirected graph. There is no special name for an
undirected graph. Usually, if the graph directed, we
explicitly say that it's directed graph or digraph. So these are
two types of graphs. Directed graph or digraph in which edges are uni-directional or ordered pairs and undirected graph in which edges are
bi-directional or unordered pairs. Now many real-world
systems and problems can be modeled using a graph.
Graphs can be used to represent any collection of objects having some
kind of pairwise relationship. Let's have a look
at some of the interesting examples. A social network like Facebook can be
represented as an undirected graph. A user would be a node in
the graph and if 2 user are friends, there
would be an edge connecting them. A real social network would have millions
and billions of nodes. I can show only few in my diagram here
because I'm short of space. Now social network is an undirected
graphs because friendship is a mutual relationship. If I'm your
friend, you are my friend too. So connections have to be 2 way. Now once
a system is modeled as a graph a lot of problems
can easily be solved by applying standard algorithms
in graph theory. Like here in this social network, let's
say we want to do something like suggest friends to a user. Let's say we
want to suggest some connections to Rama. One possible approach to do so can be
suggesting friends of friends who are not connected already. Rama has
3 friends, Ella, Bob and Katie and friends of 3 that are not connected to Rama
already can be suggested. There is no friend of
Ella which is not connected to Rama already. Bob however, has 3 friends Tom, Sam, and Lee that are not friends with Rama so
they can be suggested and katie has two friends Lee and Swati that are not connected to Rama.We have
counted Lee already, so in all we can suggest these for users
to Rama. Now even though we described this
problem in context of a social network. This is a standard graph problem. The
problem here in pure graph terms is finding all nodes
having lenght of shortest path from a given
node equal to 2. Standard algorithms can be applied to
solve this problem. We'll talk about concepts like path in
a graph in some time. For now just know that the problem that
we just described in context of a social network is a standard graph
problem. Okay so a social network like Facebook
is an undirected graph Now let's have a look at another example.
Interlinked web pages on the internet or the World
Wide Web can be represented as a directed graph.
A web page that would have a unique address or URL
would be a node in the graph and we can have a directed edge if a
page contains link to another page. Now once again, there are billions of pages
on the web but I can show only few here. The edges
in this graph are directed because that relationship is not mutual this
time. If page A has a link to page B then
it's not necessary that page B will also have a link to page A. Let's say one of the pages on
mycodeschool.com has a tutorial on graph and on this page I have put a link to Wikipedia article on
graph. Let's assume that in this example
graph that I am showing you here. Page P is my mycodeschool tutorial
on graph with this address or URL 
mycodeschool.com/videos/graph and lets say, page Q is the
Wikipedia article on graph with this URL Wikipedia/org/wiki/graph.  Now on my page that is page P, I have put a link to the Wikipedia page on
graph. If you are on page P, you can click on
this link and go to page Q but Wikipedia has not reciprocated
to my favor by putting a link back to my page. So if you are on
page Q you cannot click on the link can
come to page P. Connection here is one way and that's why we have
drawn a directed egde here. Okay now once again if we are able to
present web as a directed graph, we can apply
standard graph theory algorithms to solve problems and to perform tasks. One of the tasks that search engines
like Google perform very regularly is web crawling. Search engines use a
program called web crawler that systematically browsers the 
World Wide Web to collect and store data about web
pages. Search engines can then use this data to provide quick and accurate results
against search queries. Now even though in this context, we are
using a nice and heavy term like web crawling. Web crawling is basically graph
traversal or in simpler words, act of visiting all
nodes in a graph and no prizes for guessing that there
are standard algorithms for graph traversal. We will be studying graph traversal
algorithms in a later lessons. Okay now the next thing that I want to
talk about is concept of a weighted graph. Sometimes in a graph, all
connections cannot be treated as equal. Some connections can be preferable to
others like for example we can represent intercity road network that is the
network of highways and free ways between cities as an
undirected graph. I'm assuming that all highways would be
bi-directional. Intra-city road network that is road
network within a city would definitely have one-way roads and so Intra-city network must be
represented as a directed graph but intercity road network in my opinion
can be represented as an undirected graph. Now clearly we cannot
treat all connections as equal here. Roads would be of different lengths and
to perform a lot of tasks to solve a lot of problems, we need to
take length of roads into account. In such cases, we associate some weight or cost with every edge. We label the edges with
their weights. In this case weight can be lenght of the roads,
so what to do here is I'll just label this edges with some values for
the lenghts. Let's say these values are in kilometers and now edges in this graph are weighted and
this graph can be called weighted graph. Let's say in this graph, we want to
pick the best route from city A to city D. Have a look at these four possible
routes, I am showing them in different colors. Now if I would treat all edges as equal then I would say that the green route
through B and C and a red route through E and F are equally
good. Both these paths have to three edges and
this yellow route through E is the best because we have only two
edges in this path. But with different weights assigned to
the connections, I need to add up weights of edges in a path to calculate
total cost. When I'm taking weight into account shortest
route is through B and C. Connections have
different weights and this is really important here in this
graph. Actually, we can look at all the graphs as weighted graphs An unweighted graph can basically be seen
as a weighted graph in which weight of all
the edges is same and typically we assume to weight
as one. Okay so we have represented inter-city cities
road network as weighted undirected graph. Social network
was an unweighted undirected graph and World Wide Web was an unweighted
directed graph and this one is a weighted undirected graph. Now this was inter-city road network. I
think intra-city road network that is road network within a city can be
modeled as a weighted directed graph because in a
city that would be some one ways. Intersections in interest city's road
network would be Nodes and road segments would be our edges, and by the way we can also draw an
undirected graph as directed. It's just that for each undirected edge
we will have 2 directed edges. We may not be able to redraw a directed
graph has undirected but we can always redraw an undirected
graph as directed. Okay I'll stop here now. This much is
good for an introductory lesson. In next lesson, we will talk about some more
properties of graph. This is it for this lesson. Thanks for
watching !",Data structures: Introduction to graphs,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described Graph data structure as a mathematical model.  We have briefly described the concept of Graph and some of its applications. 

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,gXgEDyodOJU
Duplicaterowdeterminant_Matrixtransformations_LinearAlgebra_KhanAcademy-gYv8sttBIqs.en.csv,"Say I have some matrix a --
let's say a is n by n, so it looks something like this. You've seen this before,
a 1 1, a 1 2, all the way to a 1 n. When you go down the rows you
get a 2 1, that goes all the way to a 2 n. And let's say that there's some
row here, let's say row i, it looks like a i 1,
all the way to a i n. And then you have some other row
here, a j, it's a j 1 all the way to a j n. And then you keep going all the
way down to a n 1, a n 2, all the way to a n n. This is just an n by n matrix,
and you can see that I took a little trouble to write out my
row a, my i'th row here and my j'th row here. And just to kind of keep things
a little simple, let me just define -- just for
notational purposes, you can view these as row vectors if
you like, but I haven't formally defined row
vectors so I won't necessarily go there. But let's just define the term r
i, we'll call that row i, to be equal to a i 1, a i 2,
all the way to a i n. You can write it as
a vector if you like, like a row vector. We haven't really defined
operations on row vectors that well yet, but I think
you get the idea. We can then replace this guy
with r 1, this guy with r 2, all the way down. Let me do that, and I'll do
that in the next couple of videos because it'll simplify
things, and I think make things a little bit easier
to understand. So I can rewrite this matrix,
this n by n matrix a, I can re-write it as just r i. Actually, this just looks
like a vector, it's just a row vector. Let me write it as a
vector like that. And I'm being a little bit
hand-wavy here because all of our vectors have been defined as
column vectors, but I think you get the idea. So let's call that r 1, and then
we have r 2 is the next row, all the way down. You keep going down, you get
to r i -- that's this row right there -- r i. You keep going down, you get r
j, and then you keep going down until you get
to the n'th row. And each of these guys are going
to have n terms because you have n columns. So that's another
way of writing this same n by n matrix. Now what I'm going to do here
is, I'm going to create a new matrix-- let's call that
swapping the swap matrix of i and j. So I'm going to swap i and
j, those two rows. So what's the matrix
going to look like? Everything else is going
to be equal. You have row 1-- assuming that
1 wasn't one of the i or j's, it could have been. Row 2, all the way down to-- now
instead of a row i there you have a row j there, and you
go down and instead of a row j you have a row i there. And you go down and
then you get r n. So what did we do? We just swapped these
two guys. That's what the swap
matrix is. Now I think it was in the last
video or a couple of videos ago, we learned that if you just
swap two rows of any n by n matrix, the determinant of the
resulting matrix will be the negative of the original
determinant. So we get the determinant of
s, the swap of the i'th and the j rows is going to be equal
to the minus of the determinant of a. Now, let me ask you an
interesting question. What happens if those two rows
were actually the same? What if r i was equal to r j? If we go back to all of these
guys, if that row is equal to this row? That means that this guy is
equal to that guy, that the second column-- the second
column for that row all the way to the n'th guy is equal
to the n'th guy. That's what I mean when I say
what happens if those two rows are equal to each other. Well, if those two rows are
equal to each other, than this matrix is no different than this
matrix here, even though we swapped them. If you swap two identical
things, you're just going to be left with the same
thing again. So if-- let me write this down--
if row i is equal to row j, then this guy,
then s, the swapped matrix, is equal to a. They'll be identical. You're swapping two rows that
are the same thing. So that implies a determinant of
the swapped matrix is equal to the determinant of a. But we just said, if the swap
matrix, when you swap two rows, it equals a negative
of the determinant of a. So this tells us it also has to
equal the negative of the determinant of a. So what does that tell us? That tells us if a has two rows
that are equal to each other, if we swap them, we
should get the negative of the determinant, but if two rows are
equal we're going to get the same matrix again. So if a has two rows that are
equal-- so if row i is equal to row j-- then the determinant
of a has to be equal to the negative of
the determinant of a. We know that because the
determinant of a, or a is the same thing as the swapped
version of a, and the swapped version of a has to have the
negative determinant of a. So these two things
have to be equal. Now what number is equal to a
negative version of itself? If I just told you x is equal
to negative x, what number does x have to be equal to? There's only one value that it
could possibly be equal to. x would have to be equal to 0. So the takeaway here is, let's
say if you have duplicate rows-- you can extend this if
you have three or four rows that are the same-- leads
you to the fact that the determinant of your
matrix is 0. And that really shouldn't
be a surprise. Because if you have duplicate
rows, remember what we learned a long time ago. We learned that a matrix is an
invertible if and only if the reduced row echelon form
is the identity matrix. We learned that. But if you have two duplicate
rows-- let's say these two guys are equal to each other--
you could perform a row operation where you replace this
guy with this guy minus that guy, and you'll just
get a row of 0's. And if you get a row of 0's,
you're never going to be able get the identity matrix. So we know that duplicate rows
could never get reduced row echelon form to be
the identity. Or, duplicate rows are
not invertible. And we also learned that
something is not invertible if and only if its determinant
is equal to 0. So we now got to the same result
two different ways. One, we just used some
of what we learned. When you swap rows, it should
become the negative, but if you swap the same row, you
shouldn't change the matrix. So the determinant of
the matrix has to be the same as itself. So if you have duplicate rows,
the determinant is 0. Which isn't something that we
had to use using this little swapping technique, we could
have gone back to our requirements for invertability--
I think was five or six videos ago. But I just wanted to
point that out. If you see duplicate rows. and actually if you see
duplicate columns-- I'll leave that for you to think about--
if you see duplicate rows or duplicate columns, or even if
you just see that some rows are linear combinations of
other rows-- and I'm not showing that to you right here--
then you know that your determinant is going
to be equal to 0.",Duplicate row determinant | Matrix transformations | Linear Algebra | Khan Academy,"Determinant of a matrix with duplicate rows

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-determinant-after-row-operations?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-determinant-when-row-is-added?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,gYv8sttBIqs
DeleteanodefromBinarySearchTree-gcULXE7ViZw.en.csv,"In this lesson, we're going to write code
to delete a node from binary search tree. In most data structures deletion is
tricky. In case of binary search trees too, it's
not so straightforward. So let's first see what all
complications we may have while trying to delete a
node from binary search tree. I have drawn a binary search tree of
integers here. As we know in a binary search tree for
each node value of all nodes in its left subtree
is lesser and value of all nodes right
subtree is greater. For example, in this tree if I'll pick this
node with value 5 then we have 3 and 1 in its left
subtree which are lesser and we have 7 and 9 in its right
subtree which are greater, and you can pick any
other node in the tree and this property will be true else the tree is not a BST.
Now when we need to delete a node, this property must be conserved.
Let's try to delete some nodes from this example tree and see if we can rearrange these things and conserve the
property of binary search tree or not. What if I want to delete this node the value 19. To delete a node from tree we need to do two things, we need to
remove to reference of the node from its parent so the node is detached
from the tree. Here we will cut this link we will
set right child of this node with value 17 as null
and the second thing that we need to do is reclaim the memory allocated to the
node being deleted. that is wipe off the node object from memory. This particular node with value 19 that
you're trying to delete here  is leaf node. It has no children and
even if we take this guy out by simply cutting this link that is removing its reference from its parent
and then wiping it off from memory there is no
problem, property of binary search tree that for
each node value of nodes in left should be lesser and value of nodes in
right should be greater is conserved. So deleting a leaf node, a
node with no children is really easy. In this tree,
these four nodes with values 1, 9, 13 and 19 are leaf nodes. To delete any of these, we just need to
cut the link and wipe off the node that is clear it
from memory. But what if we want to delete a non leaf
node, what if in this example we want to
delete this node with value 15, I can't just cut this link because if I'll cut this link, we will detach not
just the node with value 15 but this
complete subtree. We have two more nodes in the subtree
we could have had a lot more. We need to make sure that all
other nodes except the node with value 15 that's been
deleted remain in the tree. So what do we do now. This particular node that we're trying
to delete here has two children on two subtrees. I'll come back to case
of node with two children later because this is not so easy to crack.
What we want to discuss first is the case when node being deleted
would have only one child. If the not being deleted
would have only one child like in this example this node with value 7 this guy has only one child. This guy has
a right child but does not have left child. For such a node what we can do is we can
link its parent to this only child, so the child and everything below the child we could
have some more nodes below 9 as well will remain attached to the tree and
only the node being deleted will be detached. Now we're not losing
any other node than the node with value 7. This is my
tree after the deletion. Is this still a binary search tree. Yes, it
is. Only the right subtree of Node with value
five has changed. Earlier we had 7 and 9 in right subtree of 5 and now we have 9 which is fine. What
if we were having some more nodes below 9. Here in this tree, i can have a node in left of
9 and the value in this node has to be
lesser so than 12, greater than 5, greater than 7 and lesser than 9. We are left with only 1 choice. We can only
have 8 here, in right we can have something lesser
than 12 and greater than 5, 7 and 9 all in our between 9 and 12. Okay
so if the original tree was this much after deletion this is how my tree will look like. Okay
so are we good now. Is the tree in right a BST. Well yes, it is. When we are setting this node with
value 9 as right child of the node with value 5. We are basically
setting this particular subtree as right subtree
of the node with value 5. Now this subtree is already in right of 5 so value of all nodes in this subtree is
already greater than 5 and the subtree itself
of course is a binary search tree. Any subtree in a binary search tree
will also be a binary search tree, so even after deletion, even after the
re-arrangement property of the tree that for each node,
nodes in left should be lesser and nodes in right should
be greater in value is conserved. So this is what we need to
do to delete a node with just one child or a node
with just one subtree connect its parent to 
its only child and then wipe it off from memory. There are
only two nodes in this tree that have only one child, let's try to
delete this other one with value 3. All we need to do
here is set 1 as left child of 5. Once again if there were some more nodes
below 1, then also there was no issue. Okay so now
we're good for two cases, we good for leaf nodes and we are good with nodes with just one
child and now we should think about the
third case, what if a node has two children, what should be
do in this case. Let's come back to this node value 15
that we were trying to delete earlier.With two children we can't do
something like connect parent to one of two children.
While trying to delete 15 if we will connect 12 to 13. If we will make 13 to right child of 12 then we will include 13 and anything
below 13 that is we will include the left subtree
of 15 but we will lose the right subtree a
15 that is 17 and anything below 17. Similarly, if we will make 17 the
right child then we will lose to left subtree of 15
that is 13 and anything below 13. Actually this case is
tricky and before I talk about a possible
solution, I want to insert some more nodes here. I want to have some more node in subtrees
of 13 and 17 the reason I'm inserting some more nodes
here is because I want to discuss a generic case and
that's why I want these two subtrees to have more than one
node. Okay coming back when I'm trying to
delete this node my intent basically is to remove this 
value 15 from the tree. My delete function will have signature something like this. It will take pointer
reference to the root node and value to be deleted as argument. So
here, I am deleting this particular node because
I want to remove 15 from the tree. what I'm going to do now is something
with which I can reduce case 3 to either case 1 or case 2. I'll wipe off
15 from this node and I'll fill in some other value in
this node. Ofcourse I can't fill in  any random value. What I'll do is, I'll look for the minimum
in right subtree of this node and I'll fill in that value here. Minimum
in right subtree of this node is 17. So I have filled 17 here. We now have
two nodes with value 17 but notice that this node has only one child. We can delete this
node because we know how to delete a node with
only one child and once this node is deleted my
tree will be good. The final arrangement will be a valid
arrangement for my BST, but why minimum in right subtree, why not
value in any other leaf node or any other node with one child. Well we also need to conserve this
property that for each node, nodes left should have lesser
value nodes in right should have greater value. For this node if I'm bringing in the
minimum from its right subtree then because I'm bringing in something
from its right subtree it will be greater and the previous
value 17 is greater than 15. So all the elements in left ofcourse
will be lesser and because it's the minimum in right
subtree, all the elements in right of this guy
would either be greater or equal.We will have a duplicate that
will be equal. Once the duplicate is removed everything
else will be fine. In a tree or subtree if a node has
minimum value it won't have a left child because if
they're is a left child there is something lesser and this is
another property that we're exploiting. Give this some thought. In a tree or
subtree node with minimum value will not happen left child, there may or
may not be a right child. If we would have a right child, like
here we have a right child. So here we are reducing case 3 to case 2. If there was no child we would have
reduced case 3 to case 1. Okay so let's get rid of the duplicate.
I'll build a link like this and after deletion this is what my tree
will look like. So this is what we need to do in case
3, we need to find a minimum in right subtree of targeted node then copy or fill in
this value and finally we need to delete the
duplicate or the node with minimum value from right subtree. There
was another possible approach here and I must talk about it. Instead of
going for minimum in right, we could also go far maximum any left
subtree. Maximum left subtree would ofcourse be greater than our equal to all the values
in left, maximum left subtree of node with value
15 is 14. I'm copying 14 here. Now all the nodes in
left a lesser than equal to 14 and because we're picking something from
left subtree it will still be lesser than the value being deleted. 14 is less than
15. So all the nodes in this right subtree will still be greater and if we're picking maximum
in a tree or subtree then that node will not have right child
because if we have something in right we have something greater, so the value can't be maximum. The node may
have left child. In this case a node with value 14
doesn't have a left child so we are basically reducing case 3 to case
1. I'll simply get rid of this node. So we are looking good even after deletion.
In case 3, we can apply any of these
methods and this is all in logic part. Let's now  write called for this logic.
I'll write c++ and we will use recursion if you're not
very comfortable applying recursion on trees then make sure you watch earlier lesson
in this series. You can find link to them and description of this video. In my  Code here i have defined node as a structure with three fields. We have 1
field to store data and we have 2 fields that are pointers to node to  store addresses of left and right
children and I want to write a function named delete that
should take pointer to root node and the data to be
deleted as argument, and this function should return pointer to
root node because that root may change after
deletion. What we're passing to delete function is only local copy of root's address. If the
address is changing we need to return it back. To delete a
given value or data to the first need to find it in the tree and once we find the
node containing that data, we can try to delete it.
Remember only identity of tree that we pass to functions is address
of the root node and to perform any action on the tree we
need to start at root. So let's first search for the node with
this data. First I'll cover a corner case. If the root is null that is if the tree
is empty, we can simply return. I can say return
root or return null here, they will mean the same because root is null, else if the data that we are looking for is less than
the data in root then its in the left subtree. The problem
can be reduced to deleting the data are from left subtree. We need to go and find the data in left
subtree, so they can make a recursive call to
delete function passing address of left child and the data to be deleted. Now the root of the left subtree that is
the left child of this current node may change after deletion but the good thing is, the delete
function will return address of the modified root of the left subtree. So we can
set the return as left child of current node. Now if data that we're trying to delete is greater than the data in root, we need to go and delete the data from
right subtree, and if the data is neither greater nor lesser that is if it's equal then
we can try deleting the node containing that data. Now let's handle the 3
cases 1 by 1. If there is no child we can simply delete
that node what I'll do here is that first wipe off to
node from memory and this is how I'll do it. What we have in
root right now is address of to node to be deleted. I'm using to
delete operator here that's used to deallocate memory of
an object in heap. In C you would use free function. Now root is a dangling pointer because
object in heap is deleted but root still has its address. So we can set root as null, and now we can
return root. Reference of this node in its parent
will not be fixed here. Once this recursive call finishes then somewhere in these 2 statement in
any of these two statements in any of these two else ifs the link
will be corrected. I hope this is making sense. Okay now
let's handle other cases. If only the left child is null then
what I want to do is I first want to store the address of
current node that I'm trying to delete in a temporary pointer to node and now I want to move to root, this pointer
named root to the right child, so the right child
becomes the root of this subtree and now we can
delete the node that has been pointed to
by temp. We will use to delete operator. In C we would
be using free function. and now they can return root.Similarly
if the right child is null, I'll first store address of current
root in a temporary pointer to node then I'll make
the left child new root of the subtree so we will move to the left child and then
I'll delete the previous root whose address I have in temp and
finally I'll return root. Actually we need to return root in
all cases, so i'll remove this return statement from our all these if and else if and write one return root after
everything. Let's talk about the 3rd now. In case
of two children what we need to do is, we need to
search for minimum element in right subtree of the
node that we're trying to delete. Let's say this function findmin will
you give me address of the node with minimum value in tree or subtree, so i'm calling this function findmin and
I'm collecting the return in a pointer to node named
temp. Now I should set the data in current
node that i am trying to delete as this minimum value and now the
problem is getting reduced to deleting this minimum value from the
right subtree of current node. With this much code I think I'm done with
delete function. This looks good to me. Let's quickly run
this code on an example tree and see if this works or not. I have drawn a binary search tree here.
Let's say these values outside these nodes are addresses of the
nodes. Now I want to delete number 15 from
this tree, so I'll make a call to delete function
passing address of the root which is
200 and 15 the value to be deleted. In delete
function for this particular call control will come to this line, a
recursive call will be made. Execution of this call delete 200 , 15
will pause and it will resume only after this
function below delete 350 , 15 returns. Now for this call below we'll go inside
the third else in case 3, here we will find with
minimum value in right  which is 17 which is 400, the
value is 17 address is 400. First we will set the
data in node 350 as 17 and we are making a recursive call
to delete 17 from right subtree of 350. We have only one
node in right subtree of 350. Here we have case 1. In this call will
simply delete the node at 400 and return null. Remember root will be
returned in all calls in the end. Now delete 350 , 15 will resume and in this resumed call, we will set
address of right child of node at 350 as null. As you can see the link in parent is
being corrected, when the recursion is unfolding and the
function call corresponding to the parent is
resuming and now this guy can return, and now in this call, we will resume
at this line. So right child of node at 200 will
set as 350. It's already 350 but it will be written
again and now this call can also finish. So I
hope you got some sense of how this recursion is working.
You can find link to all the source code and code to test the delete function
in description of this video. This is it for this lesson. 
Thanks for watching.",Delete a node from Binary Search Tree,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have discussed deletion of a node from binary search tree data structure. We have discussed the core logic and written implementation of it in C++. 

See source code here:
https://gist.github.com/mycodeschool/9465a188248b624afdbf


For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,gcULXE7ViZw
RotationinR3aroundthex-axis_Matrixtransformations_LinearAlgebra_KhanAcademy-gkyuLPzfDV0.en.csv,"In the last video we defined a
transformation that rotated any vector in R2 and just gave
us another rotated version of that vector in R2. In this video, I'm essentially
going to extend this, so I'm going to do it in R3. So I'm going to define a
rotation transformation. I'll still call it theta. There's going to be a mapping
this time from R3 to R3. As you can imagine, the idea
of a rotation in an angle becomes a little bit more
complicated when we're dealing in three dimensions. So in this case we're going to
rotate around the x-axis, let me call it-- so this is going
to rotate around the x-axis. And what we do in this video,
you can then just generalize that to other axes. And if you want to rotate around
the x-axis, and then the y-axis, and then the z-axis
by different angles, you can just apply the transformations one after another. And we're going to cover that
in a lot more detail in a future video. But this should kind of give you
the tools to show you that this idea that we learned in the
previous video is actually generalizeable to multiple
dimensions, and especially three dimensions. So let me just be clear, what
we're going to be doing here. Let me draw some axes. That's my x-axis. That is my y-axis. And this is my z-axis. Of course, this is R3. But any vector here in R3
I will be rotating it counterclockwise around
the x-axis. We'll be rotating like that. So if I had a vector-- I'm
just drawing it in the zy plane because it's a little bit
easier to visualize-- but if I have a vector sitting here
in the zy plane, it will still stay in the zy plane. But it'll be rotated
counterclockwise by an angle of theta, just like that. Now, a little harder to
visualize is a vector that doesn't just sit in
the zy plane. If we have some vector that
has some x-component that comes out like that, then some
y-component and some z-component, it looks
like that. Then when you rotate it, its
z and its y-components will change, but its x-component
will stay the same. So then it might look
something like this. Let me see if I can
give it justice. So then the vector when I rotate
it around might look something like that. Anyway, I don't know if I'm
giving it proper justice but this was rotated around
the x-axis. I think you understand
what that means. But just based on the last
video, we want to build a transformation. Let me call this rotation
3 theta. Or let me call it 3 rotation
theta now that we're dealing in R3. And what we want to do is we
want to find some matrix, so I can write my 3 rotation sub
theta transformation of x as being some matrix A times
the vector x. Since this is a transformation
from R3 to R3 this is of course going to be
a 3 by 3 matrix. Now in the last video we learned
that to figure this out, you just have to apply the
transformation essentially to the identity matrix. So what we do is we start off
with the identity matrix in R3, which is just going
to be a 3 by 3. It's going to have 1, 1,
1, 0, 0, 0, 0, 0, 0. Each of these columns are the
basis vectors for R3. That's e1, e2, e3-- I'm writing
it probably too small for you to see-- but each
of these are the basis vectors for R3. And what we need to do is just
apply the transformation to each of these basis
vectors in R3. So our matrix A will
look like this. Our matrix A is going to
be a 3 by 3 matrix. Where the first column
is going to be our transformation, 3 rotation sub
theta, applied to that column vector right there, 1, 0, 0. And then I'm going to apply it
to this middle column vector right here. You get the idea, I don't
want to write that whole thing again. I'm going to apply 3 rotation
sub theta to 0, 1, 0. And then I'm going to apply
it-- I'll do it here-- 3 rotation sub theta. I'm going to apply it
to this last column vector, so 0, 0, 1. We've seen this multiple
times. So let's apply it. Let's rotate each of these
basis vectors for R3. Let's rotate them around
the x-axis. So the first guy, if I were
to draw an R3, what would he look like? He only has directionality
in the x direction right? If we call this the x-dimension,
if the first entry corresponds to our
x-dimension, the second entry corresponds to our
y-dimension. And the third entry
corresponds to our z-dimension. This vector would just be a unit
vector that just comes out like that, right? So if I'm going to rotate this
vector around the x-axis, what's going to happen to it? Well, nothing. It is the x-axis. So when you rotate it, it's not
changing its direction or its magnitude or anything. So this vector right here
is just going to be the vector 1, 0, 0. Nothing happens when
you rotate it. Now these are a little
bit more interesting. To do these, let me just
draw my zy-axis. Let me just draw my Z. So that's my z-axis and this
is my y-axis right here. Now this basis vector just goes
in the y direction by 1. So this basis vector just
looks like that. And it has a length of 1. And then when you rotate it
around the x-axis, when I draw it like this, you could imagine
the x-axis is just popping out of your
computer screens. So I could draw it like this is
like the tip of the arrow just popping out. Instead of drawing it at an
angle like this, I'm drawing it straight out of the
computer screen. So if you were to rotate this
vector right here, this blue vector right here, by
an angle of theta, it'll look like this. And we've done this in
the previous video. What are its new coordinates? First of all, will
its x-coordinate have changed it all? It's x-coordinate was 0 before,
because it doesn't break out into the
x-dimension. It just stays along
the zy plane. It was 0 before. When you rotate it, it's
still on a zy plane. So its x direction, or
its x-component, won't change at all. So the x direction is
still going to be 0. And then what's its
new y direction? Well, here we do exactly what
we did in the last video. We figure out this is going to
be its new-- I guess I don't want to draw a vector there
necessarily-- but this length right here is going to be
its new y-component. And this length right here
is going to be its new z-component. So what's its new y-component? We did this in the last video
so I won't go into as much detail, but what is
cosine of theta? The length of this vector
is 1, right? These are the standard
basis vectors. And one of the things that makes
them a nice standard basis vector is that their
lengths are 1. So we know that the cosine of
this angle is equal to the adjacent side over
the hypotenuse. The adjacent side is
this right here. And what is the hypotenuse? It's equal to 1. So this adjacent side, which we
said is going to be our new second component, our second
entry, is going to be equal to cosine of theta, right? That's A. You can just ignore the 1's. This going to be equal
to cosine of theta. And what's going to be
its new z-component? Well, sine of theta is equal
to the opposite side, this side over 1. So it just equals its
opposite side. And the length of that
opposite side is this vector's, once it's rotated,
is its new z-component. So you've got a sine
theta right there. Now we just have to do
everything in the z direction. So this z basis vector right
there, what does it look like on this graph? Let me just actually redraw it
just to make things a little bit cleaner. So that's my z-axis and
this is my y-axis. And my z-basis vector e3,
it starts off looking something like that. It just goes only in
the z direction. So first of all, let's
just rotate it by an angle of theta. So I'm going to rotate
it like that. That's an angle of theta. Its former x entry was 0. It did not break out in the
x direction at all. And of course we're still just
in the zy plane so it won't be moving out in the x direction. So it's still going
to be a 0 up here. Now what about its
new y-component? Its new y-coordinate, I guess we
can call it, is going to be this length, or it's going to be
this coordinate right here. And how can we figure
that out? Well, that length is the same
thing as that length. And if we call this the opposite
side of the angle, we know that the sine of theta is
equal to this opposite side over the length of this vector,
which is just 1. So it's just equal to
the opposite side. So the opposite side is equal
to sine of theta. But our new coordinate is to
the left of the z-axis, so this is going to be a
negative version. We did this in the last video. So it's just going to be a
negative sine of theta. This point right here,
that coordinate. So it's minus sine of theta. And then finally, what's its new
z-coordinate going to be? That's going to be this
length right here. And we know that this length,
if we call that adjacent, we know that the cosine of
our theta is equal to this divided by 1. So it's equal to that adjacent
side, so just put a cosine of theta right there. And we get our transformation
matrix. We're done. Our transformation
matrix A is this. So we can now say our new
transformation that this video is about. I call it a 3 because it's
a rotation in R3. Maybe I should call it 3 sub X
because it's a rotation around the x-axis, but I think
you get the idea. It is equal to this matrix right
up here-- maybe I could rewrite it. Let me do it this way. Let me delete all of this so
I don't have to rewrite. So my transformation that this
videos is about, 3 rotation theta of x, that transformation
is equal to this matrix times whatever
vector x I have in R3. And you might say, hey, Sal,
that looks exactly like what you did in the second. If you remember the last video
when we defined our rotation in R2, we had a transformation
matrix that looked very similar to this. And that makes sense because
we're essentially just rotating things counterclockwise in the zy plane. Now you might say, hey, Sal,
why is this even useful? You extended it to three
dimensions or to R3, I saw what you did in R2. Why is this useful? It's kind of a limited case
where you're just rotating around the x-axis. And I did it for two reasons. One to show you that you
can generalize to R3. But the other thing is, if you
think about it, a lot of the rotations that you might want
to do in R3 can be described by a rotation around the x-axis
first-- which we did in this video-- then by rotation
around the y-axis and then maybe some rotation
around the z-axis. This is just a special case
where we're dealing with rotation around the x-axis. But you could do the exact
same process to define transformation matrices for
rotations around the y-axis or the z-axis, and then you can
apply them one after another. And we'll talk a lot about that
in the future when we start applying one transformation after the other. But anyway, hopefully you found
this slightly useful. It's a slight extension
of what we did in R2.",Rotation in R3 around the x-axis | Matrix transformations | Linear Algebra | Khan Academy,"Construction a rotation transformation in R3

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/unit-vectors?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/linear-transformation-examples-rotations-in-r2?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,gkyuLPzfDV0
"Binarytreetraversal-Preorder,Inorder,Postorder-gm8DUJJhmY4.en.csv","In our previous lesson, we talked about
level order traversal of binary tree which is basically breadth-first
traversal. Now in this lesson we are going to discuss these three depth-first algorithms
pre-order, in-order and postorder. I have drawn a
binary tree here datatype filled in the nodes is
character now as we had discussed in earlier lessons, in depth-first traversal of binary tree
if we go in one direction then we visit all the nodes in that
direction or in other words we visit the complete sub-tree in that direction and then only we go in other direction.
In this example tree that i have drawn here if I'm at 'root' and I'm going left then I'll visit all the nodes in this
left subtree and then only I can go right and once
again when I'll go right I'll visit all the nodes in
this right subtree if you can see in this approach we are
reducing the problem in a self-similar or recursive mannner, we can say that in total visiting all the nodes in the tree is
visiting the 'root' node visiting the left subtree and visiting
the right subtree remember by visiting a node we mean
reading or processing the data in that node and by visiting a subtree we mean visiting all the
nodes in the subtree in-depth first strategy relative order of
visiting the left subtree, right subtree and the root can be different, for example we can
first visit the right subtree then the root and then the left subtree
or we can first visit the root and then left subtree and
then the right subtree conventionally left subtree is always
visited before right subtree we this constraint we will have three
permutations, we can first visit the root and then the left subtree and then the
right subtree and such a traversal will be called preorder traversal or we can first
visit the left subtree then the root and then the right
subtree and such a traversal will be called in-order traversal and we can also go left-right and then root and such a
traversal will be called post order traversal, left and right
subtree will be visited recursively in same manner as the original tree, so
in pre-order once again for the subtrees we will go
root, left and then right in in-order will keep going left, 
root and then right. The actual implementation of these algorithms really easy and intuitive let's first
see code for preorder traversal. I first
written the algorithm in  words here, in preorder traversal
we first need to visit the root and then left subtree and then the right subtree now I want to write a function that
should take pointer or reference to root node as argument
and print data in all the nodes in pre-order let's say visiting a node
for us is printing the data in that node in C or C++ my method signature
will look something like this: this function will take address of the 
root node as argument, argument type is pointer to Node. I'll
define node as a structure with three fields like this, data type
in this definition is character and there are two fields to store the addresses of left and right children
 
55
00:03:15,349 --&gt; 00:03:20,609
now in pre-order function I'll first
visit or print the data in root node and now i'll make a recursive call to
visit the left subtree I have made a recursive call here and to this call I'm passing address of the left child of my current
root because left child will be the root of left
subtree and I'll have another call like this to
visit the right subtree there is one more thing that we need to
add in this function and we will be done we cannot go into recursion infinitely,
we need to have a base condition where we should exit if
a tree or a subtree is empty or in other words for any call if root is
null we can return or exit. Now with this much
of code I'm done with my pre-order function. this will work fine in C or C++ actually in C make sure you right
struct space node instead of righting just 'node', rest of
the things are fine it will be good to visualize
this recursion so let's now quickly see how this pre-order function will work if
this example tree that I'm showing in right here is pass
to it I'll redraw this tree and show it like
this hear I'm depicting node as a structure
with three fields let's say the leftmost cell here is to
store the address of left child the cell in middle is to store the data
and the right most cell is to store the address of
right child Now let's assume some addresses for
these nodes, let's say the root node  is at address 200 and I'll assume some random addresses
for other notes as well and now I can fill in left and right
fields for each node and as we know the identity of tree
that we always keep with us is reference or address of the root node this is what we pass to all the
functions, in our implementation we often use a variable of type pointer to node named
root to store the address of root node,
we can name this variable anything, we can name this variable root
or we can name this variable rootPtr but this is just a pointer this particular block that I'm showing here
is for pointer to node and all these rectangles with three cells are nodes, this is how things are organized
in memory now for this tree, let say we are making a
call to this pre-order function I'll make a call to pre-order passing it
address 200 for this call root is not null so
we will not return at first line in this function we will go ahead and print the data in
this node at address 200. I'll write output for all
print statements here and now this function will make a recursive
call execution of this particular function
call will pause, it will resume only after this recursive
call pre-order(150) finishes this second call is to visit this
left subtree this call pre-order(150) is to visit this
left subtree, address of the left child of node at 200
is 150 once again for this call root is not
null, so we will go ahead and print the data, data
in node at 150 is D and now once again there will
be a recursive call with this call pre-order 400. We are saying that
we are going to visit this subtree once again we will print the data and
make another recursive call now we have made a call to visit this
particular subtree with just one node for this call we will print the data and
now for node at 250 address of left child is zero or null we will make
a call pre-order(0) but for this call
we will simply return because the address in this variable 
root will be null. We have hit the base condition for
our recursion call to pre-order(0) will finish and
preorder(250) will resume. Now in this particular function
call will make another call for right subtree for node at 250, even
the right child is null we will have another recursive call
passing address 0 but this once again simply will return and now call to pre-order(250) will
finish and call to pre-order(400) will resume. Now in call to pre-order(400) we will 
make another recursive call to pre-order(180) with this call 
pre-order(180), we are visiting this particular subtree
with just one node for this call first we will print the
data and then we will make a recursive call to pre-order(0) now pre-order(0) will simply return
and then we will have another call to  pre-order(0) for right child of 180, the recursion
will go on like this there's one thing that I want to talk
about you that's happening in this whole process even though we are not using any extra
memory explicitly in our function because of the recursion
we are growing the function call stack we have discussed memory management a
number of times in our earlier lessons you can check description of this video
for link to one of those lessons. As we know for each function call we
allocate some amount of memory in what we call stack section of
applications memory and this allocated memory is 
reclaimed when the function call finishes at this stage of execution of my recursion
for this example my call stack will look something like this:
I'm writing P as shortcut for pre-order because I'm
short of space here let's say we made a call to pre-order passing it address 200
from main function, main function will be at bottom of stack
at any time only the call at top of stack will be
executing and all other calls will be paused, call
stack keeps growing and shrinking during execution of a program because memory is allocated for a new
function call and its reclaimed when a function
call finishes so even though we are not using any
extra memory explicitly here we are using memory implicitly in the call
stack so space complexity which is measure of rate of growth of extra memory used with
input will depend upon the maximum amount of
extra memory used in the call stack. I'll talk about space
complexity once more later for now let's come back to this
recursion that I was executing called to this pre-order(0) will finish
and pre-order(180) will resume memory allocated for execution of
pre-order(0) will be reclaimed now for pre-order(180) both recursive
calls have finished so this guy will also finish even for 
pre-order(400) both calls have finished so pre-order(150) will resume. Now this guy will make a recursive call
to pre-order function passing it address 450 address of its right child, memory in
the stack will be allocated for execution of pre-order(450). Now in this call we will
first print the data and then we will make two recursive
calls to pre-order passing address 'zero' each time because for this
node at 450 both children are null, both calls will
simply return and then pre-order(450) will finish and now
pre-order(150) will also be done if you can see the call stack will grow
on till we reach  a leaf node, a node with no children and
then it will start shrinking again maximum growth of call stack to do
this recursion will depend upon maximum depth or height of the tree.
We can say that extra space used will be proportional to height of the tree or in other words
space complexity of this algorithm is O(h), where h is height
of the tree. Okay coming back to the recursion we are done 
with pre-order(150) so pre-order(200) will resume and now we will make a call to
visit this particular subtree, in this call
we will print J and then we will make a call passing
address 60 so now we are visiting this particular
subtree, here we will first print ""G"" and then this guy will make a call
to pre-order(0) which will simply return and then there
will be another call to pre-order(500) here we will print ""I"" 
 
187
00:11:19,160 --&gt; 00:11:22,610
and then we will two recursive calls
passing address 'zero' every time because node at 500 is a leaf
node with no children after this guy finishes
pre-order(60) will resume, now this guy will also finish and pre-order(350)
will resume and now we will have a call to pre-order(700)
which once again is a leaf node, so ""K"" which is data in this node will
be printed and then we will two calls passing
address 'zero' which will simply return. Now at this stage all these calls can
finish, we are done visiting all the nodes finally we will return back to the
caller of pre-order(200) which probably would be the main
function so this is preorder traversal for you I
hope you got how this recursion works, code for in-order and post-order will
be very similar in in-order traversal my base case will
be the same so I'll say if root is null then return or 
exit if root is not null I first need to
visit the left subtree I'm visiting the left subtree with this
recursive call then I need to visit the root so now
I'm writing this printf statement to print the data and now I can visit the right subtree so
this second recursive call, and this is my in-order function, 
in-order traversal of this example tree that I have drawn here will be this. This particular binary trees
actually also a binary search tree and in-order
traversal of a binary search tree would give us elements in the tree in
sorted order. Okay let's now write code for post-order. For this function once
again the base case will be the same so I'll say if root is null, return or
exit if root is not null. I first need to
visit the left subtree so I have made this recursive call, then the
right subtree so I'll have this another recursive call
and now I can visit the root node post-order traversal for this example tree will be this. So this is pre-order,
in-order and post-order for you you can check the description of this
video for link to all the source code. Let's now quickly talk about time and
space complexity of these algorithms. Time complexity of all these three
algorithms is O(n), if you could see then there was one function call
corresponding to each node where we were actually visiting that node,
where we were actually printing the data in that node so running time should actually be
proportional to number of nodes there's a better formal and mathematical
way of proving that time complexity of these algorithms
is O(n), you can check the description of this video for link to that space complexity as we had discussed
earlier will be O(h), where h is height of the tree, height of a
tree in worst-case will be (n-1) so in worst-case space complexity
of these algorithms can be O(n) and in best or average
case height of the tree will be O(log n) so we can say that
in best or average case space complexity will be O(log n).  I'll stop here now. In coming lessons we will
solve some problems on binary tree. Thanks for Watching.","Binary tree traversal: Preorder, Inorder, Postorder","See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described Preorder, Inorder and Postorder algorithms for binary tree traversal and analyzed their time and space complexities. 

See source code here:
https://gist.github.com/mycodeschool/10016271

For more on time complexity analysis:
http://www.geeksforgeeks.org/618/

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,gm8DUJJhmY4
Normalvectorfromplaneequation_Vectorsandspaces_LinearAlgebra_KhanAcademy-gw-4wltP5tY.en.csv,"What I want to do in
this video is make sure that we're good at
picking out what the normal vector
to a plane is, if we are given the
equation for a plane. So to understand that, let's
just start off with some plane here. Let's just start off--
so this is a plane, I'm drawing part
of it, obviously it keeps going in every direction. So let's say that is our plane. And let's say that this is a
normal vector to the plane. So that is our normal
vector to the plane. It's given by ai
plus bj plus ck. So that is our normal
vector to the plane. So it's perpendicular. It's perpendicular
to every other vector that's on the plane. And let's say we have
some point on the plane. We have some point. It's the point x sub p. I'll say p for plane. So it's a point on the plane. Xp yp zp. If we pick the origin. So let's say that
our axes are here. So let me draw our
coordinate axes. So let's say our coordinate
axes look like that. This is our z-axis. This is, let's say
that's a y-axis. And let's say that
this is our x-axis. Let's say this is our
x-axis coming out like this. This is our x-axis. You can specify this
is a position vector. There is a position vector. Let me draw it like this. Then it would be behind the
plane, right over there. You have a position vector. That position vector would
be xpi plus ypj plus zpk. It specifies this
coordinate, right here, that sits on the plane. Let me just call that something. Let me call that
position vector, I don't know-- let
me call that p1. So this is a point on the plane. So it's p-- it is p1
and it is equal to this. Now, we could take another
point on the plane. This is a particular
point of the plane. Let's say we just say, any
other point on the plane, xyz. But we're saying that
xyz sits on the plane. So let's say we take this
point right over here, xyz. That clearly, same logic, can
be specified by another position vector. We could have a position
vector that looks like this. And dotted line. It's going under the
plane right over here. And this position
vector, I don't know, let me just call it p, instead
of that particular, that P1. This would just be
xi plus yj plus zk. Now, the whole reason
why I did this set up is because, given some
particular point that I know is on the plane, and any other
xyz that is on the plane, I can find-- I can construct--
a vector that is definitely on the plane. And we've done this
before, when we tried to figure out what the
equations of a plane are. A vector that's
definitely on the plane is going to be the difference
of these two vectors. And I'll do that in blue. So if you take the yellow
vector, minus the green vector. We take this position,
you'll get the vector that if you view
it that way, that connects this point
in that point. Although you can
shift the vector. But you'll get a vector that
definitely lies along the plane So if you start
one of these points it will definitely
lie along the plane. So the vector will
look like this. And it would be lying
along our plane. So this vector lies
along our plan. And that vector is p minus p1. This is the vector p minus p1. It's this position vector minus
that position vector, gives you this one. Or another way to view
it is this green position vector plus this blue vector
that sits on the plane will clearly equal this
yellow vector, right? Heads to tails. It clearly equals it. And the whole reason
why did that is we can now take the dot product,
between this blue thing and this magenta thing. And we've done it before. And they have to be equal to 0,
because this lies on the plane. This is perpendicular
to everything that sits on the
plane and it equals 0. And so we will get the
equation for the plane. But before I do
that, let me make sure we know what the components
of this blue vector are. So p minus p1, that's
the blue vector. You're just going to subtract
each of the components. So it's going to be x minus xp. It's going to be x minus
xpi plus y minus ypj plus z minus zpk. And we just said,
this is in the plane. And this is, this
right, the normal vector is normal to the plane. You take their dot product--
it's going to be equal to zero. So n dot this vector is
going to be equal to 0. But it's also equal to this
a times this expression. I'll do it right over here. So these-- find some good color. So a times that, which is ax
minus axp plus b times that. So that is plus by minus byp. And then-- let me make
sure I have enough colors-- and then it's going to
be plus that times that. So that's plus cz minus czp. And all of this is equal to 0. Now what I'm going to do is,
I'm going to rewrite this. So we have all of these
terms I'm looking for, right? Color. We have all of the x terms-- ax. Remember, this is any
x that's on the plane, will satisfy this. So ax, by and cz. Let me leave that on
the right hand side. So we have ax plus by
plus cz is equal to-- and what I want
to do is I'm going to subtract each of
these from both sides. Another way is, I'm going
to move them all over. Let me do it-- let me
not do too many things. I'm going to move them
over to the left hand side. So I'm going to add
positive axp to both sides. That's equivalent of
subtracting negative axp. So this is going
to be positive axp. And then we're going to have
positive byp plus-- I'll do that same green-- plus byp,
and then finally plus czp. Plus czp is going
to be equal to that. Now, the whole reason why
did this-- and I've done this in previous videos, where we're
trying to find the formula, or trying to find the
equation of a plane, is now we say, hey, if
you have a normal vector, and if you're given a point
on the plane-- where it's in this case is
xp yp zp-- we now have a very quick way of
figuring out the equation. But I want to go the other way. I want you to be
able to, if I were to give you a equation for
plane, where I were to say, ax plus by plus cz, is equal to d. So this is the general
equation for a plane. If I were to give
you this, I want to be able to figure out the
normal vector very quickly. So how could you do that? Well, this ax plus by
plus cz is completely analogous to this part
right up over here. Let me rewrite all this over
here, so it becomes clear. This part is ax
plus by plus cz is equal to all of this stuff
on the left hand side. So let me copy and paste it. So I just essentially
flipped this expression. But now you see this, all of
this, this a has to be this a. This b has to be this b. This c has to be this thing. And then the d is all of this. And this is just
going to be a number. This is just going to
be a number, assuming you knew what the
normal vector is, what your a's, b's
and c's are, and you know a particular value. So this is what d is. So this is how you could get
the equation for a plane. Now if I were to give
you equation or plane, what is the normal vector? Well, we just saw it. The normal vector, this a
corresponds to that a, this b corresponds to that b, that
c corresponds to that c. The normal vector to
this plane we started off with, it has the
component a, b, and c. So if you're given
equation for plane here, the normal vector to this
plane right over here, is going to be ai
plus bj plus ck. So it's a very easy thing to do. If I were to give you
the equation of a plane-- let me give you a
particular example. If I were to tell you that
I have some plane in three dimensions-- let's say it's
negative 3, although it'll work for more dimensions. Let's say I have negative 3
x plus the square root of 2 y-- let me put it this
way-- minus, or let's say, plus 7 z is equal to pi. So you have this crazy--
I mean it's not crazy. It's just a plane
in three dimensions. And I say what is a normal
vector to this plane? You literally can just pick
out these coefficients, and you say, a normal
vector to this plane is negative 3i plus
the square root of 2 plus 2 square root
of 2 j plus 7 k. And you could ignore
the d part there. And the reason why
you can ignore that is that will just
shift the plane, but it won't fundamentally
change how the plane is tilted. So a this normal vector, will
also be normal if this was e, or if this was 100, it would be
normal to all of those planes, because all those
planes are just shifted, but they all have
the same inclination. So they would all kind of
point the same direction. And so the normal vectors would
point in the same direction. So hopefully you found
that vaguely useful. We'll now build on this
to find the distance between any point in three
dimensions, and some plane. The shortest distance that
we can get to that plane.",Normal vector from plane equation | Vectors and spaces | Linear Algebra | Khan Academy,"Figuring out a normal vector to a plane from its equation

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/point-distance-to-plane?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/vector-triple-product-expansion-very-optional?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,gw-4wltP5tY
Reverseastringorlinkedlistusingstack.-hNP72JdOIgY.en.csv,"In our previous lesson, we saw how we can
implement a stack, these are two popular
implementations of stack one using arrays and another using
linked list. A warrior should not just possess a
weapon he must also know when and how to use it. As programmers we must know in what all
scenarios we can use a particular data structure. In this lesson, I'm going to talk about
one simple use case of stack. A stack can be used to reverse
a list or collection, or simply to traverse a list or
collection in reverse order. I'm going to talk about two problems. Reversal of string and reversal of linked list and I'm going to
solve both these problems using stack. Let's
first discuss reversal of string, I have a string in
the form of a character array here, I have this string
""HELLO"". A string is a sequence of characters. This is a C-style string. In C a string must be terminated with a null
character, so this last character is a null character. Reversal means characters in the array
should be rearranged like what i'm showing here
in the right. null character is used only to mark the
end of string, it is not part of string. Okay there are couple of efficient ways in
which we can reverse a string. Let's first discuss how we can solve
this problem using a stack and then we will see how
efficient it is. What we can do is we can create a
stack of characters, I'm showing logical representation of a
stack here this is a stack of characters and right
now it's empty and now what we can do is we can
traverse the characters in the string from left to right and
start pushing them onto the stack. So first 'H' goes into the stack then
the next character this 'E' then 'L' then we have another 'L' and then the last character is 'O'. Once all all the characters in the string
have gone into the stack we can once again start at the 0th index. Now we need to write the topmost
character in the stack, at this index we can get
the top most character by calling top operation and now we can perform a
pop and now we can go to the next index
fill in whatever is at top of stack and perform a pop again. We can go on
doing this until stack is not empty, so all the
positions in the character array will be overwritten.
So finally we have reversed a string here. In a stack whatever goes in last comes
out first. So if we will push a bunch of items onto a stack and once all items have pushed
if we will start popping we will get the items in reverse order.
First item pushed onto the stack will come out last. Let's quickly right code for this logic. I'm going to write
C++ here. Things will be pretty similar in other
languages, so it doesn't really matter. what I'm going to do in my code is am
going to create a character array to store a string and then
I will ask user to input a string, once I input
the string I would make a call to a function named
Reverse passing it the array and length of string that I will get by making a call to
string length function(strlen in C) and finally I'm printing the reversed string. Now I need to write the reverse
function. In reverse function I want to use a
stack, a stack of characters, we have already
seen how we can implement stack. In C++, we can create a class
named stack that would have an array of characters and an integer variable named top to
mark the top of stack in array and these variables can be private and we
can work up on the stack using these public functions. In Reverse() function we can simply create
an object of stack and use it. This class can be an array
based implementation of stack or linked list based implementation of stack it doesn't really matter, in C++
and many other languages language libraries also give us
implementation of stack in this program I'm not going to write
my own stack I'm going to use stack from what we call
standard template library in C++. I will have to use this includes
statement #include&lt;stack&gt; and now I have a stack class
available to me to create an object of this class I need
to write stack and within angular brackets datatype
for which we want a stack, then after space name or 
identifier with this one statement here I have
created a stack of characters. Let's now write the core logic this n in
the signature of reverse function is number of characters in string this array as we know array in C or C++ is always passed
by deference through a pointer, this C followed by
brackets is only an alternate syntax for *C. It's interpreted like this by the
compiler. Okay so now what I'm going to do is I'm going to run a loop starting 0 till n-1. So I will traverse the string from left
to right and as I traverse the string I will push the character onto stack by calling push function I will use a statement
like this once push is done and do another loop
for pop. I will run a loop with this variable i
starting at 0 and going till  n-1 and I will first
set C[i] as top of stack and then I will perform a pop operation. If you want to know more about functions
available with stack in STL like their signatures and how to use
them, you can check the description of this video for some resources. This is all I need to do in my reverse()
function. Let's run discord and see what happens. I need to enter a string. Lets enter
""HELLO"". this is what I get as output which seems
to be correct let's run this again and this time I
want to enter mycodeschool this looks alright to so we seem to be
good so this function is solving my problem
of reversal. Let's now see how efficient it is let's
analyze its time complexity we know that all operations on stack
take constant time so all these statements within loop,
inside loop, will take constant time. The first loop is
running n times and then the second look is also running
n times, first look will execute in O(n)
and the second loop will also execute in O(n). The loops are not nested they are one
after another so in such scenario complexity of the
whole function will also be O(n). Time complexity is O(n) but
we are using some extra memory here for stack. we are pushing all the characters in the
string on to stack, the extra space taken in stack
will be proportional to number of characters in the string,
will be proportional to n. So we can say that space complexity of
this function is also O(n), in simple words extra space taken is directly
proportional to n. There are  efficient ways to reverse a
string without using extra space. The most efficient way probably would be
to use just two variables to mark the start and end index in the string
initially, let's say I am using variables i and j,
initially i for this example is 0 and j is 4. While i is less than j we can swipe the
characters at these positions. And once we have swapped, we can
increment i and decrement j , if i is less than j , we can swap again and once again increment i and decrement j. Now I is not less than j,i is equal to j.
At this stage we can stop swapping and we're done. This algorithm has space complexity O(n),
we are using constant extra memory here. Time complexity of
this approach once again is O(n). We will do
n/2 swaps, so time taken will be
proportional to n. Definitely because of space complexity
this approach is better than our stack approach sometimes when
we know that our input will be very small and time and
space is not much of concern, we use a particular algorithm for
ease of implementation. for it's being intuitive, it's
clearly not the case when we're using stack to reverse a string but for this other problem, reversal of
linked list that we have said we will discuss using a
stack gives us are neat and intuitive solution. I have
drawn a linked list of integers here. As we knew linked list are collections of
entities as we call nodes. Each node contains two fields, one to
store data and other to store address of next node. I have assumed
that these nodes in this example here are at address is
100, 150, 250 and 300 respectively. Identity of a linked list
is address of the head node. we typically stored this address in a
variable named head. In an array, it takes constant time to
access any element so whether it's the first element or
last element it takes constant time to access it, it
is so because array is stored as one contiguous block of memory so if we know the starting address of
the array, let's say the starting address of this
RS 400 and size of each element in the array, character takes one bite so for this
example each element is one byte then we can calculate address of any
element. So we know that 84 is at 400+4 or 404 but in a linked list nodes are stored at disjoint
locations in memory, to access any nor do we have to start at
the head node, so we can do something as simple as
having 2 pointers at start and end and accessing the elements. We have
already seen in this series, two possible approaches that can be used
to reverse a linked list. one was an iterative solution where we
go on reversing links as we traverse the list using some temporary variables, another
solution was using recursion. The time complexity of
iterative solution is O(n). Space complexity is O(n). In recursive solution we do not
create a stack explicitly but recursive
uses the stack in computer's memory that is used to execute function calls in such a case we say that we are using
implicit stack. stack is not being created explicitly but
still we are using an implicit stack. I will come back to
this and explain in detail. The time complexity of recursive
solution once again is O(n). but the space complexity is O(n) this time. Space complexity is also O(n). Now let's see how the can use an
explicit stack to solve this problem. Once again I have drawn logical
representation of stack here, right now the stack is empty. In a
program this will be a stack of type pointer to Node. What I'm going to do now is I'm going to
traverse this linked list using a temporary pointer to Node. The temporary variable will initially
point to head. When we will go to a particular node we will
push the address of that  node onto the stack. so first 100 will go to stack and now we will
move to the next Node, now 150 will go in stack and now we will go to 250 and then to the last node at 300. They are showing addresses here in the
stack but basically the objects that we are pushing are pointers to Node or in other words references to nodes. if Node is defined like this in C++ we will have to use these statements to
traverse linked list and push all the references. Let's say head is a pointer to Node
which I'm assuming is a global variable that will store the address of head node. I'm using a temporary variable that is
pointed to Node, initially am starting the address of head node in this
temporary variable and then I'm running a loop and I'm traversing the linked list and as
I'm traversing I'm pushing the reference on to stack
once all the references are pushed onto stack, we can start popping them and as we
will pop them, we will get references to Nodes in reverse order, it would be like going
through the list in reverse order. While traversing the list
in reverse order we can build the reverse links. The first thing that'll
do is i'll take a temporary variable that will be
pointer to Node and store the address of address at the top of stack which right now is 300 now I will set head as this address, so
head now becomes 300 and then I will pop. I'm running you
through this example here as I'm writing code, head and temp right
now are both 300 and now I would run a loop like this, like what I have written here.
while stack is not empty this function empty() returns true if
stack is empty. I'm using stack from standard template
library in C++, so while stack is not empty I'm going to
say that set temp-&gt;next as address at top of stack. Basically I'm using this pointer to
Node temp to dereference and set this
particular address field right now top is 250 so I'm building
this reverse link next statement is a pop() and in the next statement am saying temp = temp-&gt;next which means temp will now point to this node
at 250 stack is not empty so loop will execute
again. we are writing address here now then we should pop and then move to 150 using this statement temp = temp-&gt;next. now we are building this link popping
and then oops this should have been 150 and with the next temp =temp-&gt;next
we're going here, even though we have built this
link by setting this field here this node is still pointing to this guy
because the stack is empty now we will exit the loop,after the loop, after exit from the loop, I have written
one more  line temp-&gt;next = NULL. so I'm setting the last, link part of last node in reversed list as NULL finally this is my reverse function I
have assumed that head is a global variable and it's a
pointer to Node if you want a complete source code you
can check the description of this video for a link. Using the stack in this case is
making a life easier reversing a linked list is still a
complex problem, try to just print the elements of
linked list in reverse order. if you will use our stack it will be
really easy. I will stop here for this lesson, if you
know,  if you want to know what I meant by implicit stack you can once again
checked the description of this video for some resources so this is it for this lesson thanks for
watching.",Reverse a string or linked list using stack.,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described how we can reverse a string or linked list using stack. Reversal is a simple application of stack. 

To know about implicit stack, see this video:
http://www.youtube.com/watch?v=_8-ht2AKyH4

Reversal of linked list using recursion:
http://www.youtube.com/watch?v=KYH83T4q6Vs 
 
For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,hNP72JdOIgY
Parametricrepresentationsoflines_Vectorsandspaces_LinearAlgebra_KhanAcademy-hWhs2cIj7Cw.en.csv,"Everything we've been doing in
linear algebra so far, you might be thinking, it's kind of
a more painful way of doing things that you already
knew how to do. You've already dealt
with vectors. I'm guessing that some of you
all have already dealt with vectors in your calculus or
your pre-calculus or your physics classes. But in this video I hope to show
you something that you're going to do in linear algebra
that you've never done before, and that it would have been very
hard to do had you not been exposed to these videos. Well I'm going to start with,
once again, a different way of doing something you already
know how to do. So let me just define some
vector here, instead of making them bold, I'll just draw it
with the arrow on top. I'm going to define my vector
to be-- I can do with the arrow on top or I can just
make it super bold. I'm just going to define my
vectors, it's going to be a vector in R2. Let's just say that my vector
is the vector 2, 1. If I were to draw it in
standard position, it looks like this. You go two to the right,
up one, like that. That's my, right there,
that is my vector v. Now, if I were to ask you, what
are all of the possible vectors I can create? So let me define a set. Let me define a set, s, and
it's equal to-- all of the vectors I can create, if I were
to multiply v times some constant, so I multiply some
constant, some scalar, times my vector v, and just to maybe
be a little bit formal, I'll say such that c is a member
of the real numbers. Now what would be a graphical
representation of this set? Well, if we draw them all in
standard position, c could be any real number. So if I were to multiply,
c could be 2. If c is 2, let me
do it this way. If I do 2 times our vector,
I'm going to get the vector 4, 2. Let me draw that in standard
position, 4, 2. It's right there. It's this vector right there. It's collinear with
this first vector. It's along the same line, but
just goes out further 2. Now I could've done another. I could have done 1.5
times our vector v. Let me do that in a
different color. And maybe that would be,
that would be what? That'd be 1.5 times 2,
which is 3, 1.5. Where would that
vector get me? I'd go one 1.5 and then I'd
go 3, and then 1.5, I'd get right there. And I can multiply
by anything. I can multiply 1.4999
times vector v, and get right over here. I could do minus 0.0001
times vector v. Let me write that down. I could do 0.001 times
our vector v. And where were that put me? It would put me little super
small vector right there. If I did minus 0.01, it would
make a super small vector right there pointing
in that direction. If I were to do minus 10, I
would get a vector going in this direction that goes
way like that. But you can imagine that if
I were to plot all of the vectors in standard position,
all of them that could be represented by any c in real
numbers, I'll essentially get-- I'll end up drawing a
bunch of vectors where their arrows are all lined up along
this line right there, and all lined up in even in negative
direction-- let me make sure I draw it properly-- along
that line, like that. I think you get the idea. So it's a set of collinear
vectors. So let me write that down. And if we view these vectors as
position vectors, that this vector represents a point in
space in R2-- this R2 is just our Cartesian coordinate plane
right here in every direction-- if we view this
vector as a position vector-- let me write that down-- if
we view it as kind of a coordinate in R2, then this set,
if we visually represent it as a bunch of position
vectors, it'll be represented by this whole line over here. And I want to make that point
clear because it's essentially a line, of slope 2. Right? Sorry, slope 1/2. Your rise is 1. Your rise is 1 for
going over 2. But I don't want to go
back to our Algebra 1 notation too much. But I want to make this point
that this line of slope 2 that goes through the origin, this
is if we draw all of the vectors in the set as in their
standard form, or if we draw them all as position vectors. If I didn't make that
clarification, or that qualification, I could have
drawn these vectors anywhere. Right? Because this 4, 2 vector, I
could have drawn over here. And then, to say that it's
collinear probably wouldn't have made as much visual
sense to you. But I think this collinearity of
it makes more sense to you if you say, oh, let's draw them
all in standard form. All of them start at the origin,
and then their tails are at the origin, and their
heads go essentially to the coordinate they represent. That's what I mean by their
position vectors. They don't necessarily have to
be position vectors, but for the visualization in this video,
let's stick to that. Now I was only able to represent
something that goes through the origin
with this slope. So you can almost view that
this vector kind of represented its slope. You almost want to view it as a
slope vector, if you wanted to tie it in to what you
learned in Algebra 1. What if we wanted to represent
other lines that had that slope? What if we wanted to represent
the the same line, or I guess a parallel line-- that goes
through that point over there, the point 2 comma 4? Or if we're thinking in position
vectors, we could say that point is represented
by the vector, and we will call that x. It's represented by
the vector x. And the vector x is
equal to 2, 4. That point right there. What if I want to represent the
line that's parallel to this that goes through
that point 2, 4? So I want to represent
this line right here. I'll draw it as parallel
to this as I can. I think you get the idea, and it
just keeps going like that in every direction. These two lines are parallel. How can I represent the set of
all of these vectors, drawn in standard form, or all of the
vectors, that if I were to draw them in standard form,
would show this line? Well, you can think
about it this way. If every one of the vectors that
represented this line, if I start with any vector that was
on this line, and I add my x vector to it, I'll show up
at a corresponding point on this line that I
want to be at. Right? Let's say I do negative 2 times
my original, so minus 2 times my vector v, that
equaled what? Minus 4, minus 2, so that's
that vector there. But if I were to add x to it, if
I were to add my x vector. So if I were to do minus 2 times
my vector v, but I were to add x to it, so plus x. I'm adding this vector 2 comma
4 to it, so from here I'd go right 2 and up 4,
so I'd go here. Or visually you could just
say, heads to tails, so I would go right there. So I would end up at a corresponding point over there. So when I define my set, s, as
the set of all points where I just multiply v times the
scalar, I got this thing that went through the origin. But now let me define
another set. Let me define a set l, maybe l
for line, that's equal to the set of all of vectors where the
vector x, I could do it bold or I'll just draw an
arrow on it, plus some scalar-- I could use c, but
let me use t, because I'm going to call this a
parametrization of the line-- so plus some scalar, t times my
vector v such that t could be any member of the
real numbers. So what is this going to be? This is going to be
this blue line. If I were to draw all of these
vectors in standard position, I'm going to get my blue line. For example, if I do minus 2,
this is minus 2, times my vector v, I get here. Then if I add x, I go there. So this vector right here that
has its endpoint right there-- its endpoint sits
on that line. I can do that with anything. If I take this vector, this is
some scalar times my vector v, and I add x to it, I end up
with this vector, whose endpoint, if I view it as a
position vector, it's endpoint dictates some coordinate
in the xy plane. So it will [UNINTELLIGIBLE] that point. So I can get to any
of these vectors. This is a set of vectors right
here, and all of these vectors are going to point-- they're
essentially going to point to something-- when I draw them
in standard form, if I draw them in standard form-- they're
going to point to a point on that blue line. Now you might say, hey Sal, this
was a really obtuse way of defining a line. I mean we do it in Algebra 1,
where we just say, hey you know, y is equal to mx plus b. And we figure out the slope by
figuring out the difference of two points, and then we do
a little substitution. And this is stuff you learned
in seventh or eighth grade. This was really straightforward. Why am I defining this obtuse
set here and making you think in terms of sets and vectors
and adding vectors? And the reason is, is because
this is very general. This worked well in R2. So in R2, this was great. I mean, we just have to worry
about x's and y's. But what about the situation, I
mean notice, in your algebra class, your teacher never really
told you much, at least in the ones I took, about how do
you present lines in three dimensions? Maybe some classes go there,
but they definitely didn't tell you how do you represent
lines in four dimensions, or a hundred dimensions. And that's what this is
going to do for us. Right here, I defined x and
v as vectors in R2. They're two-dimensional vectors,
but we can extend it to an arbitrary number
of dimensions. So just to kind of hit the point
home, let's do one more example in R2, where, it's kind
of the classic algebra problem where you need to find
the equation for the line. But here, we're going
to call it the set definition for the line. Let's say we have two vectors. Let's say we have the vector a,
which I'll define as-- let me just says it's 2, 1. So if I were draw it in standard
form, it's 2, 1. That's my vector
a, right there. And let's say I have vector
b, let me define vector b. I'm going to define it as,
I don't know, let me define it as 0, 3. So my vector b, 0-- I don't
move to the right at all and I go up. So my vector b will
look like that. Now I'm going to say that these
are position vectors, that we draw them in
standard form. When you draw them in standard
form, their endpoints represent some position. So you can almost view these
as coordinate points in R2. This is R2. All of these coordinate axes
I draw are going be R2. Now what if I asked you, give
me a parametrization of the line that goes through
these two points. So essentially, I want the
equation-- if you're thinking in Algebra 1 terms-- I want the
equation for the line that goes through these two points. So the classic way, you would
have figured out the slope and all of that, and then
you would have substituted back in. But instead, what we can do is,
we can say, hey look, this line that goes through both of
those points-- you could almost say that both of those
vectors lie on-- I guess that's a better-- Both of these vectors lie on this line. Now, what vector can be
represented by that line? Or even better, what vector,
if I take any arbitrary scalar-- can represent any other
vector on that line? Now let me do it this way. What if I were to take-- so this
is vector b here-- what if I were to take b minus a? We learned in, I think it was
the previous video, that b minus a, you'll get this
vector right here. You'll get the difference
in the two vectors. This is the vector b
minus the vector a. And you just think about it. What do I have to add
to a to get to b? I have to add b minus a. So if I can get the vector b
minus a-- right, we know how to do that. We just subtract the vectors,
and then multiply it by any scalar, then we're going to get
any point along that line. We have to be careful. So what happens if we take t,
so some scalar, times our vector, times the vectors
b minus a? What will we get then? So b minus a looks like that. But if we were to draw it in
standard form-- remember, in standard form b minus a would
look something like this. Right? It would start at 0, it would be
parallel to this, and then from 0 we would draw
its endpoint. So if we just multiplied some
scalar times b minus a, we would actually just get
points or vectors that lie on this line. Vectors that lie on that
line right there. Now, that's not what
we set out to do. We wanted to figure out an
equation, or parametrization, if you will, of this
line, or this set. Let's call this set l. So we want to know what
that set is equal to. So in order to get there, we
have to start with this, which is this line here, and
we have to shift it. And we could shift it either by
shifting it straight up, we could add vector b to it. So we could take this
line right here, and add vector b to it. And so any point on here
would have its corresponding point there. So when you add vector b, it
essentially shifts it up. That would work. So we could, say, we could
add vector b to it. And now all of these points
for any arbitrary-- t is a member of the real numbers, will
lie on this green line. Or the other option we could
have done is we could have added vector a. Vector a would have taken any
arbitrary point here and shifted it that way. Right? You would be adding
vector a to it. But either way, you're going to
get to the green line that we cared about, so you could
have also defined it as the set of vector a plus this line,
essentially, t times vector b minus a, where t is
a member of the reals. So my definition of
my line could be either of these things. The definition of my line could
be this set, or it could be this set. And all of this seems all very
abstract, but when you actually deal with the numbers,
it actually becomes very simple. It becomes arguably simpler than
what we did in Algebra 1. So this l, for these particular
case of a and b, let's figure it out. My line is equal to-- let me
just use the first example. It's vector b, so it's the
vector 0, 3 plus t, times the vector b minus a. Well what's b minus a? 0 minus 2 is minus 2, 3, minus
1 is 2, for t is a member of the reals. Now, if this still seems kind
of like a convoluted set definition for you, I could
write it in terms that you might recognize better. If we want to plot points, if
we call this the y-axis, and we call this the x-axis,
and if we call this the x-coordinate, or maybe more
properly that the x-coordinate and call this the y-coordinate,
then we can set up an equation here. This actually is the x-slope. This is the x-coordinate,
that's the y-coordinate. Or actually, even better,
whatever-- actually, let me be very careful there. This is always going to end up
becoming some vector, l1, l2. Right? This is a set of vectors, and
any member of this set is going to look something
like this. So this could be li. So, this is the x-coordinate,
and this is the y-coordinate. And just to get this in a form
that you recognize, so we're saying that l is the set of
this vector x plus t times this vector b minus a here. If we wanted to write it in kind
of a parametric form, we can say, since this is what
determines our x-coordinate, we would say that x is equal to
0 plus t times minus 2, or minus 2 times t. And then we can say that y,
since this is what determines our y-coordinate, y is equal to
3 plus t times 2 plus 2t. So we could have rewritten that
first equation as just x is equal to minus 2t, and
y is equal to 2t plus 3. So if you watch the videos on
parametric equations, this is just a traditional parametric
definition of this line right there. Now, you might have still viewed
this as, Sal, this was a waste of time, this
was convoluted. You have to define these
sets and all that. But now I'm going to show you
something that you probably-- well, unless you have done
this before, but I guess that's true of anything. But you probably haven't
seen in your traditional algebra class. Let's say I have two points, and
now I'm going to deal in three dimensions. So let's say I have
one vector. I'll just call it point
1, because these are position vectors. We'll just call it position 1. This is in three dimensions. Just make up some numbers,
negative 1, 2, 7. Let's say I have Point 2. Once again, this is in three
dimensions, so you have to specify three coordinates. This could be the x, the y,
and the z coordinate. Point 2, I don't know. Let's make it 0, 3, and 4. Now, what if I wanted to find
the equation of the line that passes through these
two points in R3? So this is in R3. Well, I just said that the
equation of this line-- so I'll just call that, or the set
of this line, let me just call this l. It's going to be equal to-- we
could just pick one of these guys, it could be P1, the
vector P1, these are all vectors, be careful here. The vector P1 plus some random
parameter, t, this t could be time, like you learn when you
first learn parametric equations, times the difference
of the two vectors, times P1, and it doesn't matter
what order you take it. So that's a nice thing too. P1 minus P2. It could be P2 minus P1--
because this can take on any positive or negative value--
where t is a member of the real numbers. So let's apply it to
these numbers. Let's apply it right here. What is P1 minus P2? P1 minus P2 is equal to-- let
me get some space here. P1 minus P2 is equal, minus
1 minus 0 is minus 1. 2 minus 3 is minus 1. 7 minus 4 is 3. So that thing is that vector. And so, our line can be
described as a set of vectors, that if you were to plot it in
standard position, it would be this set of position vectors. It would be P1, it would be--
let me do that in green-- it would be minus 1, 2, 7. I could've put P2 there, just as
easily-- plus t times minus 1, minus 1, 3, where, or such
that, t is a member of the real numbers. Now, this also might not
be satisfying for you. You're like, gee, how do I plot
this in three dimensions? Where's my x, y's, and z's? And if you want to care about
x, y's, and z's, let's say that this is the z-axis. This is the x-axis, and
let's say the y-axis. It kind of goes into our board
like this, so the y-axis comes out like that. So what you can do, and actually
I probably won't graph, so the determinate for
the x-coordinate, just our convention, is going to be
this term right here. So we can write that x--
let me write that down. So that term is going to
determine our x-coordinate. So we can write that x is equal
to minus 1-- be careful with the colors-- minus 1,
plus minus 1 times t. That's our x-coordinate. Now, our y-coordinate is going
to be determined by this part of our vector addition because
these are the y-coordinates. So we can say the y-coordinate
is equal to-- I'll just write it like this-- 2 plus
minus 1 times t. And then finally, our
z-coordinate is determined by that there, the t shows up
because t times 3-- or I could just put this t into
all of this. So that the z-coordinate is
equal to 7 plus t times 3, or I could say plus 3t. And just like that, we have
three parametric equations. And when we did it in R2, I did
a parametric equation, but we learned in Algebra 1,
you can just have a regular y in terms x. You don't have to have a
parametric equation. But when you're dealing in R3,
the only way to define a line is to have a parametric
equation. If you have just an equation
with x's, y's, and z's, if I just have x plus y plus z is
equal to some number, this is not a line. And we'll talk more
about this in R3. This is a plane. The only way to define a line
or a curve in three dimensions, if I wanted to
describe the path of a fly in three dimensions, it has to
be a parametric equation. Or if I shoot a bullet in three
dimensions and it goes in a straight line, it has to
be a parametric equation. So these-- I guess you could
call it-- these are the equations of a line in
three dimensions. So hopefully you found
that interesting. And I think this will be the
first video where you have an appreciation that linear algebra
can solve problems or address issues that you
never saw before. And there's no reason why we
have to just stop at three, three coordinates, right here. We could have done this
with fifty dimensions. We could have defined a line in
fifty dimensions-- or the set of vectors that define a
line, that two points sit on, in fifty dimensions-- which is
very hard to visualize, but we can actually deal with
it mathematically.",Parametric representations of lines | Vectors and spaces | Linear Algebra | Khan Academy,"Parametric Representations of Lines in R2 and R3

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/linear_combinations/v/linear-combinations-and-span?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/intro-unit-vector-notation?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,hWhs2cIj7Cw
BSTimplementation-memoryallocationinstackandheap-hWokyBoo0aI.en.csv,"In our previous lesson, we wrote some code
for binary search tree we wrote functions to insert and search
data in BST .Now in this lesson we will go a
little deeper and try to understand how things move in
various sections of applications memory. When these functions get executed and
this will give you a lot of clarity and this will give you some general insight
into how memory is managed for execution of a
program and how recursion which is so
frequently used in case of trees works. The concepts that I'm going to
talk about in this lesson have been discussed earlier in some of
our previous lessons, but it will be good to go through these
concepts again when we are implementing trees. So, here's
the code that he had written. We have this function GetNewNode() to
create a new node in dynamic memory and then we have this function Insert() to insert a new node in
the tree and then we have this function to search
some data in the tree and finally this is the main function. You can check the description of this
video for link to the source code. Now in main function here we have this
pointer to BSTnode named root to store the address of the
root note of my tree and am initially setting it as NULL to create an empty tree and then I'm making
some calls to insert function to insert some data in the tree and
finally I'm asking user to input a number and I'm making call to
search function to find this number in the tree if the
search function is returning me true I'm printing found, else I'am printing not found. Let's see
what will happen in memory when this program will execute. The
memory that is allocated to a program or application for its execution in a
typical architecture can be divided into these four segments, there is one segment called text segment to store all the instructions in the
program. The instructions would be compiled instructions in machine language. There is another segment to store all the
global variables. A variable that is declared outside all
the functions is called global variable. It is accessible to all
the functions. The next segment stack is basically
scratch space for function call execution, all the
local variables the variables that are declared within
functions live in stack. and finally the fourth section heap
which we also called the free store,  is the dynamic memory that can grow
or shrink as per our need. the size of all other segments is fixed
the size of all other segments is decided at compile-time but heap
can grow during runtime and we cannot control allocation or
de-allocation of memory in any other segment during runtime but we can control allocation and de-allocation
in heap we have discussed all of this in detail
in our lesson on dynamic memory allocation you can check the description for a link.
Now what I'm going to do here is am going to draw stack and heap sections as these two
rectangular containers. I'm kind of zooming into these two
sections. Now I will show you how things will move in these two sections of
application's memory when this program will execute. When this
program will start execution first the main function will be called.
Now whenever a function is called some amount of memory from the stack is
allocated for its execution. The allocated memory is called stack
frame of the function call. All the local variables and the state of
execution of the function call would be stored in the stack frame of
the function call. In the main function we have this local
variable root which is pointer to BSTnode so I'm showing root here in this stack frame.
We will execute instructions sequentially. In the first line in main function, we
have declared root and we are initializing it and setting it
as NULL. NULL is only a map macro for
address Zero. So here in in this figure am setting
address in root as 0. Now in the next line we are making a call
to insert function so what will happen is execution of main
will pause at this stage and a new stack frame will
be allocated for execution of insert.
Main will wait for this insert above to finish and return. Once this insert call finishes, main
will resume at line 2. We have these two local variables root
and data in insert function, in which we are
collecting the arguments. Now for this call to insert function, we will
go inside the first if condition here because root is NULL, at this line we will make call to GetNewNode
function so once again execution of this insert call will pause and a new stack frame will be
allocated for execution of GetNewNode function we have two local
variables in GetNewNode data in which we are collecting argument and this
pointer to BSTnode named newnode. Now in this function we are using
new operator to create a BSTnode in heap. Now let's
say we got a new node at address 200
new operator will return us this  address 200 so this address will be set
here in new node so we have this link here and now using this pointer newNode, we are setting value in these three
fields of Node. Let's say the first field to store data
so we are setting value 15 here and let's say this
second cell is to store address of left child this is being set as NULL and address of
right child is also being set as NULL and now GetNewNode() will return the
address of new node and finish its execution. Whenever a
function call finishes, the stack frame allocated to it is reclaimed. Call to insert function will resume at
this line and the return of GetNewNode() address 200, will be set in this the root which is local variable for
insert call and now insert function, this particular
call to insert function return the address of root.The address stored in this variable root which is
200 now and finish and now main will resume
at this line and root of main will be set as
200. The return of this insert call, insert(root, 15) will be set here. Now in the execution of main, control will go to the
next line and we have this call to insert function to insert number 10. Once again
execution of main will be paused and a stack frame will be allocated for
execution of insert. Now this time for insert call root
is not NULL. So we will not go inside to first if,
now we will access the data field of this node at address 200 by using this pointer named root in insert function and we
will compare it with this value 10. 10 is lesser than 15 so we will go to
this line and now we're making a recursive call
here because recursion is a function calling itself. and a function calling itself is not any
different from a function A calling another function B
so what will happen here is that execution of this particular
insert call will be paused and a new stack frame
will be allocated for the execution of this another insert call to which the
arguments passed are address 0, in this local variable
root, left child of Node at address 200 is NULL. so we are passing 0 and root and in data
we are passing 10. Now for this particular insert call
control will go inside first if and we will make a
call to get new node function at this line so execution of this
insert will pause and we'll go to GetNewNode()
function here, we are creating a new node in heap. Let's say we got this new node at address 150.
Now GetNewNode() will return 150 and finish execution of this call
to insert will resume at this line, return of GetNewNode() will be set here and now this call to insert will return address
150 and finish. insert below will resume at
this line and now in this insert call left child of this node at address 200 will
be set as return of the previous insert call
which is 150 so.. now these two node are linked and finally
this insert call will finish. Control will return back to main at
this line, root will be rewritten as 200 but earlier also it is
was 200, it's not changing. Next in the main function may have
caused to insert number 20. I'm not going to show the
simulation for this one once again allocated memory in stack
will grow and shrink and finally when the
control will return back to main function after this insert call is over, we'll
have a node in heap with value 20 set as right child of
this node at 200. Let's say we got this
new node with value 20 at address 300 so as you
can see the address of right child in node at address 200 is set as 300. Now next one is to insert number 25 this one is interesting let's see what
will happen for this one. Main will be paused and we will go to this call to insert, in the root which is
local to this call address passed is 200 and we have passed number 25 In data.Now here 25 is greater than the value in this node
at address 200 so we will go inside this last else condition we need to insert in the right subtree so another card insert will be made we
will pass address 300 as root and data passed will be 25
only. Now for this call once again the value in node at 300 for this call which is 300 is lesser than 25. 25 is greater than 20 so once again we will come to this last
else and make a recursive call to insert in
the right subtree the right subtree is empty this time so
for this insert call at top the address in root here will be 0 so for this call we will go to the first if and make a call to GetNewNode(). Let's
say this new node returns us node at address 100. I'm short of space so I'm not showing
everything in GetNewNode() stack frame here. we will return back
to this insert call at top and now this root is set as 100 address of the newly created node and
now this call to insert will finish. We will come back to this insert below
and this insert will resume at this line
inside the last else and the right child of node address
300 will be set as 100, and now this insert will return back to
address 300, whatever is set in it's root and this insert below will resume at this
line inside the last else right child of node at address 200 will
be set as 300. It was 300 previously also so even after overwriting we will not
change and this insert will finish now. Finally main will resume at this line,
root of main will be set as return of this insert
call. It will only be overwritten with same
value. It's really important that this root in main and other links in
nodes not properly updated quite often because
of bugs in our code, will loose some links or some unwanted
links are created. Now as you can see, we are creating all the
notes in heap here.  heap gives us this flexibility that we
can decide the creation of node during runtime and we can control
the lifetime of anything in heap any memory claimed in heap has to be
explicitly de-allocated using free in C or delete operator in C++ else the memory in heap remains allocated
till the program is running. The memory in stack as you can see gets
De-allocated when function call finishes. The rest of the function calls here in
Main function will execute in similar manner I'll leave it for you to see and think
about. Right now we have this tree in the heap, logically memory itself is a linear
structure and this is how tree which is a
non-linear structure which is logically a non-linear
structure will fit in it. The way I'm showing the nodes at random
locations linked to each other in this heap. I hope this explanation
gave you some clarity. In coming lessons we will solve some
problems on trees. This is it for this lesson thanks for
watching.",BST implementation -  memory allocation in stack and heap,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described how things will move in stack and heap sections of application's memory when binary search tree program discussed in previous lesson will execute. 

See source code here:
https://gist.github.com/mycodeschool/44e1a9183ab0e931f729 

Lesson on dynamic memory allocation:
http://www.youtube.com/watch?v=_8-ht2AKyH4&list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_&index=12

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,hWokyBoo0aI
im(T)-Imageofatransformation_Matrixtransformations_LinearAlgebra_KhanAcademy-hZ827mfh1Jo.en.csv,"Let's say that I have some set
V that is a subspace in Rn. And just as a reminder,
what does it mean? That's just some set, or some
subset of Rn where if I take any two members of that subset--
so let say I take the members a and b-- they're both
members my subspace. By the fact that this is a
subspace, we then know that the addition of these two
vectors, or a plus b, is also in my subspace. And this is our closure
under addition. And by the fact that it's a
subspace, we also know that if we multiply any member of our
subspace by a scalar -- so the fact that those guys are members
of our subspace -- we also know that if I pick one
of them, let's say a, and I multiply a by some scalar, that
this is also going to be a member of our subspace. And we sometimes call this
closure under scalar multiplication. And then a somewhat redundant
statement is that V, well it must contain the zero vector. And that's true of
all subspaces. V -- let me write it this
way -- the zero vector is a member of V. And it would be the zero vector
with n components here, because V is a subspace of Rn. And why I say that's redundant,
because if I say that any multiple of these
vectors is also in V, I could just set the scalar
to be equal to 0. So this statement kind
of takes the statement into account. But in a lot of textbooks, they
will always write, oh and the zero vector has to
be a member of V. Although, that's kind of
redundant with the closure under scalar multiplication. Fair enough. Now, let's say that I also have
some transformation T. It is a mapping, a function,
from Rn to Rm. What I want to understand, in
this video is, I have a subspace right here, V. I want to understand whether
the transformation of the subspace -- and what
did we call that? We called that the image of our
subspace, or our subset, either way. The image of V under T. In the last video, just to kind
of help you visualize it. How did that work or -- we
had some subset of Rn that looked like this. It was a triangle that looked
something like that. And that was in Rn, this was
actually in R2, it was a triangle that looked something
like that. And we figured out it's
image under T. So we went from R2 to R2. and we had our transformation. And it ended up looking
something like this. If I remember it properly. It ended up looking like a --
gee, I don't remember it fully, but it was like a
triangle that was skewed like this, rotated. So it was a -- actually I think
it was more like -- I think that's right. It was rotated a bit clockwise
like that and it was skewed. But the exact particulars
of that last video aren't what matter. What matters is that you are
able to visualize what an image under transformation
means. It means you take some subset of
R2, all of the vectors that define this triangle
right here. That's some subset of R2. You transform all of them, and
then you get some subset in your codomain. You could call this the image,
because the transformation of that triangle, or if we call
this s, it's equal to the transformation of s. Or you could say it's the image
of-- you can just call it the set s, but maybe it helps
you to visualize-- call it the image of this
triangle under T. Or maybe even a neater way of
thinking about it is, this triangle-- that skewed, rotated
triangle-- this one is the image of this right
triangle under T. I think that might make
a little bit of visual sense to you. And just as a bit of reminder,
in that last video these triangles, these weren't
subspaces. And just as you could take
scalar multiples of some of the vectors that are members of
this triangle, and you'll find that they're not going
to be in that triangle. So this wasn't a subspace, this
was just a subset of R2. All subsets are not subspaces,
but all subspaces are definitely subsets. Although something can be
a subset of itself. I don't want to wander
off too much. But this just helps
you visualize what we mean by an image. It means all of the vectors that
are mapped to, from the members of your subset. So I want to know whether
the image of V under T is a subspace. So in order for it to be a
subspace, if I take the transformation -- let me
find two members of T. Well clearly if I take the
transformation of any members of V, I'm getting members
of the image. Right? So I can write this. Clearly the transformation of
a and the transformations of b, these are both of members
of our images of V under T. These are both members
of that right there. So my question to you is what
is the transformation of a plus the transformation of b? And the way I have written this,
these are two arbitrary members of our image
of V under T. Or maybe I should call
it T of capital V. These are two arbitrary
members. So what is this equal to? Well, we know from our
properties, our definition of linear transformations, the sum
of the transformations of two vectors is equal to the
transformation of the sum of their of vectors. Now, is the transformation
of a plus b, is this a member of TV? Is it a member of our image? Well, a plus b is a member of V,
and the image contains the transformation of all
of the members of V. So the image contains the
transformation of this guy. This guy, a plus b
is a member of V. So you're taking a
transformation of a member of V which, by definition, is in
your image of V under T. So this is definitely true. Now, let's ask the
next question. If I take a scalar multiple of
some member of my image of V under T, or my T of capital
V, right there. If I take the sum scalar,
what is this equal to? By definition for linear
transformation, this is the same thing as a transformation
of the scalar times the vector. Now is this going to
be a member of our image of V under T? Well we know that ca is
definitely in V, right? That's from the definition
of a subspace. This is definitely in V. And so, if this is in V, the
transformation of this has to be in V's image under T. So this is in -- this is
also a member of V. And obviously, you can
set this equal to 0. The zero vector is a member of
V, so any transformation of -- if you just put a 0 here, you'll
get the zero vector. So the zero vector is definitely
-- I don't care what this is, if you multiply
it times 0, you are going to get the zero vector. So the zero vector
is definitely also a member of TV. So we come on the result that
T -- the image of V under T, is a subspace. Which is a useful result
which we will be able to use later on. But this, I guess, might
naturally lead to the question, what if we go --
everything we have been dealing with so far have been
subsets, with the case of this triangle, or subspaces,
in the case of V. But what if I were to take the
image Rn under T, right? This is the image
of Rn under T. Let's think about
what this means. This means, what do we get when
we take any member of Rn, what is the set of all
of the vectors? Then when we take the
transformation of all of the members of Rn, let
me write this. This is equal to the set of the
transformation of all of the x's, where each x
is a member of Rn. So you take each of the members
of Rn and transform them, and you create
this new set. This is the image
of Rn under T. Well, there's a couple of ways
you can think of this. Remember when we defined
-- let's see, T is a mapping from Rn to Rm. We defined this as the domain. All of the possible inputs
for our transformation. And we define this
as the codomain. And remember I told you that
the codomain is essentially part of the definition of
the function or of the transformation, and it's the
space that we map to. It's not necessarily all
of the things that we're mapping to. For example, the image of Rn
under transformation, maybe it's all of Rm or maybe it's
some subset of Rn. The way you can think about it,
and I touched on this in that first video, is-- and
they'll never, or at least the linear algebra books I looked
at, they didn't specify this-- but you can kind of view
this as the range of T. These are the actual members
of Rm that T maps to. That if you take the image of
Rn under T, you are actually finding-- let's say that
Rm looks like that. Obviously it will go
in every direction. And let's say that when
you take-- let me draw Rn right here. And we know that T is a
mapping from Rn to Rm. But let's say when you take
every element of Rn and you map them into Rm, let's say
you get some subset of Rm, let's say you get something
that looks like this. So let me see if I can
draw this nicely. So you literally map every point
here, and it goes to one of these guys. Or one of these guys can be
represented as a mapping from one of these members
right here. So if you map all of them you
get this subset right here. This subset is, this is
T the image of Rn, the image of Rn under T. And in the terminology that
you don't normally see in linear algebra a lot,
you can also kind of consider it its range. The range of T. Now, this has a special name. This is called -- and I don't
want you to get confused -- this is called the image of T. Image of T. This might be a little
confusing, image of T. So this is sometimes written
as just im of T. Now you are a little confused
here, you are like, before when we were talking about
subsets, we would call this the image of R subset under T. And that is the correct
terminology when you're dealing with a subset. But when you take, all of
a sudden, the entire n dimensional space, and you're
finding that image, we call that the image of the actual
transformation. So we can also call this set
right here the image of T. And now what is the
image of T? Well, we know that we can
write any-- and this is literally any-- so T is
going from Rn to Rm. We can write T of x-- we
can write any linear transformation like this-- as
being equal to some matrix, some m by n matrix
times a vector. And these vectors obviously
are going to be members of Rn-- times sum Rn. And what is this? So what is the image -- let
me write it in a bunch of different ways -- what is
the image of Rn under T? So we could write that as T --
let me write it this way. We could write that as T of Rn,
which is the same thing as the image of T. Notice we're not saying under
anything else, because now were saying the image of the
actual transformation. Which we could also write
as the image of T. Well what are these equal to? This is equal to the set of all
the transformations of x. Well all the transformations of
x are going to be Ax where x is a member of Rn. So x is going to be an n-tuple,
where each element has to be a real number. So what is this? So if we write A-- let
me write my matrix A. It's just a bunch of column
vectors, a1, a2. It's going to have n
of these, right? Because it has n columns. And so a times any x is going to
be-- so if I multiply that times any x that's
a member of Rn. I multiply x1, x2, all
the way to xn. We've seen this multiple,
multiple times. This is equal to x1-- the scalar
x1, times a1, plus x2 times a2, all the way
to plus xn times an. And we're saying we want the
set of all of these sums of these column vectors, where x
can take on any vector in Rn. Which means that the elements
of x can take on any real scalar values. So the set of all of these is
essentially all of the linear combinations of the columns
of a, right? Because I can set these guys
to be equal to any value. So what is that equal to? That is equal to, and we
touched on this, or we actually talked about this when
we introduced the idea. This is equal to the
column space of A. Or we just denoted it
sometimes as C of A. So that's a pretty
neat result. If you take -- it's almost
obvious, I mean it's just I'm playing with words a little
bit-- but any linear transformation can be
represented as a matrix vector product. And so the image of any linear
transformation, which means the subset of its codomain,
when you map all of the elements of its domain into
its codomain, this is the image of your transformation. This is equivalent to the column
space of the matrix that you're transformation
could be represented as. And the column space, of course,
is the span of all the column vectors of your matrix. This is just all of the linear
combinations, or the span, of all of your column vectors,
which we do right here. Anyway hope you found that a
little interesting, and you will be able to use these
results in the future.",im(T): Image of a transformation | Matrix transformations | Linear Algebra | Khan Academy,"Showing that the image of a subspace under a transformation is also a subspace. Definition of the image of a Transformation.

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/preimage-of-a-set?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/image-of-a-subset-under-a-transformation?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,hZ827mfh1Jo
Undeterminedcoefficients2_Secondorderdifferentialequations_KhanAcademy-hbJ2o9EUmJ0.en.csv,"  Let's do some more
nonhomogeneous equations. So let's take the same problem,
but we'll change the right-hand side. Because I think you know how
to solve the-- essentially, the homogeneous version. So the same problem as we
did in the last video. The second derivative of y
minus 3 times the first derivative y minus 4
times the function. And now in the last example,
the nonhomogeneous part was 3e to the 2x. But we're tired of dealing with
exponent functions, so let's make it a trigonometric
function. So let's say it equals
2 sin of x. So the first step you do is
what we've been doing. You essentially solve the
homogeneous equation. So this left-hand side
is equal to 0. You do that by getting the
characteristic equation r squared minus 3r minus
4 is equal to 0. You get the solutions, r is
equal equal to 4, r is equal to minus 1, and then you get
that general solution. We did this in the last video. You get the general solution
of the homogeneous. Maybe we'll call this the
homogeneous solution. y homogeneous. We've got the C1 e to the 4x
plus C2e to the minus x. And that's all and good, but
in order to get the general solution of this nonhomogeneous
equation, I have to take the solution of the
nonhomogeneous equation, if this were equal to 0, and
then add that to a particular solution that satisfies
this equation. That satisfies-- when you take
the second derivative minus 3 times the first minus 4 times
the function, I actually get 2 sin of x. And here once again we'll use
undetermined coefficients. And undetermined coefficients,
just think to yourself. What function, when I take its
second and first derivatives and add and subtract multiples
of them to each other, will I get sine of x? Well, two functions end up with
sine of x when you take the first and second
derivatives. And the sine and cosine of x. So it's a good guess. And that's really what you're
doing it the method of undetermined coefficients. You take a guess of a particular
solution and then you solve for the undetermined
coefficients. So let's say that our guess is
y is equal to-- I don't know, some coefficient times
sine of x. And if this was sine
of 2x, I'd put A times sine of 2x here. Just because I still want-- no
matter what happens here-- the sine of 2x's or maybe cosine
of 2x's to still exist. If this was a sine of 2x, there's
nothing I could do to a sine of x, or nothing at least
trivial that I could do to the sine of x. It would end up with
a sine of 2x. So whatever's here,
I want here. Plus B, some undetermined
coefficient times cosine of x. And once again, this
was sine of 2x. I'd want a cosine of 2x here. So let's figure out its first
and second derivatives. So the first derivative of this
y prime is equal to A cosine of x. Cosine derivative is minus sine,
so minus B sine of x. And then the second
derivitive-- I'll write down here. The second derivative
is equal to what? Derivative of cosine is minus
sine, so minus A sine of x minus B cosine of x.   I think you're starting to see
that the hardest thing in most differential equations problems
is not making careless mistakes. It's a lot of algebra and a lot
of fairly basic calculus. And the real trick is to not
make careless mistakes. Every time I say that,
I tend to make one. So I'm going to focus
extra right now. So anyway, let's take these and
substitute them back into this nonhomogeneous equation. Let's see if I can solve
for A and B. So the second derivative
is that.   Let me just rewrite it,
just so that you see what I'm doing. So I'm going to take the second
derivative, y prime prime, so that's minus A sine
of x minus B cosine of x. I'm going to add minus 3 times
the first derivative to that. And I'm going to write the sines
under the sines and the cosines under the consines. So minus 3 times this. So the sine is, let's see. It's plus 3B sine of x
minus 3 times this. So minus 3A cosine of x. And then minus 4 times our
original function. So minus 4A sine of x. Right? Minus 4 times that. Minus 4 times this. Minus 4B cosine of x. And when I take the sum of all
of those-- that's essentially the left-hand side to this
equation-- when I take the sum of all of that, that is
equal to 2 sine of x. I could have written them out
in a line, but it would have just been more confusing. And now this makes it easy to
add up the sine of x's and the cosine of x's. So if I add up all the
coefficients on the sine of x, I get minus A plus
3B minus 4A. So that looks like minus 5A plus
3B sine of x plus-- and now what are the coefficients
here?   I have minus B and then I have
another minus 4B, so minus 5B and then minus 3A. So minus 3A minus
5B cosine of x. The cosine of x should
go right here. So anyway, how do I
solve for A and B? Well, I have the minus 5A
3B is equal to whatever coefficients in front
of sine of x here. So minus 5A plus 3B must
be equal to 2. And then minus 3A minus 5B is
the coefficient on cosine of x, although I kind of
squeezed in the cosine of x here, right? So this must be equal to
whatever the coefficient on cosine of x is on the
right-hand side. Well the coefficient of
cosine of x on the right-hand side is 0. So that sets up a system of two unknowns with two equations. A linear system. So we get minus 5A plus
3B is equal to 2. And we get minus 3A minus
5B is equal to 0.   And let's see if I can simplify
this a little bit. Let's see. This is a system of two
unknowns, two equations. If I multiply the top equation
by 5 1/3s, right? Actually, let me multiply the
top equation by 5 1/3s. I get minus 25/3 A plus 5B is
equal to 5 1/3s times this. 5 1/3s times 2 is 10 1/3s. And the bottom equation
is minus 3A minus 5B is equal to 0. Let's add the two equations. I get 10 1/3s is equal to--
these cancel out. That's minus 25/3 minus 9/3
A is equal to 10 1/3s. This is getting a little bit
messier than I like, but we'll soldier on. So minus 25 minus 9. What's minus 25 minus 9? So that is 34. So we get 34 over 3A
is equal to 10/3. We can multiply both
sides by 3. Divide both sides by 34. A is equal to 10/34, which
is equal to 5/17. Nice ugly number. 5/17 and now we can
solve for B. So let's see. Minus 3 times A minus
3 times A. 5/17 minus 5B is equal to 0. So that's what? Minus 15/17 is equal
to plus 5B. I just took this and put it
on the right-hand side. And then divide both
sides by 5.   Oh, you know what? I realized I made a careless
mistake here. Minus 25 minus 9. That's the minus 34 over 3. so minus 34A is equal to 10. A is equal to minus 10/34
or minus 5/17. So minus 3 times minus 5/17. So 5/17 is equal to
plus 5B, right? And then we get B is
equal to 3/17. That was hairy. And notice, the hard
part was not losing your negative sines. But anyway, we now have our
particular solution to this.   let me try to write in a
non-nauseating color, although I think I picked a
nauseating one. The particular solution is A
minus 5/17 sine of x-- right? That was a coefficient on sine
of x-- plus B plus 3/17 times cosine of x. And if we look at our original
problem, the general solution out of this nonhomogeneous
equation would be this-- which is the general solution to the
homogeneous equation, which we've done many videos on--
plus now our particular solution that we solved using
the method of undetermined coefficient. So if you just take that and add
it to that, you're done. And I am out of time. See you in the next video.",Undetermined coefficients 2 | Second order differential equations | Khan Academy,"Another example using undetermined coefficients.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/undetermined-coefficients/v/undetermined-coefficients-3?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/undetermined-coefficients/v/undetermined-coefficients-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,hbJ2o9EUmJ0
Exactequationsintuition1(proofy)_Firstorderdifferentialequations_KhanAcademy-iEpqcdaJNTQ.en.csv,"Now I introduce you to the
concept of exact equations. And it's just another method for
solving a certain type of differential equations. Let me write that down. Exact equations. Before I show you what an exact
equation is, I'm just going to give you a little bit
of the building blocks, just so that when I later prove it,
or at least give you the intuition behind it, it doesn't
seem like it's coming out of the blue. So let's say I had some function
of x and y, and we'll call it psi, just because that's
what people tend to use for these exact equations. So psi is a function
of x and y. So you're probably not familiar
with taking the chain rule onto partial derivatives,
but I'll show it to you now, and I'll give you a little
intuition, although I won't prove it. So if I were to take the
derivative of this with respect to x, where y is also
function of x, I could also write this as y-- sorry,
it's not y, psi. Undo. So I could also write this as
psi, as x and y, which is a function of x. I could write it
just like that. These are just two
different ways of writing the same thing. Now, if I were to take the
derivative of psi with respect to x-- and these are just the
building blocks-- if I were to take the derivative of psi with
respect to x, it is equal to-- this is the chain rule
using partial derivatives. And I won't prove it, but
I'll give you the intuition right here. So this is going to be equal to
the partial derivative of psi with respect to x plus the
partial derivative of psi with respect to y times dy dx. And this is should make a
little bit of intuition. I'm kind of taking the
derivative with respect to x, and if you could say, and I know
you can't, because this partial with respect to
y, and the dy, they're two different things. But if these canceled out,
then you'd kind of have another partial with
respect to x. And if you were to kind of add
them up, then you would get the full derivative
with respect to x. That's not even the intuition,
that's just to show you that even this should make a little
bit of intuitive sense. Now the intuition here, let's
just say psi, and psi doesn't always have to take this form,
but you could use this same methodology to take psi to
more complex notations. But let's say that psi, and
I won't write that it's a function of x and y. We know that it's a function
of x and y. Let's say it's equal to some
function of x, we'll call that f1 of x, times some
function of y. And let's say there's a bunch
of terms like this. So there's n terms like this,
plus all the way to the nth term is the nth function of x
times the nth function of y. I just defined psi like this
just so I can give you the intuition that when I use
implicit differentiation on this, when I take the derivative
of this with respect to x, I actually
get something that looks just like that. So what's the derivative of
psi with respect to x? And this is just the implicit
differentiation that you learned, or that you hopefully
learned, in your first semester calculus course. That's equal, and we just do
the product rule, right? So the first expression, you
take the derivative of that with respect to x. Well, that's just going to be f1
prime of x times the second function, well, that's
just g1 of y. Now you add that to the
derivative of the second function times the
first function. So plus f1 of x, that's just the
first function, times the derivative of the
second function. Now the derivative of the second
function, it's going to be this function with
respect to y. So you could write that
as g1 prime of y. But of course, we're doing
the chain rule. So it's that times dy dx. And you might want to review the
implicit differentiation videos if that seems a
little bit foreign. But this right here, what I
just did, this expression right here, this is the
derivative with respect to x of this. And we have n terms like that. So if we keep adding them, I'll
do them vertically down. So plus, and then you have a
bunch of them, and the last one's going to look the
same, it's just the nth function of x. So fn prime of x times the
second function, g n of y, plus the first function, fn of
x, times the derivative of the second function. The derivative of the second
function with respect to y is just g prime of y times dy dx. It's just a chain rule. dy dx. Now, we have two n terms. We
have n terms here, right, where each term was a f of x
times a g of y, or f1 of x times g1 of y, and then
all the way to fn of x times gn of y. Now for each of those, we got
two of them when we did the product rule. If we group the terms, so if
we group all the terms that don't have a dy dx on them,
what do we get? If we add all of these, I guess
you could call them on the left hand side, I'm just
rearranging, it all equals f1 prime of x times g1 of y, plus
f2, g2, all the way to fn prime, I'm sorry, fn prime
of x, gn of y. That's just all of these
added up, plus all of these added up. All the terms that have
the dy dx in them. And I'll do them in
a different color. So all of these terms
are going to be in a different color. I'll do it in a different
parentheses. Plus f1 of x g1 prime of y, and
I'll do the dy dx later, I'll distribute it out. Plus, and we have n terms, plus
fn of x gn prime of y, and then all of these terms
are multiplied by dy dx. Now, something looks
interesting here. We originally defined our psi,
up here, as this right here, but what is this green term? Well, what we did is we took all
of these individual terms, and these green terms here are
just taking the derivative with respect to just x on each
of these terms. Because if you take the derivative just with
respect to x of this, then the function of y is just
a constant, right? If you were to take just a
partial derivative with respect to x. So if you took the partial
derivative with respect to x of this term, you treat a
function of y as a constant. So the derivative of this would
just be f prime of x, g1 of y, because g1 of y
is just a constant. And so forth and so on. All of these green terms you
can view as a partial derivative of psi with
respect to x. We just pretended like
y is a constant. And that same logic, if you
ignore this, if you just look at this part right here,
what is this? We took psi, up here, we treated
the functions of x as a constant, and we just took
the partial derivative with respect to y. And that's why the primes
are on all the g's. And then we multiply
that times dy dx. So you could write this, this
is equal to-- I'll do this green-- this green is the same
thing as the partial of psi with respect to x. Plus, what's this purple,
this part of the purple? Let me do it in a different
color, in magenta. This, right here, is the partial
of psi with respect to y, and then times dy dx. So that's essentially all I
wanted to show you right now in this video, because
I realize I'm almost running out of time. That the chain rule, with
respect to one of the variables, but the second
variable in the function is also a function of x, the
chain rule is this. If psi is a function of x and
y, and I would take not a partial derivative, I would take
the full derivative of psi with respect to x, it's
equal to the partial of psi with respect to x, plus the
partial of psi with respect to y, times dy dx. If y wasn't a function of x, or
if y if it was independent of x, than dy dx would be 0. And this term would be 0, and
then the derivative of psi with respect to x would be just
the partial of psi with respect to x. But anyway, I want you to
just keep this in mind. And in this video I didn't prove
it, but I hopefully gave you a little intuition if
I didn't confuse you. And we're going to use this
property in the next series of videos to understand exact
equations a little bit more. I realize that in this video I
just got as far as kind of giving you an intuition here. I haven't told you yet what
an exact equation is. I will see you in
the next video.",Exact equations intuition 1 (proofy) | First order differential equations | Khan Academy,"Chain rule using partial derivatives (not a proof; more intuition).

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/exact-equations-intuition-2-proofy?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/eulers-method-tutorial/v/example-eulers-method-exercise?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,iEpqcdaJNTQ
Integratingfactors1_Firstorderdifferentialequations_KhanAcademy-j511hg7Hlbg.en.csv,"A lot of what you'll learn in
differential equations is really just different
bags of tricks. And in this video I'll show
you one of those tricks. And it's useful beyond this. Because it's always good when,
if maybe one day, you become a mathematician or a physicist,
and you have an unsolved problem. Some of these tricks that solved
simpler problems back in your education might be a
useful trick that solves some unsolved problems. So
it's good to see it. And if you're taking
differential equations, it might be on an exam. So it's good to learn. So we'll learn about integrating
factors. So let's say, we have an
equation that has this form. Let's say this is my
differential equation. 3xy-- I'm trying to write it
neatly as possible-- plus y squared plus x squared plus xy
times y prime is equal to 0. So, especially since we've
covered this in recent videos, whenever you see an equation
of this form where you have some function of xy, then you
have another function of x and y times y prime equals 0, you
said, oh, this looks like this could be an exact differential
equation. And how do we test that? Well, we can take the partial
derivative of this with respect to y, and we
could call this function of x and y, M. So the partial of that, with
respect to y, so M partial with respect to y, would
be 3x plus 2y. And if this function right here,
that expression right there, that's our function
N, which is a function of x and y. We take the partial with respect
to x, and we get that is equal to 2x plus y. And in order for this to have
been an exact differential equation, the partial of this
with respect to y would have to equal the partial of this
with respect to x. But we see here, just by looking
at these two, they don't equal each other. They're not equal. So, at least superficially, the
way we looked at it just now, this is not an exact
differential equation. But what if there were some
factor, or I guess some function that we could multiply
both sides of this equation by, that would
make it an exact differential equation? So let's call that mu. So what I want to do is I want
to multiply both sides of this equation by some function mu,
and then see if I can solve for that function mu that
would make it exact. So let's try to do that. So let's multiply both
sides by mu. And just as a simplification,
mu could be a function of x and y. It could be a function of x. It could be a function
of just x. It could be function
of just y. I'll assume it's just
a function of x. You could assume it's just
a function of y and try to solve it. Or you could just assume it's
a function of x and y. If you assume it's a function
of x and y, it becomes a lot harder to solve for. But that doesn't mean that
there isn't one. So let's say that mu
is a function of x. And I want to multiply it by
both of these equations. So I get mu of x times 3xy plus
y squared plus mu of x times x squared plus
xy times y prime. And then, what's 0 times
any function? Well, it's just going
to be 0, right? 0 times mu of x is just
going to be 0. But I did multiply the right
hand side times mu of x. And remember what we're doing. This mu of x is-- when we
multiply it, the goal is, after multiplying both sides
of the equation by it, we should have an exact equation. So now, if we consider this
whole thing our new M, the partial derivative of this with
respect to y should be equal to the partial derivative
of this with respect to x. So what's the partial derivative
of this with respect to y? Well, if we're taking the
partial with respect to y here, mu of x, which is only
a function of x, it's not a function of y, it's just
a constant term, right? We take a partial with respect
to y. x is just a constant, or a function of x can be viewed
just as a constant. So the partial of this with
respect to y is going to be equal to mu of x, you could just
say, times 3x plus 2y. That's the partial of this
with respect to y. And what's the partial of
this with respect to x? Well, here, we'll use
the product rule. So we'll take the derivative of
the first expression with respect to x. mu of x is no
longer a constant anymore, since we're taking the partial
with respect to x. So the derivative of mu of
x with respect to x. Well, that's just mu prime
of x, mu prime, not U. mu prime of x. mu is the Greek letter. It's for the muh sound, but
it looks a lot like a U. So mu prime of x times a second
expression, x squared plus xy, plus just the
first expression. This is just the product
rule, mu of x. Times the derivative of
the second expression with respect to x. So times-- ran out of space
on that line-- 2x plus y. And now for this new equation,
where I multiplied both sides by mu. In order for this to be exact,
these two things have to be equal to each other. So let's just remember
the big picture. We're kind of saying, this
is going to be exact. And now, we're going to
try to solve for mu. So let's see if we
can do that. So let's see, on this side, we
have mu of x times 3x plus 2y. And let's subtract this
expression from both sides. So it's minus mu of
x times 2x plus y. You'll see a lot of these
differential equation problems that get kind of hairy. They're really just
a lot of algebra. And that equals-- what
do we have left? I'll write it in yellow. That equals-- I'm going
to run out of space. I'm going to do it a
little bit lower. That equals, just this
term right here. That equals mu prime of x
times x squared plus xy. And let's see, if we factor out
a mu of x here, we get mu of x times 3x plus 2y minus 2x
minus y is equal to mu prime of x, the derivative of mu with
respect to x, times x squared plus xy. Now, we can simplify this. So we get mu of x times-- what
is this-- 3x minus 2x is x. 2y minus y, so x plus y, is
equal to-- and I'm just going to simplify this side a
little bit-- is equal to mu prime of x. Let's factor out an x here. And the reason why I'm doing
that is because it seems like if I factor out an x here,
I'll get an x plus y. So this is mu prime of x
times x times x plus y. x times x plus y is
x squared plus xy. So that's why I did it, and I
have this x plus y on both sides equation, which I will
now divide both sides by. So if you divide both sides by
x plus y, we could maybe assume that it's not 0. That simplifies things
pretty dramatically. We get mu of x is equal to
mu prime of x times x. And now, just the way my brain
works, I like to rewrite this expression just in our operator
form, where instead of writing it mu prime
of x, we could write that as d mu dx. So let's do that. So we could write mu of x is
equal to d, the derivative of mu with respect to x, times x. And this is actually a separable
differential equation in and of itself. It's kind of a sub-differential
equation to solve our broader one. We're just trying to figure
out the integrating factor right here. So let's divide both
sides by x. So we get mu over x, this is
just a separable equation now, is equal to d mu dx. And then, let's divide both
sides by mu of x, and we get 1 over x is equal to 1 over mu. That's mu of x, I'll just write
1 over mu right now, for simplicity, times d mu dx. I'm actually going to go
horizontal right here. Multiply both sides by dx, you
get 1 over x dx is equal to 1 over mu of x d mu. Now, you could integrate both
sides of this, and you'll get the natural log of the absolute
value of x is equal to the natural log of the
absolute value of mu, et cetera, et cetera. But it should be pretty clear
from this that x is equal to mu, or mu is equal
to x, right? They're identical. If you look at both sides of
this equation there, you can just change x for mu, and it
becomes the other side. So, this is obviously telling us
that mu of x is equal to x. Or mu is equal to x. So we have our integrating
factor. And if you want, you can take
the antiderivative of both sides with the natural logs,
and all of that. And you'll get the
same answer. But this is just, by looking at
it, by inspection, you know that mu is equal to x. Because both sides of
this equation are completely the same. Anyway, we now have our
integrating factor. But I am running out of time. So in the next video, we're
now going to use this integrating factor. Multiply it times our original
differential equation. Make it exact. And then solve it as
an exact equation. I'll see you in the
next video.",Integrating factors 1 | First order differential equations | Khan Academy,"Using an integrating factor to make a differential equation exact

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/integrating-factors-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/exact-equations-example-3?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,j511hg7Hlbg
Introductiontothenullspaceofamatrix_Vectorsandspaces_LinearAlgebra_KhanAcademy-jCwRV1QL_Xs.en.csv,"Let's review our notions
of subspaces again. And then let's see if we can
define some interesting subspaces dealing with
matrices and vectors. So a subspace-- let's say that I
have some subspace-- oh, let me just call it some
subspace s. This is a subspace if the
following are true-- and this is all a review-- that the 0
vector-- I'll just do it like that-- the 0 vector,
is a member of s. So it contains the 0 vector. Then if v1 and v2 are both
members of my subspace, then v1 plus v2 is also a member
of my subspace. So that's just saying that
the subspaces are closed under addition. You can add any of their two
members and you'll get another member of the subspace. And then the last requirement,
if you remember, is that subspaces are closed under
multiplication. So that if c is real number,
and it's just a scalar. And if I multiply, and v1 is a
member of my subspace, then if I multiply that arbitrary real
number times my member of my subspace, v1, I'm going
to get another member of the subspace. So it's closed under
multiplication. These were all of what
a subspace is. This is our definition
of a subspace. If you call something
a subspace, these need to be true. Now let's see if we can do
something interesting with what we understand about matrix
vector multiplication. Let's say I have the matrix
a-- I'll make it nice and bold-- and it's an
m by n matrix. And I'm interested in the
following situation; I want to set up the homogeneous
equation. And we'll talk about why
it's homogeneous. Well, I'll tell you
in a second. So let's say we set
up the equation. My matrix a times vector x
is equal to the 0 vector. This is a homogeneous equation, because we have a 0 there. And I want to ask
the question-- I talked about subspaces. If I take all of the x's--
if I take the world, the universe, the set of all of
the x's that satisfy this equation, do I have
a valid subspace? Let's think about this. I want to take all of the x's
that are a member of Rn. Remember, if our matrix a has
n columns, then I've only defined this matrix vector
multiplication. If x is a member of r, and if
x has to have exactly n components, only then
is it defined. So let me define a set of all
the vectors that are a member of Rn where they satisfy the
equation a times my vector x is equal to the 0 vector. So my question is, is
this a subspace? Is this a valid subspace? So the first question is, does
it contain the 0 vector? Well in order for this to
contain the 0 vector, the 0 vector must satisfy
this equation. So what is any m by n matrix
a times the 0 vector? Let's write out my matrix
a-- my matrix a, a[1,1] a[1,2] all the way to a[1,n] and then this, as we go down
a column, we go all the way down to a[m,1] and then as we go all the
way to the bottom right, we go to a[m,n] and I'm going to multiply that
times the 0 vector that has exactly n components. So the 0 vector with n
components is 0, 0, and you're going to have n of these. The number of components here
has to be the exact same number of the number of columns
you have. But when you take this product, this
matrix vector product, what do you get? What do we get? Well, this first term up here
is going to be a[1,1] time 0, plus a[1,2] times 0, plus each of
these terms times 0. And you add them
all up. a[1,1] times 0, plus a[1,2] plus a[1,2] times 0, all the way to a[1,n] and times 0. So you get 0. Now this term is going
to be a[2,1] times 0, plus a[2,2] times 0, plus a[2,3] times 0, all the way to a[2,n] times 0. That's, obviously,
going to be 0. And you're going to keep doing
that because all of these are, essentially,-- you can kind of
view it as the dot product of-- I haven't defined dot
products with row vectors and column vectors, but I think you
get the idea-- the sum of each of these elements,
multiplied with the corresponding component
in this vector. And, of course, you're just
always multiplying by 0 and then adding up. So you're going to get nothing
but a bunch of 0's. So the 0 vector does satisfied
the equation. A times the 0 vector is
equal to the 0 vector. And this is a very
unconventional notation. I'm just writing it like that,
because I don't feel like bolding out my 0's all the time
to make you realize that that's a vector. So we meet our first
requirement. The 0 vector is a member
of the set. So let me define my set here. Let me define it n. And I'll tell you in a second
why I'm calling it n. So we now know that
the 0 vector is a member of my set n. Now let's say I have two
vectors, v1 and v2 that are members-- let me write this. So let's say I have two factors,
v1, and v2, that are both members of our set. What does that mean? That means that they both
satisfy this equation. So that means that a-- my matrix
a-- times vector 1 is equal to 0. This is by definition. I'm saying that they're a member
of the set, which means they must satisfy this. And that also means that
a times vector 2 is equal to our 0 vector. So in order for this to be
closed under addition, a times vector 1 plus vector 2, the
sum of these two vectors should also be a member of n. But let's figure out
what this is. The sum of these two vectors
is this vector right here. This is equal to--
and I haven't proven this to you yet. I haven't made a video
where I prove this. But it's very easy to prove just
using the definition of matrix vector multiplication,
that matrix vector multiplication does display
the distributive property. And maybe I'll make a video on
that, but literally, you just have to go through the mechanics
of each of the terms. This is equal to a[v,1] plus a[v,2] And we know that this is
equal to the 0 vector. And this is equal
to the 0 vector. And if you add the 0 vector to
itself, this whole thing is going to be equal
to the 0 vector. So if v1 is a member of n, and
v2 is a member of n, which means they both satisfy this
equation, then v1 plus v2 is definitely still
a member of n. Because when I multiply
a times that, I get the 0 vector again. So let me write that
result, as well. So we now know that v1 plus
v2 is also a member of n. And the last thing we have to
show is that it's closed under multiplication. Let's say that v1 is a member
of our space that I defined here, where they satisfy
this equation. What about c times v1? Is that a member of n? Well let's think about it. What's our matrix a times
the vector-- right? I'm just multiplying this
times the scale. I'm just going to get
another vector. I don't want to write
a capital v there. Lowercase v, so it's a vector. What's this equal to? Well, once again, I haven't
prove it to you yet, but it's actually a very straightforward
thing to do, to show that when you're dealing
with scalars, if you have a scalar here, it doesn't
matter if you multiply the scalar times the vector before
multiplying it times the matrix or multiplying the matrix
times the vector, and then doing the scalar. So it's fairly straightforward
to prove that this is equal to c times our matrix a-- I'll make
that nice and bold, times our vector v. That these two things
are equivalent. Maybe I should just churn out
the video that does this, but I'll leave it to you. You, literally, just go
through the mechanics component by component. And you show this. But clearly, if there's is true,
we already know that v1 is a member of our set, which
means that a times v1 is equal to the 0 vector. And so that means this will
reduce to c times the 0 vector, which is still
the 0 vector. So c[v,1] is definitely a member of n. So it's closed under
multiplication. And I kind of assumed
this right here. But maybe I'll prove that
in a different video. But I want to do all this to
show that this set n is a valid subspace. This is a valid subspace. It contains a 0 vector. It's close under addition. It's close under
multiplication. And we actually have a special
name for this. We call this right here, we call
n, the null space of a. Or we could write n is equal
to-- maybe I shouldn't have written an n. Let me write orange in there. Our orange n is equal to-- the
notation is just the null space of a. Or we could write the null space
is equal to the orange notation of n, and literally,
if I just give you some arbitrary matrix a, and
I say, hey, find me n of a, what is that? Literally, your goal is to find
the set of all x's that satisfy the equation a times
x is equal to 0. And I'm going to do that
in the next video.",Introduction to the null space of a matrix | Vectors and spaces | Linear Algebra | Khan Academy,"Showing that the Null Space of a Matrix is a valid Subspace

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/null-space-2-calculating-the-null-space-of-a-matrix?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/matrix-vector-products?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,jCwRV1QL_Xs
ApplyingNewton'sLawofCoolingtowarmoatmeal_Firstorderdifferentialequations_KhanAcademy-jH5qflAe3C8.en.csv,"- [Voiceover] Let's now actually apply Newton's Law of Cooling. Just to remind ourselves, if
capitol T is the temperature of something in celsius degrees, and lower case t is time in minutes, we can say that the rate of change, the rate of change of our temperature with respect to time, is going to be proportional and I'll write a negative K over here. We assumed our concept K is positive, then a negative K is going to
proportional to the difference between the temperature of our thing and the ambient temperature in the room. Once again, why do I
have a negative there? Well, because if the
temperature of our thing is larger than the
temperature of our room, we would expect that we would
be decreasing in temperature. We would have a negative rate of chance. Temperature should be
decreasing over time. If, on the other hand,
our temperature is lower than the ambient temperature of the room then this thing is going to be negative and we would want a
positive rate of change. Things would be warming up. That's why a negative of a negative would give you the positive. This right over here, this
differential equation, we already saw it in a previous video on Newton's Law of Cooling. We even saw a general solution to that. The general solution that I care about, because we are now going
to deal with the scenario where we are putting
something warm in a... Or we are going to put
a warm bowl of oatmeal in a room temperature room. Given that, we are
going to assume the case that we saw in the last video where our temperature is
greater than or equal to the ambient temperature. In that situation, our general
solution boiled down to... It boiled down to temperature
as a function of time is equal to some constant
times e to the negative KT, negative KT, plus our ambient temperature. Plus our ambient temperature. Once again, we figured
this out in our last video. Now, let's actually apply it. I said we were dealing with the scenario where our temperature is greater than or equal to the ambient temperature. Let's assume we are in a scenario... Let's assume a scenario where our ambient temperature
is 20 degrees celsius. We assume that doesn't change. The room is just large enough that even if something that is warmer is put into it the ambient temperature does not change. Let's say that the thing
that we have put in it, our warm bowl of oatmeal, let's say it starts off the
moment we put it in the room, that time equals zero, is 80 degrees celsius. Let's say we also know,
just from previous tests, that after two minutes, after two minutes, it gets to 60 degrees celsius. We also know that T of
two is 60 degrees celsius. Given all of this
information right over here, using Newton's Law of Cooling, and using all of this information we know about how bowls of oatmeal
that start at this temperature have cooled in the past, we want to know how long it will take. How many minutes will have to pass when you put an 80 degree
bowl of oatmeal in the room? How many minutes have to pass in order for it to get to 40 degrees using this model? Let me write that down. So how long... How many minutes for... or let me just say to cool
to 40 degrees celsius? I encourage you to pause the video now and try to figure it out. I'm assuming you have paused the video, and you have had your go at it and the key is to use
all of this information right over here to solve
for the constants C and K, and once you know that, you essentially have described your model. Then you can apply it
to solve for the time that gets you to a temperature
of 40 degrees celsius. So let's do that. The first thing we know is the ambient temperature
is 20 degrees celsius. This right over here is 20 degrees. The most obvious thing
to solve for or to apply is what happens with T of zero. What's neat about T of zero, when T equals zero, this exponent is zero, either the zero power is one, and so T of zero is
essentially going to simplify to Ce plus 20 degrees. Let me actually right that down. T of zero, which we
already know is 80 degrees, we already know as 80 degrees celsius. I'm just going to write 80. We will assume it's in degrees celsius. That is going to be equal to... That is going to be equal to when T equals zero, this, the e to the zero is just going to be one. It's going to be equal
to C plus, C plus 20. If you want to solve for
C, you just subtract 20 from both sides of this equation. We are left with... We are left with 80 minus
20 is 60, is equal to C. 60 is equal to C. We were able to figure out C. Let's figure out what we know right now. We know that T, let me
do that in magenta color. We know that T of t, that's confusing, upper case T of lower case t, temperature as a function of time, is going to be equal to... is going to be equal
to in that same color, 60 e to the negative
KT, negative KT plus 20, plus our ambient temperature. Plus our ambient temperature. Now, we need to solve for K. We can use this information
right over here to solve for K. T of two is equal to 60 degrees. If we make t as equal to two, this thing is going to be 60 degrees. Let me write that down. Let me write that over
here so we have some space. We have 60 is equal to... 60 is equal to 60, is equal to 60 e to the negative K T, all this color switching takes time, e to the negative K T, plus oh, and be careful, that's a times two. E to the negative K times two. That's a time equals two, I could write that E
to the negative two K. E to the negative two K, and then of course we have our plus 20. Then we have our plus 20. Now we just have to solve for K. Once again, at any point, if
you feel inspired to do so I encourage you to try
to solve it on your own. Alright, so let's do this. If we subtract 20 from both sides, we get 40 is equal to 60
e to the negative two K. Divide both sides by 60. You are left with two thirds. 40 divided by 60 is two thirds. is equal to e to the negative two K. E to the negative two K. All this color changing takes work. Let me know if y'all
want me to keep changing. I enjoy changing colors. It just keeps it
interesting on the screen. Anyway, e to the negative two K. Actually, let me scroll down a little bit so I have some more real
estate to work with. Now I can take, let's see. I can take the natural log of both sides. So, I'll have the natural log. Natural log of two thirds is equal to the natural log of e
to the negative two K. That's the whole reason why I took the natural log of both sides. Then to solve for K, I divide
both sides by negative two. I get K is equal to negative one half. Negative one half the
natural log of two thirds. I just swapped sides. Natural log of two thirds. Let me do that since I kept
the colors going so long, let me keep it that way. Natural log of two thirds. So we have solved for
all of the constants. Now we can rewrite this
thing right over here. We can rewrite it as... We just need a mini drumroll here, we are not completely done yet. We get t of T is equal to 60 e... e to the negative K. Well, negative K, the
negative and negative is going to be positive. It will be one half
natural log of two thirds. So one half natural log of two thirds. Negative K, so negative of a negative. One half natural log of two thirds, which actually will be a negative value. Two thirds is less than e,
so you are going to have a natural log of it is
going to be negative so it makes you feel
good that the temperature is going to be going down over time. So, plus or times T, plus 20. Now, all we have to do is
figure out what T get us to a temperature of 40 degrees celsius. Let's solve for that. If we want this to be
40, 40 is equal to... Actually now I'm just
going to stick to one color as we march through this part. 40 is going to be equal to 60
e to the one half natural log of two thirds T power plus 20. Now, let's see. We can subtract 20 from both sides. We get to 20 is equal to 60
e to all that crazy business, one half natural log
of two thirds times T. Now we can divide both sides
by 60 and we get one third. 20 divided by 60 is one third, is equal to e to the one half natural log of two thirds times T. Now, let's see, we can take
the natural log of both sides. The natural log of one third is equal to one half natural log of two thirds times T and then home stretch to solve for T you just divide both sides by one half natural log of two thirds. We get T is equal to this, which is the natural log of one third divided by one half natural log of two thirds. Well, if you divide by one
half that's the same thing as multiplying by two. Then you are going to divide
by natural log of two thirds. Let's see if this actually
makes a sensical answer. Let me get a calculator out. Actually, I could just use Google here. I had ... I already forgot what it was. Natural log one-- So I had natural log one third over natural log of two thirds and the whole thing times two. So I can type two times the
natural log of one third divided by the natural log of two thirds. Let's see what Google gets us. Alright, it didn't ... How did I mess up? This is equal to two
times the natural log-- Oh, okay, it messed up the parenthesis. Let me make this clear. The natural log of one third divided by the natural log of two thirds. Then, there you go. If we were to round to
the nearest hundredth it would be five point four two. Five point four two minutes. Remember, everything we
were doing were in minutes. This right over here, this
is approximately equal to five point four two. Five point four two minutes. And we are done! That's how long it will take
us to cool to 40 degrees.",Applying Newton's Law of Cooling to warm oatmeal | First order differential equations | Khan Academy,"Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/logistic-differential-equation/v/modeling-population-with-differential-equations?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/modeling-with-differential-equations/v/newtons-law-of-cooling?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,jH5qflAe3C8
Complexrootsofthecharacteristicequations2_Secondorderdifferentialequations_KhanAcademy-jJyRrIZ595c.en.csv,"So where we left off, I had
given you the question-- these types of equations are fairly
straightforward. When we have two real
roots, then this is the general solution. And if you have your initial
conditions, you can solve for c1 and c2. But the question I'm asking is,
what happens when you have two complex roots? Or essentially, when you're
trying to solve the characteristic equation? When you're trying to solve
that quadratic? The B squared minus 4AC,
that that's negative. So you get the two roots end up
being complex conjugates. And we said OK, let's say that
our two roots are lambda plus or minus mu i. And we just did a bunch
of algebra. We said, well if those are the
roots and we substitute it back into this formula for
the general solution, we get all of this. And we kept simplifying it, all
the way until we got here, where we said y is equal to e
to the lambda x, plus c1, et cetera, et cetera. And we said, can we simplify
this further? And that's where we took out
Euler's equation, or Euler's formula, or Euler's definition,
depending what you want, which I'm always in
awe of every time I see it or use it. But we've talked a lot about
that in the calculus playlist. We could use this to maybe
further simplify it, so I wrote e to the mu xi as cosine
mu x plus i sine mu x. And I wrote e to the minus mu xi
is cosine minus mu x plus i sine minus mu x. And now we could use a little
bit about what we know about trigonometry. Cosine of minus theta is equal
to cosine of theta. And we also know that sine of
minus theta is equal to minus sine of theta. So let's use these identities
to simplify this a little bit more. So we get y is equal to e to
the lambda x times-- and we could actually distribute the c1
too-- so times c1 cosine of mu x, plus i times c1 sine of mu
x, plus-- all of this is in this parentheses right here--
plus c2-- instead of cosine of negative mu x, we know
this identity. So we can just write this as
cosine of mu x as well, because cosine of minus x is the
same thing as cosine of x. Plus i times c2-- sine of minus
mu x is the same thing as minus sine of x. So actually, let's take this--
take the minus sine out there. So minus sine of mu x. And let's see, it seems like
we're getting to a point that we can simplify it even more. We can add the two cosine terms.
So we get the general solution, and I know this
problem requires a lot of algebraic stamina, but as long
you don't make careless mistakes you'll find it
reasonably rewarding, because you'll see where things
are coming from. So we get y-- the general
solution is y is equal to e to the lambda x, times-- let's
add up the two cosine mu x terms. So it's c1 plus c2
times cosine of mu x. And let's add the two sine of
mu x terms. So plus i-- we could call that c1i-- that's
that-- minus c2i times sine of mu x. And we're almost done
simplifying. And the last thing we can
simplify is-- well you know c1 and c2 are arbitrary
constants. So let's just define this
as another constant. I don't know, let's call it--
I'll just call it c3, just to not confuse you by using c1
twice, I'll call this c3. And now this might be a little
bit of a stretch for you, but if you think about it, it
really makes sense. This is still just a
constant, right? Especially if I say, you know
what, I'm not restricting the constants to the reals. c could be an imaginary
number. So if c is an imaginary number,
or some type of complex number, we don't even
know whether this is necessarily an imaginary
number. So we're not going to make
any assumptions about it. Let's just say that this is some
other arbitrary constant. Call this c4, and we can worry
about it when we're actually given the initial conditions. But what this gives us, if we
make that simplification, we actually get a pretty
straightforward, general solution to our differential
equation, where the characteristic equation
has complex roots. And that I'll do it
in a new color. That is y is equal to e to
the lambda x, times some constant-- I'll call it c3. It could be c1. It could be c a hundred
whatever. Some constant times cosine of
mu of x, plus some other constant-- and I called it c4,
doesn't have to be c4, I just didn't want to confuse it with
these-- plus some other constant times the
sine of mu of x. So there's really two things
I want you to realize. One is, we haven't done
anything different. At the end of the day, we still
just took the two roots and substituted it back into
these equations for r1 and r2. The difference is, we just kept
algebraically simplifying it so that we got
rid of the i's. That's all we did. There was really nothing new
here except for some algebra, and the use of Euler's
formula. But when r1 and r2 involved
complex numbers, we got to this simplification. So in general, as you get the
characteristic equation, and your two roots are mu plus
or minus-- oh sorry, no. Your two roots are lambda plus
or minus mu i, then the general solution is
going to be this. And, if you had to memorize it,
although I don't want you to, you should be able to
derive this on your own. But it's not too hard to-- and
actually if you ever forget it, solve your characteristic
equation, get your complex numbers, and just substitute
it right back in this equation. And then with the real numbers,
instead of the lambda and the mu, with the real
numbers, just do the simplification we did. And you'll get to the
exact same point. But if you're taking an exam,
and you don't want to waste time, and you want to be able
to do something fairly quickly, you can just remember
that if I have a complex root, or if I have complex roots to
my characteristic equation, lambda plus or minus mu i, then
my general solution is e to the lambda x, times some
constant, times cosine of mu x plus some constant, times
sine of mu x. And let's see if we can do
a problem real fast that involves that. So let's say I had the
differential equation y prime prime plus the first
derivative plus y is equal to 0. So our characteristic equation
is r squared plus r plus 1 is equal to 0. Let's break out the
quadratic formula. So the roots are going to be
negative B, so it's negative 1 plus or minus the square root
of B squared-- B squared is 1-- minus 4 times AC-- well A
and C are both 1-- so it's just minus 4. All of that over 2, right? 2 times A. All of that over 2. So the roots are going to be
negative 1 plus or minus the square root of negative
3 over 2. Or we could rewrite this
as, the roots r. r is equal to negative 1/2 plus
or minus-- well we could rewrite this as i times the
square root of 3, or square root of 3i over 2. Or we could write this is
as square root of 3 over 2 times i. Actually, that's the best
way to write it, right? You just take the i out. So that takes the negative 1
out, and you are left with square root of 3 over 2. So these are the roots. And now we if we want the
general solution we just have to throw this right
back into that. And we'll have our
general solution. Let me write that
right down here. So our general solution will be
y is equal to e to the real part of our complex conjugate. So e to the the minus
1/2 times x, right? This is our lambda. Times some constant-- I'll write
c1 now-- c1 times cosine of the imaginary part without
the i-- so cosine of square root of 3 over 2x, plus c2
times sine of square root of 3 over 2x. Not too bad. We had complex roots and it
really didn't take us any more time than when we had
two real roots. You just have to realize this. And then you have to just
find-- use the quadratic equation to find the complex
roots of the characteristic equation. And realize that
this is lambda. This minus 1/2 is lambda. And that the square root of
3 over 2 is equal to mu. And then substitute back into
this solution that we got. Anyway, in the next video, I'll
do another one of these problems and we'll actually have
initial conditions, so we can solve for c1 and c2. See you in the next video.",Complex roots of the characteristic equations 2 | Second order differential equations | Khan Academy,"What happens when the characteristic equation has complex roots?

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/complex-roots-characteristic-equation/v/complex-roots-of-the-characteristic-equations-3?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/complex-roots-characteristic-equation/v/complex-roots-of-the-characteristic-equations-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,jJyRrIZ595c
Solvingthelogisticdifferentialequationpart1_KhanAcademy-j_Taf2Tgggo.en.csv,"-Let's now attempt to find a solution for the logistic differential equation. And we already found
some constant solutions, we can think through
that a little bit just as a little bit of review
from the last few videos. So if this is the t-axis
and this is the N-axis we already saw that if N
of zero, if a time equals zero, or a population
is zero, there is no one to reproduce and this
differential equation is consistent with that, because
if N is zero, this thing is going to be zero, and
so our rate of change is going to be zero with respect to time, so our population just won't change. It'll just stay at zero. Which is nice because that's what would actually happen in a real population. That gives us the constant solution that N of t is equal to zero, that's one solution of this differential equation,
not that interesting. A zero population will
never grow or change. The other constant solution is what if our population started at the maximum of what the environment could sustain, and in that situation this term is
going to be K over K, which is one. One minus one is zero,
and so in there, the population would also not change. It would just stay at K,
and so the rate of change would just stay at zero. So that's another constant solution, that we start at the maximum
population and then this differential equation tells us a scenario that never changes. But we said, hey look,
there could be something interesting that happens
if our initial condition, which we called N sub-not,
that's our N of zero. Time equals zero if we
started someplace in between, maybe closer, much below
our eventual ceiling I guess, because if we're a lot below our eventual ceiling this thing is going to be a small fraction, this
thing is going to be close to one, and so the
rate of change is going to be pretty close to
being proportional to N. When we're thinking that,
it might look something like that, as N increases,
our rate of change increases, but then as N
approaches K this thing is going to approach
one, this thing is going to approach zero, and so
it's going to overwhelm this and our rate of change is going to approach zero. So we can imagine a scenario where we asymptote towards K. Let's see if we can
solve this to find this, this N of t to find the actual analytic expression for this N
of t right over here. Because this is interesting,
this is what could be used to model populations that would be more consistent with a Malthusian mindset. So let's see if we can do that. To do that we just have
to realize this is a separable differential equation, and we're assuming is a function
of d, we're going to solve for an N of t that satisfies this. So we just have to separate
it from the explicit ts, but there are no explicit ts here, so it's quite easy to do. So what I'm going to
do is I'm going to take this part right over here,
and I'm going to divide both sides by that. I'm going to leave the r
on the right hand side, it'll make things, I
think, a little bit easier as we try to solve for N of t. So let me just do that. So this is going to be equal to one over N times one minus N over K. One minus N over K
times dN dT, times dN dT is equal to r. Another way we could think about it, well actually, let me just continue
to tackle it this way. So we get that, and now
what I want to do is take the anti-derivative
of both sides with respect to t. Well, this is pretty straightforward. That's just going to be
rt times some constant, but what's this going to be? This is kind of this messy thing. And maybe if we could
break this out, if we can expand this into two
fractions, do a little bit of partial fraction expansion, maybe we can come up with an expression that's a little bit easier to find
the anti-derivative of. I'm hoping that I can find an A and a B where A over N plus B
over one minus N over K is equal to this business. Is equal to one over N
times one minus N over k. Let's see if we can find an A and a B. This is just partial
fraction expansion, if this looks unfamiliar to you I encourage you to review that part on Khan Academy. Do a search for partial fraction expansion on Khan Academy. So how do we do it? We'll just add these two right over here. If we take the sum,
right over here, this is going to be A times this, which is A minus A over K N plus B times
this, plus BN, over the product of these two. So it's just going to be N times one minus N over k. One way to think about
it, I just multiplied the numerator and the
denominator of this one by one minus N over k,
so A times one minus N over k is that, and times one minus N over k is that, and I
multiplied the numerator and the denominator of this both by N, BN and N times that, and then I added the two now that I had the same denominator. So that's just adding fractions with unlike denominators. It's going to be equal to this, one over N times one minus N over K. Now we can try to think about what is A and B going to be equal to? What can they be equal to? Well I have a constant term here. I don't have any N term here. I could say that maybe I have a zero times an N, and that actually
helps things a little bit, because maybe we could
say that this thing, that this plus this,
which are the coefficients on N, are going to sum
up to zero, and that this, which is rA, is
going to be equal to one. That's pretty nice. So we can say that A is equal to one, A is equal to one, and that
if A is equal to one we have negative one over
K, negative one over K, plus B is equal to zero. Well what's B going to be? Well B would be equal to one over K. So we can re-write this
as, we can re-write it as one over N plus one over K, plus one over K over, let me just do this, over one minus N over K, and then times dN dt, dn dt is equal to r. So I just did a little
partial fraction expansion, and I like giving myself a little bit of real estate, let me clear this out. You can rewind the video and review that, if you find it necessary, so let's do that. So how does this help us? Well, hey, you probably
might be recognizing the anti-derivative of
one over N, and you might even see this. So let's just think
through this a little bit. We know the anti-derivative of one over N is a natural log, just did a new color, is a natural log of the
absolute value of N. We can see the derivative
of that with respect to N is equal to one
over N, and if we were to find the derivative
of this with respect to t, derivative with
respect to t of the natural log of the absolute
value of N is equal to, that's going to be the derivative of this with respect to N times
the derivative of N with respect to t, times dN dt. We could do the same thing over here. Notice, I have an expression. What would be the derivative
of this expression right over here? It would be negative one over K, if I'm talking the derivative with respect to N, it would be negative one over K. I have a positive one
over K here, and I could even make it negative. I can turn this, I can
clear this out of the way, instead of having a positive there I could have, I guess I could
say a double negative. So a double negative,
I haven't changed the value of if, and notice,
now this is the derivative of this, which makes it very
nice for u-substitution, or you might be already
used to doing this thing in your head, and so we
know that the derivative with respect to N. Let me write this in a new color. We know that the derivative
with respect to N of the natural log of one minus
N over K, once again this comes straight out of the chain rule, it's going to be the derivative
of this with respect to N, which is negative one over K times the derivative of this
whole thing with respect to this thing, which is times one over one minus N over K, which is exactly what we have over here. But if I were to take
the derivative of this with respect to t, so the derivative with respect to t of the
natural log of one minus N over K, it's going to be the derivative of this with respect to N, which is that, which is what we just found. It's going to be this. So copy and paste. It's going to be that,
it's going to be that. Times the derivative
of N with respect to t, just straight out of
the chain rule, dN dt. Well notice, we have a
dN dt, we can multiply it times each of these things. Actually, why not, let's just do that just to make it clear, cause this really isn't so much differential equations, but sometimes some of the calculus that we learned not too long ago, and even frankly some of the algebra, it's
nice to not skip steps. So if I distribute this, edit, paste. Woops, I wanted to copy and paste. So, copy and paste, so
I have that, and then I have, I can copy and
paste, so that I'm just distributing this
business right over here. So I get that, now let me
clean it up a little bit. So I have that right
over here, and of course we have this being equal to r. If I take the anti-derivative
of this with respect to t, well I'm just going to get this minus this right over that. So let's do that. Let's take the anti-derivative
with respect to t, so the left hand side I'm going to get the natural log, the anti-derivative of that with respect to t is the natural log of the absolute value of N, and then minus the anti-derivative of
this with respect to t is the natural log of
the absolute value of one minus N over K is equal to, oh, and let's not forget we're going to have some constant here,
I want to find a pretty general solution, let's call it C one, is equal to the anti-derivative
of this with respect to t is r times t, maybe
plus some other constant, plus some other constant, just like that. Now I'm going to assume
that my N of t meets this assumption right over here. So I'm going to assume, assume N of t is going to be less than K and greater than zero. That means that this thing,
this N is always going to be positive, and if N is always between zero and K, that means that this thing is always going to be positive. So that helps me clear
things up a little bit. Actually let me do it in this color. That helps me get rid of that, helps me get rid of that. I can instead throw some parentheses here, and why don't I subtract
the C one from both sides. That would get rid of
it here, so edit, cut, and paste, so I have the C one there. I know I'm overwriting my own work, which is not making it look
as clean as possible. I'm just trying to clean
it up a little bit. I have an arbitrary constant
that I haven't really solved for yet minus another constant. Let me just call this some other constant, let me just call it a general C. So let me just call this C, so clear, and I'm just
going to call that C. I am just going to call that C. And I could even simplify
this a little bit, but actually I just realized I'm thirteen minutes into this video,
which is longer than I like to do. So let's continue this in the next video. I was getting excited
because I'm so close. I'm so close to solving for an N of t that satisfies our logistic
differential equation. Very, very exciting.",Solving the logistic differential equation part 1 | Khan Academy,"Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/logistic-differential-equation/v/solving-logistic-differential-equation-part2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/logistic-differential-equation/v/logistic-differential-equation-intuition?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,j_Taf2Tgggo
"Infix,PrefixandPostfix-jos1Flt21is.en.csv","Hello everyone. In this lesson we're
going to talk about one important and really interesting topic in computer
science where we find application of stack data structure, and this topic is evaluation of arithmetic
and logical expressions. So how do we write an expression. I have
written some simple arithmetic expressions here. An expression can have constants,
variables and symbols that can be operators or paranthesis and all these components
must be arranged according to a set of rules, according to
up grammer and we should be able to parse and
evaluate expression according to this grammer All these expressions that I had written
here have a common structure. We have an operator
in between two operands. Operand by definition is an object or
value on which operation is performed. In this expression 2+3, 2 and 3
are operands and plus is operator, in the next
expression A and B are operands and - is operator, in the third expression this asterisk is
for multiplication operation so so this is operator the first operand P is a variable and a second operand 2 is a constant. This is the most common way
of writing an expression, but this is not the only way. This way of
writing an expression in which we write an operator in between operands is
called infix notation. Operand doesn't always have
to be a constant or variable. Operand can be an expression itself. In
this fourth expression that I have written here, one of the operands of multiplication
operator is an expression itself, another operand is a constant
We can have a further complex expression. In this fifth expression that I have
written here both the operands of multiplication operator are expressions. We have three operators
in this expression here, for this first plus operator P and Q these variables P and Q are operands, for the
second plus operator we have R and S and for
this multiplication operator the first operand is this expression
P + Q and the second operand this expression R + S. While
evaluating expressions but multiple operators,
operations will have to be performed in certain order like in the fourth example we will first
have to perform addition and then only we can perform
multiplication. In this fifth expression first we will have to perform these two
additions and then we can perform the multiplication. We will come back to evaluation but if
you can see in all these expressions operator is placed in between operands. This is the syntax that we are following.
One thing that I must point out here. Throughout this lesson, we're going to
talk only about binary operators. An operator that require exactly two
operands is called a binary operator. Technically we can
have an operator that may require just one operand or maybe more than two
operands but we're talking only about expressions with binary operators. Okay so let's now see
what are the rules we need to apply to evaluate such expressions written in this
syntax that we are calling infix notation. For an expression with just one operator there's no problem we
can simply apply that operator. For an expression with multiple
operators and no parenthesis like this, we need to
decide an order in which operator should be applied. In
this expression if we will perform the addition
first then this expression will reduced to 10 * 2 and will
finally evaluate as 20 but if we will perform the
multiplication first then this expression will reduce to  4 + 12 and would finally evaluate to 16. So basically, we can look at this
expression in two ways. We can say that operands for addition
operator are 4 and 6 and operands for multiplication are
this expression 4 + 6 and this constant 2 or we can say that
all operands for multiplication are 6 and 2 and operands for addition
operation are four and this expression  6 * 2. There is some ambiguity here but if you
remember your high school mathematics this problem is the resolved by
following operator precedence rules In an algebraic expression this is the
precedence that we follow. First preference is given to
paranthesis or brackets, next preference is given to exponents.
I'm using this symbol for exponent operator so if I have to write 2^3, I'll be writing it
something like this. In case of multiple exponentiation
operator, we apply the operators from right to left, so if I have something like this then
first this right most exponentiation operator will
be applied. So this will reduce to 512. If you will apply the left operator
first, then this will evaluate to 64. After exponents, next preference is given
to multiplication and division and if it's between multiplication and
division operators then we should go from left to right. After
multiplication and division we have addition and subtraction and here also we go from left to right. If
we have an expression like this with just addition and subtraction
operators, then we will apply leftmost operator first because to precedence of these operators
is same and this will evaluate to 3. If you will apply the plus operator first this
will evaluate as 1 and that will be wrong. In the second expression 4 + 6 * 2
that I had written here if we will apply operator precedence
then multiplication should be performed first, if we want to perform addition first
then we need to write this 4 + 6 within parenthesis and
now adddition will be performed first because precedence of parenthesis is greater.
I'll example of another complex expression and try to evaluate it, just to make things further clear. So I have an
expression here. In this expression we have four operators one multiplication and one division one
subtraction and one addition. Multiplication and division
have higher precedence between these two multiplication and
division which have seen precedence, we will pick
the left one first. So we will first reduced this expression
like this and now we will perform the division and now we have only subtraction and
addition. So we will go from left to right and this
is what we will finally get. This right to left and left to right
rule that i have wriiten here for operators with equal precedence is
better termed as operator associativity. If in case of multiple operators with
equal precedence we go from left to right then
we say that operators are left associative and if we go from right
to left we say that operators are right
associative. While evaluating an expression in infix
form, we first need to look at precedence and then to resolve conflict among
operator with equal precedence, we need to see associativity. All in all
you need to do so many things just to parse and evaluate an infix expression. The use of parenthesis
becomes really important because that's how we can control to
order in which operation should be performed. Paranthesis add explicit intent that
operations should be performed in this order and also improved readability of
expression. I have modified this third expression, we
have some parenthesis here now, and most often we write infix
expressions like this only using a lot of paranthesis. Even
though infix notation is the most common way of writing expressions. It's not very easy to parse and evaluate
an infix expression without ambiguity, so mathematicians and logicians studied
this problem and came up with 2 other ways of writing
expressions that are paranthesis free and can be passed
without ambiguity without requiring to take care of any of
these operator precedence or associativity rules, and these two ways are postfix and prefix
notations. Prefix notation was proposed earlier in your 1924 by Polish logician. Prefix notation is also known as polish
notation. In prefix notation, operator is placed
before operands. This expression 2 + 3 in infix will be written as + 2 3
in prefix. Plus operator will be placed before the
two operands  2 and 3. P - Q will be written as - P Q. Once again just like infix notation,
operand in prefix notation doesn't always have to be a
constant and variable, operand can be a complex prefix
notation itself. This expression A + B * C in
infix form will be written like this in prefix form.
I'll come back to how we can convert infix expression to prefix. First have a look at the third
expression in prefix form, for this multiplication operator the 2
operands are variables B and C and the three elements
are in prefix syntax. First we have to operater and then we
have the two operands. The operands for addition operator are variable A
and this prefix expression  asterisk B C. In infix expression, we need
to use parenthesis because and operands can possibly be associated
with 2 operators, like in this third
expression in infix form B can be associated with both plus and multiplication. To resolve this conflict we need to use
operator precedence and associativity rules, or use parenthesis to explicitly
specify association but in prefix form and also
in Postfix form that we will discuss in some time. An operand can be associated with only one
operator so we do not have this ambiguity, while
parsing and evaluating prefix and postfix expressions we do not
need extra information we do not need all the operator
precedence and associativity rules. I'll come back to how we can evaluate
prefix notation. I'll first define postfix notation. Postfix notation is also known as
reverse polish notation. This syntax was proposed in 1950s
by some computer scientists. In postfix notation operator is placed
after operands. Programmatically, postfix expression is
easiest to parse and least costly in terms of time
and memory to evaluate, and that's why this was
actually invented. Prefix expression can also be evaluated
in similar time and memory but the algorithm to parse  and evaluate
postfix expression is really straightforward and intuitive and
that's why its preferred for computation using machines. I'm going to write postfix for these
expressions that had written earlier in other forms this first expression 2 + 3 in Postfix will be 2 3 +. Two separate the operands we can use a
space or some other delimiter like a comma, that's how you would
typically store prefix or postfix in a string When you'll have to write a
program. this second expression in postfix will
be P Q -. So as you can see in Postfix form we are
placing the operator after the operands. This third expression in
Postfix will be A B C * and then +. For this multiplication operator, operands
are variables B and C and for this edition, operands are variable A and this postfix
expression B C *. We will see efficient algorithms to
convert infix to prefix or postfix in later lessons. For now let's not
bother how we will do this in a program, let's quickly see how
we can do this manually. To convert an expression from infix to
any of these other two forms, we need to go step-by-step just a way we
would go in evaluation I have picked this expression
A + B * C in infix form. We should first convert the
part that should be evaluated first, so we should go in order of precedence.
We can also first put all the implicit parenthesis. So here
we will first convert this B * C so first we are doing this conversion
for multiplication operator, and then we will do this conversion for addition
operator. We will bring addition to the front, so
this is how the expression will transform. We can use
parenthesis and in intermediate steps and once we had
done that all the steps we can erased a parenthesis. Let's now do the same thing for postfix,
we will first do the conversion for multiplication operator and then in next
step we will do it for addition and now
we can get rid of all the parenthesis. Parenthesis surely adds readability to any of these
expressions to any of these forms but if we are not
bothered about human readability, then for a machine we are actually
saving some memory that would be used to store
paranthesis information. Infix expression definitely is most
human readable, but we prefix and postfix are good for
machines. So this is infix, prefix and postfix
notation for you. In next lesson, we will discuss
evaluation of prefix and postfix Notations. This is it for this lesson. 
Thanks for watching.","Infix, Prefix and Postfix","See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described Infix , Prefix and Postfix notations which are ways of writing arithmetic and logical expressions. Infix notation is the most common way of writing expressions. Prefix and Postfix notations are other two ways that are good for machines because they can be parsed and evaluated easily. This is one important topic in computer science where we find application of stack data structure. 

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,jos1Flt21is
Determinantafterrowoperations_Matrixtransformations_LinearAlgebra_KhanAcademy-kpG7xySkivg.en.csv,"I have a matrix A. It is an n by n matrix. And let me just write
its rows like this. Let me just write it as r1. We could call them row vectors
maybe. r2, I'm not doing it too formally. This is just to save
on writing. And then it has an ith
row, ri, and then you can keep going . That's an i right there. Then it has a jth row, rj, and
you keep going and you get to the nth throw. It has n rows and n columns. So you get to rn
just like that. That is my matrix. Just to make sure you get what
I'm saying, so if I have a kth r-sub-k is equal to ak1. Maybe I'll write
it as a vector. ak2 all the way to akn. So this is just your standard
representation. I wrote it this way because
we're just going to be dealing with rows in this video and it
makes our notation a little bit easier. Let me focus on these
two rows right here. And let me define another
matrix B that is also an n by n matrix. And it's identical to matrix
A except for one row. So it's identical to matrix
A except for one row. You have r1 just like
that; it's the same as that one there. r2, keep going, go down to our
ri, even that one's identical. But rj I've now replaced. I'm replacing rj with rj minus
a scalar multiple of ri. Minus c times ri. So minus a scalar multiple
of that. I've replaced rj with that. So this is equivalent to the
row operations we do we did our Gaussian Elimination, or
when we put things in reduced row echelon form. And everything else in this
matrix is the same as A. It's all the way down to rn. This is our matrix B. So let's think about what the
determinant of B is going to be equal to. I'll do it in blue. Well, you could immediately say
that B is equivalent to-- Well, you can imagine
two vectors. You can imagine two matrices. One matrix that look
like this. One matrix that look like r1,
r2, all the way down ri, all the way down to rj. And then you keep going
down to rn. That's one matrix, which you
may have already noticed is identical to A. That's one matrix. Then you could have another
matrix here that looks like this. It's identical everywhere. r1, r2, ri. Some dots there to show you I
might have skipped some rows. Skip some more rows. And then you have c
times times ri. c times ri. Let me do that in a
different color. This is ri right here. And then you just keep
going down to rn. Now, the determinant of B, you
could view as the determinant of this guy. Let me write this here. The determinant of B is equal to
the determinant of this guy plus the determinant
of this guy. Hopefully, you remember a couple
of videos ago, that if one matrix-- Let's have two
matrices that are identical in every way except for one row. So these two matrices are
completely identical except for what's going on
on the jth row. Here you have a r-sub-j. Here you have a c
times r-sub-i. So it's a scalar multiple
of a row that you had up here, this guy. So this is ri, this
is the ith row. Here you have an ri, here
you have an ri. But here you have another
version of r row, scalar multiple of ri, while
here you have an rj. Now, if you have another matrix
that is essentially identical to these two
matrices, except for this one row. And in that one row, it looks
like the addition of these two matrices-- and let me
put a negative here. So if you kept this matrix
completely identical, but if you were to replace it with
the sum of these two rows. So rj minus c times ri, you'll
get this matrix right here. You'll get matrix B. And we learned that the
determinant of B is equal to the determinant of this
guy and that guy. Remember, B is not the sum
of these two matrices. B is identical to these two
matrices, except for that one row where B's jth row is
equivalent to the jth row of this guy, plus the jth
row of that guy. And when I talk about adding
rows, you're just adding their corresponding elements. So I could rewrite this so this
row would look like-- The first term would be aj1
minus c times ai1. That would be the first
term in that row. The second term of that
row would be aj2 minus c times ai2. And it would go all the
way to ajn minus ca-sub-in, the nth column. So that's all it
means by that. So the determinant of B is equal
to the determinant of this plus the determinant
of this. The determinant of this,
this thing right here is our matrix A. This is going to be the
determinant of A. And what's the determinant
of this? Well, let's break this down
a little bit more. The determine of this
is equal to what? This is completely equivalent to
A, except one of its rows-- Sorry, this is completely
equivalent to this matrix. Not equivalent to A. Be very careful. Don't listen to everything
I say. It's not equivalent to A. The difference is that
A has an rj here. This guy has a minus
c times ri. So this is equivalent
to this matrix. It's completely equivalent to
this matrix right here. Let me do it like this. So you have an r1, r2, keep
going, and you have an ri, then you have another ri. Let me clean this
up a little bit. Let me clear this out
just so I have some space to work with. You have an ri. You have that ri there. Then you have another ri. You have another
ri right there. You have another ri. So the jth row has
an ri there. Then you keep going and
you have an r-sub-n. These two guys are completely
equivalent except for this guy has a minus c times
the jth row. Right? That's what this was,
right here. This is the jth row. Everything we're doing
is in the jth row. This has a minus c times
the jth row. So the determinant of this guy
right here-- Let me just be clear that I'm only taking
the determinant of this guy right here. It's going to be equal to minus
c times the determinant of-- let me write it this
way --minus c times the determinant of r1, r2. You have your first ri. And then in the jth row
you have another version of the ri. And then you go down
to r-sub-n. So times that determinant. This is just the determinant
of this. I've added brackets and
straight lines. And we saw this a couple
of videos ago. If you have a matrix, you just
multiply one of its rows by a scalar, in this case minus c. It's equivalent to minus c. The determinant of the new
matrix is equal to minus c times the determinant
of your matrix. That's all I'm saying
right here. But what is the determinant
of this matrix? You might have already noticed
that it has duplicate rows. It has an ri, and then in the
ith row, then it has another ri in the jth row. Remember, we kind of decomposed
this B matrix right here as the sum of-- Or its
determinant can be described as the determinant of the
sum of these two things. B isn't the sum of
these two things. Every other element is identical
to every other element in each of these guys. But this guy right here,
he has duplicate ri's. And what do we know about the
determinant of a matrix with duplicate entries? The determinant is zero. So this entry right
here is zero. Minus c times 0, 0. So the determinant of this
whole thing is 0. So the big take-away right here
is that the determinant of B is equal to just the
determinant of this thing, which was the determinant
of A. This is a very big take-away. It's going to make our
life very easy. The determinant of B is equal
to the determinant of A. So if you start with some
matrix, and you replace the jth row in this example,
but any row. If you replace any row with
that row minus some scalar multiple of another row-- we
picked ri in this case, that would be ri --the determinant
will not be changed. You have to be very particular
about how you say it because, obviously, if you just
multiplied something by a scalar-- if you were to change
its determinant, or if you do other things. If you just take a row, if you
take the jth row, and you replace it with the jth row
minus c times the ith row times some other row, which is
equivalent to just a row operation that we have been
doing, then it will not change your determinant. Which is a very big take-away
because now we can carefully do some row operations and know
that the determinant will not change.",Determinant after row operations | Matrix transformations | Linear Algebra | Khan Academy,"What happens to the determinant when we perform a row operation

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-upper-triangular-determinant?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-duplicate-row-determinant?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,kpG7xySkivg
DataStructures-ArraysvsLinkedLists-lC-yYCOnN8Q.en.csv,"In our previous lesson, we introduced you
to linked list data structure and we saw how linked lists solve some of the problems that
we have with arrays. So now the obvious question would be which
one is better - an array or a linked list. Well, there is no such thing as one data structure
is better than another data structure. One data structure may be really good for
one kind of requirement, while another data structure really good for another kind of
requirement. So, it all depends upon factor like what is
the most frequent operation that you want to perform with the data structure or what
is the size of the data and there can be other factors as well. So, in this lesson, we will compare these
two data structures based on some parameters, based on the cost of operations that we have
with these data structures. So, all in all we will comparatively study
the advantages and disadvantages and try to understand in which scenario we should use
an array and in which scenario we should use a linked list. So, i will draw two columns here, one for
array and another for linked list and the first parameter that we want to talk about
is the cost of accessing an element. Irrespective of the size of an array, it takes
constant time to access an element in the array. This is because an array is stored as one
contiguous block of memory. So, if we know the starting address or the
base address of this block of memory. Let us say what we have here is an integer
array and base address is 200. The first byte in this array is at address
200. Then let's say if we want to calculate the
address of element at index i, then it will be equal to 200 plus i into size of an integer
in bytes. So, size of an integer in bytes is typically
4 bytes. So, it will be 200 + 4*i. So, if 0th element is at address 200, if we
want to calculate the address for element at index 6, it will be 200 plus 6 into 4 which
will be equal to 224. So, knowing address of any element in an array
is just this calculation for our application. In terms of big-oh notation, constant time
is also called O(1). So, accessing an element in an array is O(1)
in terms of time complexity. If you are not aware of big-oh notation, check
the description of this video for a tutorial on time complexity analysis. Now, in a linked list, data is not stored
in a contiguous block of memory. So, if we have a linked list something like
this, let's say we have a linked list of integers here, then we have multiple blocks of memory
at different addresses. Each block in the linked list is called a
node and each node has two fields, one to store the data and one to store the address
of the next node. So, we call the second field, the link field. The only information that we keep with us
about a linked list is the address of the first node which is also called the head node. And this is what we keep passing to all the
functions also, the address of the head node.To access an element in the linked list at a
particular position, we first need to start at the head node or the first node, then we
go to the second node and see the address of the third node. In the worst case,
to access the last element in the list, we will be traversing all the elements in the
list. In the average case, we will be accessing
the middle element may be. So, if n is the size of he linked list, n
is the number of elements in the linked list, then we will traverse n/2 elements. So, the time taken in the average case also
is proportional to the number of elements in the linked list. So, we can say that the time complexity in
average case is O(n).So, on this parameter, cost of accessing an element, array scores
heavily over linked list. So iif you have a requirement where you want
to access elements in the list all the time, then definitely array is a better choice. Now, the second parameter than we want to
talk about is memory requirement or memory usage. with an array, we need to know the size of
the array before creating it, because arrays is created as one contiguous clock of memory. So, array is of fixed size. What we typically do is create, we create
a large enough array and some part of the array stores our list and some part of the
array is vacant or empty so that we can add more elements in the list. For example, we have an array of 7 integers
here and we have only 3 integers in the list. Rest 4 positions are unused. There would be some garbage value there. With linked list, lets say we have, let's
say we have this linked list of integers, there is no unused memory. We ask memory for one node at a time, so we
do not keep any reserved space. But we use extra memory for pointer variables
and this extra memory requirement for a pointer variable in a linked list can not be ignored. In a typical architecture let's say, integer
is stored in 4 bytes and pointer variable also takes 4 bytes. So, if you see, the memory requirement for
this array of 7 integers is 28 bytes. And the memory requirement for this linked
list would be 8*3, where 8 is the size of each node, 4 for integer and 4 bytes for the
pointer variable. So, this is also 24 bytes. If we add one more element to the list in
the array, we will just use one more position, while in linked list we will create one more
node, and will take another 8 bytes, so this will be 32 bytes. Linked list would fetch us a lot of advantage
if the data, the data part is large in size. So, in this case, we had a linked list if
integers, so integer is only 4 bytes. What if we had a linked list in which the
data part was some complex type that took 16 bytes. So, 4 bytes for the link and 16 bytes for
the data, each node would have been 20 bytes. An array of 7 elements for 16 bytes of data
would be, 16 byte for each element would be 112 bytes. And linked list of 4 would be only 80 bytes. So, it all depends. If the data part of a list takes a lot of
memory, linked list will definitely consume lot less memory. Otherwise, it depends what strategy we are
choosing to decide the size of the array. At any time how much array we keep unused. Now, one more point with memory allocation,
because arrays are created as one contiguous block of memory, sometimes when we may want
to create a really really large array, then may be memory may not be available as one
large block, but if we are using linked list, memory may be available as multiple small
blocks. So, we will have this problem of fragmentation
in the memory. Sometimes, we may get many small units of
memory, but we may not get one large block of memory. This may be a rare phenomenon, but this is
a possibility. So, this is also where linked list scores. Because arrays have fixed size, once array
gets filled and we need more memory, then there is no other option than to create a
new array of larger size and copy the content from the previous array into the new array. So, this is also one cost which is not there
with linked list. So, we need to keep these constraints and
these requirements in mind when we want to decide for one of these data structures for
our requirement. Now, the third parameter that we want to talk
about is cost of inserting an element in the list. Remember when we are talking about arrays
here, we are also talking about the possible use of array as dynamic list. So, there can be 3 scenarios in insertion. First scenario will be when we want to insert
an element at the beginning of the list. Let's see we want to insert number 3 at the
beginning of the list. In the case of arrays, we will have to shift
each element by one position towards the higher index. So, the time taken will be proportional to
the size of the list. So, this will be O(n). Let's say n is the size of the list. This will be O(n) in terms of time complexity. In the case of linked list, inserting a node
in the beginning will mean only creating a new node and adjusting the head pointer and
the link of this new node. So, the time taken will not depend upon the
size of the list, it will be constant. So, for linked list, inserting an element
at the beginning is O(1) in terms of time complexity. Inserting an element at end for an array,
let's say we are talking about dynamic array, a dynamic list in which we create a new array
if it gets filled. If there is space in the array, we just write
to the next higher index of the list. So, it will be constant time. So, time complexity is O(1) if array is not
full. If array is full, we will have to create a
new array and copy all the previous content into new array which will take O(n) time where
n is the size of the list. In the case of linked list, adding an element,
inserting an element in the end will mean traversing the whole list and then creating
a new node and adjusting the links. So, time taken will be proportional to n. I will use this color coding for linked list. Here n is the number of elements in the list. Now, the third case will be when we want to
insert in the middle of the list at soem nth position or may be some ith position. Again in the case of arrays, we will have
to shift elements. For the average case, we may want to insert
at the mid position in the array. So, will have to shift n/2 where n is the
number of elements in the list. So, the time taken is definitely proprotional
to n in average case. So, complexity will be O(n). For linked list also we will have to traverse
till that position and then only we can adjust the links. Even though we will not have any shifting,
we will have to traverse till that point and in the average case, time taken will be proportional
to n and the time complexity will be O(n). If you see , deleting an element will also
have these 3 sceanrios, and the time comeplxity for deleting for these 3 sceanrios will also
be the same. And the final point, the final parameter that
I want to talk about is which one is easy to use and implement. An array definitely is a lot easier to use. Linked list implemetation especially in Cor
C++ is more prone to errors like segmentation fault and memory leaks. It takes good care to work with linked lists. So, this was arrays vs linked lists. In our next lesson, we will implement linked
list in C or C++. We will get our hands dirty with some real
code. So this is it for this lesson. Thanks for Watching !",Data Structures: Arrays vs Linked Lists,"See complete series on data structures here:
https://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P
In this lesson we will compare arrays with linked lists based on various parameters and understand the cost of various operations with these data structures.

Lessons on big-oh notation can be found in these series on time complexity:
https://www.youtube.com/playlist?list=PL2_aWCzGMAwI9HK8YPVBjElbLbI3ufctn",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,lC-yYCOnN8Q
Realcoordinatespaces_Vectorsandspaces_LinearAlgebra_KhanAcademy-lCsjJbZHhHU.en.csv,"When you get into
higher mathematics, you might see a
professor write something like this on a board,
where it's just this R with this extra
backbone right over here. And maybe they write R2. Or if you're looking
at it in a book, it might just be
a bolded capital R with a 2
superscript like this. And if you see this,
they're referring to the two-dimensional
real coordinate space, which sounds very fancy. But one way to
think about it, it's really just the
two-dimensional space that you're used to dealing
with in your coordinate plane. To go a little
bit more abstract, this isn't necessarily
this visual representation. This visual
representation is one way to think about this
real coordinate space. If we were to think about it
a little bit more abstractly, the real R2, the two-dimensional
real coordinate space-- let me write this down-- and the
two-dimensional real coordinate space. And just to break
down the notation, the 2 tells us how many
dimensions we're dealing with, and then the R tells us this
is a real coordinate space. The two-dimensional
real coordinate space is all the possible
real-valued 2-tuples. Let me write that down. This is all possible
real-valued 2-tuples. So what is a 2-tuple? Well, a tuple is an
ordered list of numbers. And since we're talking
about real values, it's going to be ordered
list of real numbers, and a 2-tuple just says it's
an ordered list of 2 numbers. So this is an ordered list
of 2 real-valued numbers. Well, that's exactly
what we did here when we thought about a
two-dimensional vector. This right over
here is a 2-tuple, and this is a
real-valued 2-tuple. Neither of these have
any imaginary parts. So you have a 3 and a 4. Order matters. We view this as a different
2-tuple than, say, 4, 3. And even if we were trying
to represent them in our axes right over here,
this vector, 4, 3, would be 4 along
the horizontal axis, and then 3 along
the vertical axis. And so it would look
something like this. And remember, we don't have
to draw it just over there. We just care about its
magnitude and direction. We could draw it
right over here. This would also be 4, 3,
the column vector, 4 3. So when we're talking
about R2, we're talking about all of the
possible real-valued 2-tuples. So all the possible
vectors that you can have, where each of its components--
and the components are these numbers
right over here-- where each of its components
are a real number. So you might have 3, 4. You could have
negative 3, negative 4. So that would be 1,
2, 3, 1, 2, 3, 4, might look something
like-- actually, I should make the scale
a little bit bigger, so it looks the
same-- 1, 2, 3, 4. So it might look
something like that. So that would be the
vector, negative 3-- let me write a little bit
better than that-- negative 3, and negative 4. So if you were to take all
of the possible 2-tuples, including the vector 0,
0-- so it has no magnitude, and you could debate what its
direction is right over there-- you take all of those
combined, and then you have created your
two-dimensional real coordinate space. And that is referred to as R2. Now, as you can
imagine, the fact that we wrote this
2 here-- we had to specify-- it's like, hey,
well, could I put a 3 there? And I would say, absolutely,
you could put a 3 there. So R3 would be the
three-dimensional real coordinate space. So 3D real coordinate space. And so you would
view this as all the possible
real-valued 3-tuples. So, for example, that
would be a member of R3. And let me actually
label these vectors just so we get in
the habit of it. So let's say we
call this vector x. Let's say we have a vector
b, that looks like this. Negative 1, 5, 3. Both of these would
be members of R3. And if you want to see some
fancy notation, a member of a set-- so this
is a member of R3-- it is a real-valued 3-tuple. Now you say, well, what
would not be a member of R3? Well, this right over
here isn't a 3-tuple. This right over here
is a member of R2. Now, you might be able
to extend it in some way, add a zero or
something, but formally, this is not a 3-tuple. Another thing that would not
be a member of R3-- let's say someone wanted to make
some type of vector that had some imaginary parts in it. So let's say it had i, 0, 1. This is no longer real-valued. We have put an imaginary--
this number up here has an imaginary part. So this is no longer
a real-valued 3-tuple. And what's neat about
linear algebra is, we don't have to stop there. R3 we can visualize, we
can plot these things. In your previous
mathematical career, especially if you have some
type of a hologram or something, it's not hard to visualize
things in three dimensions. But what's neat is that we
can keep extending this. We can go into 4, 5, 6,
7, 20, 100 dimensions. And obviously there it becomes
much harder, if not impossible, to visualize it. But then we can at least
represent it mathematically with an n-tuple of vectors. And so if we were to talk
about a real coordinate space generally, you'll often
see the notation Rn, with n as a superscript. So this right over here is an
n-dimensional real coordinate space.",Real coordinate spaces | Vectors and spaces | Linear Algebra | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/e/scaling_vectors?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/adding-vectors?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/vector-introduction-linear-algebra?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,lCsjJbZHhHU
Matrices-Reducedrowechelonform2_Vectorsandspaces_LinearAlgebra_KhanAcademy-lP1DGtZ8Wys.en.csv,"I figure it never hurts getting
as much practice as possible solving systems of
linear equations, so let's solve this one. What I'm going to do is I'm
going to solve it using an augmented matrix, and I'm going
to put it in reduced row echelon form. So what's the augmented matrix
for this system of equations? Three unknowns with
three equations. I just have to do
the coefficents. So the coefficients of x
terms are just 1, 1, 1. Coefficients of the y terms
are 1, 2, and 3. Coefficients of the z terms
are 1, 3, and 4. And let me show that
it's augmented. And then they equal
3, 0, and minus 2. Now, I want to get this
augmented matrix into reduced row echelon form. So the first thing, I have
a leading 1 here that's a pivot entry. Let me make everything else in
that column equal to a 0. So I'm not going to change
my first row. So it will just be a 1, a 1, a
1, and then my dividing line, and then I have a 3. Now, to zero this out, let me
just replace the second row with the first row minus
the second row. So 1 minus 1 is 0. 1 minus 2 is-- actually, a
better thing to do, because I eventually want this to be 1
anyway, let me replace this row with this row, with the
second row minus the first row instead of the first row
minus the second row. I can do it either way. So the second row minus
the first row. So 1 minus 1 is 0. 2 minus 1 is 1. 3 minus 1 is 2. And then 0 minus 3 is minus 3. Now I want to also
zero this out. So let me replace this
guy with this equation minus that equation. So 1 minus 1 is 0. 3 minus 1 is 2. 4 minus 1 is 3. Minus 2 minus 3 is minus 5. Fair enough. So I got my pivot entry here. I have another pivot
entry here. It's to the right of this one,
which is what I want for reduced row echelon form. Now, I need to target this
entry and that entry. I need to zero them out. So let's do it. So I'm going to keep my
second row the same. My second row is 0, 1, 2, and
then I have a minus 3, the augmented part of it. And to zero this guy out, what
I can do is I can replace the first row with the first row
minus the second row. So I get 1 minus 0 is 1. 1 minus 1-- there's
a bird outside. Let me close my window. So where was I? I'm replacing the first row with
the first row minus the second row. So 1 minus 0 is 1. 1 minus 1 is 0. 1 minus 2 is minus 1. And then 3 minus minus 3, so
that's equal to 3 plus 3, so that's equal to 6. 1 minus 0 is 1. 1 minus 1 is 0, negative 1. And then 3 minus negative
3, that's 6. I always want to make sure I
don't make a careless mistake. Now, let me get rid of this
entry right here. Let me zero that out. So let me replace the third row
with the third row minus 2 times the second row. So we have 0 minus--
well, 2 times 0. That's just going to be 0. 2 minus 2 times 1, that's
2 minus 2, that's 0. 3 minus 2 times 2, that's
3 minus 4, or minus 1. And then finally, minus 5
minus 2 times minus 3. Let me write that down. That's minus 5, minus minus 6. That's minus 5 plus
6 is equal to 1. I really wanted to make
sure I didn't make a careless mistake there. So that is equal to 1. So I'm almost done, but I'm
still not in reduced row echelon form. This has to be a positive
1 in order to get there. It can't be anything
other than a 1. That's just the style of reduced
row echelon form. And then these guys up here
have to be zeroed out. Well, the easy thing to do,
let me just multiply this equation by minus 1. So then this becomes a plus 1
and that becomes a minus 1. And then I just need to zero
out these two guys up here. So let's do it. So my equation, I'm going to
keep my third row the same. My third row is now
0, 0, 1, minus 1. And now I want to zero
this guy out. So what I can do is I could set
my first row equal to my first row plus my last row,
because if these two add up, they're going to
be equal to 0. So what do I get? 1 plus 0 is 1. 0 plus 0 is 0. Minus 1 plus 1 is 0. 6 plus minus 1 is 5. Now, I want to zero
this row out. And to zero this row out, what
I can do is I'll replace it with the second row minus
2 times the first row. So 0 minus 2 times
0 is just 0. 1 minus 2 times 0 is just 1. 2 minus 2 times 1 is 0. Minus 3 minus 2 times
negative 1. Let me write that down. Minus 3 minus 2 times minus 1. I don't want to make
a careless mistake. So what is that equal to? This is equal to minus 3 minus
minus 2, or minus 3 plus 2, which is equal to minus 1. So that's equal to minus 1. And now I have my augmented
matrix in reduced row echelon form. My pivot entries are the only
entries in their columns. Each pivot entry in each
successive row is to the right of the pivot entry before it. And actually, I have
no free variables. Every column has
a pivot entry. So let's go back from the
augmented matrix world and kind of put back our
variables there. So what do we get? We get x plus 0y plus
0z is equal to 5. That's that row right there. We get 0x plus 1y plus 0z
is equal to minus 1. That's that row right there. And then finally, we have
0x plus 0y plus 1z is equal to minus 1. That's that row right there. And just like that, we've
actually solved our system of three equations with
three unknowns. That's the solution
right there. I just wrote it in this way
just so you can see the corresponding, but obviously,
I could have written them closer to their equal sign. So hopefully, you found
that vaguely useful.",Matrices: Reduced row echelon form 2 | Vectors and spaces | Linear Algebra | Khan Academy,"Another example of solving a system of linear equations by putting an augmented matrix into reduced row echelon form

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/matrices_elimination/v/matrices-reduced-row-echelon-form-3?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/matrices_elimination/v/matrices-reduced-row-echelon-form-1?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,lP1DGtZ8Wys
Lineartransformationexamples-RotationsinR2_LinearAlgebra_KhanAcademy-lPWfIq5DzqI.en.csv,"Let's see if we can create a
linear transformation that is a rotation transformation
through some angle theta. And what it does is, it takes
any vector in R2 and it maps it to a rotated version
of that vector. Or another way of saying it, is
that the rotation of some vector x is going to be equal
to a counterclockwise data degree rotation of x. So this is what we want to
construct using our new linear transformation tools. And just to make sure that we
can actually even do this, we need to make sure there's an
actual linear transformation. I'll just do that visually. I actually don't even
have a mathematical definition for this yet. This is about as good
as I've given you. So let me just draw some really
fast axes right here-- I have to draw them a little
bit neater than that-- so that's my vertical axes. That's my horizontal axes. I could call this one
the x1 and I'll call this the x2-axis. In the last video I called
them the x and the y. This is the first component
of our vectors. This is our second component
in our vectors, and so if I have some vector x like
that, we know that a counterclockwise rotation of
this will look like this. I'll do the rotations in blue. It will look like this,
where this angle right here is theta. So this right here is
the rotation for an angle of theta of x. That's what this vector
right here is. So what do we have to do to
make sure that this is a linear combination? We have to show two things. We have to show that the
transformation, so the rotation through theta of the
sum of two vectors-- it's equivalent to the sum of each of
their individual rotations. The rotation of the vector
x plus the rotation of the vector y. And I'll just show that
to you visually. This is the vector x. Let's say that the vector y
looks something like-- let me draw the original vectors
in yellow. So let's say the vector
y looks like that. So that's y. So what's x plus y? So let's put heads to tails. If we just shift y up here,
that's also vector y, not drawn in standard position, but
x plus y would then look pretty close to this. Let me draw it a little
bit neater. x plus y would look like that. That would be the
vector x plus y. And what would its rotation
look like through an angle of theta? What's rotation if you just
rotate this guy through an angle of theta? I'm just approximating--
it would look something like this. This right here would be the
rotation of data through an angle of theta of x plus y. Now let's see if that's the same
thing as if we rotate x and rotate y and then
add them together. So what's y if we rotate it
through an angle of theta? If we rotate y through an angle
of theta, it's going to look something like-- this
is all approximation. I should be doing it with a
ruler and a protractor. Maybe it looks something like
this-- the rotation of y through an angle of
theta right there. That's the same theta
that I've been doing the whole time. Let me make it in a color that
you can actually see. So that's that vector
right there. The rotation of x
was right there. So if we add the rotation of x
plus the rotation of y-- I'm kind of fudging it a little bit,
but I think you get the idea-- so this is the rotation
of x plus the rotation of y. You actually get the rotation
of x plus y. So at least visually it satisfied that first condition. Now the second condition that we
need for this to be a valid linear transformation, is that
the rotation through an angle of theta of a scaled up version
of a vector should be equal to a scaled up version
of the rotated vector. And I'll just do another visual
example here, so that's just my vertical axis. That's my horizontal axis,
and let me say that this is my vector x. Now let's draw a scaled
up version of it. So a scaled up version of x
may be just like x, but it gets scaled up a little
bit, so it goes all the way out here. So this is my c times x and now
I'm going to rotate that through an angle of theta. So if we rotate that through an
angle of theta, you'll get a vector that looks something
like this. Rotating it counterclockwise. So this vector right here is
the rotation by an angle of theta counterclockwise
of c, x. That's what this
is right there. Now what happens if we take
the rotation of x first? So if we just rotate x first,
we're going to get this vector right here. So this right here is just a
rotation for an angle of theta of x and then we scale it up. What we see it's the same thing
of this scaled up to that when you multiplied by c,
than this thing is going to scale up to that when you
multiply it by c. So at least visually,
I've shown you that this is satisfied. So rotation definitely is a
linear transformation, at least the way I've shown you. Now let's actually construct
a mathematical definition for it. Let's actually construct a
matrix that will perform the transformation. So I'm saying that my rotation
transformation from R2 to R2 of some vector x can be defined
as some 2 by 2 matrix. And it's 2 by 2 because it's a
mapping from R2 to R2 times any vector x. And I'm saying I can do this
because I've at least shown you visually that it is indeed
a linear transformation. And how do I find A? Well, I start with-- since this
where's mapping from R2-- I start with the identity
matrix in R2 which is 1, 0, 0, 1. Its columns are the basis
vectors for R2, right? We refer to this one as e1 and
this column vector as e2. And to figure out A, we
essentially just perform the transformation on each
of these columns. So let me write that. So A-- our matrix A-- is going
to be-- the first column of it is going to be a rotation
transformation performed on the vector 1, 0. And our second column is going
to be the rotation transformation-- there's a
little data here that I'm forgetting to write-- times the
second column vector-- or the transformation of
that one, 0, 1. This is what our A is
going to look like. So how do we figure out
what these are? I'm trying to get to some
numbers and this doesn't get me there, so let's
try to do that. Let me draw some
more axes here. Let me pick a different color,
I'll do it in grey. So that is my vertical axes. That is my horizontal axes. I could call this the x1-axis
and this is the x2-axis. Now this basis vector e1,
what does it look like? Well, it's 1 in the horizontal
x1 is 1 and x2 is 0. So this is 1 out here, e1
will look like that. Let me do it in a more
vibrant color. e1 will look like that
right there. Now let me write what e2 looks
like. e2 would look like-- I'll do it in yellow--
e2 would look like this right here. e2-- that's that vector, 0, 1. This is 1 in our x2 direction. Now if I rotate e1 by an angle
theta, what will it look like? So if I rotate e1 in angle theta
-- I'll do it in this color right here-- it will still
have a length of 1, but it'll be rotated like
that and that angle right there is theta. So this right here is the
rotation of e1 by theta. These are all vectors,
of course. That's what that is. Now what are the coordinates
for this? Or how do we specify
this new vector? Well we can break out a little
bit of our trigonometry. Its new x1 coordinate-- we
could call it-- or its x1 entry is going to be this
length right here. So if we draw a right triangle,
it is the side that is adjacent to theta. This side is a hypotenuse
which is length 1. So how do we figure
out this side? If we call this side
the adjacent side. The adjacent side over
the hypotenuse. Adjacent-- let me write
it over here. Adjacent over the hypotenuse
which is just 1, is equal to the cosine of theta. That comes from SOH-CAH-TOA
Let me write that. Cosine is adjacent over
hypoteneuse, and the adjacent side is going to be our new
x1 coordinate, right? Well, we can obviously ignore
that 1, a divided by 1 is equal to cosine theta, which
means that a is equal to cosine theta, which means that
this length of our rotated vector is equal to
cosine theta. Its horizontal component, or its
horizontal coordinate is equal to cosine of theta. Now, what's its vertical
component going to be? Its vertical component is going
to be this height right here, which is the same thing
as that height right there. Or we could say sine of theta--
and call this the opposite-- sine of theta is
equal to the opposite over 1. So this is going to be equal
to sine of theta, right? This over 1, which is just
this, is equal to sine of theta from SOH-KAH-TOA. So this vertical component is
equal to sine of theta. So the new rotated basis vector
could be written as cosine of theta for its x
component, or for its horizontal component. And sine of theta for its
vertical component. This is the new rotated
basis vector. Now what about e2? We could do something very
similar there. e2 is going to end up looking like this
when you rotate it by an angle of theta. It's going to look like that. That angle right
there is theta. We can create a little right
triangle right there. And so if we want to know its
x coordinate-- so now we're concerned with the rotation
through an angle of theta of e2, which is that right
there, of e2. This is e2 right there. This is going to be
equal to what? Its new x coordinate or its
first entry in this vector if we wanted to draw it in
standard position. Or the point that it is
specifying is going to be equal to this distance, which
is equal to this distance on this triangle. But the coordinate is
going to be the negative of this, right? If this is a distance of
2, this coordinate is going to be minus 2. So what's this? We have an angle. It's a right triangle. This is opposite to the angle. Opposite over 1, opposite
over hypotenuse is equal to cosine of theta. So this opposite side is equal
to the cosine of theta. So the x-coordinate
right here. Oh sorry, my trigonometry
is messing up. This is the opposite
side-- SOH-CAH-TOA. Sine is equal to opposite--
let me write it-- sine of theta is equal to opposite
over hypotenuse. So the sine of theta-- the sine
of this angle is equal to the opposite over
the hypotenuse. The hypotenuse is 1, has length
1 because these are the standard basis vectors. So this is equal to
the sine of theta. Now, this distance is equal to
the sine of theta that's going in the negative direction, so
it's going to be equal to the minus sine of theta. And then what it's new y
component going to be of this rotated version of e2? Well, we just look right here. We have our angle. This is adjacent to the angle. This adjacent side over the
hypotenuse-- adjacent over 1-- which is just this is adjacent
right here is just going to be equal to cosine of theta. So its new y-coordinate going
to be cosine of theta. So when we apply the
transformation to each of our basis vectors, we get A is equal
to the transformation applied to e1 which is cosine
of theta and sine of theta. And the transformation applied
to e2, which is minus sine of theta times the cosine
of theta. So now this is a big result. We've now been able to
mathematically specify our rotation transformation
using a matrix. So we can now say that the
rotation transformation-- and it's a transformation from R2
to R2-- it's a function. We can say that the rotation
through an angle of theta of any vector x in our domain is
equal to the matrix cosine of theta, sine of theta, minus
sine of theta, cosine of theta, times your vector in your
domain, times x1 and x2. And you might be saying, oh Sal,
we did all this work and that's kind of neat, but
how do I apply this? I still have all these cosines
of thetas and sines of thetas there-- how I do it? Well, what you do is, you pick
an angle you want to rotate to, and just evaluate these, and
you'll just have a normal matrix with numbers in it. So let's say we wanted to rotate
through an angle of 45 degrees some vector. Well, this is going to
be equal to what? We just apply, or we evaluate
each of these ratios at 45 degrees. A cosine of 45 degrees is the
square root of 2 over 2. Sine of 45 degrees is square
root of 2 over 2. Sine of 45 is the square
root of 2 over 2. We have a minus there--
so minus the square root of 2 over 2. And then cosine is just square
root of 2 over 2. So we multiply it times
our vector x. So this matrix, if we
multiply it times any vector x, literally. So if we have some coordinates
right here. And let's say that I were to
have a bunch of vectors that specify some square here. Let me see if I can
do it properly. Well, maybe it has some triangle
here--maybe that will be a little easier
for me to draw. I'll do a square. Let's say it has some square
here in my domain. So this is in R2. If I literally multiply this
times each of the basis vectors, or actually all of the
vectors that specify this set here, I will get, when I
transform it, I'll get a rotated version of this
by 45 degrees. Just to draw it, I'll actually
draw a little 45 degree angle right there. And then it will map it to this
image right there, which is a pretty neat result. And if you ever attempted to
write any computer game that involves marbles or pinballs
going around, this is a very useful thing to know-- how
you rotate things. In the future, we'll talk
about other types of transformations. But this is a super useful one
and this is super hard to do. And I remember the first time I
wrote a computer program to try to do this type of thing,
I just did it by hand. But when you have this tool at
your disposal, all you have to do is evaluate this matrix at
the angle you want to rotate it by, and then multiply it
times your position vectors. And so obviously you
have a bunch of position vectors here. But here you can just do it
times the vertices and then you can say OK. And everything else is just
connect the dots between them. And then you have your
rotated image. And just to be clear, these are
the points specified by a set of vectors and
I always want to make this clear, right? This point right here is
specified by some position vector that looks like that. When you apply the rotation on
45 degrees of that vector, this vector then looks
like this. And the vector that specified
this corner right here-- we'll do it in a different color--
that specified this corner right here, when you're rotated
by 45 degrees, then becomes this vector. And the vector that specified
that corner over there, that now becomes this vector. That's what actually being
mapped or actually being transformed. Anyway, hopefully you found
this pretty neat. I thought this was, at least for
me, the first really neat transformation. And you can already start
thinking about how to extend this into multiple dimensions
especially three dimensionals. If you ever try to actually do
it by hand, three dimension rotation becomes
very confusing. But in the next video we'll
actually figure out a way to do three dimensional rotations
around certain axes.",Linear transformation examples: Rotations in R2 | Linear Algebra | Khan Academy,"Linear Transformation Examples: Rotations in R2

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/rotation-in-r3-around-the-x-axis?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/linear-transformation-examples-scaling-and-reflections?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,lPWfIq5DzqI
Unitvectors_Matrixtransformations_LinearAlgebra_KhanAcademy-lQn7fksaDq0.en.csv,"We covered the idea of vector
length many, many videos ago. And I realize that I forgot to
cover an important topic. This topic's going to be useful
when we do some types of transformation -- actually,
the projections that I'll do in the next video. The notion that I forgot
to do is the notion of a unit vector. And all this is, is a vector
that has a length of 1. Has length and we've
defined length. It has a length of 1. So if something is a unit
vector, let's say that u here is a unit vector, and
it's a member of Rn. Then that means that if we have
u, u looks like this, has n components, u2 all
the way to un. We know what the length
of this is, right? We know that the length of u,
sometimes called the norm of u, it's just equal to the square
root of the squared sums of all of its components. And if you think about it, this
is just an extension of the Pythagorean theorem,
to some degree. So it's u1 squared plus
u2 squared all the way to un squared. And it's the square
root of that. If this is a unit vector, if
this is a unit vector, so this is a unit vector, that implies
that the length of u will be equal to 1. And that doesn't matter in what
dimension space we are. This could be R100
this could be R2. For it to have a unit vector in
any of those spaces, their length is 1. The next obvious question
is, how do you construct a unit vector? Let's say that I have
some vector, v. And let's say it's not
a unit vector. It's v1 v2 all the way to vn. And I want to turn it into some
vector u that is a unit vector, that just goes in
the same direction. So u will go in the same
direction, as v, but the length of u is going
to be equal to 1. How do I construct this
vector u here? What I could do is, I could
take the length of v. I could find out what the length
of v is, and we know how to do that. We just apply this definition
of vector length. And what happens if I figure out
the length of v, and then I multiply the vector
v times that? What if I make my u, what if I
say u is equal to, 1 over the length of v times v itself? What happens here? If I take the length
of this thing right here, what do I get? The length of u is equal to
the length of this scalar. Remember this is just
some number, right? It's equal to this scalar,
and I'm assuming v is a non-zero vector. The length of whatever this
scalar number is times v. And we know that we can take
this scalar out of the formula, we can show that --
I think I've shown it in a previous video -- that the
length of c times v is equal to c times the length of v. Let me write that down. And that's essentially what
I'm assuming right here. That if I take the length of c
times some vector, v, that is equal to c times the
length of v. I think we showed this when we
first were introduced to the idea of length. So we know that this is going
to be equal to 1 over the length of vector v -- that's my
c -- times, so this thing right here is that thing right
there, times this thing, times the length of vector v. Well what's this going
to be equal to? 1 over something times
that something. Well this is just going
to be equal to 1. So that's all a unit
vector is. If you want to find a unit
vector -- or sometimes it's called a normalized vector
-- that goes in the same direction as some vector v, you
just figure out the length of v using the definition
of vector length in Rn. And then multiply 1 over that
length times the vector v -- and this is just a scalar
-- and then you get your vector u. Let me to do an example, just to
make sure you get the idea. Let's say I have some vector
v and it's in R3. Let's say it's 1, 2, minus 1. What is the length of v? The length of v is equal to the
square root of 1 squared plus 2 squared plus minus 1
squared, and that is equal to the square root of 1 plus 1 plus
4 -- square root of 6. So that is the length of v. If I want to construct a
normalized vector u that goes in the same direction as v, I
can just define my vector u as being equal to 1 over the length
of v -- 1 over the square root of 6 -- times v. So times 1, 2, minus 1. Which is equal to 1 over square
root of 6, 2 over square root of 6, and minus 1
over the square root of 6. And I'll leave it for you to
verify that the length of u is going to be equal to 1. I'll just throw out one
other idea here that you'll often see. When something is a unit vector,
instead of using this little arrow on top of the
vector, they'll often write a unit vector with a little hat
on top of it, like that. That signifies that we're
dealing with a unit vector. And for those of you've taken
your vector calculus, or have done a little bit of
engineering, you're probably familiar with the vectors
i, j, and k. And the reason why they have
this little hat here is because these are all
unit vectors in R3. They're members of R3 and
they're all unit vectors. These are actually the
basis vectors in R3. And for those of you who
have been watching my transformation videos, these are
equivalent to the vectors e1 -- which I could write
with a hat on it, really -- e2, and e3. Which are the standard
basis vectors in R3. Now that you've been exposed to
it, now I can start to use the idea of a unit vector
in future videos.",Unit vectors | Matrix transformations | Linear Algebra | Khan Academy,"What unit vectors are and how to construct them

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/introduction-to-projections?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/rotation-in-r3-around-the-x-axis?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,lQn7fksaDq0
Transposeofavector_Matrixtransformations_LinearAlgebra_KhanAcademy-lSoaMCNKfAg.en.csv,"Say I have a vector v that's
a member of Rn. So it's got n components
in it. So v1, v2, all the
way down to vn. I've touched on the idea before,
but now that we've seen what a transpose is, and
we've taken transposes of matrices, there's no reason
why we can't take the transpose of a vector, or a
column vector in this case. So what would v transpose
look like? Well if you think of this as a n
by 1 matrix, which it is, it has n rows and one column. Then what are we going to get? We're going to have a 1 by n
matrix when you take the transpose of it. And this one column is going
to turn into the one row. So you're going to have
it be equal to v1, v2, all the way to vn. And you might remember, we've
already touched on this in a lot of matrices before. Let's say that's
some matrix A. We called the row vectors of
those matrix, we called them the transpose of some column
vectors, a1 transpose, a2 transpose, all the way
down to an transpose. In fact, not so many videos ago
I had those row vectors, and I could have just called
them the transpose of column vectors, just like that. And that would have been, in
some ways, a better way to do it because we've defined all
these operations around column vectors, so you could always
refer to the transpose of the transpose and then do some
operations on them. But anyway, I don't want
to get too diverted. But let's think a little bit
of what happens when you operate this vector, or you take
some operation of this vector with some
other vectors. So let's say I have another
vector here that's w, and it's also a member of Rn. So you have w1, w2, all
the way down to wn. There's a couple of things that
we're already, I think, reasonably familiar with. You could take the dot
product of v and w. v dot w is equal to what? It is equal to v1 times w1, plus
v2, w2, and you just keep going all the way to vn, wn. This is the definition
of the dot product of two-column vectors. Now, how can we relate that to
maybe the transpose of v? Well, we could take the
transpose of v-- let me write it this way-- what is-- if I did
a matrix multiplication, so I did v1, v2, all the way
to vn-- so this is v transpose, that's v transpose--
and I take the product of that with w. So I have w1, w2, all
the way down to wn. Now, if I view these as just
matrices-- this is w right here-- if I viewed these just
as matrices, is this matrix-matrix product
well-defined? Over here I have a
n by 1 matrix. Here I have a 1-- sorry. Here, the first one I have is
a 1 by n matrix-- I have one row and n columns. And here I have an
n by 1 matrix. I have n rows and
only one column. So this is well-defined. I have the same number
of columns here as I have rows here. This is going to result
in a 1 by 1 matrix. And what's it going
to look like? It's going to equal to v1 times
w1-- let me write it like this-- v1, w1 plus
v2, w2-- it's only going to have one entry. We could write it is as just
a 1 by 1 matrix like that. Let me just do it-- 1 by
1 matrix like that. v1, w1 plus v2, w2-- let me
just, I could write v2 there-- plus all the way to vn, wn. That's what it'll be. It'll just be a 1 by 1 matrix
that looks like that. But you might notice that
these two things are equivalent. So we can make the statement
that v dot w, which is the same thing as w dot v, these
things are equivalent to-- v dot w is the equivalent of-- let
me just write it once over here-- v dot w is the same thing
as the transpose of v, v transpose times w as just
a matrix-matrix product. So if you view v as a matrix,
take its transpose and then just take that matrix and take
the product of that with w, it's the same thing
as v dot w. So that's an interesting
take-away. I guess you could argue somewhat
obvious, and we've already been referring this--
when I defined matrix-matrix products, I kind of said you're
taking the dot product of each row with each column,
and you can see that it really is, it's really the dot product
of the transpose of that row with each column, but
you got the general idea. But let's see if we can build
on this a little bit. Let's say I have some matrix
A-- let me save our little outcome that I have there--
let's say I have some-- let me get a good color here-- let's
say I have some matrix A and it's an m by n matrix. Now if I were to multiply that
times a vector x, so I'm going to multiply it by some vector
x-- and let's say that x is a member-- let me write it this
way-- x is a member of Rn. So it has n elements. Or another way you could view it
is, it's an n by 1 matrix. Now when I take the product of
these, what am I going to get? Or another way to say it is,
what is the vector Ax? When I take this product, I'm
just going to get another vector, and what's
it going to be? It's going to be an
m by 1 vector. So we could say that Ax
is a member of Rm. It's going to have m
elements, right? If this was equal to, if you
said that Ax equal to, I don't know, let's say it's equal to
z, z would have m elements. You would have z1, z2, all
the way down to zm. And I know that because you have
m rows in A, and you have only one-- well you could
say this is m by n, this is n by 1. The resulting product will be
m by 1, or it'll be a vector that is a member of Rm-- it'll
have exactly m elements. Now, if that's a vector of Rm,
then the idea of dotting this with another member of
Rm is well-defined. So let's say that I have
another member of Rm. Let's say I have a vector y. Let's say y is also
a member of Rm. This has-- the vector Ax, the
vector that you get when you take this product, has m
elements, this has m elements. So the idea of taking their dot
product is well-defined. Let me write that. So you could take Ax, that's a
vector, and now we are dotting it with this vector right here
and we'll get a number. We just take each of their
terms, multiply the corresponding terms, add
them all up, and you get their dot product. But what is this equal to? We can just use this little,
I guess you could call it a result, that we got earlier
on in this video. Using this result, the dot
product of two matrices-- or sorry, the dot product of two
vectors is equal to the transpose of the first vector
as a kind of a matrix. So you can view this
as Ax transpose. This is a m by 1,
this is m by 1. Now this is now a 1 by m
matrix, and now we can multiply 1 by m matrix
times y. Just like that. Now what is this
thing equal to? We saw a while ago, I think it
was two or three videos ago, we saw that if we take the
product of two matrices and take its transpose, that's equal
to the reverse product of the transposes. You switch the order and then
take the transposes. So this is going to be equal
to-- this purple part-- is going to be equal to
x transpose times A transpose times y. And this is just matrix
products. These are matrix products. These aren't necessarily
vector operations. We're treating all of these
vectors as matrices. And of course, we're treating
the matrix as a matrix. So what is this equal to? Well we know that matrix
products are associative. You could put a parentheses--
right now we have a parentheses around there from
there, but we could just take another association. We could say that that is equal
to x transpose times these two matrices
times each other. This is a vector, but
you can represent it as an m by 1 matrix. Times A transpose y. Just like that. Now let's think about what
A transpose y is. Let's think about it. A transpose-- we have
here a is m by n. What is A transpose? A transpose is going to
be n by m, right? It's going to be an m by n. So this is an m by n. And then what is this vector
y going to be? This is an m by 1. So when you take this product,
you're going to get an n by 1 matrix. Or you could imagine this as a
vector that is a member of Rn. So this is a member of Rn. The entire product is going to
result with a vector that's a member of Rn. And of course, it's well-defined
because this is a 1 by n vector right there. Now we can go back
to our identity. We have the transpose of some
vector times some other vector-- they have the same,
well I guess you could say this has as many horizontal
entries as this guy has vertical entries,
just like that. So what is this equal to? We just use that identity. This is equal to, the just
regular x in this case, instead of x transpose
we'll just have x. So this is equal to x dot--
remember, we just un-transpose it, I guess you can view it that
way-- dot A transpose y. Which is a pretty
neat outcome. We got this being
equal to that. We can kind of change the
associativity, although we have to essentially change the
order a bit and take the transpose of our matrix. So let me re-write that
just so that you can remember the outcome. So the two big outcomes of this
video are-- I'll rewrite this one up here-- v dot w is
equal to the matrix product of v transpose times w. And if I have some matrix--
you assume all of these matrix-vector products are
well-defined and all the dot products are well-defined. If I have Ax dot y, some other
vector y, this is equivalent to x dot-- you're essentially
putting the A with the other vector-- A transpose times y. And this just might be a useful
outcome, or a useful result, that we could build
upon later in the linear algebra playlist.",Transpose of a vector | Matrix transformations | Linear Algebra | Khan Academy,"Transpose of a column vector. Matrix-matrix products using vectors

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-rowspace-and-left-nullspace?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-transposes-of-sums-and-inverses?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,lSoaMCNKfAg
Showingthatinversesarelinear_Matrixtransformations_LinearAlgebra_KhanAcademy-mr9Tow8hpCg.en.csv,"I've got a transformation T. When you apply the
transformation T to some x in your domain, it is equivalent to
multiplying that x in your domain, or that vector. by the matrix A. And let's say we know the linear
transformation T can be-- that's transformation
matrix when you put it in reduced row echelon form-- it is
equal to an n by n identity matrix, or the n by
n identity matrix. Well this alone tells
a lot of things. First of all, if when you put
this in reduced row echelon form, you get a square
identity matrix. That tells us that the
original matrix had to be n by n. And it also tells us that T is
a mapping from Rn to Rn. And we saw in the last video,
all of these are conditions, especially this one right here,
for T to be invertible. So If we know that this is
true-- T is a linear transformation, it's a reduced
row echelon form of the transformation matrix of the
identity matrix right there-- we know that T is invertible. Let's remind ourselves what it
even means to be invertible. To be invertible means that
there exists some-- we used the word function before, but
now we're talking about transformations, they're
really the same thing. So let's say there exists some
transformation-- let's call it T-inverse like that, or T to
the minus 1-- such that the composition of T-inverse with
T is equal to the identity transformation on your domain,
and the composition of T with T-inverse is equal to the
identity transformation on your codomain. Just like that. And just to remind you what this
looks like, let's draw our domains and codomains. Our domain is Rn, and our
codomain is also Rn. So if you take some vector
in your domain, apply the transformation T-- you're
going to go into your codomain, so that is T. And then if you apply the
T-inverse after that, you're going to go back to
that original x. So this says, look,
you apply T and then you apply T-inverse. You're just going to get back
to where you started. It's equivalent to the identity
transformation. Just like that. This is saying if you start
here in your codomain, you apply this inverse
transformation first, then you apply your transformation,
you're going to go back to the same point in your codomain. So it's equivalent to the
identity transformation in your codomain. It just happens to be in this
case that the domain and the codomain are the same set, Rn. Now we know what a
transformation-- what it means to be invertible. we know what
the conditions are for invertibility. So this begs the
next question. We know this guy is a linear
transformation, in fact that's one of the conditions
to be able to represent it as a matrix. Or any transformation that can
be represented as a matrix vector product is a linear
transformation. So this guy's a linear
transformation. But the question is, is
T-inverse a linear transformation? Let's review what the two
conditions are that we need to have to be a linear
transformation. So we know T is a linear
transformation. So we know that if you apply
the transformation T to two vectors-- let's say x and y--
if we apply to the sum of those two vectors, it is equal
to the transformation of the first vector plus the
transformation of the second vector. That's one of the conditions,
or one thing that we know is true for all linear
transformations. And the second thing we know
is true for all linear transformations is, if we take
the transformation of some scaled version of a vector in
our domain, it is equal to the scaling factor times
the transformation of the vector itself. These are both conditions for
linear transformations. So let's see if we can prove
that both of these conditions hold for T-inverse, or
this guy right here. So to do this, let's do this
little exercise right here. Let's take the composition of
T with T-inverse of two vectors, a plus b. Remember, T-inverse is a mapping
from your codomain to your domain, although they're
both going to be Rn in this case. But T-inverse maps from
this set to that set. Let's write it up here. T-inverse is a mapping from your
codomain to your domain. Although it looks identical,
just like that. OK, so what is this going
to be equal to? Well we just said, by definition
of your inverse transformation, this is going
to be equal to the identity transformation on
your codomain. So assuming these guys are
members of your codomain, in this case Rn, this is just going
to be equal to a plus b. This thing, the composition
of T with its inverse, by definition is just the identity
transformation on your codomain. So this is just whatever
I put in here. If I put in an x here,
this would be an x. If I put in an apple here,
this would be an apple. It's going to be the identity
transformation. Now what is this equal to? Well I could use the same
argument to say that this right here is equal to the
identity transformation applied to a. And I'm not writing the identity
transformation, I'm writing this. But we know that this is
equivalent to the identity transformation. So we could say that is
equivalent to the composition of T with the inverse applied
to a, and we could say that this is the equivalent to the
identity transformation, which we know is the same thing as T,
the composition of t with T-inverse applied to b. So we can rewrite this thing
right here as being equal to the sum of these two things. In fact we don't even
have to rewrite it. We can just write it's equal
to-- this transformation is equal to this. And maybe an easier way for you
to process it is, we could write this as T of the T-inverse
of a plus b, is equal to T of the T-inverse
of a plus T of the T-inverse of b. And this should-- I don't know
which one your brain processes easier, but either of these,
when you when you take the composition of T with T-inverse,
you're going to be left with an a plus b. You take the composition of
T with T-inverse, you're left with an a. You take the composition of T
with T-inverse, you're just left with a b there. So in either case you get a
plus b-- when you evaluate either side of this expression
you'll get the vector a plus the vector b. Now what can we do? We know that T itself is a
linear transformation. And since T is a linear
transformation, we know that T applied to the sum of two
vectors is equal to T applied to each of those vectors
and summed up. Or we can take it
the other way. T applied to two separate
vectors-- so we call this one vector right here, and this
vector right here. So in this case I have a T
applied to one vector, and I'm summing it to a T applied
to another vector. So it's this right here, which
we know is equal to T applied to the sum of those
two vectors. So this is T applied to the
vector T-inverse of a-- let me write it here-- plus
T-inverse of b. It might look a little
convoluted, but all I'm saying is, this looks just like this. If you say that x is equal to
T-inverse of a, and if you say that y is equal to
T-inverse of b. So this looks just like that. It's going to be equal to the
transformation T applied to the sum of those two vectors. So it's going to equal the
transformation T applied to the inverse of a plus
T-inverse of b. I just use the fact that T
is linear to get here. Now what can I do? Let me let me simplify
everything that I've written right here. So I now have-- let
me rewrite this. This thing up here, which is
the same thing as this. T, the composition of T, with
T-inverse, applied to a plus b is equal to the composition--
or actually not the composition, just T-- applied to
two vectors, T-inverse of a plus T-inverse of vector b. That's what we've
gotten so far. Now we're very close to proving
that this condition is true for T-inverse, if we can
just get rid of these T's. Well the best way to get rid
of those T's is to take the composition with T-inverse
on both sides. Or take the T-inverse
transformation of both sides of this equation. So let's do that. So let's take T-inverse of this
side, T-inverse of that side, should be equal to
T-inverse of this side. Because these two things
are the same thing. So if you put the same thing
into a function, you should get the same value
on both sides. So what is this thing on
the left-hand side? What is this? This is the composition-- let me
write it this way-- this is the composition of T-inverse
with T, that part, applied to this thing right here. I'm just changing the
associativity of this-- applied to T-inverse of the
vector a plus the vector b. That's what this left
hand side is. This part right here, T-inverse
of T of this, these first two steps I'm just writing
as a composition of T-inverse with T applied
to this right here. That right there is the same
thing as that right there. So that was another
way to write that. And so that is going to be equal
to the composition of T-inverse with T-- I'll write
that in the same color-- a composition of T-inverse
with T. That's this part right here,
which is very similar to that part right there-- of this stuff
right here, of T-inverse of a plus T-inverse
of the vector b. Now by definition of what
T-inverse is, what is this? This is the identity
transformation on our domain. This is the identity
transformation on Rn. This is also the identity
transformation on Rn. So if you apply the identity
transformation to anything, you're just going
to get anything. So this is going to be equal
to-- I'll do it on both sides of the equation-- this whole
expression on the left-hand side is going to simplify to the
T-inverse of the vectors a plus the vector b. And the right-hand side
is just going to simplify to this thing. Is equal to-- because this
is just the identity transformation-- so it's just
equal this one, T-inverse of the vector a plus T-inverse
of the vector b. And just like that, T-inverse
has met its first condition for being a linear
transformation. Now let's see if we can do
the second condition. Let's do the same
type of thing. Let's take the composition of
T with T-inverse, let's take the composition of that on some
vector, let's call it ca. Just like that. Well we know what this is equal
to, this is equal to the identity transformation on Rn. So this is just going
to be equal to ca. Now what is a equal to? What is this thing right there--
I'll write it on the side right here, let me do it
in an appropriate color. Or we could say that a, the
vector a is equal to the transformation T with the
composition of T with T-inverse applied
to the vector a. Because this is just the
identity transformation. So we can rewrite this
expression here as being equal to c times the composition of
T with T-inverse applied to my vector a. And maybe it might be nice to
rewrite it in this form instead of this composition
form. So this left expression we can
just write as T of the T-inverse of c times the
vector a-- all I did is rewrite this left-hand side this
way-- is equal to this green thing right here. Well I'll rewrite similarly. This is equal to c times the
transformation T applied to the transformation T-inverse
applied to a. This is by definition what
composition means. Now T is a linear
transformation. Which means that if you take c
time T times some vector, that is equivalent to T times c times
T applied to c times that vector. This is one of the conditions
in your transformation. So this is always going
to be the case with T. So if this is some vector
that T is applying to, this is some scalar. So this thing, because we
know that T is a linear transformation, we can rewrite
as being equal to T applied to the scalar c times T-inverse
applied to a. And now what can we do? Well let's apply the T-inverse
transformation to both sides of this. Let me rewrite it. On this side we get T of
T-inverse of ca is equal to T of c times T-inverse times a. That's what we have so far. But wouldn't it be nice
if we could get rid of these outer T's? And the best way to do that
is to take the T-inverse transformation of both sides. So let's do that. T-inverse-- let's take that of
both sides of this equation, T-inverse of both sides. And another way that this
could be written. This is equal into the
composition of T-inverse with T applied to T-inverse applied
to c times our vector a. This right here, I just decided
to keep writing it in this form, and I took these two
guys out and I wrote them as a composition. And this on the right-hand side,
you can do something very similar. You could say that this is equal
to the composition of T-inverse with T times--
or not times, let me be very careful. Taking this composition, this
transformation, and then taking that transformation
on c times the inverse transformation applied to a. Let me be very clear
what I did here. This thing right here is
this thing right here. This thing right here is
this thing right here. And I just rewrote this
composition this way. And the reason why I did this
is because we know this is just the identity transformation
on Rn, and this is just the identity
transformation on Rn. So the identity transformation
applied to anything is just that anything. So this equation simplifies to
the in T-inverse applied to c times some vector a, is equal
to this thing, c times T-inverse times some vector a. And just like that, we've met
our second condition for being a linear transformation. The first condition
was met up here. So now we know. And in both cases, we use the
fact that T was a linear transformation to get to the
result for T-inverse. So now we know that if T is a
linear transformation, and T is invertible, then T-inverse
is also a linear transformation. Which might seem like a little
nice thing to know, but that's actually a big thing to know. Because now we know that
T-inverse can be represented as a matrix vector product. That means that T-inverse
applied to some vector x could be represented as the product
of some matrix times x. And what we're going to do is,
we're going to call that matrix the matrix a-inverse. And I haven't defined as well
how do you construct this a-inverse matrix, but we
know that it exists. We know this exists now,
because T is a linear transformation. And we can take it even
a step further. We know by the definition of
invertibility that the composition of T-inverse with
T is equal to the identity transformation on Rn. Well what is a composition? We know that T, if we take--
let me put it this way. We know that T of x
is equal to Ax. So if we write T-inverse, the
composition of T-inverse with T applied to some vector x is
going to be equal to first, A being applied to x is going
to be equal to Ax, this a right here, Ax. And then you're going to apply
A inverse-x, you're going to apply this right here. And we got that this is the
equivalent to-- when you take the composition, it's equivalent
to, or your resulting transformation matrix
of two composition transformations is equal to this
matrix matrix product. We got that a long time ago. In fact that was the motivation
for how a matrix matrix product was defined. But what's interesting here is,
this composition is equal to that, but it's also equal to
the identity transformation on Rn applied to that vector
x, which is equal to the identity matrix applied to x. Right? That is the n by n matrix, so
when you multiply by anything, you get that anything again. So we get a very interesting
result. A-inverse times A has to be
equal to the identity matrix. A-inverse, or the matrix
transformation for T-inverse, when you multiply that with the
matrix transformation for T, you're going to get
the identity matrix. And the argument actually
holds both ways. So we know this is true, but
the other definition of an inverse, or invertibility, told
us that the composition of T with T-inverse is equal to
the identity transformation in our codomain, which
is also Rn. iRn. So by the exact same argument,
we know that when you go the other way, if you apply
T-inverse first and then you apply T-- so that's equivalent
of saying apply T-inverse first, and then you apply T
to some x vector, that's equivalent to multiplying that
x vector by the identity matrix, the n by n
identity matrix. Or you could say, you could
switch the order. A times A-inverse is also equal
to the identity matrix. Which is neat, because we
learned that matrix matrix products, when you switch the
order they don't normally always equal each other. But in the case of an invertible
matrix and its inverse, order doesn't matter. You can take A-inverse times A
and get the identity matrix, or you could take A times
A-inverse and get the identity matrix. Now we've gotten this far, the
next step is to actually figure out how do
you construct. We know that this thing exists,
we know that the inverse is a linear
transformation, that this matrix exists. We see this nice property,
that when you multiply it times the transformation
matrix you get the identity matrix. The next step is to actually
figure out how to figure this guy out.",Showing that inverses are linear | Matrix transformations | Linear Algebra | Khan Academy,"Showing that inverse transformations are also linear

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-deriving-a-method-for-determining-inverses?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/linear-algebra-simplifying-conditions-for-invertibility?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,mr9Tow8hpCg
Determinantandareaofaparallelogram_Matrixtransformations_LinearAlgebra_KhanAcademy-n-S63_goDFg.en.csv,"I've got a 2 by 2 matrix here,
and let's just say its entries are a, b, c, and d. And it's composed of
two column vectors. We've done this before, let's
call this first column v1 and let's call the second
column v2. So we can rewrite here. We can say v1 one is equal to
ac, and we could write that v2 is equal to bd. And these are both members of
r2, and just to have a nice visualization in our head,
let's graph these two. Let me draw my axes. That's my vertical axis. That's my horizontal axis. And maybe v1 looks something
like this. v1 might look something
like that. So that is v1. It's horizontal component will
be a, its vertical coordinant -- give you this as maybe a
position vector, or just how we're drawing it, is c. And then v2, let's just say it
looks something like this. Let's say that they're
not the same vector. So v2 looks like that. v2, its horizontal coordinate
is going to b, and its vertical coordinate
is going to be d. Now, what we're going to concern
ourselves with in this video is the parallelogram
generated by these two guys. What I mean by that is, imagine
that these two guys are position vectors that are
specifying points on a parallelogram, and then of
course the -- or not of course but, the origin is also
another point in the parallelogram, so what will
be the last point on the parallelogram? Well, you can imagine. A parallelogram, we already have
two sides of it, so the other two sides have
to be parallel. So one side look like that,
parallel to v1 the way I've drawn it, and the other side
will look like this. That's our parallelogram. The parallelogram generated
by v2 and v1. What we're going to concern
ourselves with specifically is the area of the parallelogram
generated by v1 and v2. So how do we figure that out? In general, if I have just any
parallelogram-- this is kind of a tilted one, but if I just
have any parallelogram, let me just draw any parallelogram
right there-- the area is just equal to the base-- so
that could be the base-- times the height. So it's equal to base -- I'll
write capital B since we have a lowercase b there--
base times height. That's what the area of a
parallelogram would be. Now what are the base and the
height in this situation? Let me write this down. The area of our parallelogram
is equal to the base times the height. And actually-- well, let
me just write it here. So what is the base here? The base here is going to be
the length of our vector v. So this is our base. So this right here is going to
be the length of vector v1, the length of this orange
vector right here. And what's the height of this
parallelogram going to be? We could drop a perpendicular
here, and that, the length of this line right here, is
going to be our height. So how can we figure out that,
you know, we know what v1 is, so we can figure out the
base pretty easily. But how can we figure
out the height? Well, one thing we can do is, if
we can figure out this guy right here, we could use the
Pythagorean theorem. Because the length of this
vector squared, plus H squared, is going to be equal
to the length of v2 squared. So let's see if we
can do that. What is this guy? What is this green
guy right here? Well if you imagine a line--
let's imagine some line l. So let's say l is a line
spanned by v1. Which means you take all of the
multiples of v1, and all of the positions that they
specify will create a set of points, and that is my line l. So you take all the multiples
of v1, you're going to get every point along this line. Just like that. Now if we have l defined that
way-- that line right there is l, I don't know if
you can see it. Let me do it a little bit better
-- and it goes through v1 and it just keeps
going over there. What is this green
line right there? This green line that we're
concerned with, that's the projection onto l of what? Well, we have a perpendicular
here, you can imagine the light source coming down-- I
don't know if that analogy helps you-- but it's kind
of the shadow of v2 onto that line. So it's a projection of v2, of
your vector v2 onto l is this green line right there. So, if we want to figure out
H, we can just use the Pythagorean theorem. So we can say that the length
of H squared-- well I'm just writing H as the length,
I'm not even specifying it as a vector. So we could say that H squared,
where that is the length of this line, plus the
length of this vector squared-- and the length of
that vector squared is the length of the projection
onto l of v2. I'll do that in a
different color. So the length of the projection
onto l of v2 squared-- all right? We're just doing the Pythagorean
theorem. This squared plus this
squared is going to equal that squared. It's going to be equal to the
length of v2 squared. That's just the Pythagorean
theorem. Nothing fancy there. So how can we simplify? We want to solve for H. And actually, let's just solve
for H squared for now because it'll keep things a little
bit simpler. So we can say that H squared is
equal to this guy, is equal to the length of my vector v2
squared minus the length of the projection squared. So minus -- I'll do that in
purple -- minus the length of the projection onto
l of v2 squared. Remember, this thing is just
this thing right here, we're just doing the Pythagorean
theorem. So let's see if we can simplify
this, or write it in terms that we understand. So the length of a vector
squared, this is just equal to-- let me write it this
way-- this is just equal to v2 dot v2. You take a vector, you dot it
with itself, and you get the length of that vector
squared, we saw that many, many videos ago. And then what is this guy
going to be equal to? Well, the projection--
I'll do it over here. The projection onto l of v2 is
going to be equal to v2 dot the spanning vector,
which is v1. So it's v2 dot v1 over the
spanning vector dotted with itself, v1 dot v1. We saw this several videos
ago when we learned about projections. And this is just a number
right there. And then it's going
to be times the spanning vector itself. So times v1. That is what the
projection is. So it's going to be this
minus the length of the projection squared. What is the length of the
projection squared? Well that's this guy dotted
with himself. Let me write it this way, let
me take it step by step. So this is going to be minus--
I'm want to make sure I can still see that up there so I
don't have to rewrite it. The projection is going to be,
it looks a little complicated but hopefully things will
simplify, v2 dot v1 over v1 dot v1 times-- switch colors--
times the vector-- this is all just going to end up being a
number, remember you take dot products, you get numbers--
times the vector v1. And we're going to take
the length of that whole thing squared. And all of this is going to
be equal to H squared. Once again, just the Pythagorean
Theorem. This or this squared, which is
the height squared, is equal to your hypotenuse squared,
this is your hypotenuse squared, minus the other
side squared. This is the other
side squared. Looks a little complicated, but
it was just a projection of this guy on to that
right there. So let's see if we can simplify
this a little bit. We're just going to have to
break out some algebra or let s can do here. Well actually, not algebra,
some linear algebra. So what is this guy? Well this guy is just the dot
product of this with itself. So this is just equal to-- we
know, I mean any vector, if you take the square of its
length, it's just that vector dotted with itself. So this thing, if we are taking
the square of this guy's length, it's just
equal to this guy dotted with himself. Let me write everything
over again. So we get H squared is equal to
v2 dot v2, and then minus this guy dotted with himself. So minus v2 dot v1 over v1 dot
v1, times the vector v1, dotted with itself. Dotted with v2 dot v1--
remember, this green part is just a number-- over
v1 dot v1 times v1. And what is this equal to? Let's just simplify this. These are just scalar
quantities, and we saw that the dot product is associative
with respect to scalar quantities, so we can just
change the order here. So this is going to be
equal to the scalar quantity times itself. So we could say this is
equal to v2 dot v1. Let me write it this way. V2 dot v1, that's going to
be-- and we're going to multiply the numerator times
itself, v2 dot v1. And then all of that over v1
dot v1 times v1 dot v1. Remember, I'm just taking
these two terms and multiplying them
by each other. I'm just switching the order,
and then we know that the scalars can be taken out,
times these two guys dot each other. Times v1 dot v1. That's what this
simplifies to. Now this is now a number. We had vectors here, but when
you take a dot product, you just get a number. And this number is the
same as this number. So we can simplify
a little bit. So we can cross those two guys
out, and then we are left with that our height squared
is equal to this expression times itself. We have it times itself twice,
so it's equal to-- let me start over here. It's equal to v2 dot v2 minus
this guy times itself. So v2 dot v1 squared, all of
that over just one of these guys. v1 dot v1. That is what the height
squared is. Now we have the height squared,
we could take the square root if we just want
to solve for the height. But to keep our math simple, we
know that area is equal to base times height. Let's just say what the area
squared is equal to. Because then both of these
terms will get squared. So if the area is equal to base
times height-- we saw that at the beginning of the
video-- then the area squared is going to be equal to these
two guys squared. It's going to be equal to base
squared times height squared. Now what is the base squared? Let me do it like this. So the base squared-- we already
saw, the base of our parallelogram is the length
of vector v1. Now what is the base squared? The base squared is going
to be the length of vector v1 squared. Or another way of writing
that is v1 dot v1. And we already know what the
height squared is, it's this expression right there. Let me write that down. The height squared is the height
squared right there. So what is our area squared
going to be? Our area squared-- let me go
down here where I'll have more space-- our area squared is
going to be equal to our base squared, which is v1 dot v1
times our height squared. Let with me write
it like this. No, I was using the
wrong color. Times this guy over here. v2 dot
v2 minus v2 dot v1 squared over v1 dot v1. Now what does this
simplified to? Well, this is just a number,
these are all just numbers. So if I multiply, if I
distribute this out, this is equal to what? This times this is equal to v1--
let me color code it-- v1 dot v1 times this guy
times v2 dot v2. And then when I multiplied
this guy times that guy, what happens? Well I have this guy in the
numerator and that guy in the denominator, so they
cancel out. So I'm just left with minus
v2 dot v1 squared. Now let's remind ourselves what
these two vectors were. v1 was the vector ac and
v2 is the vector bd. Let me rewrite it down here so
we have it to work with. So v1 was equal to the vector
ac, and v2 is equal to the vector bd. So what is v1 dot v1? That is equal to a dot
a, a times a, a squared plus c squared. That's this, right there. And that's what? v2 dot v2. So we're going to have
that times v2 dot v2. v2 dot v2 is v squared
plus d squared. And then we're going to have
minus v2 dot v1 squared. So what's v2 dot v1? It's b times a, plus d times c,
or a times b plus -- we're just dotting these two guys. So it's ab plus cd, and then
we're squaring it. And let's see what this
simplifies to. Hopefully it simplifies
to something. Let me switch colors. So if we just multiply this
out, let me write it here. Our area squared is equal to
a squared times b squared. a squared times d squared,
plus c squared times b squared, plus c squared
times d squared. And then minus this
guy squared. What is that going
to be equal to? ab squared is a squared,
b squared. And then I'm going to multiply
these guys times each other twice, so that's going
to be plus 2abcd. And then you're going to have
a plus c squared, d squared. I just foiled this out, that's
the best way you could think about it. And then, if I distribute this
negative sign, what do I have? Let me rewrite everything. It's equal to a squared b
squared, plus a squared d squared, plus c squared b
squared, plus c squared d squared, minus a squared b
squared, minus 2abcd, minus c squared, d squared. All I did is, I distributed
the minus sign. Now it looks like some things
will simplify nicely. And now remember, all this is
equal to our area squared. We have a ab squared, we have
a minus ab squared. They cancel out. We have a minus cd squared
and a cd squared, so they cancel out. So all we're left with is that
the area of our parallelogram squared is equal to a squared
d squared minus 2abcd plus c squared b squared. Now this might look a little bit
bizarre to you, but if you made a substitution right here,
if you said that x is equal to ad, and if you said y
is equal to cb, then what does this become? This is equal to x
squared minus 2 times xy plus y squared. Right? Hopefully you recognize this. And this is just the same thing
as x minus y squared. So, if this is our substitutions
we made-- I did this just so you can visualize
this a little bit better. So we have our area squared is
equal to x minus y squared or ad minus cb, or let me
write it, bc squared. That's what the area of our
parallelogram squared is. And if you don't quite
understand what I did here, I just made these substitutions
so you can recognize it better. But just understand that this
is the same thing as this. If you want, you can just
multiply this guy out and you'll get that right there. But what is this? What is this thing right here? It's the determinant. This is the determinant of
our original matrix. Well, I called that matrix A
and then I used A again for area, so let me write
it this way. Area squared -- let me
write it like this. Area squared is equal to
ad minus bc squared. So this is area, these
A's are all area. But what is this? This is the determinant
of my matrix. That is the determinant of my
matrix A, my original matrix that I started the problem with,
which is equal to the determinant of abcd. Right? The determinant of this is ad
minus bc, by definition. So your area-- this
is exciting! So the area of your
parallelogram squared is equal to the determinant of the matrix
whose column vectors construct that parallelogram. Is equal to the determinant
of your matrix squared. Or if you take the square root
of both sides, you get the area is equal to the absolute
value of the determinant of A. Which is a pretty neat
outcome, especially considering how much hairy
algebra we had to go through. Let's go back all the way over
here, go back to the drawing. So if we want to figure out the
area of this parallelogram right here, that is defined, or
that is created, by the two column vectors of a matrix, we
literally just have to find the determinant of the matrix. The area of this is equal to
the absolute value of the determinant of A. And you have to do that because this might be negative. You can imagine if you swapped
these guys around, if you swapped some of the rows, this
guy would be negative, but you can 't have a negative area. And it wouldn't really change
the definition, it really wouldn't change what spanned. If you switched v1 and v2,
you're still spanning the same parallelogram, you just might
get the negative of the determinant. But that is a really
neat outcome. And you know, when you first
learned determinants in school-- I mean, we learned
the first motivation for a determinant was this idea of
when we take the inverse of a 2 by 2, this thing shows up in
the denominator and we call that the determinant. But now there's this other
interpretation here. There's actually the area of the
parallelogram created by the column vectors
of this matrix.",Determinant and area of a parallelogram | Matrix transformations | Linear Algebra | Khan Academy,"Realizing that the determinant of a 2x2 matrix is equal to the area of the parallelogram defined by the column vectors of the matrix

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-determinant-as-scaling-factor?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/determinant_depth/v/linear-algebra-simpler-4x4-determinant?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,n-S63_goDFg
UsingtheLaplacetransformtosolveanonhomogeneouseq_Laplacetransform_KhanAcademy-nlUG4OKN1IY.en.csv,"It's been over a year since I
last did a video with the differential equations playlist,
and I thought I would start kicking up, making
a couple of videos. And I think where I left,
I said that I would do a non-homogenous linear equation
using the Laplace Transform. So let's do one, as a bit of a
warm-up, now that we've had a-- or at least I've had
a one-year hiatus. Maybe you're watching these
continuously, so you're probably more warmed
up than I am. So if we have the equation the
second derivative of y plus y is equal to sine of 2t. And we're given some initial
conditions here. The initial conditions are y
of 0 is equal to 2, and y prime of 0 is equal to 1. And where we left off--
and now you probably remember this. You probably recently watched
the last video. To solve these, we just
take the Laplace Transforms of all the sides. We solve for the Laplace
Transform of the function. Then we take the inverse
Laplace Transform. If that doesn't make sense, then
let's just do it in this video, and hopefully
the example will clarify all confusion. So in the last video-- it was
either the last one or the previous one-- I showed you that
the Laplace Transform of the second derivative of y is
equal to s squared times the Laplace Transform of y-- and we
keep lowering the degree on s-- so minus s times y of 0. You can kind of think of it
as taking the derivative. This is an integral. It's not exactly the
anti-derivative of this. But the Laplace Transform
it is an integral. The Transform is an integral. So y of 0 is kind of one
derivative away from that. And then minus y prime of 0. And then we could also
rewrite this. And this is just a purely
notational issue. I could write this, instead of
writing the Laplace Transform of y all the time, I could write
this as s squared times capital Y of s-- because this
is going to be a function of s, not a function of y-- minus
s times y of 0 minus y prime y of 0. These are going to be
numbers, right? These aren't functions. These are the function evaluated
at 0, or the derivative of the function
evaluated at 0. And we know what these
values are. y of 0, right here, is 2,
and y prime of 0 is 1. It was given to us. So if we take the Laplace
Transforms of both sides of this equation, first we're
going to want to take the Laplace Transform of this term
right there, which we've really just done. The Laplace Transform of the
second derivative is s squared times the Laplace Transform of
the function, which we write as capital Y of s, minus this,
minus 2s-- they gave us that initial condition--
and then minus 1. Right? This term right here is
just 1, so minus 1. So that's term right there. Then we want to take
the Laplace Transform of y by itself. So this is just plus Y of
s, right, the Laplace Transform of y. So I'll just rewrite Laplace
Transform of y. I'm just rewriting it
in this notation. Y of S. It's good to get used
to either one. This is going to be equal
to the Laplace Transform of sine of 2t. And I showed you in a video last
year that we showed what the Laplace Transform of sine
of at is, but I'll write it down here just so
you remember it. Laplace Transform of the sine
of at is equal to a over s squared plus a squared. So the Laplace Transform
of sine of 2t. Here, a is 2. This is going to be 2 over
s squared plus 4. So if we take the Laplace
Transform of both sides of this, the right-hand side
is going to be 2 over s squared plus 4. Now what we can do is we can
separate out all the Y of s terms. And so we can factor,
well I guess we could say, factor out their coefficients,
so that's a Y of s term, that's a Y of s term. And so we could write the
left-hand side here as s squared-- that's that term--
plus 1-- the coefficient on that term-- s squared plus
1, times Y of s. Let me do it in green. So this is Y of s, and this Y
of s, times Y of s, and then we have the non-Y of s terms.
These two right here. So minus 2s, minus 1, is equal
to 2 over s squared plus 4. We can add 2s plus 1 to both
sides, to essentially move this to the right-hand side, and
we're left with s squared plus 1, times Y of s, is equal
to 2 over s squared plus 4, plus 2s, plus 1. Now we can divide both sides of
this equation by s squared plus 1, and we get the Laplace
Transform of Y. Y of s is equal to-- let me
switch colors-- it's equal to 2 over s squared plus 4 times
this thing right here. I'm dividing both sides of this
equation by this term right there. So times s squared plus 1-- it's
in the denominator so I'm dividing by it-- plus 2s plus
1-- I have to divide both of those terms by the s squared
plus 1-- divided by s squared plus 1, divided by
s squared plus 1. Now, in order to be able to
take the inverse Laplace Transform of this, I need to get
it in some type of simple fraction form. These are actually easier to
do, but this was one's a little bit difficult. I want to do some partial
fraction decomposition to break this up into maybe
simpler fractions. So what I want to do, I'm going
to do a little bit of an aside here. And this really is the hardest
part of these problems. The algebra, breaking
this thing up. So I'm going to break this up. So let me write this this way. 2 over s squared plus 4 times
s squared plus 1. I'm going to break this
up into two fractions. This is the partial fraction
decomposition. One fraction is s
squared plus 4. And the other fraction
is s squared plus 1. And since both of these
denominators are of degree 2, the numerators are going
to be of degree 1. So they're going to be some--
let me write it this way-- this one will be As plus B. And then this one will
be Cs plus D. This is just pure algebra. This is just partial fraction
decomposition. I've made a couple
of videos on it. And I'm saying that I'm assuming
that this expression right here can be broken
up into two expressions of this form. And I need to solve for
A, B, C, and D. So let's see how
we can do that. So if I were to start with these
two and add them up, what do I get? I would have to multiply these
times-- so my denominator, my common denominator, would be
this thing again-- it would be s squared plus 4 times
s squared plus 1. And now I'm going to have to
multiply the As plus B times this s squared plus 1. This, as it is right now,
these two terms would cancel out. You'll just get this term,
but I need to add it to this right here. So you get plus Cs plus D
times s squared plus 4. And now let's see what we could
do to match up the terms here with this number
2 right here. So let's multiply
all of this out. So As times s squared
is As to the 3rd. As times 1 is plus As. B times s squared, so plus Bs
squared, and then you have B times 1 is plus B. And then you have Cs times s
squared, that's Cs to the 3rd. And then Cs times 4,
so it's plus 4Cs. These problems are tiring. And I also have a cold, so this
is especially tiring, but I'll soldier forward. Where was I? So I multiplied the C's times
each of these, now I have to multiply the D's. So plus Ds squared-- that's D
times that one-- plus D times 4, so plus 4D. So that's all of them. And I just wrote it this way
so I have the common degree terms under each other. So if I were to add the entire
numerator, I get-- and I'll just switch colors, somewhat
arbitrarily-- I get A plus C times s to the 3rd plus-- let
me write the s squared term next-- plus B plus D times s
squared-- now I'll write this s term-- plus A plus 4C times
s plus B plus 4D. This is just the numerator. This is when I just added
these two things up. This whole thing up here
simplifies to this. I don't know if the word
simplify is appropriate. But it becomes this expression
right here. And that's just the numerator. The denominator is still what
we had written before. The denominator is still the s
squared plus 4, times the s squared plus 1. Of course, I have to show
that this is a fraction. And this is going to be equal
to this thing over here. 2 over s squared plus 4 times
s squared plus 1. Now, why did I go through this
whole mess right here? Well, the reason why I went
through it is because we should be able to solve
for A, B, C, and D. So let's see, A plus C. This is the coefficient
on the s cubed term. Do we see any s cubed
terms here? No, we see no s cubed
terms here. So A plus C-- let me write this
down-- A plus C must be equal to 0, because we
see nothing here that has an s to the third. B plus D is a coefficient
on the s squared term. Do we see any s squared
terms here? No, so B plus D must
be equal to 0. A plus 4C are the coefficient
of the s term. I see no s term over here. So A plus 4C must also
be equal to 0. And then finally, we look at
just the constant terms. And we do have a constant term
on the left-hand side of this equation. We have 2. so B plus 4D-- I didn't want to
make it that thick-- B plus 4D must be equal to 2. This just seems like these
linear equations are pretty easy to solve for. Let's subtract this from this. So A-- or let me subtract the
bottom one from the top one-- so A minus A, that's 0A. And then C minus 4C minus
3C is equal to 0. And so you get C
is equal to 0. If C is equal to 0, A plus C
is equals to 0, A must be equal to 0. And let's do the same
thing here. Let's subtract this from that. So you get B minus B is 0, and
then minus 3D-- that's just D minus 4D-- and then 0 minus
2 is equal to minus 2. And then you get D is equal to--
what do we get?-- D is equal to 2/3. Minus 2 divided by minus 3 is
2/3, and then-- this isn't a minus here, I wrote that there
later-- we said B plus D is equal to 0. So B must be the opposite
of D, right? We could write B is equal
to minus D, or B is equal to minus 2/3. Let's remember all of this and
go back to our original problem, because we've
kind of-- actually let me just be clear. We can rewrite 2 over s
squared plus 4 times s squared plus 1. We can rewrite this as, well,
A is 0, B is minus 2/3. So this is equal to minus 2/3
over s squared plus 4. And then C is 0, we
figured that out. And then D is 2/3. So plus 2/3 over s
squared plus 1. So all of that work that I just
did, that was just to break up this piece
right here. That was just to break up
that piece right there. And then, of course, we have
these other two pieces here that we can't forget about. So after all of this work,
what do we have? And I'm going to make
sure I don't make a careless mistake here. We get the Laplace Transform
of Y-- as you can see, the algebra is the hardest part
here-- is equal to this first term-- I'm just going back--
this first term, which I've now decomposed into this. So it's minus-- let me write it
this way-- minus 1/3-- and I think you're going to see in
a second why I'm writing this way-- minus 1/3 times 2 over s
squared plus 4, and then plus 2/3 times 1 over s
squared plus 1. And you're probably saying,
Sal, why are you writing it this way? Well you can already immediately
see that this is the Laplace Transform
of sine of 2t. This is the Laplace Transform
of sine of t. So I wanted to write this 2
here, because this is 2, this is 2 squared. This is 1, this is 1 squared. So I wanted to write
it in this form. This was just the first term. We have two more terms
to worry about. I don't want to make
a careless mistake. I have 2s over s
squared plus 1. So let me write that down. So plus 2 times s over s squared
plus 1, plus-- last one-- plus 1 over s
squared plus 1. Now we just take the inverse
Laplace Transform of the whole thing, and then we'll
know what Y is. So, you know, just to remember
the Laplace Transform. So this is going to be
a little inverse. This is going to
be sine of 2t. Let me just write, just so we
have it here, so you know I'm not doing some type of voodoo. The Laplace Transform of sine
of at is equal to a over s squared plus a squared. And the Laplace Transform of
cosine of at is equal to s over s squared plus a squared. Let's just remember those two
things when we take the inverse Laplace Transform of
both sides of this equation. The inverse Laplace Transform of
the Laplace Transform of y, well that's just y. y-- maybe I'll write it as a
function of t-- is equal to-- well this is the Laplace
Transform of sine of 2t. You can just do some pattern
matching right here. If a is equal to 2, then this
would be the Laplace Transform of sine of 2t. So it's minus 1/3 times sine of
2t plus 2/3 times-- this is the Laplace Transform
of sine of t. If you just make a is equal
to 1, sine of t's Laplace Transform is 1 over
s squared plus 1. So plus 2/3 times the sine of
t-- let me do the next one in blue, just because it was
already written in blue-- plus 2 times-- this is the Laplace
Transform of cosine of t. If you make a is equal to 1,
then the cosine t Laplace Transform is s over
s squared plus 1. So 2 times cosine of t-- and
then one last term-- plus-- this is just like this one over
here, this is just the Laplace Transform of sine
of t-- plus sine of t. And we're almost done. We're essentially done, but
there's a little bit more simplification we can do. I have 2/3 times the sign of t
here, and then I have another 1 sine of t here, so I can
add the 2/3 to the 1. What's 2/3 plus 1, or 3/3? It's 5/3. So I can write y of t is equal
to minus 1/3 sine of 2t plus-- these two terms I'm just
going to add up-- plus 5/3 sine of t. And then I have this last term
here, plus 2cosine of t. So this was a hairy problem,
a lot of work. And we saw that the hardest
part really was just the partial fraction decomposition
that we did up here, not making any careless mistakes. But at the end, we got a pretty
neat answer that's not too complicated, that satisfies
this non-homogenous differential equation. We were able to incorporate
the boundary conditions as we did it. Anyway, hopefully you found
that vaguely satisfying. This is a good warm-up
after a year of no differential equations.",Using the Laplace transform to solve a nonhomogeneous eq | Laplace transform | Khan Academy,"Solving a non-homogeneous differential equation using the Laplace Transform

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-to-solve-differential-equation/v/laplace-step-function-differential-equation?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-to-solve-differential-equation/v/laplace-transform-solves-an-equation-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,nlUG4OKN1IY
Math2B.Calculus.Lecture03.DefiniteIntegral.-nqHLEhz5DXY.en.csv,"good afternoon so today we'll cover section  5.2, definitive integral  so we'll start from a very important definition  we'll define the definitive integral let's assume that we have a function F defined on an interval  AB, okay, then we'll take  this interval and form a partition  that is with sin points x_1, x_2 x_3 and so on  x now coincides with A and x  n coincides with b, okay  then so make a partition x_0, x_1,  x_n, then we'll pick  sample points. Pick sampling points  which we'll call x_1*, x_2*,   x_n*. Basically  inside each sub-interval  the cycle x_1*, x_2* and so on. remember these points  they could be either the leftmost point of this subinterval, the rightmost point of this subinterval  or somewhere in between. Okay,  then we say that  define  an integral  from a to b  f(x) dx to be equal to  the limit as n goes to infinity  of the following sum. It goes from 1 to n  f(x_1)*  delta x. So here delta x  normally if they're equal length it's b-a  over n. That's the length of individual intervals.  okay, so this  definition is valid if the limit exists and is the same for all choices  of sampling points. So for instance it could happen  if I choose the sampling points to be  the left side of each interval, the left hand rule, and I take the limit, I get a  number then I choose them to be the right side of each interval  and if the limit is different, then this definition doesn't make sense  so it only makes sense if the limit exists, and if it's the same for any  choice of all of the sampling points  so I'm going to start by making an introduction  so let's look at this new symbol and talk about its components. First of all,  this guy here is the integral sign    and it looks like an elongated s  why s? Because it's equal to a sum  so it's the limit of a sum. So the symbol s comes from that word.  and and b  are the limits of integration  limits of integration  this heref is called the integrand  and finally  this differential here  tells me what is my independent variable okay my horizontal axis  is called X in this case and this variable has to match, you know, the variable  upon which the function f depends.  We'll call this variable the silent variable of integration  so let me show you. So  the limit from a to b  f(x)dx actually can be written as the integral
of  f(y)dy. Or I could insert any lette r and the answer won't change. Why is that?  well if you look look at the right hand
side of this definition okay and if you take f to be x^2 remember, we actually did this exercise last time  we said let's consider  the parabola f=x^2 and we actually calculated this sum. What was it equal to?  1/3, right? So we got a number. Does this number depend on x?  no, it's a number. It's not a function. So whatever you get as an answer here  does not depend on x  so x cannot appear in the final answer. So you can replace it by anything else  the answer won't change. So we'll call it a silent  variable of integration  so x or y or anything else  questions?  question? student: Yeah, I'm a little bit confused  most of the time we plug in x as the independent variable and  not y, so in the case of the right hand side  are we plugging in a y value of a and a y value of b? Instructor: y is just a variable.  I can call it alpha. I can call it...  t. Absolutely, yeah. So you're right, usually the convention is that usually  when you draw a graph, this is y, this is x  so not to get confused, we don't often use y there  but we might. We can.  Okay. So finally  this guy here also has a name  this is called the Reinmann sum  and we'll practice to evaluate such sums  today. Okay?  so what is the meaning of this new object?  let me do it here  so if the function of x is non-negative  on the interval [ab] then the integral of  f(x)dx what is the meaning of that?  do you remember? Exactly  because we already saw this right hand side. We only did it for non-negative  functions and we said, ""that's the area.""  Remember, we split it  into a number of vertical  rectangles. We calculated the area . So this is  the area under  the curve f f(x) between  a and b. So it has a very clear meaning for non negative f okay now what happens if f changes sign so for instance we can
consider this kind of function  see this takes both positive and
negative values so if you look at the definition you can
see we can do the Reinmann sum  we can do these, so first we have these rectangles  and we have these rectangles, okay,  and if you look at the formula they all
have the same base they all have different height, and the height of these is actually negative  so we can do these separately. We can group these together, and we get the area  area under this part of the curve, and then this here  gives me also an area, but it has a negative sign because  each of the the components here has a
negative height. So if we call this area  A1 and this area A2 then the integral of  f(x)dx is equal to A1 minus  A2. This is called the net area  or the signed area net area or signed area so normally we will assume that the function f that appears under the integral is either continuous or it has a finite number of
discontinuities okay  and next I'm going to show you an example   of using this definition to calculate the integral. And this example  is such that we will know the answer  before we did any calculations so in this example  we said  that f(x) is x-3 we'll say that  x belongs on the interval from 1 to 4   evaluate  f(x)  dx by using  the definition. Before I use the definition I'm going to give you an answer  so this function is a straight line and  this is what allows me to give you an
answer or you are going to give me an answer, okay?  so let's plot f(x) which is  x-3 as a function of x. At 0, we'll get -3. It crosses the horizontal axis  at 3, okay,  its value at 4 is equal to 1, it's value at  1 is given at 2  so we're interested in  the integral of this function between 1 and 4. Okay?  so we talked about that, it actually does change sign,  so to calculate it simply,  we can calculate this area and you can
calculate this area  and remember that this area comes with a
negative sign, right?  so let's call this A1 the positive area, let's call this A2 and let's calculate them from geometric considerations. This is easier  what's the area of this object? It's a triangle  1/2. It has a base of 1, a height of 1  so it's 1x1 over 2 is 1/2. This one- what's the area of this?  so 2. so this is 2 times 2 over 2  is 2. So what's the answer?  we have A1 minus A2 is 1/2 minus 2 is -3/2. So whatever  magic we're doing here, we're expecting to
get this answer so let's keep that in mind  and perform the calculations. We're going to use this definition  in order to use the definitions I have to know delta x,  x_i*, and f of that amount. So let's do it step by step  the easiest one is delta x  we have to go b minus A over n, so it's 4 minus 1 over n is 3 over n. Questions?  now we have to create a partition so A is 1, B  is 4. What is x1? so I'm going to have x1, x2 x3 and so on  so each of these intervals have length 3/n 3/n 3/n. So what is the value of x1?  it's to the right of 1, the distance is 3/n, so it's one  plus 3/n, right? now what's the value of x2?  it's one plus twice that thing, so  2*(3/n) this guy is 1 +  3 times 3/n So we can see the pattern. The pattern is that x_i equals 1+ so for each i  I have to step i times. So I have i times delta x, 3 over n. Questions?  so these are the values of x1 x2 x3 these are not quite what I need, I need sampling points  and this is really my choice. I am going to use the right hand rule  use the right hand rule. What does it mean?  that if I have  an interval xi-1 xi, I'm going to take my sampling point to coincide with the rightmost border of that interval  so xi* is going to be equal to xi which is 1 plus  plus i3/n the last step before I can write down the definition is to evaluate the  function at this point f(xi*) so I go here f(xi*)  f(xi*) what's my function  it's 3-- it's x-3. So I have to take  the argument minus 3 and that's equal to 1+3i over n minus 3, and that's equal to  3i/n-2 okay so I evaluated my function at all the sampling points  and now I'm ready to use a definition please ask me questions at any time so we write down from 1 to 4 (x-3)dx this is the integral we're trying to evaluate. This is the limit  as n goes to infinity of the Reimann sum and under the sum I have  f(xi*), that's the expression I got. 3i/n minus 2 times delta x. That's 3 over n. So again, this is f f(xi*) and this is  delta x so now I have concrete numbers in the formulas  and I have to evaluate first the sum and then the limit, okay so I continue to write limit so to evaluate this sum  this is a constant. It doesn't depend on i so this guy can actually come out here so I have 3/n and here I have a sum  of 3i/n minus 2 okay. The next step  I'm going to split this in to two sums. I'm going to have a sum of 3i over n minus... like this  next I notice that in this sum I have i times a constant, 3/n. So  this constant. This constant can come out so I have 3/n the sum of i, and this I can rewrite as 2 the sum of one  questions? So I simplify that as much as I could. And now I have  two sums, and both of them we're going to  evaluate. The first sum  so let's do it here  what does this stand for? This stands for  one plus two plus three plus four, and so on all the way to n, that is called an arithmatic progression  and we have a formula for it, right?  you don't have to remember this formula, but you must have seen it  before in some class or another. Okay and this one, I want you to tell me what this one is equal to  So either one or n. So what do we do here?  this is a machine. We have to take it and add it for each i  i goes from 1 to n, so we are going to add this thing together  n times. So we'll go 1 +1 +1 +1 +1 n times. So this is n questions? So I evaluated both of these objects. So this  n(n+1) over 2, this is n  so I continue here limit as n goes to infinity  I have to collect everything I have here
so 3/n 3 over n, n(n+1)  over 2 minus 2  n. Okay.  so something is going to simplify. I am going to  divide through by n. One second so 3 this n cancels, and I'm dividing by n  so I have 1+1/n over 2 minus 2 okay, dividing through by n all the terms. And now I can take the limit  I do this in order to take the limit. The limit is easy  because 1/n goes to zero as n becomes large  so this is 0 so I have 3 times 3 halves  -2 so this is the answer I get and we'll go here. See?  It's the same thing. So you can see two methods, right? This is  done very quickly this is long and
painful but we could only do this because these were triangles  right? This new definition eventually will give us a tool to evaluate the area under   curves. Not just straight lines. Question?  student: how did you divide everything by adding it?  So here, let's write this  I have 3, this n cancels so I have 3, and I divide by n  here. n+1 over n  2, right? And  n from here,  I get this.  more questions? okay very good  so  it is actually very rare when we can complete this calculation  and get the exact numerical answer again, this was possible because it's such  a simple function  so sometimes it make sense to
approximate let's not calculate this...the limit  but we can get an approximate answer  Okay. So in order to do this, we introduce  the midpoint rule so simply put  this rule allows me to approximate this
integral by a finite sum both of f of xi bar  delta x, sorry, delta x.  What's xi bar? So let's  draw one of the intervals  from xi-1 to xi. Remember the right point rule  we take our sampling point here. Left point rule, we take it here.  midpoint rule, we use the middle. So  so we say that xi* simply equals xi bar  where it's the middle point. xi bar  xi okay   is it me? no okay fine.  So this is the midpoint, and thus the name  was a question? okay.  was that music?  so this is the midpoint and let you let me give you an example of how we can apply this rule to approximate  a particular integral. So approximate the integral from 0 to 1 x^2 dx with n = 4 by using the midpoint  rule. So let's draw  every time they ask you to evaluate  the Reinmann sum. The best thing to do is to draw your interval   actually right down the partition find the sampling points. Do it systematically, and then it's very easy  so we go from 0 to 1 they specify n = 4. So this means that we divide it in to 4 subintervals. This is 1/2 one-quarter, three quarters. Four  intervals. Now we have to find the sampling point  Which has to be the middle point, because we are using the midpoint rule  so this one here, x1 bar  what is it equal to? 1 over 8 okay, x2 bar  is 3 over 8 x3 bar  5 over 8 and x4 bar is 7 over 8 questions?  So we know our points, just put it here.  we have to evaluate the function at these four points. And the function is x^2 so f(x)  is x^2. So  f(xi) is just xi^2 so we can say that the integral from 0
to 1 x^2dx is approximately equal to  okay, each term here will contain the multiplier delta X so I'm going to take it out of the bracket  and I forgot to calculate delta x. So  what's delta x here?  what is the distance between my  points in the partition? One quarter, right?  n=4, the total interval is one, so it's one quarter.  so I have one quarter that comes out and here I have the sum f1-- oh, f x1, x2 x3,  x4. So one quarter  of one over eight squared, 3 over 8 squared, 5 over 8 squared, seven over 8 squared. So if you  put it in your calculators, maybe one of you can do it here, if you have a  calculator we're going to evaluate this number and see how good  this approximation is to this integral  what is the exact value of this integral? 1/3. We did it last time, right? So this is going to be  something like 0.32 I believe something like this. So it's not going to be precisely  the exact value, but it's going to approximate it  and if we take a higher n, we will get a better answer okay. Questions? Question?  Student: ""the 1/8, 3/8, 5/8, where do they come from?"" Where do they come from? So these are these values   Okay. These are the sampling points for each interval  I have to take the middle point and evaluate my function  at that point so if I use different
color inside each interval  I calculated the middle  of that interval. So my first interval goes from 0 to one quarter  I only have four intervals, this, this, this and this.  for the first interval, the middle corresponds to 1/8 I have to evaluate my function at that point  the function is x^2, so the function evaluated at that point  is 1/8 squared. That's the first  term. Then I have to take the second inerval its middle is given by 3/8, the function  at that point is given by 3/8 squared and so on. I add them up. More questions?  So next let's go over some  properties of definite integrals  so the first property I write down here  the integral from  a to b f(x) dx. The limits of integration, a to b can be...can be swapped  and we actually can go from b to a  so if a is less than b, we can go this way  or we can go the other way  but the corresponding integral  acquires a negative sign. Why is that? Because when we go in the positive direction, the increment, delta x,  is a positive quantity. When we go back,  the value decreases .So the increment is negative. Okay?  so if you look at the Reimann sum  you end up multiplying by a negative value, delta x.   so we have a minus sign here. Something that immediately follows from this  is the following: the integral of f(x)dx from a to a-- what's that equal to? 0. Two reasons for this: the first reason comes from this formula if I take them
both to be a then this is equal to minus the same thing, so this can only be zero   the other reason is that we're considering a the area
under a curve of an infinitely thin  base. So it has to be zero, right?  okay so then let's list a bunch of properties that will help us evaluate very many integrals and Riemann sums, too  so property number 1 states the integral of a constant and it's equal to this  so let's suppose that my function is the constant, c which can be negative or positive  so then this object on the left its either the area under this curve if this is a positive constant or it's the area above that curve  with a minus sign, so it's the same thing, and this is a rectangle   so the area is equal to b-a times C. and that's what we have here  on the right hand side. Okay? So it's very easy  to evaluate the definite integral of a
constant because it comes from this geometric  consideration. Questions?  Okay. The next one talks about  the integral of a sum  of two functions. So here, both f and g are functions of x. Question? Student: just to make sure, I can't see. Is that an equal sign?  here yes. Student: So that only works it works if-- oh, I see. nevermind. It works for both positive  and negative values of C and also for C=0 So if I have a sum of two functions, then I can evaluate  the integral separately. It's fdx plus gdx gdx. How do I know this?  this is very easy to prove  all I need to do is recall the definition okay so this is the definition of the integral f(x)  so I can replace f with f+g then I'll have f+g here  so I can split this sum in to two sums  one was f, the other one was g. Then I can evaluate   the limits separately. The limit for the f sum plus the limit for the g sum and that's equal to these two things  Okay? So I'm sorry, I shouldn't forget to put the limits of integration. Because what I just wrote actually as a very different meaning. That's the antiderivative, that's not what I'm talking about here  Okay. Property number 3: the integral of a constant times a function is given by the same constant times the integral over the function Proof? You go here again. If we have c times f here  then we have c times f here. c comes out of the sum c comes out of the limit, in order to have a c times this which is given by the integral times c okay, and finally property number  4 I'm not sure why it's listed as a
separate property in the book but i's the integral of the difference between two functions  it actually follows from properties 2&amp;3 but I'll write it down nonetheless so the integral of a difference is the difference between the two integrals  and next we apply all these rules  to calculate an example so let's look at the integral from 0 to 1 5+2 x^2dx so one way to approach it will be to do it by definition. Write down the limit of a sum of this thing, create a partition  calculate sampling points and then do the sums and then the limit  it's very, very tedious. We're going to do the same thing  by using the rules so we notice that the integrand is a sum of two functions  so by rule number two I'm going to
present it as the sum of two integrals.  So this is rule number 2. I can evaluated separately. Okay, now  the first one, we have to look at rule number 1 which is a constant, right?  we have five here so we have five times 1 minus 0. And that's by rule number one  so I dealt with this one nicely.  Now this one we have to look at rule number 3. we have a constant inside, 2 comes out. So we have 2  so this is rule number 3. So what's this equal to?  I already asked you like five times today.  1/3, right?  so we're going to use this fact to write down the answer Okay? Very easy.  So if we can decompose it somehow and follow different rules, we can  evaluate integrals easily. Questions?  now rule  property number five  let's suppose that I have are an interval from a to b  and I look at an integral of fdx-- of x dx, and I  define another point, C which may or may not be between a and b  actually, it could be anywhere else. Then I can rewrite this integral as the sum of the integral from a to c plus an integral from c to b.  I will illustrate this with a picture  let's suppose for simplicity that f is positive  and the quantity on the left is  has the meaning of the integral under the curve. Question? Student:  ""just want to make sure we're on the same page. C is between a and b?"" It doesn't have to be. So in this example it is   but in general it doesn't have to be. It's just another constant.  So... and you can prove it, of course. Here we illustrated it with an example that  is more obvious on the left we have the area under this curve.  the whole thing. Now on the right, we have two integrals  which is this area and this area you add up the two, and  you get the full thing. Okay? So this is the the meaning of this property as an
example for instance we can say that we can write this down  as the integral from 0 to 1 1 to five. So this is an example  Okay. Question?  Student: can you draw an example where c is not between a and b?  Yes. So let's consider the following geometry  a, b, c so we have to assume in this case that f is actually defined  for the whole interval. Okay, so if f only exists here,  we cannot do this. but if c is in the domain of f, then we can potentially  define c to not belong to this interval.  so, so this is my function f okay so I have an integral from a to b  fdx is equal to  from a to c fdx from c to b dx. Now let's simplify this. So first of all,  this first interval  I'm going to use this rule and flip the limits  so I get abfdx is minus from c to a fdx now the second integral spans  the interval from c to b. okay?  so I'm going to split this one in to this plus this  so instead of this integral I'm going to write  from c to a fdx plus from a to b fdx. Right?  now you can see that this the first and the second terms cancel
out and I get that identity the left hand side is equal to the right hand side  so it's a little bit more... less obvious
but it also works more questions? Okay. Finally, the last  group of properties is called comparative properties  they are numbered from 6 to 8, So let's suppose that f  is non-negative then the integral from a to b f(x)  dx is non-negative. This is obvious because for non-negative fs the integral is nothing but the area under the curve, and that's a non- quantity. Okay? So we already know this.  fine number seven let's suppose that we have
two functions and one of them is bigger than the other  on the same, you know  interval. Then we can compare  the integral of f was the integral  of g. The function is bigger  and then the integral is bigger too. Let me illustrate this  with an example Let's suppose that both functions are  non-negative, okay? For simplicity. So this is the larger of the functions, f and this is g okay? Between a and b so the integral of f is this whole area  and the integral of g is part of it  right so you can see that the area under
the function g is smaller than the area under the function f,  and that's exactly what this says. Okay?  this only works if f is greater than g. If they intersect somewhere,  then we cannot make this conclusion
finally the last property property 8 Is like this. Let's suppose that we have two numbers  m little and M capital  Which work like this. so this is my function from a to b and there's some value, m and another one, M capital  such that they enclose this function. One is always smaller  than my function, and the other one is always larger  for all values of x on the interval. Okay? Let's suppose I know  that these two numbers exist. make an estimate of the integral of f okay? I know what it's bigger than and I know what it's smaller than  what are these things? So the integral of f is this area  now look at this  box here this is completely contained inside this bigger area, and the area of this box  is m times b-a.  well I can see that the it into love F youth gonna the smaller done that this box on the other hand but those are the books this on the
aerial the box you buy em capital you minus a in a
completely contains then the growth so I can have there's bound the upper
bound on the bill so a I will say this was a an example
and then I let you go game example like this fifth find the %uh so the integral from 0 to 1/4 0 he to the Linus affects squared yes so at this stage we have no idea what this alias but got but I can read
it down a double in the quality that defines what it is so let's blow this function it some taking
functional X day because you're a and one a when ethical 0 itself is equal to 1 in 1x chemical 21 it's now the is E to the -1 Pratt so for sure I can write down the bowling double
inequality he to the -1 is almost less or equal to you to the minus
excluded and thus always less or equal to what so this function that lot is bounded between if -1 which is
something like one quarter and one someone to use proper 28 to a evaluate I the bounds for this and I'll on the left I'm gonna have you to the -1 times 110 and on the right they have one so to conclude well I know that this integral is between one
already and one and this is much more
information than I get by just looking at this rate thank you much",Math 2B. Calculus. Lecture 03. Definite Integral.,"UCI Math 2B: Single-Variable Calculus (Fall 2013)
Lec 03. Single-Variable Calculus -- Definite Integral --
View the complete course: http://ocw.uci.edu/courses/math_2b_calculus.html
Instructor: Natalia L. Komarova Ph.D.

License: Creative Commons CC-BY-SA
Terms of Use: http://ocw.uci.edu/info
More courses at http://ocw.uci.edu

Description: UCI Math 2B is the second quarter of Single-Variable Calculus and covers the following topics: Definite integrals; the fundamental theorem of calculus. Applications of integration including finding areas and volumes. Techniques of integration. Infinite sequences and series. Parametric and polar equations.

Recorded on October 2, 2013

Required attribution: Komarova, Natalia L. Math 2B (UCI OpenCourseWare: University of California, Irvine), http://ocw.uci.edu/courses/math_2b_calculus.html. [Access date]. License: Creative Commons Attribution-ShareAlike 3.0 United States License. (http://creativecommons.org/licenses/by-sa/3.0/deed.en_US).",UCI Open,PLqOZ6FD_RQ7mxsWrqTwndCBFXAKC0Xho9,nqHLEhz5DXY
Determinantsalongotherrows_cols_Matrixtransformations_LinearAlgebra_KhanAcademy-nu87kfmwNfU.en.csv,"In the last video, we evaluated
this 4 by 4 determinant and we found out
that it was equal to 7. And the way we did it is we
went down this first row. We used the definition I gave
you in the last few where use this first row. I could even write it here. We said this is equal
to 1 times the determinant of 0, 2, 0. 1, 2, 3. 3, 0, 0. Minus 2 times the determinant. You cross these guys. Cross that row and column out. 1, 0, 2. 1, 0, 2. 2, 2, 0. 0, 3, 0. And then we went to the plus
the 3 times its sub matrix. I don't have to figure
that out. Just cross out that row
and that column. And then minus 4-- just keep
switching the sign-- times the determinant of its sub matrix. So this one had a bunch of
terms. And this one's going to have a bunch of terms. Cross
that row and that column out. You get 1, 0, 2. 0, 1, 2. 2, 3, 0. I'll just write it here. 1, 0, 2. 0, 1, 2. 2, 3, 0. And that is a completely
legitimate way to figure out a determinant. And that was our definition for
how to find a determinant. But I want to show you in this
video that there's more than one way to solve for
determinant. What I'm going to show you this
way is the same thing that we did down
this first row. We can actually do down any
row or any column of this determinant, or of
this matrix. And the reason why that's useful
is because we can pick rows or columns that
have a unusually large number of zeros. Because that tends to simplify
our computations. So the first thing that you have
to do before you embark on picking an arbitrary row or
a column, let's say, for example, we want to pick this. Let's do one row and one
column in this example. So let's say we want to go down
that row instead because we like the fact that has
a lot of zeros there. The first thing you have to do
is remember the pattern. Remember, you switch signs
on the coefficients. You don't just switch signs
as you go down a row. You also switch signs as
you go down a column. So the general pattern for 4
by 4 will look like this. It'll be plus, minus,
plus, minus, minus, plus, minus, plus. And then you get a plus, minus,
minus, plus, plus, minus, minus, plus. It's really this checker
board pattern. If you wanted to figure out
the sign for any ij. So let's say you wanted
to figure out the sign for, this is 2, 2. So if you want to find
the sign-- let me write it this way. Say we have a function, let
me define a function. I think the checker board
pattern's pretty clear to you, but I'll just write it down. Let's say I wanted to figure
out the sign-- the sign not the trig ratio. I want to figure out the sign of
any entry where you give me an i and a j. What you could do is you
just take negative 1 to the i plus j power. So if you wanted to figure out
the sign for the, let's say, you are in row 4, column 2. Row 4, column 2. So what will it be? Do 4 plus 2. Negative 1 to the sixth
power is equal to 1. That's going to be
a positive 1. Let's say you want
to take this guy. So this is i is equal to 2. j is equal to 3. We're in the second
row, third column. 2 plus 3 is 5. Minus 1 to the fifth
power is minus 1. And you have a minus there. So that's another way
to think about it. But the checker board
pattern's pretty straightforward. So now that you have the checker
board pattern in your mind, let's go down this row. Let's go down this row. So we start with the 2. But notice that we have
to multiply by minus. Because we go plus, minus,
plus, minus. So you have a minus 2 times the determinant of its sub matrix. So you cross out this
row and that column. And you're left with this
matrix up here. So it's 2, 3, 4. 0, 2, 0. 1, 2, 3. This is a minus and then
you have a plus. So you have a plus 3 times--
get rid of this guy's column and row. And you have 1, 1, 0. 1, 1, 0. That's that right there. 3, 2, 2. 3, 2, 2. And you have 4, 0, 3. 4, 0, 3. And then you would have a
minus a 0 times its sub matrix plus a 0. But we can ignore those
because 0 times anything is a 0. So already we've simplified our
determinant a good bit. So let's see if we can
evaluate this and get the same number. Because only then will it be
reasonably satisfying. So what's the determinant
of this guy? Well we can do the exact
same principle. We can go down any row or
column that seems to be especially simple. So let's go down that row. Because that row seems
especially simple. So this is going
to be minus 2. That's this minus 2 right
here times the determinant of this guy. So the determinant of this guy,
we just have to go and say OK we have a plus,
we have a minus, and then we have a plus. It's going to be minus 0 times
its sub determinant, I guess we would call it. Get rid of that row or that
column and that row. So it'd be minus 0 times
anything, that's just going to be 0 plus 2. So plus 2 times the
determinant. Get rid of its row
and its columns. 2, 4, 1, 2. 2, 4, 1, 3. And then you have a minus
0 times this thing. But who cares what that is
because you have a 0 times. So that just simplified
to that which is nice. Let me write it like that. And then you have plus 3 times
this thing right here. We don't want to do
the first row. We have no non 0 terms here. Let's at least do this
row right here for a little bit of variety. None of the columns actually
seem that interesting. They all have, at most, one 0. So if we do that one right here,
this is a plus, minus, plus, minus, plus. So we'll have a plus
0 times 3, 4, 2, 0. We can ignore that. Minus 2 times the determinant. Get rid of this column,
that row. I have to be very careful. I put this minus there, but
there wasn't a minus 1 there. Let me write it like-- I want to
make sure I don't make any careless errors right here. This is a plus 1. I just drew a minus 1 there
to show you how things switch signs. So this is going to
be a 3 times. So we're going to go down--
This is this 3 right here. I lost my bearings with
that minus there. We're trying to find the
determinant of this. So it's 0 times this matrix. We can ignore that. Minus 2 times its sub matrix. Which is that and that. So it's 1, 1, 4, 0. And then you have a plus
3 times its sub matrix. 1, 3, 1, 2. 1, 3, 1, 2. Just like that. Let's see if we can
simplify this. 2 times 3 is 6 minus
1 times 4. So, this becomes 6 minus 4. So that's 2. So this whole thing simplifies
to 2 times 2 which is 4. 4 times minus 2. The whole thing simplifies
to minus 8. Now, this guy right here, we
have 1 times 0, which is 0, minus 1 times 4. This is minus 4 times minus 2. This whole thing becomes
a positive 8. You have 1 times 2, which
is 2, minus 1 times 3. Which is minus 3. So you get a minus 1. So this becomes a minus--
I mean you get 2 minus 3 minus 1 times 3. So this becomes a minus 3. So you have an 8 minus a 3. So this becomes a minus five. You have a 3 times a minus
5 right there. So 3 times minus 5 is going
to be equal to minus 15. Let me make sure I got-- oh
I made a silly mistake. If you have an 8 minus a 3, this
is 8, this is minus, this is going to be 5. Very easy. Your brain starts to get fried
if you do this long enough. And the you have a 3 times
a 5 and you get a 15. You get a 15. And then you have a 15. This term plus this term is 15
minus 8 which is equal to 7. Which, lucky for us, I barely
evaded making a careless mistake there, we got
the right answer. But this is a much simpler
computation than we did in the last video. And it was much simpler because
we picked the row that happened to have a lot
of zeros on it. So we only had two of these
terms instead of four terms like we had in the last video. And you could do the same, you
could pick columns that have a lot of zeros. You just have to make sure
that you always use this checker board pattern.",Determinants along other rows/cols | Matrix transformations | Linear Algebra | Khan Academy,"Finding the determinant by going along other rows or columns

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-rule-of-sarrus-of-determinants?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-nxn-determinant?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,nu87kfmwNfU
Distributivepropertyofmatrixproducts_Matrixtransformations_LinearAlgebra_KhanAcademy-oMWTMj78cwc.en.csv,"Let's say we have three
matrices, A, B, and C. And let's say that B and C are
both m by n matrices, and that A is a, let's call it
a k by m matrix. And what I want to do is figure
out whether matrix products exhibit the
distributive property. So let's test out A
times B plus C. And of course these
are all matrices. So B, just to make things clear,
the matrix B could be represented as just a bunch of
column vectors, B1, B2, all the way to Bn. And the matrix C can also be
represented as just a bunch of column vectors. So could the matrix A,
but I don't have to draw that just yet. So the matrix C could just be
represented as a bunch of column vectors, C1, C2,
all the way to Cn. Maybe I should've drawn
this taller. These are column vectors, so
they actually have some verticality to them. I think you've seen that
multiple times. So what is A times B plus C? Well, let's figure out
what B plus C is. This is equal to A
times B plus C. When you add B plus C, the
definition of matrix addition is, you just add the
corresponding columns. Which essentially boils
down to adding the corresponding entries. So the first column is going
to be equal to B1 plus C1. The second column is going
to be B2 plus C2. And you're going to go all the
way to the nth column. It's going to be Bn plus Cn. Now by our definition of
matrix-matrix products, this product right here is going to
be equal to the matrix, where we take the matrix A and
multiply it by each of the column vectors of this matrix
here, of B plus C. Which as you can imagine,
these are both m by n. In fact they both have to have
the same dimensions for this addition to be well defined. So this is going to be
an m by n matrix. I already you told you
that A is a k by m. And we know this is well defined
because A has the same number of columns as B
plus C has of rows. So this is well defined. And this is going to be equal
to-- let me switch colors again-- A times the column
vector B1 plus C1. The second column is going to
be A times the column vector B2 plus C2. I'm running out of space. This is going to be all the
way to A times the column vector Bn plus Cn. This is our definition of
matrix-matrix products. You just take the first matrix
and you multiply it times each of the column vectors of
the second matrix. And we can say that because
we've already defined matrix-vector products. So what is this thing on
the right equal to? I'll keep switching colors. We know that matrix-vector
products exhibit the distributive property. I don't even remember when
I did that video. But we've assumed
it for a while. It's a very trivial
thing to prove. So each of these columns is
going to be equal to, let me write this way. This guy right here
can be re-written. The first column is going to be
A times column vector B1, plus A times the column
vector C1. This term right there
is the same thing as that term right there. The next one is going to
be AB2 plus matrix A times the vector C2. And then the nth column is going
to be the matrix-- keep going-- A times the column
vector Bn, plus matrix A times the column vector C. Just like that. Now we can write this
matrix as the sum of two different matrices. So what is this going
to be equal to? This is equal to-- let me see,
I'll just write it right here-- AB1 as the first column,
AB2 as the second column, all the way to ABn
as the third column. So that's these terms
right there. And then if I were to add to
that the matrix A times vector C1, A times the column vector
C2-- these are just the different columns of this
matrix-- and we just then have the matrix A times the
column vector Cn. These represent these terms. So clearly if I add these two
matrices, I just add the corresponding column vectors
and I'll get this matrix up here. But what is this equal to? This right here, by definition,
this is the matrix A times the matrix B. The definition of matrix
products is you take the first matrix and multiply times
the column vectors of the second matrix. And by the same argument, I
guess you could say, this is equivalent to A times C. And all of this-- remember we
just had a bunch of equal signs-- is equal to
A times B plus C. So now we can say definitively
that as long as the products are well defined and the sums
are well difined, so they all have to have the correct
dimensions, that A times B plus C is equal to AB plus AC. So matrix products do exhibit
the distributive property, at least in this direction. And I say that because remember
matrix products are not commutative. So we don't know necessarily
that B plus C times A is equivalent to that. In fact, most of the time
these two things are not equivalent. So we don't know quite yet
that if we reversed this, whether it's still going
to exhibit the distributive property. So let's try to do that. And I'll do it a little bit
quicker, because I think you know the general
argument here. So let's take B plus
C times A. And I'll just write A as
its column vectors. A1, A2, all the way to-- A has
m columns if I remember correctly, right A has
m columns-- so all the way to Am. And by the definition of matrix
products, this is going to be equal to the matrix--
B plus C is just a matrix, right? We can represent it as the
sum of two matrix, but it is just a matrix. So it's B plus C times each of
the column vectors of A. So it's going to be equal to
B plus C times A1, B plus C times A2, all the way to
B plus C times An. And, once again, it was many
videos ago that I think we showed that matrix-vector
products are distributive, so we can just distribute
this vector along these two matrices. And if I haven't proven it
yet, it's actually a very straightforward prove to do. So we could say that this is
equal to BA1 plus CA2. That's the first column. The second column is B times A2,
plus C times A2, all the way to B times An,
plus C times An. And then what is
this equal to? I'll write it out. This is equivalent to B times--
this is A1, no this is an A1 right here-- A1, and then
B times A2, all the way to BAn plus the vector C times
A1, C times A2, all the way to C times An, right? This guy represents these terms
right there, and this guy represents the first
terms in each of these column vectors. And this, by the definition of
matrix products, is just equivalent to BA, and then this
is just equivalent to CA. So now we've seen that the
distributive property works both ways with matrix-vector
products. That B plus C times A is equal
to BA CA, and that A times B plus C is equal to AB plus AC. Now the one thing that you have
to be careful of is that these two things are not
equivalent [UNINTELLIGIBLE]. We just figured out that this
guy is equal to BA plus CA. So the distribution works
in both ways. But when you're dealing with
matrices, it's very important to keep your order. So this is going to be you
have the A second here. So it is BA plus CA. You can't say that this is
equal to AB plus AC. You can't just switch
these up. Because we've shown multiple
times, or we've talked about it multiple times, that matrix
products are not commutative. You can't just switch the
order of the products. But we've at least shown
in this video that the distributive property
works both ways.",Distributive property of matrix products | Matrix transformations | Linear Algebra | Khan Academy,"Showing that matrix products are associative

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_transformations/v/linear-algebra-introduction-to-the-inverse-of-a-function?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/composition_of_transformations/v/matrix-product-associativity?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,oMWTMj78cwc
Logisticdifferentialequationintuition_Firstorderdifferentialequations_KhanAcademy-oiDvNs15tkE.en.csv,"In the last video, we took a stab at modeling population as a function of time. And we said, okay, well
maybe the rate of change of population with respect to time is going to be proportional to the population itself. That the rate will increase as the population increases. And when you actually try to solve this differential equation, you try to find an N of
T that satisfies this, we found that an exponential would work. An exponential satisfies
this differential equation. And it would look like this visually. It would look like this, it would look like this visually. Where you're starting at
a population of N not, this is the time axis, this is the population axis. And as time increases, population increases exponentially. Now we said there's an issue there. What if Thomas Malthus is right? That the environment can't support... let's say that the
environment can't support... let me do this in a new color. Let's say that the environment
really can't support more than K, more than a population of K. Then clearly the population can't just go and go right through the ceiling. They're not going to be able to have food, or water or resources
or whatever it might be. They might generate too much pollution. Who knows what it might be. And so this first stab
at modeling population doesn't quite do the trick. Especially if you are
kind of in Malthus's camp. And that's where PF, and once again I'm sure I'm mispronouncing the name, Verhulst is going to
come into the picture. Because he read Malthus's work, and said, ""Well yeah, I think
I can do a pretty good job ""of modeling the type of behavior ""that Malthus is talking about."" And he says what we really want is something... Let me write it, so the rate... let's try to model. Let's set up another
differential equation. And now let's say okay, instead of, if N is substantially smaller than what the environment
can support, then yeah, that makes sense to
have exponential growth. But maybe we can dampen this, or maybe we can bring this growth to zero as N approaches K. And so how can we actually modify this? Maybe we can multiply it by something that for when N is small, when N is much smaller than K, this term right over here
is going to be close to one and when N is close to K, this term is close to zero. So let me write that. So these are our goals for
this term, right over here. When N is much smaller than K, so now the population is
not constrained at all, people can have babies and those babies can be fed and then they can have
babies, et cetera, et cetera, then this thing should be close to one. And so then you have
essentially our old model. But then as N approaches K, then this thing should approach, then this term or this expression should approach zero. And what that does is as N approaches the natural limit, the
ceiling to population, then no matter what this is doing, if this thing is approaching zero, that's going to make the actual rate of growth approach zero. So food is going to be more scarce, it's going to be harder to find things. And so what can I construct here, dealing with N and K that
will have these properties? And for fun, you might actually want to pause the video and see
if you can construct a fairly simple algebraic statement using N and K and maybe the number one if you find the need, for an expression that
has these properties. Well, let's see. What if we start with a one and we subtract N over K? Does this have those properties? Well yeah, sure it does. When N is really small, or I should say when it's a small fraction of K, this is going to be a small fraction, then this whole thing is going to be pretty close to one. It's going to be a
little bit less than one. And when N approaches K, as N gets closer and
closer and closer to K, then this thing right over here is going to approach one, which means this whole expression is going to approach zero. Which is exactly what we wanted. And this thing right
over here is actually, and this is used in tons of applications, not just in population modeling but that's kind of one of its first reasons or motivations. This differential equation right over here is actually quite famous. It's called the logistic
differential equation. And in the next video, we're actually going to solve this. And it's actually, this is a separable differential equation. You can actually solve it just using standard techniques of integration. it's a little bit hairier than this one, so we're going to work
through it together. And we're going to look at the solution. The solution to the logistic
differential equation is the logistic function, which once again essentially models population in this way. But before we actually solve for it, let's just try to interpret this differential equation and think about what the shape of this
function might look like. And to do that, let me draw some axes here. Let me draw some axes here. So that's my time axis, that's my population axis, let me scroll up a little
bit because sometimes the subtitles show up around here and then people can't see what's going on. So let's think about a
couple of permutations, a couple situations. So if our initial, if our
N at time equals zero, remember N is a function of T. If at time equals zero N is equal to zero, then this term is going to be zero and then your rate of
change is going to be zero, and so you're not going
to add any population. And that's good. Because if your population is zero, how are you going to actually be able to add population? There's no one there to have children. So there's actually one constant solution to this differential equation, which is just N of T is equal to zero. And this satisfies the
logistic differential equation. Hey, if your population starts at zero if N sub not is zero, then you're just going
to be at zero forever. Well that's actually what
would happen in real life if there's no one there to have kids. Now let's think about another situation. What if our population, what if N not is equal to K? What happens if N not is equal to, so that's K right over there, what happens if at time equals zero, this is our population. Well if N is equal to K, then this is one minus one, then this thing is zero, and so our rate of population change is going to be zero. So essentially if my population is zero then after a little bit of time, my population is still the same K. If my rate of change
of population is zero, that means my population
is staying constant. And so my population's just going to stay there at K. And that's actually believable. Malthus would actually probably say that you're gonna have, maybe it grows a little bit beyond the
capacity of the environment and then you have some flood, or some hurricane or some famine and it goes around. But for our purposes, you can never model anything perfectly. For our purposes, that's pretty good. You're at the limit of what the environment can handle, so you just kind of stay there. That's actually another constant solution. that N of T, if it starts, and now you can kind of appreciate why initial conditions are important. If you start at zero you're
going to stay at zero, if you start at K you're
going to stay at K. So that is N of T just stays K. But now let's think of a
more interesting scenario. Let's assume an initial population that's someplace between zero and K. So this is going to be... I'm going to assume initial population that is someplace, it's greater than zero, so there are people to
actually have children, and it is less than K, so we aren't fully maxing
out the environment. Or the land or the food or the water or whatever it might be. So what's going to happen? So, and once again, I'm just going to kind of sketch it, and then we're going to
solve it in the next video. So when N is a lot less than K, it's a small fraction of K, this term is going to be the main one that's influencing it. Because this is a small fraction of K, I mean even the way I drew it, it looks like it's about
a sixth or a seventh or an eighth of K, so it's one minus 1/8. So it's gonna be 7/8 times this. So really, this is what's going to dictate what our rate of growth is. And if this is kind of dictating it, we're kind of looking more of a... well, let's just think of it this way. As the population grows, the rate of change is going to grow. So it's going to look something like this. As our population gets larger, our slope is getting higher. It's getting steeper and steeper. But then as N approaches K, then this thing is gonna become, this is gonna be close to one minus... close to one. And so this is going to
become a very small number, it's going to make this
whole thing approach zero. So as N approaches K, the whole thing, the rate of change is going to flatten out. And we're gonna asymptote towards K. And so the solution to the logistic differential equation should look something like this. Depending on what your
initial conditions are. If your initial condition is here, maybe it does something like this. If your initial condition's here, maybe it does something like this. And once again, this is what's fun about doing differential equations. Before even doing the fancy math, you can kind of get an intuition, just by thinking through
the differential equation of what it is likely to be. Down here, or when N
is much smaller than K its rate of increase is increasing as N increases, and over here as N gets close to K, its rate of increase is decreasing. Now let's actually in the next video, actually solve for what
N, a solution to this and see if that confirms
what our intuition is.",Logistic differential equation intuition | First order differential equations | Khan Academy,"Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/logistic-differential-equation/v/solving-logistic-differential-equation-part-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/logistic-differential-equation/v/modeling-population-with-differential-equations?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,oiDvNs15tkE
Datastructures-ArrayimplementationofQueue-okr-XE8yTO8.en.csv,"In our previous lesson, we introduced you
to Queue data structure. We talked about Queue
as Abstract Data Type or ADT. As we know when we talk about
data structure as Abstract Data Type, we define it as a mathematical or
logical model. We define only the features or
operations available with the data structure, and do not go into implementation
details. In this lesson, we are going to discuss
possible implementation of a Queue. I will do a quick recap of what we have
discussed so far. A Queue is a list of collection with
this restriction with this constraint, that
insertion can be performed at one end, that we call rear of Queue or tail of Queue and Deletion can be performed at other end that we
call the front of Queue or the head of Queue. An insertion 
in Queue  is called enqueue operation. A deletion is called dequeue operation. I have defined Queue ADT
with these Four operations that have written here, in an actual implementation all these
operations will be functions,  front operation should simply return the
element at front of Queue should not remove any element from the
Queue, Isempty should simply check whether Queue is
empty or not and all these operations must take constant
time. Enqueue, dequeue or looking at element at front, the time taken for any of these
operations must not depend upon a variable like number of elements
in Queue or in other words, and complexity of all
these operations must be O(1). Okay! So let's get started, we are saying
that a Queue is a special kind of list, in
which elements can be inserted or removed one
at a time and insertion and removal happen at different ends of the Queue. We can insert
an element at  one end and we can remove an element
from the other end, just the way we did it for stack. We can
add these constraints or extra properties of Queue to some implementation of a list and
create a Queue. They're two popular
implementations of Queue, we can have an array based
implementation and we can have linked list based implementation. Let's first discuss array-based
implementation. Let's say we want to create a Queue of
integers. What we can do is we can first create an array of integers. I have created an array
of 10 integers here.  I have named this array A, now what
I'm going to do is, I'm going to use this array to store my Queue, what I'm going to
say is that at any point, some part after array
starting an index marked as front, till an index marked as rear will be my Queue. In this array I'm showing front of the
Queue toward left and the rear towards right.
In earlier examples I was showing front towards right and rear towards left. Doesn't really matter, any side can be
front and any side can be rear, it's just that an element must
always be added from rear side and must always
be removed from front. So if at any stage a segment of the array from an index
marked as front till an index marked as rear is my Queue and rest of the positions in the 
array are free space, that can be used to expand the Queue. To insert an element to enqueue, we can
increment rear, so we will add a new cell in the Queue
towards rear end and in this cell, we can write
the new value element to be inserted can come to this
position. I fill in some values here at these
positions. So we have these integers in the Queue and let's say we want to insert number 5. To
insert we will increment rear ofcourse there should be an available
cell in the right, an available empty cell in the right and
now we can write value 5 here. After insertion new rear index
is  7, and value at index 7 is 5. Now dequeue means we must remove an
element from front of Queue. In this example, here a dequeue operation
should remove number 2 from the Queue to dequeue, we can simply increment front because at any point only the cells
starting front till rear are part of my Queue.
By incrementing front I have discarded index 2 from the Queue and we do not
care what value lies in a cell, that is not part of the Queue, when
we will include cell in the Queue we will overwrite
the value in that cell anyway. So just incrementing front is
good enough for dequeue operation. Let's quickly write
pseudocode for whatever we have discussed so far. In my
code I will have 2 variables named front and rear, and
initially I'll set them both as -1. Let's say for and empty Queue both front and rear will be -1. To check whether Queue is empty
or not we can simply check the value of front
and rear and if they're both -1 we can say that
 Queue is empty. I just wrote isempty function here. -1
is not a valid index. For an empty Queue there
will be no front and rear. In our implementation we are saying that
we will represent empty state of Queue by setting both front and rear as -1. Now let's write the enqueue function.
Enqueue will take integer x as argument, there will be a
couple of conditions in enqueue. If rear is already equal to maximum
index available in array A, We cannot insert
or enqueue an element in such scenario we can return and exit. I would rather use a function named 
isfull to determine whether Queue is full or not.
If Queue is already full, we can't do much we should simply exit, else if Queue is empty we can add cell to the Queue, we can add cell at index 0 in the Queue, and now the
we can set value at index rear as x. In all other cases,
we can first increment rear, and then we can fill-in value X at index rear. I can get a statement a[rear] = X
outside these two conditional statements because it's common to them, so this is
my enqueue function. In the example array that I'm showing
here let's enqueue some integers. I'll make calls to enqueue function and
show you the simulation. In the figure here, let's say first I
want to insert number 2 in the Queue, I'm making a call to
enqueue function passing number 2 as argument. The Queue is empty, so we will set both front and rear as 0. Now we will come to this statement, we
will write value 2 at index 0. So this is Queue after one enqueue
operation, front and rear of the Queue is same. Let's make
another call to enqueue, this time I want to insert number 5.
this time Queue is not empty, so rear will be incremented. We have
added a cell to the Queue by incrementing
rear and now we will write the value 5 at the new rear index. Let's enqueue 1 more number. I have 
enqueued 7. Let's not write dequeue operation. There will be
couple of cases in dequeue. If the Queue is already empty, we cannot
remove an element In this case we can simply print or throw
an error, and return or exit. There will be one more
special case, if the Queue has only one element. 
In this case, front and rear will not be -1 but they
will both be equal, because we are already checking
for -1 case in isempty function in the previous if. In
this else if we can simply check whether front is equal to rear
or not, if this is the case a dequeue will make the Queue empty, and to mark to
 Queue as empty, we need to set both front
and rear as -1. This is what we had said, that we
will would represent and empty Queue by
marking both front and rear as -1. In default or
normal scenario, we will simply increment front, we
should really be careful about corner cases in any implementation, that's fair most of the Bugs come. Okay,
so this finally is my dequeue function. In this example here at this stage, let's
say be want to perform a dequeue, Queue is not empty and we do not have
only one element in the Queue. So people simply increment front,
before incrementing we could set the value in this cell at index 0 as something, but the
value in a cell that is not part of Queue anymore doesn't really matter. At this stage it
doesn't really matter what we have at index 0 or index 3 or any other index apart the
segment between front and rear. When we will add a cell in the Queue, we will
overwrite the value in that cell anyway. Let's now perform some more enqueues
and dequeues. I'm enqueuing 3 and then I'm enqueuing 1, with each enqueue we are
incrementing rear. I just performed some more enqueue here. Now
let's the perform a dequeue. If I'll perform one more enqueue here, rear will be equal to the maximum index available
in the array. Let's enqueue one more now at this stage, we cannot enqueue an element anymore because we cannot
increment rear. Enqueue operation will fail now. 
There are two unused cells right now but with whatever
logic we have written, we cannot use these two cells that are
in the left of front in fact this is a real problem. As we
will dequeue more and more, all the cells left of front index will
never be used again they will simply be wasted. Can we do something to use these cells? Well, we can use the concept of a Circular
array. Circlular array is an idea that we use in a lot of scenarios. The idea is very simple, as we
traverse an array we can imagine that there is no end in
the array, from 0 we can go to 1, from 1, we can go to 2, and finally then we will reach the
last index in the array. Like in this example, when we are at index 9 the next index for me is index 0. We
can imagine this array something like this, remember this is
only a logical way of looking at the array. An circular interpretation of array, if I'm
pointing to a position and my current position is i then the next position or next index
will not simply be i + 1, it will be i + 1 Modulo the
number of elements in array or the size of array.
Let's say, N is the number of elements in array,
then the next position will be i + 1 Modulo N. The modulo
operation will get us the remainder upon dividing by N for any i other than N - 1. This modulo
operational will not have any effect, but for i = N - 1 next position will
be N module N which will be equal to 0.
When you divide the number by itself, the remainder is 0. Previous
position in circular interpretation of array, will be I + (N - 1) modulo N. We could simply say I-1 modulo N,
just to make sure this expression inside the parenthesis is always positive, I'm adding N here. Give this some thought.
You should be able to get why it should be (i + (N - 1)) modulo N. Now
with this interpretation of array, we can increment rear in an enqueue operation as long as there is any unused cell in
the array. I'm going to modify functions in my
pseudo code now. Isempty will remain the same we are
still saying that, for an empty Queue front and rear will be -1. Let's scroll down and come to enqueue. Now, in
circular interpretation I will call my Queue full, when the position next to
rear in circular interpretation that we will
calculate as (rear + 1) modulo N, will be equal
to front, so we will have a situation like this.
Right now, the next position to rear in circular
interpretation is front. So there is no unused cell.
The complete array is exhausted. Nothing will change in
this condition. If Queue is empty, we can simply set
front and rear as 0. In the last else condition, we will
increment rear like this, we will say 
rear = (rear+1) modulo N where N is number of elements in the array.
With this much change, my enqueue function is good. Now let's make a call to enqueue and insert
something in this array here, I want to insert
number 15. We will come to this last else condition,
Rear right now is 9, so this expression will be (9 + 1) modular N, N is 10
here the size of this array A is 10 here. This will evaluate to 0, now my new rear is 0. I'll write number 15 here. Let's now see what we need to do in dequeue
function. Nothing will change in the first two
conditions, if Queue is already empty or if there is only one element in the
Queue, we will handle these cases in same manner in the final else when we are
incrementing front, we need to increment it in a circular
manner so we will say  fornt = (front + 1) modulo N where N is the number of elements in the array, 
total number of elements in the array, or size of array. Now let's perform a dequeue, we will come to
this condition front right now is 2 so this will be (2 + 1)
modulo 10, one more cell is available to us now. This much is the core of our
implementation. Front operation will be really straightforward, we simply need to
return the element at front index. Here also, we first need to check whether the
Queue is empty or not, we should return a[front] only
when front is not equal to -1. All these
operations all these functions that have written here will take constant time, there complexity will be O(1). We
are performing simple arithmetic and assignments in the functions, and not doing anything costly like
running the loop, so time taken will  not depend upon size
of Queue or some other variable. I leave this here it should not be very
difficult converting this pseudo code to a running program in a language of your
choice, If you want to see my code you can check the description of this
video for a link. Thanks for watching.",Data structures: Array implementation of Queue,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described array based implementation of  queue data structure. 

Source Code in C++:
https://gist.github.com/mycodeschool/7331785

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,okr-XE8yTO8
Matrixvectorproductsaslineartransformations_LinearAlgebra_KhanAcademy-ondmopWLiEg.en.csv,"I think you're pretty familiar
with the idea of matrix vector products and what I want to do
in this video is show you that taking a product of a vector
with a matrix is equivalent to a transformation. It's actually a linear
transformation. Let's say we have some matrix A
and let's say that its terms are, or its columns are v1--
column vector is v2, all the way to vn. So this guy has n columns. Let's say it has m rows. So it's an m by n matrix. And let's say I define
some transformation. Let's say my transformation
goes from Rn to Rm. This is the domain. I can take any vector in Rn
and it will map it to some factor in Rm. And I define my transformation. So T of x where this is some
vector in Rn, is equal to A-- this is this A. Let me write it in this
color right here. And it should be bolded. I kind of get careless sometimes
with the bolding. But big bold A times
the vector x. So the first thing you might,
Sal, this transformation looks very odd relative to how we've
been defining transformations or functions so far. So the first thing we have to
just feel comfortable with is the idea that this is
a transformation. So what are we doing? We're taking something
from Rn and then what does A x produce? If we write A x like this, if
this is x where it's x1, x2. It's going to have n terms
because it's in Rn. This can be rewritten as x1
times v1 plus x2 times v2, all the way to xn times vn. So it's going to be a sum of a
bunch of these column vectors. And each of these columns
vectors, v1, v2, all the way to vn, what set are
they members of? This is an m by n matrix, so
they're going to have m-- the matrix has m rows, or
each of these column vectors will have m entries. So all of these guys
are members of Rm. So if I just take a linear
combination of all of these guys, I'm going to get
another member of Rm. So this guy right here is going
to be a member of Rm, another vector. So clearly, by multiplying my
vector x times a, I'm mapping, I'm creating a mapping from Rn--
and let me pick another color-- to Rm. And I'm saying it in very
general terms. Maybe n is 3, maybe m is 5. Who knows? But I'm saying it in very
general terms. And so if this is a particular instance, a
particular member of set Rn, so it's that vector, our
transformation or our function is going to map it to
this guy right here. And this guy will be a
member of Rm and we could call him a x. Or maybe if we said a x equaled
b we could call him the vector b-- whatever. But this is our transformation
mapping. So this does fit our kind of
definition or our terminology for a function or a
transformation as a mapping from one set to another. But it still might not be
satisfying because everything we saw before looked
kind of like this. If we had a transformation
I would write it like the transformation of-- I would
write, you know, x1 and x2 and xn is equal to. I'd write m terms
here in commas. How does this relate to that? And to do that I'll do
a specific example. So let's say that I had
the matrix-- let me to a different letter. Let's say I have my matrix
B and it is a fairly simple matrix. It's a 2, minus 1, 3 and 4. And I define some
transformation. So I define some transformation
T. And it goes from R2 to R2. And I define T. T of some vector x is equal
to this matrix, B times that vector x. Now what would that equal? Well the matrix is
right there. Let me write it in purple. 2, minus 1, 3, and 4 times x. x1, x2. And so what does this equal? Well this equals
another vector. It equals a vector in the
co-domain R2 where the first term is 2 times x1. I'm just doing the definition
of matrix vector multiplication. 2 times x1 plus minus 1
times x2, or minus x2. That's that row times
our vector. And then the second row
times that factor. We get 3 times x1. Plus 4 times x2. So this is what we might
be more familiar with. I could rewrite this
transformation. I could rewrite this
transformation as T of x1 x2 is equal to 2x1 minus x2 comma--
let me scroll over a little bit, comma
3x1 plus 4x2. So hopefully you're satisfied
that a matrix multiplication, it isn't some new, exotic
form of transformation. That they really are
just another way. This statement right here is
just another way of writing this exact transformation
right here. Now, the next question you might
ask and I already told you the answer to this at the
beginning of the video is, is multiplication by a matrix
always going to be a linear transformation? Now what are the two constraints
for being a linear transformation? We know that the transformation
of two vectors, a plus b, the sum of two vectors
should be equal to the sum of their transformations. The transformation of a plus
the transformation of b. And then the other requirement
is that the transformation of a scaled version of a vector
should be equal to a scaled version of the transformation. These are our two requirements
for being a linear transformation. So let's see if matrix
multiplication applies there. And I've touched on this in the
past and I've even told you that you should prove it. I've already assumed you know
it, but I'll prove it to you here because I'm tired of
telling you that you should prove it. I should do it at least once. So let's see, matrix
multiplication. If I multiply a matrix A times
some vector x, we know that-- let me write it this way. We know that this is equivalent to-- I said our matrix. Let's say this is an
m by n matrix. We can write any matrix
as just a series of column vectors. So this guy could have
n column vectors. So let's say it's v1, v2, all
the way to vn column vectors. And each of these guys are going
to have m components. Times x1, x2, all the
way down to xn. And we've seen this multiple,
multiple times before. This, by the definition of
matrix vector multiplication is equal to x1 times v1. That times that. This scalar times that vector
plus x2 times v2, all the way to plus xn times vn. This was by definition of a
matrix vector multiplication. And of course, this is going
to-- and I did this at the top of the video. This is going to have right
here, this vector is going to be a member of Rm. It's going to have
m components. So what happens if I take some
matrix A, some m by n matrix A, and I multiply it times the
sum of two vectors a plus b? So I could rewrite this as
this thing right here. So my matrix A times. The sum of a plus b, the first
term will just be a1 plus b1. Second term is a2 plus b2, all
the way down to a n plus bn. This is the same
thing as this. I'm not saying a of a plus b. I'm saying a times. Maybe I should put a
dot right there. I'm multiplying the matrix. I want to be careful
with my notation. This is the matrix vector
multiplication. It's not some type of new
matrix dot product. But this is the same
thing as this multiplication right here. And based on what I just told
you up here, which we've seen multiple, multiple times, this
is the same thing as a1 plus b1 times the first column
in a, which is that vector right there. This a is the same as this a. So times v1. Plus a2 plus b2 times v2,
all the way to plus an plus bn times vn. Each xi term here is just
being replaced by an ai plus bi term. So each x1 here is replaced
by an a1 plus b1 here. This is equivalent to this. And then from the fact that we
know that well vector products times scalars exhibit the
distributive property, we can say that this is equal
to a1 times v1. Let me actually write all of
the a1 terms. Let me write this. a1 times v1 plus b1 times
v1 plus a2 times v2 plus b2 times v2, all the way
to plus a n times vn plus bn times vn. And then if we just re-associate
this, if we just group all of the a's together,
all of the a terms together, we get a1 plus a-- sorry. a1 plus-- let me write it this
way. a1 times v1 plus a2 times v2 plus, all the way,
a n times vn. I just grabbed all
the a terms. We get that plus all the b
terms. All the b terms I'll do in this color. All the b terms are like that. So plus b1 times v1 plus b2
times v2, all the way to plus bn times vn. That's that guy right there. Is equivalent to this statement
up here; I just regrouped everything, which is
of course, equivalent to that statement over there. But what's this equal to? This is equal to my vector--
these columns are remember, the column for the
matrix capital A. So this is equal to the matrix
capital A times a1, a2, all the way down to a n, which
was our vector a. And what's this equal to? This is equal to plus
these v1's. These are the columns for the a,
so it's equal to the matrix A times my vector b. b1, b2, all the way
down to bn. This is my vector b. We just showed you that if I add
my two vectors, a and b, and then multiply it by the
matrix, it's completely equivalent to multiplying each
of the vectors times the matrix first and then
adding them up. So we've satisfied-- and this
is for an m by n matrix. So we've now satisfied this
first condition right there. And then what about the
second condition? And this one's even more
straightforward to understand. c times a1, so let me
write it this way. The vector a times-- sorry. The matrix capital A times the
vector lowercase a-- let me do it this way because
I want-- times the vector c lowercase a. So I'm multiplying my vector
times the scalar first. Is equal to-- I can write
my big matrix A. I've already labeled
its columns. It's v1, v2, all
the way to vn. That's my matrix a. And then, what does
ca look like? ca, you just multiply its
scalar times each of the terms of a. So it's ca1, ca2, all the
way down to c a n. And what does this equal? We know this, we've seen this
show multiple times before right there. So it just equals-- I'll write
a little bit lower. That equals c a1 times this
column vector, times v1. Plus c a2 times v2 times this
guy, all the way to plus c a n times vn. And if you just factor this
c out, once again, scalar multiplication times vectors
exhibits the distributive property. I believe I've done a video
on that, but it's very easy to prove. So this will be equal to c
times-- I'll just stay in one color right now-- a1 v1
plus a2 v2 plus all the way to a n vn. And what is this
thing equal to? Well that's just our matrix A
times our vector-- or our matrix uppercase A. Maybe I'm overloading
the letter A. My matrix uppercase A times
my vector lowercase a. Where the lowercase a is just
this thing right here, a1, a2 and so forth. This thing up here was the
same thing as that. So I just showed you that if I
take my matrix and multiply it times some vector that was
multiplied by a scalar first, that's equivalent to first
multiplying the matrix times a vector and then multiplying
by the scalar. So we've shown you that matrix
times vector products or matrix vector products satisfied
this condition of linear transformations
and this condition. So the big takeaway right here
is matrix multiplication. And this is a important
takeaway. Matrix multiplication or matrix
products with vectors is always a linear
transformation. And this is a bit
of a side note. In the next video I'm going to
show you that any linear transformation-- this is
incredibly powerful-- can be represented by a matrix
product or by-- any transformation on any vector can
be equivalently, I guess, written as a product of that
vector with a matrix. Has huge repercussions and you
know, just as a side note, kind of tying this back
to your everyday life. You have your Xbox, your Sony
Playstation and you know, you have these 3D graphic programs
where you're running around and shooting at things. And the way that the software
renders those programs where you can see things from every
different angle, you have a cube then if you kind of move
this way a little bit, the cube will look more like this
and it gets rotated, and you move up and down, these are all transformations of matrices. And we'll do this
in more detail. These are all transformations of
vectors or the positions of vectors and I'll do that
in a lot more detail. And all of that is really just
matrix multiplication. So all of these things that
you're doing in your fancy 3D games on your Xbox or your
Playstation, they're all just matrix multiplications. And I'm going to prove that
to you in the next video. And so when you have these
graphics cards or these graphics engines, all they are--
you know, we're jumping away from the theoretical. But all these graphics
processors are, are hard wired matrix multipliers. If I have just a generalized,
some type of CPU, I have to in software write how to
multiply matrices. But if I'm making an Xbox or
something and 99% of what I'm doing is just rotating these
abstract objects and displaying them in transformed
ways, I should have a dedicated piece of hardware, a
chip, that all it does-- it's hard wired into it-- is
multiplying matrices. And that's what those graphics
processors or graphics engines really are.",Matrix vector products as linear transformations | Linear Algebra | Khan Academy,"Matrix Vector Products as Linear Transformations

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/linear-transformations-as-matrix-vector-products?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/linear-transformations?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,ondmopWLiEg
Crossproductintroduction_Vectorsandspaces_LinearAlgebra_KhanAcademy-pJzmiywagfY.en.csv,"We've learned a good bit
about the dot product. But when I first introduced it,
I mentioned that this was only one type of vector
multiplication, and the other type is the cross product, which
you're probably familiar with from your vector calculus
course or from your physics course. But the cross product is
actually much more limited than the dot product. It's useful, but it's
much more limited. The dot product is defined
in any dimension. So this is defined for any two
vectors that are in Rn. You could take the dot product
of vectors that have two components. You could take the dot product
of vectors that have a million components. The cross product is
only defined in R3. And the other, I guess, major
difference is the dot produc, and we're going to see this in a
second when I define the dot product for you, I haven't
defined it yet. The dot product results
in a scalar. You take the dot product
of two vectors, you just get a number. But in the cross product you're
going to see that we're going to get another vector. And the vector we're going to
get is actually going to be a vector that's orthogonal to
the two vectors that we're taking the cross product of. So now that I have you excited
with anticipation, let me define it for you. And you probably already have
seen this once or twice in your mathematical careers. Let's say I have the vector a. It has to be in R3, so
it only has three components: a1, a2 and a3. And I'm going to cross that with
the vector b and it has three components:
b1, b2 and b3. a cross b is defined
as a third vector. And now this is going to seem a
little bit bizarre and hard to essentially memorize because
this is a definition. But I'll show you how I think
about it when I have my vectors written in
this column form. If you watch the physics
playlist, I have a bunch of videos on the cross product
and I show you how I think about the cross product when I
have it in the i, j, k form. But when I have it like this,
the way you think about this first term up here, this is
going to be another three vector or another vector in R3,
so it's going to have 1, 2, 3 terms. For the first term, what you do
is you ignore these top two terms of this vector and then
you look at the bottom two and you say, a2 times b3
minus a3 times b2. And I've made a few videos on
determinants, although I haven't formally done them in
kind of this linear algebra playlist yet. But if you remember kind of
co-factor-- finding out the co-factor terms for when
you're determining the determinant or if you're just
taking the determinant for a 2x2 matrix, this might
seem very familiar. So this first term right here is
essentially the determinant of-- if you get rid of this
first row out of both of these guys right here, you take a2
times b3 minus a3 times b2. So it's a2 times b3
minus a3 times b2. That was hopefully pretty
straightforward. Now, not to make your life any
more complicated, when you do the second, when you do the
middle row, when you do this one right here, so you
cross that out. And you might want to do a1
times b3 minus a3 times b1. And that would be natural
because that's what we did up there. But the middle row you
do the opposite. You do a3 times b1 minus
a1 times b3. Or you can kind of view it as
the negative of what you would have done naturally. So you would have done
a1 b3 minus a3 b1. Now we're going to do
a3 b1 minus a1 b3. And that was only for
that middle row. And then, for the bottom
row, we cross that out again or ignore it. And we do a1 times b2, just like
we do with the first row. Times a2 b1. Or minus a2 b1. This seems all hard to-- and
it is hard to remember. That's why I kind of have to get
that system in place like I just talked to you about. But this might seem pretty
bizarre and hairy. So let me do a couple of
examples with you, just so you get the hang of our definition
of the dot product in R3. So let's say that I have the
vector-- let's say I'm crossing the vector. I have the vector 1,
minus 7, and 1. And I'm going to cross that
with the vector 5, 2, 4. So this is going to be equal
to a third vector. Let me get some space to
do my mathematics. So for the first element in
this vector, the first component, we just ignore the
first components of these vectors and we say minus 7
times 4 minus 1 times 2. And these are just regular
multiplication. I'm not taking the
dot product. These are just regular
numbers. Then for the middle term, we
ignore the middle terms here and then we do the opposite. We do 1 times 5 minus
1 times 4. Remember, you might have been
tempted to do 1 times 4 minus 1 times 5 because that's how we
essentially did it in the first term. But the middle term
is the opposite. And then finally, the third
term you ignore the third terms here and then you do it
just like the first term. You start in the top left. 1 times 2 minus 7. Put that in parentheses. Minus minus 7 times 5. And so that is equal
to-- let me see. What do we get? Minus 7 times 4. I don't want to make a careless
mistake here. That's minus 28. Minus 2. So this is minus 30 for
that first term. This one is 5 minus 4. 5 minus 4 is just 1. And then 2 minus minus 35. So 2 minus minus 35. That's 2 plus 35. That's 37. So there you go. Hopefully you understand at
least the mechanics of the cross product. So the next thing you're
saying well, OK. I can find the cross product
of two things. But what is this good for? What does this do for me? And the answer is, is that this
third vector right here, and depending on whether I stay
in the abstract case or whether this case with numbers,
this is orthogonal to the two vectors that we took
the cross product of. So this vector right here is
orthogonal to a and b. Which is pretty neat. If you just go think about the
last video when we were talking about normal vectors
to a plane, we can define a vector by-- we can define
a plane by two vectors. If we define a plane-- let's say
that I have vector a right there, and then I
have vector b. Let me do vector b like this. Those define a plane in R3. Let me define your plane. So all the linear combinations
of those two guys, that's a plane in R3. You can kind of view it
as they might form a subspace in R3. That forms a plane. If you take a cross b, you
get a third vector that's orthogonal to those two. And so a cross b will
pop out like this. It'll be orthogonal to both of
them and look like that. And so this vector right
there is a cross b. And you might say, Sal, how did
you know-- I mean, there's multiple vectors that
are orthogonal. Obviously, the length of the
vector, and I didn't specify that there, but it could pop
straight up like that or why didn't it-- you know, you just
as easily could have popped straight down like that. That also would be orthogonal
to a and b. And the way that a cross b is
defined, you can essentially figure out the direction
visually by using what's called the right hand rule. And the way I think about it
is you take your right hand and let me see if I can draw
a suitable right hand. Point your index finger
in the direction of a. So if your index finger is in
the direction of a and then I point my middle finger in
the direction of b. So my middle finger, in this
case, is going to go something like that. My middle finger is going to
do something like that. And then my other fingers
do nothing. Then my thumb will go in the
direction of a cross b. You could see that there. My thumb is in the direction
of a cross b. And assuming that you are
anatomically similar to me, then you still get
the same result. Let me draw it all. So this is vector a. Vector b goes in
that direction. Hopefully you don't have a
thumb hanging down here. You know that a cross b in this
example will point up and it's orthogonal to both. To kind of satisfy you a little
bit, that the vector's definitely orthogonal or that
this thing is definitely orthogonal to both of these,
let's just play with it and see that that definitely
is the case. And what is orthogonal? What is in our context, the
definition of orthogonal? Orthogonal vectors. If a and b are orthogonal, that
means that a dot b is equal to 0. Remember, the difference
between orthogonal and perpendicular is that
orthogonal also applies to 0 vectors. So these could also
be 0 vectors. Notice that I didn't say that
any of these guys up here had to be nonzero. Well, in a little bit, we'll
talk about the angle between vectors and then you have
to assume nonzero. But if you're just taking a
cross product, nothing to stop you from taking-- no reason
why any of these numbers can't be 0. But let me show you that
a cross b is definitely orthogonal to both a and b. I think that might be somewhat
satisfying to you. So let me copy a cross b here. I don't feel like
rewriting it. OK. Let me paste it. OK, bundle up little other
stuff with it. Let me take the dot product of
that with just my vector a, which was just a1, a2, a3. So what does the dot
product look like? That term times that, so it's
a1-- let me get some space. It's a1 times a2 b3 minus
a1 times that. Minus a1 times a3 b2. And then you have plus
this times this. So plus a2 times a3. So plus a2 times a3 times b1. And then minus a2 a1 b3. And then finally, plus-- I'll
just continue it down here. Plus a3 times a1 b2 minus
a3 times a2 b1. All I did I just took the
cross-- the dot product of these two things. I just took each of this. This guy times that was equal
to those two terms. That guy times that was equal to the next
two terms, equal to those two terms. And then this guy
times that was equal to those two terms. And if these guys
are really orthogonal, then this should be equal to 0. So let's see if that's
the case. So I have an a1 a2 b3, a
positive here, and then I'm subtracting the same
thing here. This is the same thing as a1 a2
b3, but it's just a minus. So that will cancel
out with that. Let's see, what else
do we have? We have a minus a1 a3 b2. We have a plus a1 a3 b2 there,
so these two are going to cancel out. And I think you see where
this is going. You have a positive a2 a3 b1 and
then you have a negative a2 a3 b1 there. So these will also cancel out. Now, I just showed you that
it's orthogonal to a. Let me show you that it's
orthogonal to b. Let me get another version of
my-- the cross product of the two vectors. Probably scroll down
a little bit. And let me go back. And let me multiply that
times the vector b. b1, b2 and b3. I'll do it here just so
I have some space. So b1 times this whole thing
right here is b1 a2 b3 minus b1 times this. Minus b1 a3 b2. Let me switch colors. And then b2 times this thing
here is going to be b2-- so it's going to be plus. This is all really one
expression, I'm just writing it on multiple lines. This isn't a vector. Remember, when you take the dot
product of two things, you get a scalar quantity. So plus b2 times this thing. So b2 a3 b1 minus b2 a1 b3. And then finally,
b3 times this. So plus b3 a1 b2
minus b3 a2 b1. So if these guys are definitely
orthogonal, then this thing needs to equal 0. And let's see if that's
the case. We have a b1, a2, b3. So b1 and a b3. b1 a2 b3, that's a positive
one and this is a negative one. You have a b3, an a2 and a b1
so that and that cancel out. Here you have a minus
b1 a3 b2. So you have a b1 and a b2. It's a minus b1 a3 b2. This is a plus the same thing. Just switching the order
of the multiplication. But these two are
the same term. They're just opposites of each
other, so they cancel out. And then finally, you have
a b2, an a1 and a b3. It's a negative. And then you have a positive
version of the same thing. So these two guys cancel out. So you see that this
is also equal to 0. So hopefully you're satisfied
that this vector right here is definitely orthogonal
to both a and b. And that's because that's
how it was designed. This is a definition. You could do a little bit of
algebra and you could have without me explaining this
definition to you, you could have actually come up with this
definition on your own. But obviously this was kind
of designed to have other interesting properties to it. And I'll cover those in the next
few videos, so hopefully you found that helpful.",Cross product introduction | Vectors and spaces | Linear Algebra | Khan Academy,"Introduction to the cross product

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/proof-relationship-between-cross-product-and-sin-of-angle?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/defining-a-plane-in-r3-with-a-point-and-normal-vector?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,pJzmiywagfY
Linearsubspaces_Vectorsandspaces_LinearAlgebra_KhanAcademy-pMFv6liWK4M.en.csv,"We now have the tools, I think,
to understand the idea of a linear subspace of Rn. Let me write that down. I'll just always call
it a subspace of Rn. Everything we're doing
is linear. Subspace of Rn. I'm going to make a
definition here. I'm going to say that
a set of vectors V. So V is some subset of vectors,
some subset of Rn. So we already said Rn, when we
think about it, it's really just really an infinitely large
set of vectors, where each of those vectors
have n components. I'm going to not formally define
it, but this is just a set of vectors. I mean sometimes we visualize it
as multi-dimensional space and all that, but if we wanted
to be just as abstract about it as possible, it's
just all the set. It's the set of all of the --
you know we could call x1, x2, all the way to xn-- where each
of these, where each of the xi's are a member of the real
numbers for all of the i's. Right? That was our definition of Rn. It's just a huge
set of vectors. An infinitely large
set of vectors. V, I'm calling that, I'm going
to call that a subset of Rn, and which means it's just some
-- you know, it could be all of these vectors, and I'll talk
about that in a second. Or it could be some subset
of these vectors. Maybe it's all of them but
one particular vector. In order for this V to be a
subspace-- so I'm already saying it's a subset of Rn. Maybe this'll help you. If I draw all of Rn here
as this big blob. So these are all of the vectors
that are in Rn. V is some subset of it. It could be all of Rn. I'll show that a second. But let's just say
that this is V. V is a subset of vectors. Now in order for V to be a
subspace, and this is a definition, if V is a subspace,
or linear subspace of Rn, this means, this
is my definition, this means three things. This means that V contains
the 0 vector. I'll do it really, that's
the 0 vector. This is equal to 0 all the
way and you have n 0's. So V contains the 0 vector,
and this is a big V right there. If we have some vector x in V. So let me write this, if my
vector x is in V, if x is one of these vectors that's included
in my V, then when I multiply x times any member
of the reals. So if x is in V, then if V is a
subspace of Rn, then x times any scalar is also in V. This has to be the case. For those of you who are
familiar with the term, this term is called closure. If I have any element of a set,
this is closure under multiplication. Let me write that down--
in a new color. This is closure under scalar
multiplication. And that's just a fancy way of
saying, look, if I take some member of my set and I multiply
it by some scalar, I'm still going to
be in my set. If I multiplied it by some
scalar and I end up outside of my set, if I ended up with some
other vector that's not included in my subset, then this
wouldn't be a subspace. In order for it to be a
subspace, if I multiply any vector in my subset by a real
scalar, I'm defining this subspace over real numbers, if
I multiply it by any real number, I should also get
another member of this subset. So this is one of the
requirements. And then the other requirement
is if I take two vectors, let's say I have vector a,
it's in here, and I have vector b in here. So this is my other requirement for v being a subspace. If a is in a-- sorry-- if vector
a is in my set V, and vector b is in my set V, then if
V is a subspace of Rn, that tells me that a and b must
be in V as well. So this is closure
under addition. Let me write that down. Closure under addition. Once again, just a very fancy
way of saying, look, if you give me two elements that's in
my subset, and if I add them to each other -- these could be
any two arbitrary elements in my subset -- and I add them
to each other, I'm going to get another element
in my subset. That's what closure under
addition means. That when you add two vectors in
your set, you still end up with another vector
in your set. You don't somehow end up
with a vector that's outside of your set. If I have a subset of Rn, so
some subset of vectors of Rn, that contains the 0 vector,
and it's closed under multiplication and addition,
then I have a subspace. So subspace implies all of these
things, and all of these things imply a subspace. This is the definition
of a subspace. This might seem all abstract to
you right now, so let's do a couple of examples. And I don't know if these
examples will make it any more concrete, but I think if we do
it enough, you'll kind of get the intuitive sense of
what a space implies. Let me just do some examples. Because I want to
stay relatively mathematically formal. Let's just say I have the almost
trivially basic set. Let's say my set of vectors, I
only have one vector in it and I have the 0 vector. So I'll just do a really
bold 0 there. Or I could write it like this,
the only vector in my set is the 0 vector. Now Let's say? We're talking about R3. So let's say my 0 vector
in R3 looks like that. What I want to know is, is my
set V a subspace of R3? Well, in order for it to be a
subspace, three conditions. It has to contain
the 0 vector. Well the only thing it does
contain is the 0 vector. So it definitely contains
the 0 vector. So 0 vector, check. Now, is it closed under
multiplication? So that means, if I take any
member of the set, there's only one of them, and I multiply
it by any scalar, I should get another member
of the set. Or I should get maybe itself. So let's see, there's only
one member of the set. So the one member of the
set is the 0 vector. If I multiply it times
any scalar, what am I going to get? I'm going to get c times 0 which
is 0, c times 0, which is 0, and c times 0. I'm going to get its
only member. But it is closed. So it is closed under
multiplication. You can multiply this one vector
times any scalar, and you're just going to get
this vector again. So you're going to end up being
in your 0 vector set. That's a check. Is it closed under addition? Well, clearly if I add any
member of this set to itself, I mean, there's only one
member, to another member of the set. There's only one option here. If I just add that to
that, what do I get? I just get that. I just get it again. So it definitely is closed
under addition. Check. So it does turn out that this
trivially basic subset of r3, that just contains the 0 vector,
it is a subspace. Maybe a trivially simple
subspace, but it satisfies our constraints of a subspace. You can't do anything with the
vectors in it, they'll somehow get you out of that subspace. Or at least if you're
dealing with scalar multiplication or addition. Let me do one that maybe the
idea will be a little clearer if I show you an example
of something that is not a subspace. Let me get my coordinate
axes is over here. Let's say I were to find some
subspace, some subset. I don't know whether
it's a subspace. Let me call it my set S. And it equals all the vectors
x1, x2 that are a member of R2 such that, I'm going to make a
little constraint here, such that x1 is greater than
or equal to 0. It contains all of the vectors
in R2 that are at least is 0 or greater for the first term. So if we were to graph that
here, what do you get? We can get anything. We can move up or down
in any direction. Right? We can go up and down in any
direction, but we're constraining ourselves. These are all going to
be 0 or greater. So all of these first
coordinates are going to be 0 or greater. And this one, we can go up
and down arbitrarily. So we're essentially, this
subset of R2, R2 is my entire Cartesian plane. But this subset of R2 will
include the vertical axis, often referred to
as the y-axis. It will include the vertical
axis, and essentially the first and fourth quadrants. If you remember your
quadrant labelling. So that's the first
quadrant and that's the fourth quadrant. So my question to you is,
is S a subspace of R2. So the first question, does
it contain the 0 vector? So in the case of R2, does
it contain 0, 0? Well, sure. It includes 0, 0 right there. We said x is greater than or
equal to 0, so this could be 0 and obviously, there's no
constraint on this, so definitely the 0, 0 vector
is definitely contained in our set S. So that is a check. Let's try another one. If I add any two vectors in this
set, is that also going to show up in my set? Let me just do a couple
of examples. Maybe this isn't a proof. If I add that vector to
that vector, what am I going to get? If I put this up here, I'm
going to get that vector. If I add that vector to
that vector, what am I going to get? I could put this one heads to
tails, I would get a vector that looks like that. And if I did it formally, if I
add -- let's say that I have two vectors that are a
member of our set. Let's say the first one is
a, b and I add it to c, d, what do I get? I get a plus c over -- this
was a d -- over b plus d. So this thing is going
to be greater than 0. This thing is also going
to be greater than 0. That was my requirement
for being in the set. So if both of these are greater
than 0 and we add them to each other, this thing
is also going to be greater than 0. And we don't care what these,
these can be anything, I didn't put any constraints
on the second component of my vector. So it does seem like it is
closed under addition. Now what about scalar
multiplication? Let's take a particular
case here. Let's take my a, b again. I have my vector a, b. Now I can pick any
real scalar. So any real scalar. What if I just multiply
it by minus 1? So minus 1. So if I multiply it by minus
1, I get minus a, minus b. If I were to draw it visually,
if this is-- let's say a, b was the vector 2, 4. So it's like this. When I multiply it by minus
1, what do I get? I get minus a, minus b. I get this vector. Which you can be visually
clearly see falls out of, if we view these as kind of
position vectors, it falls out of our subspace. Or if you just view it not even
visually, if you just do it mathematically, clearly if
this is positive then this is going to-- and let's say if we
assume this is positive, and definitely not 0. So it's definitely a
positive number. So this is definitely going
to be a negative number. So when we multiply it by
negative 1, for really any element of this that doesn't
have a 0 there, you're going to end up with something that
falls out of it, right? This is not a member of this
set, because to be a member of the set, your first component
had to be greater than 0. This first component
is less than 0. So this subset that I drew out
here, the subset of R2, is not a subspace, Because? It's not closed under
multiplication or scalar multiplication. This is not a sub space of R2. Now I'll ask you one interesting
question. What if I ask you just the span
of some set of vectors? Let's say I want to know the
span of, I don't know, let's sat I have vector
v1, v2, and v3. I'm not even going to tell you
how many elements each of these vectors have. Is this
a valid subspace of Rn? Where n is the number of
elements that each of these have. Let's pick one of
the elements. Let me define, let me just call
u to be the set-- the set of all linear combinations
of this is the span. So let me just define
u to be the span. So I want to know, is
u a valid subspace? So let's think about
it this way. Let me just pick out a
random element of u. Actually, does this contain
the 0 vector? Well, sure. If we just multiply all of these
times 0, if we just say 0 times v1, plus 0 times v2,
these are all the vectors, I didn't write them bold, plus
0 times v3, we get the 0 vector, right? We did everything
just zeroed out. So it definitely contains
the 0 vector. This is a linear combination
of those three vectors, so it's included in the span. Now let me just pick some
arbitrary member of this span. So in order to be a member of
this set, it just means that you can be represented-- let me
just call it the vector x-- it means that you can be
represented as a linear combination of these vectors. So some combination, c1 times
v1 plus c2 times v2 plus c3 times v3. Right? I'm just representing this
vector x, it's a member of this, so it can be represented
as a linear combination of those three vectors. Is this set closed under
multiplication? Well let's just multiply this
times some arbitrary constant. What is c times x? Let me scroll down
a little bit. What does c times x equal? Let me do a different
constant actually. Let me multiply it times some
arbitrary constant a. What is a times x? What's a times c1 times v1--
I'm just multiplying both sides equation times a--
a times c2 times v2 plus a times c3, v3. Right? If this was an arbitrary
constant, you could just write this as another arbitrary
constant. This is another arbitrary
constant. This is another arbitrary
constant. I want to be clear. All I did is I just multiplied
both sides of the equation times a scalar. But clearly, this expression
right here, I mean I could write this, I could rewrite this
as c4 times v1 plus c5 times v2, where this
is c5, this is c4. Plus c6 times v3. This is clearly another
linear combination of these three vectors. So, the span is the set of all
of the linear combinations of these three vectors. So clearly this is one of the
linear combinations, so it's also included in the span. So this is also in u. It's also in the span of
those three vectors. So it is closed under
multiplication. Now we just have to show that
it's closed under addition, and then we know that the span
of -- and I did three, here but you can extend an arbitrary
n number of vectors if the span of any set of
vectors is a valid subspace. Let me prove that. We already defined one x here. Let me define another vector
that's in u, or that's in the span of these vectors. And it equals, I don't know,
let's say it equals d1 times v1 plus d2 times v2
plus d3 times v3. Now what is x plus y? If I add these two vectors,
what does it equal to? Well, I could just add. x plus y means all of this stuff
plus all of this stuff. So what does that equal? It means if you just add these
together you get c1 plus d1 times v1 plus c2 plus d2 times
v2 plus c3 plus d3 times v3. Right? You had a v3 here, you had a
v3 there, you just add up their coefficients. Clearly this is just another
linear combination. These are just constants
again. That's an arbitrary constant,
that's an arbitrary constant, that's an arbitrary constant. So this thing is just a linear
combination of v1, v2, and v3. So it must be, by definition, in
the span of v1, v2, and v3. So we are definitely closed
under addition. Now, you might say, hey, Sal,
you're saying that the span of any vector is a valid subspace,
but let me show you an example that clearly, if I
just took the span of one vector, let me just define u
to be equal to the span of just the vector, let me just
do a really simple one. Just the vector 1, 1. Clearly this can't be
a valid subspace. Let's think about
this visually. What does vector
1, 1 look like? Vector 1, 1 looks like this. Right? And the span of vector 1, 1--
this is in its standard position -- the span of vector
1, 1 is all of the linear combinations of this vector. Well, there's nothing else to
add it to, so it's really just going to be all of the
scaled up and scaled down versions of this. So if you scale it up
you get things that look more like that. If you scale it down, you get
things that look more like that if you go into the
negative domain. So just by multiplying this
vector times different values, and if you're going to put
them all into a standard position, you'd essentially
get a line that looks like that. You say, gee, that doesn't look
like a whole subspace. But a couple of things. Clearly, it contains
the 0 vector. We can just scale it by 0. The span is just all of the
different scales of this. And if there are other vectors,
you would add it to those as well. But this is clearly going
to be the 0 vector. So it contains the 0 vector. Is it closed under
multiplication? Well, the span is the set of all
the vectors, where, if you take all of the real numbers
for c and you multiply it times 1, 1, that is the span. Clearly, you multiply this times
anything it's going to equal another thing that's
definitely in your span. The last thing, is it closed
under addition? So any two vectors in the span
could, let's say that I have one vector a that's
in my span. I can represent it as c1 some
scalar times my vector there. And then I have another vector
b, and I could represent it with c2 times my one vector
in my set right there. And so what is this going
to be equal to? This is going to be equal to,
this is essentially going to be equal to c-- well, get a
little more space-- this is going to be equal to c1 plus
c2 times my vector. This is almost trivially
obvious. But clearly this
is in the span. It's just a scaled up
version of this. This is in the span, it's in a
scaled up version of this. And this is also going to be
in the span of this vector, because this is just
another scalar. We could call that c3. If you just do it visually, if I
take this vector right there and I were to add it to this
vector, if you put them head to tails, you would end
up with this vector. Right there in green. I don't know if you
can see it. I'll do it in red right there. You end up with that vector. And you could do that any vector
plus any other vector on this line is going to equal
another vector on this line. Any vector on this line
multiplied by some scalar is just going to be another
vector on this line. So you're closed under
multiplication. Your closed under addition. And you include the 0 vector. So even this trivially simple
span is a valid subspace. And that just backs up the
idea that we showed here. That, in general, I could
have just made this a set of n vectors. I picked three vectors right
here, but it could've been n vectors and I could have used
the same argument that the span of n vectors is a
valid subspace of Rn. And I showed it right there.",Linear subspaces | Vectors and spaces | Linear Algebra | Khan Academy,"Introduction to linear subspaces of Rn

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/subspace_basis/v/linear-algebra-basis-of-a-subspace?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/linear_independence/v/span-and-linear-independence-example?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,pMFv6liWK4M
Datastructures-BinarySearchTree-pYT9F8_LFTM.en.csv,"In our previous lesson, we talked about binary
trees in general. Now, in this lesson we are going to talk about
binary search tree, a special kind of binary tree which is an efficient structure to organize
data for quick search as well as quick update. But before I start talking about binary search
tree, I want you to think of a problem. What data structure will you use to store
a modifiable collection? So, lets say you have a collection and it
can be a collection of any data type, records in the collection can be of any type. Now, you want to store this collection in
computers memory in some structure and then you want to be able to quickly search for
a record in the collection and you also want to be able to modify the collection. You want to be able to insert an element in
the collection or remove an element from the collection. So, what data structure will you use? Well, you can use an array or a linked list. These are two well known data structure in
which we can store a collection. Now, what will be running time of these operations
- search, insertion or removal, If we will use an array or a linked list. Lets first talk about arrays and for sale
of simplicity, lets say we want to store integers. To store a modifiable list or collection of
integers, we can create a large enough array and we can store the records in some part
of the array. We can keep the end of the list marked. In this array that I am showing here, we have
integers from 0 till 3. We have records from 0 till 3 and rest of
the array is available space. Now to search some X in the collection, we
will have to scan the array from index 0 till end and in worst case, we may have to look
at all the elements in the list. If n is the number of elements in the list,
time taken will be proportional to n or in other words, we can say that time complexity
will be big-oh of n. Ok, now what will be the cost of insertion. Lets say we want to insert number 5 in this
list. So, if there is some available space, all
the cells in yellow are available, we can add one more cell by incrementing this marker
'end' and fill in the integer to be added. Time taken for this operation will be constant. Running time will not depend upon number of
elements in the collection. So, we can say that time complexity will be
big-oh of 1. Ok, now what about removal. Lets say we want to remove 1 from the collection. What we'll have to do is, we'll have to shift
all records to the right of one by one position to the left and then we can decrement end. The cost of removal once again will be big-oh
of n. In worst case, we will have to shift n-1 elements. Here, the cost of insertion will be big-oh
of 1, if the array will have some available space. So, the array has to be large enough. If the array gets filled, what we can do is,
we can create a new larger array, typically we create an array twice the size of the filled
up array. So, we can create a new larger array and then
we can copy the content of the filled up array into this new larger array. The copy operation will cost us big-oh of
n. We have discussed this idea of dynamic array
quite a bit in our previous lessons. So, insertion will be big-oh of 1 if array
is not filled up and it will be big-oh of n if array is filled up. For now, lets just assume that the array will
always be large enough. Lets now discuss the cost of these operations
if we will use a linked list. If we would use a linked list, I have drawn
a linked list of integers here, data type can be anything, the cost of search operation
once again will be big-oh of n where n is number of records in the collection or number
of nodes in the linked list. To search, in worst case, we will have to
traverse the whole list. We will have to look at all the nodes. The cost of insertion in a linked list is
big-oh of 1 at head and its big-oh of n at tail. We can choose to insert at head to keep the
cost low. So, running time of insertion, we can say
is big-oh of 1 or in other words, we will take constant time. Removal once again will be big-oh of n. We will first have to traverse the linked
list and search the record and in worst case, we may have to look at all the nodes. Ok, so this is the cost of operations if we
are going to use array or linked list. Insertion definitely is fast. But, how good is big-oh of n for an operation
like search. What do you think? if we are searching for
a record X, then in the worst case, we will have to compare this record X with all the
n records in the collection. Lets say, our machine can perform a million
comparisons in one second. So, we can say that machine can perform 10
the power 6 comparisons in one second. So, cost of one comparison will be 10 to the
power -6 second. Machines in today's world deal with really
large data. Its very much possible for real world data
to have 100 million records or billion records. A lot of countries in this world have population
more than 100 million. 2 countries have more than a billion people
living in them. If we will have data about all the people
living in a country, then it can easily be 100 million records. Ok, so if we are saying that the cost of 1
comparison is 10 the power -6 second. If n will be 100 million, time taken will
be 100 seconds. 100 seconds for a search is not reasonable
and search may be a frequently performed operation. Can we do something better? Can we do better than big-oh of n. Well, in an array, we can perform binary search
if its sorted and the running time of binary search is big-oh of log n which is the best
running time to have. I have drawn this array of integers here. Records in the array are sorted. Here the data type is integer. For some other data type, for some complex
data type, we should be able to sort the collection based on some property or some key of the
records. We should be able to compare the keys of records
and the comparison logic will be different for different data types. For a collection of strings, for example,
we may want to have the records sorted in dictionary or lexicographical order. So, we will compare and see which string will
come first in dictionary order. Now this is the requirement that we have for
binary search. The data structure should be an array and
the records must be sorted. Ok, so the cost of search operation can be
minimized if we will use a sorted array. But, in insertion or removal, we will have
to make sure that the array is sorted afterwards. In this array, if I want to insert number
5 at this stage, i can't simply put 5 at index 6. what I'll have to do is, I'll first have to
find the position at which I can insert 5 in the sorted list. We can find the position in order of log n
time using binary search. We can perform a binary search to find the
first integer greater than 5 in the list. So, we can find the position quickly. In this case, its index 2. But then, we will have to shift all the records
starting this position one position to the right. And now, I can insert 5. So, even though we can find the position at
which a record should be inserted quickly in big-oh of log n, this shifting in worst
case will cost us big-oh of n. So, the running time overall for an insertion
will be big-oh of n and similarly, the cost of removal will also be big-oh of n. We will have to shift some records. Ok, so when we are using sorted array, cost
of search operation is minimized. In binary search for n records, we will have
at max log n to the base 2 comparisons. So, if we can perform million comparisons
in a second, then for n equal 2 to the power 31 which is greater than 2 billion, we are
going to take only 31 micro-seconds. log of 2 to the power 31 to base 2 will be
31. Ok, we are fine with search now. we will be good for any practical value of
n. But what about insertion and removal. They are still big-oh of n. Can we do something better here? Well, if we will use this data structure called
binary search tree, I am writing it in short - BST for binary search tree, then the cost
of all these 3 operations can be big-oh of log n in average case. The cost of all the operations will be big-oh
of n in worst case. But we can avoid the worst case by making
sure that the tree is always balanced. We had talked about balanced binary tree in
our previous lesson. Binary search tree is only a special kind
of binary tree. To make sure that the cost of these operations
is always big-oh of log n, we should keep the binary search tree balanced. We'll talk about this in detail later. Let's first see what a binary search tree
is and how cost of these operations is minimized when we use a binary search tree. Binary search tree is a binary tree in which
for each node, value of all the nodes in left sub-tree is lesser and value of all the nodes
in right sub-tree is greater. I have drawn binary tree as a recursive structure
here. As we know, in a binary tree, each node can
have at most 2 children. We can call one of the children left child. If we will look at the tree as recursive structure,
left child will be the root of left sub-tree and similarly, right child will be the root
of right sub-tree. Now, for a binary tree to be called binary
search tree, value of all the nodes in left sub-tree must be lesser or we can say lesser
or equal to handle duplicates and the value of all the nodes in right sub-tree must be
greater and this must be true for all the nodes. So, in this recursive structure here, both
left and right sub-trees must also be binary search trees. I'll draw a binary search tree of integers. Now, I have drawn a binary search tree of
integers here. Lets see whether this property that for each
node value of all the nodes in left subtree is lesser or equal and the value of all the
nodes in right sub-tree must be greater is true or not. Lets first look at the root node. Nodes in the left subtree have values 10,
8 and 12. So, they are all lesser than15 and in right
subtree, we have 17, 20 and 25, they are all greater than 15. So, we are good for the root node. Now, lets look at this node with value 10. In left, we have 8 which is lesser. In right, we have 12 which is greater. So, we are good. We are good for this node too having value
20 and we don't need to bother about leave nodes because they do not have children. So, this is a binary search tree. Now, what if I change this value 12 to 16. Now, is this still a binary search tree. Well, for node with value 10, we are good. The node with value 16 is in its right. So, not a problem. But for the root node, we have a node in left
sub-tree with higher value now. So, this tree is not a binary search tree. I'll revert back and make the value 12 again. Now, as we were saying we can search, insert
or delete in a binary search tree in big-oh of log n time in average case. How is it really possible? Lets first talk about search. If these integers that I have here in the
tree were in a sorted array, we could have performed binary search and what do we do
in binary search. Lets say we want to search number 10 in this
array. What we do in binary search is, we first define
the complete list as our search space. The number can exist only within the search
space. I'll mark search space using these two pointers
- start and end. Now, we compare the number to be searched
or the element to be searched with mid element of the search space or the median. And if the record being searched, if the element
being searched is lesser, we go searching in the left half, else we go searching in
the right half. In case of equality, we have found the element. In this case, 10 is lesser than 15. So, we will go searching towards left. Our search space is reduced now to half. Once again, we will compare to the mid-element
and bingo, this time, we have got a match. In binary search, we start with n elements
in search space and then if mid element is not the element that we are looking for, we
reduce the search space to n/2 and we go on reducing the search space to half, till we
either find the record that we are looking for or we get to only one element in search
space and be done. In this whole reduction, if we will go from
n to n/2 to n/4 to n/8 and so on, we will have log n to the base 2 steps. If we are taking k steps, then n upon 2 to
the power k will be equal to 1 which will imply 2 to the power k will be equal to n
and k will be equal to log n to the base 2. So, this is why running time of binary search
is big-oh of log n. Now, if we will use this binary search tree
to store the integers, search operation will be very similar. Lets say, we want to search for number 12. What we'll do is, we start at root and then
we will compare the value to be searched, the integer to be searched with value of the
root. if its equal, we are done with the search, if its lesser, we know that we need to go
to the left sub-tree because in a binary search tree, all the elements in left sub-tree are
lesser and all the elements in right sub-tree are greater. Now, we will go and look at the left child
of node with value 15. We know that number 12 that we are looking
for can exist in this sub-tree only and anything apart from the sub-tree is discarded. So, we have reduced the search space to only
these 3 nodes having value 10, 8 and 12. Now, once again, we will compare 12 with 10. We are not equal. 12 is greater, so we know that we need to
go looking in right sub-tree of this node with value 10. So, now our search space is reduced to just
one node. Once again, we will compare the value here
at this node and we have a match. So, searching an element in binary search
tree is basically this traversal in which at each step, we will go either towards left
or right and hence at each step, we will discard one of the sub-trees. if the tree is balanced, we call a tree balanced
if for all nodes, the difference between the heights of left and right sub-trees is not
greater than 1. So, if the tree is balanced, we will start
with a search space of n nodes and when we will discard one of the sub-trees, we will
discard n/2 nodes. So, our search space will be reduced to n/2
and then in next step, we will reduce the search space to n/4. We will go on reducing like this till we find
the element or till our search space is reduced to only one node when we will be done. So, the search here is also a binary search. And that's why the name - Binary Search Tree. This tree that I am showing here is balanced. In fact this is a perfect binary tree. But with same records, we can have an unbalanced
tree like this. This tree has got the same integer values
as we had in the previous structure and this is also a binary search tree, but this is
unbalanced. This is as good as a linked list. In this tree there is no right sub-tree for
any of the nodes. Search space will be reduced by only one.at
each step. From n nodes in search space, we will go to
n-1 nodes and then to n-2 nodes, all the way till 1 will be n steps. In binary search tree, in average case, cost
of search, insertion or deletion is big-oh of log n and in worst case, this is the worst
case arrangement that I am showing you. The running time will be big-oh of n. We always try to avoid the worst case by trying
to keep the binary search tree balanced. With same records in the tree, there can be
multiple possible arrangements. For these integers in this tree, another arrangement
is this. For all the nodes, we have nothing to discard
in left sub-tree in a search. This is another arrangement. This is still balanced because for all the
nodes, the difference between the heights of left and right sub-tree is not greater
than 1. But this is the best arrangement when we have
a perfect binary tree. At each step, we will have exactly n/2 nodes
to discard. Ok, now to insert some records in binary search
tree, we will first have to find the position at which we can insert and we can find the
position in big-oh of log n time. Lets say we want to insert 19 in this tree,
what we will do is start at the root. If the value to be inserted is lesser or equal,
if there is no child, insert as left child or go left. If the value is greater and there is no right
child, insert as right child or go right. In this case, 19 is greater, so we will go
right. Now, we are at 20. 19 is lesser and left sub-tree is not empty. We have a left child. So, we will go left. Now, we are at 17, 19 is greater than 17. So, it should go in right of 17. There is no right child of 17. So, we will create a node with value 19 and
link it to this node with value 17 as right child. Because we are using pointers or references
here just like linked list, no shifting is needed like an array. Creating a link will take constant time. So, overall insertion will also cost us like
search. To delete also, we will first have to search
the node. Search once again will be big-oh of log n
and deleting the node will only mean adjusting some links. So, removal also is going to be like search
- big-oh of log n in average case. Binary search tree gets unbalanced during
insertion and deletion. So, often during insertion and deletion, we
restore the balancing. There are ways to do it and we will talk about
all of this in detail in later lessons. In next lesson, we will discuss implementation
of binary search tree in detail. This is it for this lesson. Thanks for watching.",Data structures: Binary Search Tree,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have discussed binary search tree data structure. Binary search is an efficient data structure in which we can store data to get search, insertion and deletion, all in O(log n) running time. We have drawn comparison of Binary search tree with arrays and linked list and explained this concept in detail. 

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,pYT9F8_LFTM
Laplacetransformoft^n-L{t^n}_Laplacetransform_DifferentialEquations_KhanAcademy-pZIaUx3UQoA.en.csv,"In the last video, I showed the
Laplace transform of t, or we could view that as t the
first power, is equal to 1/s squared, if we assume that
s is greater than 0. In this video, we're going to
see if we can generalize this by trying to figure out the
Laplace transform of t to the n, where n is any integer power
greater than 0, so n is any positive integer
greater than 0. So let's try it out. So we know from our definition
of the Laplace transform that the Laplace transform of t to
the n is equal to the integral from 0 to infinity of our
function-- well, let me write t to the n-- times, and this is
just the definition of the transform, e to the
minus st, dt. And similar to when we figured
out this Laplace transform, your intuition might be that,
hey, we should use integration by parts, and I showed
it in the last video. I always forget it, but I just
recorded it, so I do happen to remember it. So the integration by parts
just tells us that the integral of uv prime is equal to
uv minus the integral of-- I view this as kind of the
swap-- so u prime v. So this is just our integration
by parts formula. If you ever forget it, you can
derive it in about 30 seconds from the product rule. And I did it in the last video
because I hadn't used it for awhile, so I had
to rederive it. So let's apply it here. So what do we want to
make our v prime? It's always good to use the
exponential function, because that's easy to take the
antiderivative of. So this is our v prime, in which
case our v is just the antiderivative of that. So it's e to the minus
st over minus s. If we take the derivative of
this, minus s divided by minus s cancels out, and you
just get that. And then if we make our u-- let
me pick a good color here. If we make this equal to our
u, what's our u prime? u prime is just going to be n
times t to the n minus 1. Fair enough. So let's apply the integration
by parts. So this is going to
be equal to uv. u, I'll use this t to the n, so
u is t to the n, that's our u, times v, which is e-- let me
write this down-- so it's minus-- there's a minus sign
there, so we put the minus. Let me do it in that color. I'm just rewriting this.
e to the minus st/s. So that's the uv term
right there. Let me make that clear. And let me pick a
good color here. So this term right here is
this term right here. And, of course, I'm going to
have to evaluate this from 0 to infinity, so let me write
that: 0 to infinity. I could put a little bracket
there or something, but you know we're going to have
to evaluate that. And then from that, we're
going to have to subtract the integral. And let me not forget
our boundaries. 0 to infinity of u prime is n
times t to the n minus 1-- that's our u prime-- times v
times minus-- so let me put this minus out here-- so minus
e to the minus st/s. And then all of that. Of course, we have our dt, and
you have a minus minus. These things become pluses. Let's see if we can simplify
this a little bit. So we get our Laplace transform
of t to the n is equal to this evaluated at
infinity and evaluated at 0. So when you've evaluate-- what's
the limit of this as t approaches infinity? As t approaches infinity, this
term, you might say, oh, this becomes really big. And I went over this
in the last video. But this term overpowers it,
because you're going to have e to the minus infinity, if
we assume that s is greater than 0. So if s is greater than 0, this
term is going to win out and go to 0 much faster
than this term is going to go to infinity. So when you evaluate it at
infinity, when you evaluate this at infinity, you're
going to get 0. And then you're going to
subtract this evaluated at 0. This evaluated at 0, when it's
evaluated at 0 is just minus 0 to the n times e to the minus
s times 0/s Well, this becomes 0 as well. So this whole term evaluated
from 0 to infinity is all 0, which is a nice, convenient
thing for us. And then we're going to have
this next term right there. So let's take out the constant
terms. This n and this s are constant. They are constant with
respect to t. So you have plus n/s times the
integral from 0 to infinity of t to the n minus 1 times
e to the minus st, dt. Now, this should look reasonably
familiar to you. What's the definition of
the Laplace transform? The Laplace transform of any
function is equal to the integral from 0 to infinity of
that function times e to the minus st, dt. Well, when we have an e to the
minus st, dt, we're taking the integral from 0 to infinity,
so this whole integral is equal to the Laplace transform
of this, of t to the n minus 1. So just that easily, because
this term went to 0, we've simplified things. We get the Laplace transform
of t to the n is equal to-- this is all 0-- it's equal to
n/s-- that's right there-- times this integral right here,
which we just figured out was the Laplace transform
of t to the n minus 1. Well, this is a nice,
neat simplification. We can now figure out the
Laplace transform of a higher power in terms of the one power
lower that, but it still doesn't give me a generalized
formula. So let's see if we can use this
with this information to get a generalized formula. So the Laplace transform of just
t-- so let me write that down; I wrote that at the
beginning of the problem. We get the Laplace transform, I
could write this as t to the 1, which is just t, is equal
to 1/s squared, where s is greater than 0. Now, what happens if
we take the Laplace transform of t squared? Well, we can just use this
formula up here. The Laplace transform of t
squared is equal to 2/s times the Laplace transform of t,
of just t to the 1, right? 2 minus 1. So times the Laplace transform
of t to the 1. Well, t, we know what that is. This is equal to 2/s times this,
times 1/s squared, which is equal to 2/s to the third. Interesting. Let's see if we can
do another one. What is-- I'll do it in the
dark blue-- the Laplace transform of t to the third? Well, we just use this
formula up here. It's n/s. In this case, n is 3. So it's 3/s times the Laplace
transform of t to the n minus 1, so t squared. We know what the Laplace
transform of this one was. This is just this right there. So it's equal to 3/s
times this thing. And I'm going to actually write
it this way, because I think it's interesting. So I'll write the numerator. Times 2 times 1/s over s
squared, which is-- we could write it as 3 factorial
over-- what is this? s to the fourth power. Let's do another one. And I think you already are
getting the idea of what's going on. The Laplace transform of t to
the fourth power is what? It's equal to 4/s times the
Laplace transform of t the third power. And that's just 4/s
times this. So it's 4/s times 3 factorial
over s to the fourth. So now 4 times 3 factorial,
that's just 4 factorial over s to the fifth. And so you can just get
the general principle. And we can prove this
by induction. It's almost trivial based on
what we've already done. That the Laplace transform of
t to the n is equal to n factorial over s to
the n plus 1. We proved it directly for this
base case right here. This is 1 factorial over
s to the 1 plus 1. And then if we know it's true
for this, we know it's going to be true for the
next increment. So induction proof is almost
obvious, but you can even see it based on this. If you have to figure out the
Laplace transform of t to the tenth, you could just keep
doing this over and over again, but I think you see the
pattern pretty clearly. So anyway, I thought that was
a neat problem in and of itself, outside of the fact,
it'll be useful when we figure out inverse and Laplace
transforms. But this is a pretty neat result. The Laplace transform of t to
the n, where n is some integer greater than 0 is equal to n
factorial over s to the n plus 1, where s is also
greater than 0. That was an assumption we had to
make early on when we took our limits as t approaches
infinity. Anyway, hopefully you
found that useful.",Laplace transform of t^n: L{t^n} | Laplace transform | Differential Equations | Khan Academy,"Laplace Transform of t^n: L{t^n}

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-of-the-unit-step-function?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-of-l-t?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,pZIaUx3UQoA
Euler'smethod_Differentialequations_APCalculusBC_KhanAcademy-q87L9R9v274.en.csv,"- [Voiceover] We've already seen that if we were to start with
the differential equation, the derivative of Y with
respect to X is equal to Y and we have the initial condition that Y of zero is equal to one, but the particular solution to this given these initial conditions, is Y of X is equal to E to the X. Or I guess we can just
Y is equal to E of the X if we didn't want to write it
with the function notation. And that's all fair and well and this works out well. This is a separable differential equation and we can integrate things quite easily. But as you will see as you
go further in the world of differential equations, most differential equations
are not so easy to solve. In fact, many of them
are impossible to solve using analytic methods. And so given that, what do you do? We've nicely described some phenomena, modeled some phenomena using the differential equations but if you can't solve it analytically do you just give up? And the answer to that question is no. You do not just give up because we now have computers, and computers are really
good at numerical methods. Numerical methods for approximating and giving us a sense of what the solution to a differential
equation might look like. And so how do we do that? Well, in this video we can explore one of the most straightforward
numerical methods for approximating a particular solution. So what we do is, so I'm gonna draw a little table here. So, a little table here. Actually let give myself. I'm gonna do it over here
on the left hand side. A little table. So, X and then Y. XY. And then DY, DX. And you could set up a table like this to create a slope field. You could just pick all the ... You could sample X as in Y in the XY plane, and then figure out for our first order differential equation like this, what is the slope going
to be at that point and you could construct a slope field. And we're gonna do
something kind of related but instead of trying to
construct a slope field, we're gonna start with
this initial condition. We know that Y of zero is equal to one. We know that the particular solution of this differential
equation contains this point. So, we're gonna start with that point. So we're gonna start
with X is equal to zero and let me do this in a different color. We're gonna start with X is equal to zero, Y is equal to one. Which is that point right over there. And we're gonna say, well, okay what is the derivative at that point? Well, we know the derivative at any point that's for any solution to
this differential equation the derivative is going to
be equal to the Y value. So in this case, the derivative is going to be equal to Y. It's going to be equal to one. And in general, if the derivative just like what we saw in
the case of slope fields, as long as the derivative
is expressed as a function of Xs and Y of Xs, then you can figure out what the slope of the tangent line will be at that point. And so, you say okay,
there's a slope of one at that point so I can
depict it like that. And instead of just keep doing
that with a bunch of points we'll say okay, well let's just ... We know that the slope is changing or it's probably changing for most cases. But let's just assume it's
fixed until our next X and then use that assumption to estimate what the next Y would be. So, what am I talking about here? So, when I talk about the next X we're talking about well, let's just step. Let's just say for the sake of simplicity, we're gonna have a delta X of one. A change in X of one. So we're gonna step
from X equals zero now. We're gonna now step from that to X is equal to one. So we're now gonna go to ... Actually I may not use that. I used that yellow color
already for the actual graph or for the actual E to the X. So now let's say X is equal to one. Our delta X is one. So we've just added one here. And what we can do in our little approximation scheme here is well, let's just assume
that that slope was constant over that interval. So where does that get us to? Well, if Y was at one and
if I have a slope of one for one more, for one increase in X, I'm gonna increase my Y by one. So then Y is going to increase by one and is going to get to two. And we see that point right over there and you already might
see where this is going. Now, if this were actually
a point on the curve, on the solution, and if it was satisfying this, what would then the derivative be? Well, the derivative is equal to Y. The slope of the tangent line is going to be equal to Y. So, in this case, the
slope of the tangent line is now going to be equal to two. And we could depict that. Let me depict that in magenta here. So, it is going to be two. It's gonna look ... So the slope of the tangent line there is going to be two. And so, what does that tell us? Well if we step by our delta X one more. So now our X is equal to two. What should the corresponding Y be? Well, let's see. Now for every one that we
increase in the X direction we should increase two in the Y direction because the slope is two. So, the very next one should be four. Y is equal to four. So, we could imagine we have now kind of had a constant slope when we get to that
point right over there. And now we can do the same thing. Well if we assume DY, DX based on the differential
equation it has to be equal Y, okay, the slope of the tangent line there is going to be the same thing as Y. It's going to be four. And so, if we step our X up by one, if we increment our X by one again, once again, we just decided
to increment by one. We could have incremented by 10, we could have incremented by .01. And you could guess which
one's going to give you a more accurate result. But if we step up by one now and our slope is four, well, we're gonna increase by ... If we increase X by one we're gonna increase Y by four. So we are going to get to eight. And so, we are at the
point three comma eight which is right over here. And so, for this next stretch, the next stretch is
going to look like that. And as you can see just by doing this, we haven't been able to approximate what the particular solution looks like and you might say, ""Hey, so how do we know ""that's not so good of an approximation?"" And my reply to you is well, yeah I mean, depends on what your goals are. But I did this by hand. I didn't even do this using a computer. And because I wanted to do it by hand I took fairly large delta X steps. If I wanted a better approximation I could have lowered the delta X and let's do that. So let's take another scenario. So let's do another scenario where instead of delta X equal one, let's say delta X equals 1/2. So once again, X, Y and the derivative of Y with respect to X. So now let's say I want to take ... So we know this first point. We're given this initial condition. When the X is zero, Y is one and so the slope of the tangent
line is going to be one. But then if we're incrementing by 1/2 so then when X is, I'll
just write it as 0.5. 0.5. What is our new Y going to be? Well we're gonna assume that our slope from this to this is this
slope right over here. So our slope is one, so
if we increase X by 0.5 we're gonna increase Y by 0.5 and we're going to get to 1.5. So, we can get 0.5, 1.5. We get to that point right over there. Actually you're having
trouble seeing that. This stuff right over here
is this point right over here and now our new slope is going to be 1.5. Which is going to look like. Which is going to look like
actually not quite that steep. I don't want to overstate
how good an approximation is and it's starting to
get a little bit messy but it's gonna look something like that. And what you would see if
you kept doing this process, so if your slope is now 1.5, when you increment X by another 0.5 where you get to one. So now if you increment by 0.5 and your slope is 1.5, your Y is going to increment
by half of that by 0.75 and so, you're gonna get to 2.25. So now you get to one, 2.25 which is this point right over here. Once again, this is a
better approximation. Remember, in the original one Y of one you know should be equal to E. Y of one in the actual
solution should be equal to E. 2.7 on and on and on and on and on. Now in this one, Y of one got us to two. In this one Y of one got us to 2.25. Once again, closer to the
actual reality, closer to E. Instead of stepping by 0.5, if we stepped by 0.1 we
would get even closer. If we stepped by 0.0001 we would get even closer and closer and closer. So there's a bunch of
interesting things here. This is actually how most
differential equations or techniques that are derived from this or that are based on numerical methods similar to this are how most differential
equations gets solved. You know it's not the exact same solution or the same method that the idea that most differential
equations are actually solved or I guess you can say simulated with a numerical method because most of them
actually cannot be solved in analytical form. Now you might be saying,
""Hey, well what method is ""this one right over here called?"" Well, this right over
here is called Euler's. Euler's Method after the famous Leonhard Euler. Euler's Method. And not only actually
is this one a good way of approximating what the solution to this or any differential equation is, but actually for this differential
equation in particular you can actually even use this to find E with more and
more and more precision. Anyway, hopefully you found that exciting.",Euler's method | Differential equations| AP Calculus BC | Khan Academy,"Euler's method is a numerical tool for approximating values for solutions of differential equations. See how (and why) it works.

Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/ap-calculus-bc/bc-diff-equations/bc-eulers-method/e/euler-s-method?utm_source=YT&utm_medium=Desc&utm_campaign=APCalculusBC 

Watch the next lesson: https://www.khanacademy.org/math/ap-calculus-bc/bc-diff-equations/bc-eulers-method/v/example-eulers-method-exercise?utm_source=YT&utm_medium=Desc&utm_campaign=APCalculusBC

Missed the previous lesson? https://www.khanacademy.org/math/ap-calculus-bc/bc-diff-equations/bc-slope-fields/v/range-of-solution-curve-from-slope-field?utm_source=YT&utm_medium=Desc&utm_campaign=APCalculusBC

AP Calculus BC on Khan Academy: Learn AP Calculus BC - everything from AP Calculus AB plus a few extra goodies, such as Taylor series, to prepare you for the AP Test

About Khan Academy: Khan Academy is a nonprofit with a mission to provide a free, world-class education for anyone, anywhere. We believe learners of all ages should have unlimited access to free educational content they can master at their own pace. We use intelligent software, deep data analytics and intuitive user interfaces to help students and teachers around the world. Our resources cover preschool through early college education, including math, biology, chemistry, physics, economics, finance, history, grammar and more. We offer free personalized SAT test prep in partnership with the test developer, the College Board. Khan Academy has been translated into dozens of languages, and 100 million people use our platform worldwide every year. For more information, visit www.khanacademy.org, join us on Facebook or follow us on Twitter at @khanacademy. And remember, you can learn anything. 

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to Khan Academy's AP Calculus BC channel: https://www.youtube.com/channel/UC5A2DBjjUVNz8axD-90jdfQ?sub_confirmation=1
Subscribe to Khan Academy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,q87L9R9v274
Rowspaceandleftnullspace_Matrixtransformations_LinearAlgebra_KhanAcademy-qBfc57x_RSg.en.csv,"I've got this matrix, A, here,
it's a 2 by 3 matrix. And just as a bit of review,
let's figure out its nullspace and its columnspace. So the nullspace of A is the set
of all vectors x that are member of-- let's see we have
3 columns here-- so a member of R3, such that A times the
vector are going to be equal to the 0 vector. So we can just set this up. Let me just-- we just need to
figure out all of the x's that satisfy this in R3. So we take our matrix
A 2, minus 1, minus 3, minus 4, 2, 6. Multiply them times some
arbitrary vector in R3 here. So you get x1, x2, x3. And you set them equal
to the 0 vector. It's going to be the
0 vector in R2. Because we have 2 rows here. You multiply a 2 by 3 matrix
times a vector in R3, you're going to get a 2 by 1 vector
or 2 by 1 matrix. So you're going to get
the 0 vector in R3. And to solve what is essentially
a system of equations-- you get 2 x1 minus
x2 minus 3 x3 is equal to 0 and so on and so forth. We can just set up an
augmented matrix. So we can just set up this
augmented matrix right here. 2 minus 1 minus 3
minus 4, 2, 6. And then augment it with what
we're trying to set it equal to to solve the system. And you know we're going to
perform a bunch of row operations here to put this in
reduced row echelon form. And they're not going to change
the right-hand side of this augmented matrix. And that's essentially the
argument as to why the nullspace of the reduced row
echelon form of A is the same thing as the nullspace of A. But anyway, that's just
a bit of review. So let's perform some row
operations to solve this a little bit better. So, the first thing I might
want to do is divide the first row by 2. So if I divide the first row by
2 I get a 1 minus 1/2 minus 3/2 and then of course
0 divided by 2 is 0. And let's just divide this row
right here by-- I don't know just to simplify things--
let's divide it by 4. So I'm doing two row operations
in one step. And you can do that. I could have done it in
two separate steps. So if we divide it by 4, this
becomes minus 1, 1/2 and then you get 3/2 and then
you get 0. And now, let's keep my
first row the same. I'm going to keep my
first row the same. It's 1 minus 1/2 minus 3/2 and
of course the 0 is the right-hand side. Now let's replace my second
row with my second row plus my first row. So these are just linear
operations on these guys. So negative 1 plus 1 is 0. 1/2 plus minus 1/2 is 0. 3/2 plus minus 3/2 is 0. And of course, 0 plus 0 is 0. So what are we left with? we're left with this
right here. This is another way of saying
that x1-- let me write it this way-- x1-- I guess the easiest
way to think about it is-- you're multiplying the reduced
row echelon form of A now. 1 minus 1/2 minus 3/2. You have a bunch of 0's here. Times x1, x2, x3 is equal
to the R2 0 vector. This is another interpretation
of this augmented matrix. So this is just saying,
this is useless. This is saying 0 times that plus
0 times that plus 0 times that is equal to 0. So it's giving us
no information. But this first row tells us
that-- let me switch colors-- 1 times x1 minus 1/2 times
x2 minus 3/2 times x3 is equal to 0. All of the vectors whose
components satisfy this are in my nullspace. If I want to write it a little
bit differently I could write as, x1 is equal to 1/2
x2 plus 3/2 x3. Or if I wanted to write my
solution set in vector form, I could write that my nullspace is
going to be the set of all the vectors x1, x2, x3 that
satisfy these conditions. That are equal to what? Well, x2 and x3 are
free variables. They're associated with the
non-pivot entries, or the non-pivot columns in our reduced
row echelon form. That is a pivot column
right there. So let me write it this way. It's going to be x2
times something plus x3 times something. Those are my two
free variables. And we have here,
x1 is 1/2 x2. 1/2 times x2 plus
3/2 times x3. x2 is just going to be x2
times 1 plus 0 times x3. x3 is going to be 0 times
x2 plus 1 times x3. So, our nullspace, these
can be any real numbers right here. They're free variables. So our nullspace is essentially
all of the linear combinations of this
guy and that guy. Or another way to write it, the
nullspace of A is equal to the span, which is the same
thing as all the linear combinations of the
span of 1/2, 1, 0. Notice these are
vectors in R3. And that makes sense because the
nullspace is going to be a set of vectors in R3. So it's the span of that. And that right there. So 3/2, 0, and 1. Just like that. And what is the columnspace
of our original matrix, A? So the columnspace of A is equal
to just, the subspace created by all of the linear
combinations of these guys. Or essentially the span
of the column vectors. Is equal to the span
of 2 minus 4 minus 1, 2, minus 3, 6. These are all each
separate vectors. So it's the span of
these 3 vectors. Now, these guys might not
be linearly independent. And actually, when you put
this guy in reduced row echelon form, you know that the
basis vectors for this are the vectors that are associated with our pivot columns. So we have one pivot
column here. It's our first column. So we could say that we could
use this as a basis vector. And it makes sense. Because this guy right here
is minus 2 times this guy. This guy right here is minus
3/2 times that guy. So these two guys can definitely
be represented as linear combinations
of that guy. So it's equal to the span of
just the vector, 2, minus 4. So if you were to ask me, and
this is the basis for our columnspace. So if you wanted to know the
rank-- and this is all a bit of review-- the rank of A is
equal to the number of vectors in our basis for our
columnspace. So it's going to
be equal to 1. Now, everything I just did
is a bit of review. But with the last couple of
videos, we've been dealing with transposes. So let's actually figure out
the same ideas for the transpose of A. So A transpose looks
like this. A transpose is equal to the
matrix 2, minus 1, minus 3 is the first column right there. And then the second column is
going to be minus 4, 2 and 6. That is our transpose. So let's figure out the
nullspace and the columnspace of our transpose. Let me put this in reduced
row echelon form so we can get the nullspace. Let me get the nullspace
of this guy. So we could do the exact
same exercise. Let me write it this way. The nullspace of
A transpose-- A transpose is a 3 by 2 matrix. So it's equal to all of
the vectors, x, that are members of R2. Not R3 anymore-- because now we
are taking the transpose's nullspace-- such that A
transpose times R vectors are equal to the 0 vector in R3. And we can do that the same
exact way we did before. We set up an augmented matrix. We could just put it in reduced
row echelon form and set them all equal to 0. So let's just do that. So if we-- let me just put it
in reduced row echelon form. So let me divide my
first row by 2. Let's divide the
first row by 2. I'm just going to put it in
reduced row echelon form. The first row divided
by 2 is 1 minus 2. And then the second row, let
me divide it-- let me just, I'll just keep it the same--
so minus 1, 2. And then this last row,
let me divide it by 3. So it becomes minus 1 and 2. And now, let me keep my
first row the same. 1 minus 2. And now let me replace my second
row with my second row plus my first row. So minus 1 plus 1 is 0. 2 plus minus 2 is 0. You get some 0's. I'm going to do the same thing
with the third row. Replace it with it plus
the first row. Once again you're going
to get some 0's. So this is the reduced row
echelon form of A transpose. And its nullspace is the same
as A transpose's nullspace. We could say, to find this
nullspace we can find all of the solutions to this equation
times the vectors x1 and x2 is equal to 0, 0, and 0. These aren't vectors. These are just entries
right here. 0, 0, 0. So these two lines give
us no information, but this first one does. So we get 1 times x1-- and
notice, this is the pivot column right here. It's associated. So x1 is going to be
a pivot variable. x2 will be a free variable. And just to be clear that
the first column is our pivot column. So if we go back to A transpose,
it's this first column here that is associated
with the pivot column. So when we talk about its
columnspace, this by itself will span the columnspace. This is all a review of
what we did before. We're just applying it
to the transpose. Let's go back to
our nullspace. So this tells us that 1 times
x1, so x1, minus 2 times x2, is equal to 0. Or we could say that x1 is
equal to 2 times x2. So all of the vectors in R2 that
satisfy these conditions with these entries will be in
the nullspace of A transpose. Let me write it this way. So the nullspace of A is going
to be the set of all the vectors-- let me write it here--
the set of all the vectors, x1, x2, that are member
of R2, clearly, such that x1, x2 is going to be
equal to-- well, our free variable is x2-- so it's
x2 times the vector. So x1 has to be 2 times x2. And obviously x2-- that's a 2--
is going to be 1 times x2. So what is this going to be? Well this is all of the linear
combinations of this vector right here. So we could say it's equal to
the span of our vector 2, 1. Now, that's the nullspace. Sorry, this was the nullspace
of A transpose. I have to be very
careful there. Now what is the columnspace? The columnspace of A tranpose? Well, the columnspace of A
transpose is the set of all vectors spanned by
the columns of A. So you could just say the span
of this column vector and this column vector. But we know, when we put it into
reduced row echelon form, only this column vector
was associated with a pivot column. So this by itself, this
guy is a linear combination of this guy. If you multiply him by
minus 2, you get that guy right there. So it's consistent with
everything we've learned. So it equals the span of just
this guy right here. Of just the vector 2, minus
1, and minus 3. That's just a nice, neat
exercise that we did. Notice that your span here,
it's in R3, but it's just going to be a line in R3. Maybe in the next video I'll
do a more graphical representation of it. But I did this whole exercise to
introduce you to the ideas of the nullspace of your
transpose and the columnspace of your transpose. Think about what the
columnspace of your transpose is. It's the subspace spanned by
that vector-- sorry-- spanned by this vector and
that vector. And it turns out that this guy
is a multiple of that guy. So we could say just
by that guy. But these were the rows of
our original matrix, A. So we could also view this as
the span of the row vectors of our original guy. This is that column that is the
basis for the column span of the R transpose matrix. And of course this guy was a
linear combination of that. So we could also view
the column span of our transpose matrix. It's equivalent to the subspace spanned by these rows. Or we could call that
the row space of A. Let me write that down. So the columnspace of
A transpose-- and this is just general. Let me write this generally. It doesn't just apply
to this example. So the columnspace of the
transpose of any matrix, this is called the rowspace of A. And it's a very natural name. Because if A's got a bunch of
rows, we could call them the transpose of some vectors. So that's first row. You got the second row. All the way to, maybe,
the nth row. Just like that. These are vector transposes. They're really just rows. If you imagine the space
that's spanned by these vectors, by the different rows,
that's essentially the columnspace of the transpose. Because when you transpose
it, each of these guys become columns. So that's what the
rowspace is. Now, the nullspace of our
transpose-- let's write it like this-- it was all
of the vectors x that satisfied this equation. Equals the 0 vector
right there. Now, what happens if we take the
transpose of both sides of this equation? Well, we've learned from our
transpose properties, this is equal to the reverse product of
each of those transposes. So this is going to be equal
to, this is a vector, the vector x transpose. If this is a column vector
before, now it's going to become a row vector. And then, times A transpose
transpose. And that's going to
be equal to the transpose of the 0 vector. Or, we could just write
this like this. We could write this as some
matrix-- well let me just write it like this. Some column vector x-- what's
the transpose of A transpose? Well that's just equal to A. So you take the transpose
of this column vector. You now get a row vector. You could view it as a
matrix if you want. If this was a member of Rn, this
is now going to be an 1 by n matrix. If this was a member of Rn. We kind of switched
the orders. And we multiply it times the
transpose of the transpose. We just get the matrix, A. And we set that equal to the
transpose of the 0 vector. Now this is interesting. We now have it in terms of
our original matrix, A. Now what did the nullspace of
our matrix, A look like? The nullspace where all of the
vectors x that satisfied this equation is equal to 0. So the x was on the right. So the nullspace is all the
x's that satisfy this. The nullspace of our transpose
is all of the x's that satisfy this equation. So let me say the set of all
of the x's such that A transpose times x
is equal to 0. That is the nullspace
of A transpose. Or we could also write this as
the set of all of the x's such that the transpose of our x
times A is equal to the transpose of the 0 vector. And we have another
name for this. This is called the left
nullspace of A. Why is it called the
left nullspace? Because now we have
x on our left. In just a regular nullspace
you have x on the right. But now, if you take the
nullspace of the transpose, using just our transpose
properties, that's equivalent to this transpose vector
right here. Actually let me write this. The transpose right there. This transpose vector
multiplying A from the left-hand side. So all of the x's that satisfy
this is the left nullspace. And it's going to be different
than your nullspace. Notice, your nullspace of A
transpose was the span of this right here. This is also the left
nullspace of A. Now what was just the regular
nullspace of A? The regular nullspace of A was
essentially a plane in R3. That's the nullspace of A. The left nullspace of A
is just a line in R2. Very different things. And if you go to the rowspace,
what is the rowspace of A? The rowspace of A
is a line in R3. The rowspace of A
is a line in R3. Well what is the columnspace
of A? The columnspace of A, right
here, where did I have it? Well, this is the only linearly
independent vector. It was essentially
a line in R2. So they're all very
different things. And we'll study a little bit
more how they're all related. Now there's one thing I
want to relate to you. We figured out that the
rank of this vector right here is 1. Because when you put it in
reduced row echelon form there was one pivot column. And the basis vectors are those
associated with that pivot column. And if you count your basis
vectors, that's your dimension of your space. So the dimension of your
columnspace is 1. And that's the same thing
as your rank. Now what is the rank
of A transpose? The rank of A transpose in the
example, when you put it in reduced row echelon form, you
got one linearly independent column vector. So the basis for our
columnspace was also equal to 1. And in general, that's always
going to be the case. That the rank of A, which
is the dimension of its columnspace, is equal to the
rank of A transpose. And if you think about it,
it makes a lot of sense. To figure out the rank of A, you
essentially figure out how many pivot columns they have.
Or another way to say it is how many pivot entries they
have. When you want to find the rank of your transpose
vector, you're essentially just saying-- and I know this is
maybe getting a little bit confusing-- but when you want
the rank of your transpose vector, you're saying, how
many of these columns are linearly independent? Or which of these are linearly
independent? And that's the same question
as saying, how many of your rows up here are linearly
independent? If you want to know how many
columns in your transpose are linearly independent, that's
equivalent to asking how many rows in your original matrix
are linearly independent. And when you put this matrix in
reduced row echelon form, everything in reduced row
echelon form are just row operations. So they are just linear
combinations of these things up here. Or you could go vice versa. Everything up here is just
linear combinations of your matrix in reduced row
echelon form. So if you only have one pivot
entry, then this guy right here, by himself, or one pivot
row, that guy by himself can represent a basis for
your rowspace. Or, all of your rows can be
represented by a linear combination of your
pivot rows. And because of that, you
just count that. You say, OK there's
one in this case. So the dimension of
my rowspace is 1. And that's the same thing
as the dimension of my transpose's columnspace. I know it's getting all
confusing and it's late in the day for me as well. So that, hopefully, will
convince you that the rank of our transpose is the
same as the rank of our original matrix.",Rowspace and left nullspace | Matrix transformations | Linear Algebra | Khan Academy,"Rowspace and Left Nullspace

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/lin-alg-visualizations-of-left-nullspace-and-rowspace?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/matrix_transpose/v/linear-algebra-transpose-of-a-vector?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,qBfc57x_RSg
Datastructures-IntroductiontoTrees-qH6yxkw0u78.en.csv,"Hello everyone ! In this lesson, we will introduce
you to an interesting data structure that has got its application in a wide number of
scenarios in computer science and this data structure is tree. So, far in this series, we have talked about
what we can call linear data structures. Array, Linked List, stack and queue, all of
these are linear data structures. All of these are basically collections of
different kinds in which data is arranged in a sequential manner. In all these structures that I am showing
here, we have a logical start and a logical end and then an element in any of these collections
can have a next element and e previous element. So, all in all we have linear or sequential
arrangement. Now, as we understand, these data structures
are ways to store and organize data in computers. For different kinds of data, we use different
kinds of data structure. Our choice of data structure depends upon
a number of factors. First of all, its about what needs to be stored. A certain data structure can be best fit for
a particular kind of data. Then, we may care for the cost of operations. Quite often, we want to minimize the cost
of most frequently performed operations. For example, lets say we have a simple list
and we are searching for an element in the list most of the time. Then, we may want to store the list or collection
as an array in sorted order, so we can perform something like binary search really fast. Another factor can be memory consumption. Sometimes, we may want to minimize the memory
usage and finally we may also choose a data structure for ease of implementation, although
this may not be the best strategy. Tree is one data structure that's quite often
used to represent hierarchical data. For example, lets say we want to show employees
in an organization and their positions in organizational hierarchy, then we can show
it something like this. Lets say this is organization hierarchy of
some company. In this company, John is CEO and john has
two direct reports - Steve and Rama. Then Steve has 3 direct reports. Steve is manager of Lee, Bob and Ella. They may be having some designation. Rama also has two direct reports. Then Bob has two direct reports and then Tom
has 1 direct report. This particular logical structure that I have
drawn here is a Tree. Well, you have to look at this structure upside
down and then it will resemble a real tree. The root here is at top and we are branching
out in downward direction. Logical representation of tree data structure
is always like this. Root at top and branching out in downward
direction. Ok, so tree is an efficient way of storing
and organizing data that is naturally hierarchical, but this is not the only application of tree
in computer science. We will talk about other applications and
some of the implementation details like how we can create such a logical structure in
computer's memory later. First I want to define tree as a logical model. Tree data structure can be defined as a collection
of entities called nodes linked together to simulate hierarchy. Tree is a non-linear data structure. Its a hierarchical structure. The topmost node in the tree is called root
of the tree. Each node will contain some data and this
can be data of any type. In the tree that I am showing in right here
data is name of employee and designation. So, we can have an object with two string
fields one to store name and another to store designation. Okay, so each node will contain some data
and may contain link or reference to some other nodes that can be called its children. Now I am introducing you to some vocabulary
that we use for tree data structure. What I am going to do here is , I am going
to number these Nodes in the left tree. So, I can refer to these Nodes using these
numbers. I am numbering these nodes only for my convenience. its not to show any order. Ok, coming back, as i had said each node will
have some data. We call fill in some data in these circles. It can be data of any type. it can be an integer or a character or a string
or we can simple assume that there is some data filled inside these nodes and we are
not showing it. Ok, as we were discussing, a node may have
link or reference to some other nodes that will be called its children. Each arrow in this structure here is a link. Ok, now as you can see, the root node which
is numbered 1 by me and once again this number is not indicative of any order. I could have called the root node number 10
also. So, root node has link to these two nodes
numbered 2 and 3. So, 2 and 3 will be called children of 1 and
node 1 will be called parent of nodes 2 and 3. I'll write down all these terms that I am
talking about. We mentioned root, children and parent. In this tree, one is a parent of , 1 is parent
of 2 and 3. 2 is child of 1. And now, 4 , 5 and 6 are children of 2. So, node 2 is child of node 1, but parent
of nodes 4, 5 and 6. Children of same parent are called sibling. I am showing siblings in same color here. 2 and 3 are sibling. Then, 4, 5 and 6 are sibling, then 7,8 are
sibling and finally 9 and 10 are sibling. I hope you are clear with these terms now. The topmost node in the tree is called root. Root would be the only node without a parent. And then, if a node has a direct link to some
other node, then we have a parent child relationship between the nodes. Any node in the tree that does not have a
child is called leaf node. All these nodes marked in black here are leaves. So, leaf is one more term. All other nodes with at least one child can
be called internal nodes. And we can have some more relationships like
parent of parent can be called grand-parent. So, 1 is grand-parent of 4 and 4 is grand-child
of 1. In general, if we can go from node A to B
walking through the links and remember these links are not bidirectional. We have a link from 1 to 2, so we can go from
1 to 2, but we cannot go from 2 to 1. When we are walking the tree, we can walk
in only one direction. OK, so if we can go from node A to node B,
then A can be called ancestor of B and B can be called descendant of A. Lets pick up this
node numbered 10. 1, 2 and 5 are all ancestors of 10 and 10
is a descendant of all of these nodes. We can walk from any of these nodes to 10. Ok, let me now ask you some questions to make
sure you understand things. What are the common ancestors of 4 and 9? Ancestors of 4 are 1 and 2 and ancestors of
9 are 1,2 and 5. So, common ancestors will be 1 and 2. Ok, next question. Are 6 and 7 sibling? Sibling must have same parent. 6 and 7 do not have same parent. They have same grand-parent. one is grandparent of both. Nodes not having same parent but having same
grandparent can be called cousins. So, 6 and 7 are cousins. These relationships are really interesting. We can also say that node number 3 is uncle
of node number 6 because its sibling of 2 which is father of 6 or i should say parent
of 6. So, we have quite some terms in vocabulary
of tree. Ok, now I will talk about some properties
of tree. Tree can be called a recursive data structure. We can define tree recursively as a structure
that consists of a distinguished node called root and some sub-trees and the arrangement
is such that root of the tree contains link to roots of all the sub-trees. T1, T2 and T3 in this figure are sub-trees. In the tree that I have drawn in left here,
we have 2 sub-trees for root node. I am showing the root node in red, the left
sub-tree in brown and right sub-tree in yellow. We can further split the left sub-tree and
look at it like node number 2 is root of this sub-tree and this particular tree with node
number 2 as root has 3 sub-trees. i am showing the three sub-trees in 3 different
colors. Recursion basically is reducing something
in a self similar manner. This recursive property of tree will be used
everywhere in all implementation and usage of tree. The next property that I want to talk about
is - in a tree with n nodes, there will be exactly n-1 links or edges. Each arrow in this figure can be called a
link or an edge. All nodes except the root node will have exactly
1 incoming edge. If you can see, I'll pick this node numbered
2. There is only one incoming link. This is incoming link and these three are
outgoing links. There will be one link for each parent-child
relationship. So, in a valid tree if there are n nodes,
there will be exactly n-1 edges. One incoming edge for each node except the
root. Ok, now i want to talk about these two properties
called depth and height. Depth of some node X in a tree can be defined
as length of the path from root to Node X. Each edge in the path will contribute one
unit to the length. So, we can also say number of edges in path
from root to X. The depth of root node will be zero. Lets pick some other node. For this node, numbered 5, we have 2 edges
in the path from root. So, the depth of this node is 2. In this tree here, depth of nodes 2 and 3
is 1. Depth of nodes 4,5,6,7 and 8 is 2 and the
depth of nodes 9, 10 and 11 is 3. Ok, now height of a node in tree can be defined
as number of edges in longest path from that node to a leaf node. So, height of some node X will be equal to
number of edges in longest path from X to a leaf. In this figure, for node 3, the longest path
from this node to any leaf is 2. So, height of node 3 is 2. Node 8 is also a leaf node. I'll mark all the leaf nodes here. A leaf node is a node with zero child. The longest path from node 3 to any of the
leaf nodes is 2. So, the height of Node 3 is 2. Height of leaf nodes will be 0. So, what will be the height of root node in
this tree. We can reach all the leaves from root node.
number of edges in longest path is 3. So, height of the root node here is 3. We also define height of a tree. Height of tree is defined as height of root
node. Height of this tree that I am showing here
is 3. Height and depth are different properties
and height and depth of a node may or may not be same. We often confuse between the two. Based on properties, trees are classified
into various categories. There are different kinds of trees that are
used in different scenarios. Simplest and most common kind of tree is a
tree with this property that any node can have at most 2 children. In this figure, node 2 has 3 children. I am getting rid of some nodes and now this
is a binary tree. Binary tree is most famous and throughout
this series, we will mostly be talking about binary trees. The most common way of implementing tree is
dynamically created nodes linked using pointers or references, just the way we do for linked
list. We can look at the tree like this. in this structure that I have drawn in right
here, node has 3 fields. one of the fields is to store data. Lets say middle cell is to store data. The left cell is to store the address of the
left child. And the right cell is to store address of
right child. Because this is a binary tree, we cannot have
more than two children. We can all one of the children left child
and another right child. Programmatically, in C or C++, we can define
a node as a structure like this. We have three fields here - one to store data,
lets say data type is integer. I have filled in some data in these nodes. So, in each node, we have 3 fields. We have an integer variable to store the data
and then we have 2 pointers to Node, one to store the address of the left child that will
be the root of the left sub-tree and another to store the address of the right child. We have kept only 2 pointers because we can
have at most 2 children in binary tree. This particular definition of Node can be
used only for a binary tree. For generic trees that can have any number
of children, we use some other structure and I'll talk about it in later lessons. In fact, we will discuss implementation in
detail in later lessons. This is just to give you a brief idea of how
things will be like in implementation. Ok, so this is cool. We understand what a tree data structure is,
but in the beginning we had said that storing naturally hierarchical data is not the only
application of tree. So, lets quickly have a look at some of the
applications of tree in computer science. First application of course is storing naturally
hierarchical data. For example, the file system on your disc
drive, the file and folder hierarchy is naturally hierarchical data. its stored in the form of tree. Next application is organizing data, organizing
collections for quick search, insertion and deletion. For example, binary search tree that we'll
be discussing a lot in next couple of lessons can give us order of log N time for searching
an element in it. A special kind of tree called Trie is used
, is use to store dictionary. Its really fast and efficient and is used
for dynamic spell checking. Tree data structure is also used in network
routing algorithms and this list goes on. We'll talk about different kinds of trees
and their applications in later lessons. I'll stop here now. This is good for an introduction. In next couple of lessons, we will talk about
binary search trees and its implementation. This is it for this lesson. Thanks for watching !",Data structures: Introduction to Trees,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have described tree data structure as a logical model in computer science.  We have briefly discussed tree as a non-linear hierarchical data structure, its vocabulary and applications. 

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,qH6yxkw0u78
Laplacetransformoft-L{t}_Laplacetransform_DifferentialEquations_KhanAcademy-qhKJ1DG9kYY.en.csv,"Let's try to fill in our Laplace
transform table a little bit more. And a good place to start is
just to write our definition of the Laplace transform. The Laplace transform of some
function f of t is equal to the integral from 0 to infinity,
of e to the minus st, times our function,
f of t dt. That's our definition. The very first one we solved
for-- we could even do it on the side right here-- was the
Laplace transform of 1. You know, we could almost view
that as t to the 0, and that was equal to the integral
from 0 to infinity. f of t was just 1, so it's e to
the minus st, dt, which is equal to the antiderivative of
e to the minus st, which is minus 1 over s, e to the minus
st. And then you have to evaluate that from
0 to infinity. When you take the limit as this
term approaches infinity, this e to the minus, this
becomes e to the minus infinity, if we assume
s is greater than 0. So if we assume s is greater
than 0, this whole term goes to 0. So you end up with a 0 minus
this thing evaluated at 0. So when you evaluate t is equal
to 0, this term right here becomes 1, e to the 0
becomes 1, so it's minus minus 1/s, which is the same
thing as plus 1/s. the? Laplace transform of 1,
of just the constant function 1, is 1/s. We already solved that. Now, let's increment
it a little bit. Let's see if we can figure out
the Laplace transform of t. So we can view this
as t to the 0. Now this is t to the 1. This is going to be equal to
the integral from 0 to infinity, of e to the
minus st times t dt. Now. I can tell you right now
that I don't have the antiderivative of
this memorized. I don't know what it is. But there's a sense that the
integration by parts could be useful, because integration by
parts kind of decomposes into a simpler problem. And I always forget integration
by parts, so I'll rederive it here in
this purple color. So if we have u times v, if we
take the derivative with respect to t of that, that's
equal to the derivative of the first times the second function
plus the first function times the derivative
of the second function. It's just the product rule. Now, if we take the integral
of both sides of this equation, we get uv is equal
to the antiderivative of u prime v plus the antiderivative
of uv prime. Now, since we want to apply
this to an integral, maybe let's make this what we want
to solve for, so we can get the integral of uv prime is
equal to-- we can just subtract this from that side
of the equation, so it's equal-- I'm just swapping the
sides, so I'm just solving for this, and to solve for this, I
just subtract this from that, so it's equal to uv minus the
integral of u prime v. So there you go. Even though I have trouble
memorizing this formula, it's not too hard to rederive as
long as you remember the product rule right there. So if we're going to do
integration by parts, it's good to define our v prime to
be something that's easy to take the antiderivative of,
because we're going to have to figure out v later on, and
it's good to take u to be something that's easy take
the derivative of. So let's make t is equal to our
u and let's make e to the minus st as being our v prime. If that's the case,
then what is v? Well, v's just the
antiderivative of that. In fact, we've done it before. It's minus 1/s, e to the
minus st. That's v. And then if we want to figure
out u prime, because we're going to have to figure out that
later anyway, u prime's just the derivative of t. That's just equal to 1. So let's apply this. Let's see, so the Laplace
transform of t is equal to uv. u is t, v is this right here. It's times minus 1/s, e to the
minus st. e to the minus st, that's the uv term
right there. And this is a definite
integral, right? So we're going to evaluate
this term right here from 0 to infinity. And then it's minus the integral
from 0 to infinity of u prime, which is
just 1 times v. v, we just figured out here, is
minus-- let me write it in v's color-- times minus 1/s--
this is my v right here-- minus 1/s, e to the
minus st, dt. All of that is dt. So let's see if we can
simplify this. So this is equal to minus t/s,
e to the minus st, evaluated from 0 to infinity. And let's see, we could take--
well, this is just 1. 1 times anything is 1. We can just not write that. And then bring the
minus 1/s out. So if we bring the minus 1/s
out, this becomes plus 1/s times the integral from
0 to infinity of e to the minus st, dt. And this should look
familiar to you. This is exactly what we
solved for right here. It was the Laplace
transform of 1. So let's keep that in mind. So this right here is the
Laplace transform of 1. And I want to write it that way,
because we're going to see a pattern of this
in the next video. I'm going to write that as
a Laplace transform of 1. But what is this equal to? So we're going to evaluate this
as it adds to infinity and then subtract from
that evaluated at 0. You can kind of view it as a
substitution, so this is equal to-- well, let me write
it this way. It's the limit as A approaches
infinity, of minus A/s, e to the minus sA. So that's this evaluated
at infinity. And then from that, we're
going to subtract this evaluated at 0. So minus all of this, but we
already have a minus sign here, so we could
write a plus. Plus 0/s times e to the
minus s times 0. And then, of course, we have
this term right here. So let me write that term. I'll do it in yellow or
let me do it in blue. Plus 1/s-- that's this right
there-- times the Laplace transform of 1. And what do we get? So what's the limit of this
as A approaches infinity? You might say, wow, you know, as
A approaches infinity right here, this becomes a
really big number. There's a minus sign in there,
so it would be a really big negative number. But this is an exponent. A is an exponent right here. So e to the minus infinity is
going to go to zero much faster than this is going
to go to infinity. This term right here is a much
stronger function, I guess is the way you could see it. And you could try it out on your
calculator, if you don't believe me. This term is going to overpower
this term and so this whole thing is going
to go to zero. Likewise, e to the minus-- e
to the 0, this is 1, but you're multiplying it times a
zero, so this is also going to go to zero, which is convenient
because all of this stuff just disappears. And we're left with the Laplace
transform of t is equal to 1/s times the Laplace
transform of 1. And we know what the Laplace
transform of 1 is. The Laplace transform of 1-- we
just did it at beginning of the video-- was equal to 1/s,
if we assume that s is greater than zero. In fact, we have to assume that
s was greater than zero here in order to assume that
this goes to zero. Only if s is greater than zero,
when you get a minus infinity here does this
approach zero. So fair enough. So the Laplace transform of t
is equal to 1/s times 1/s, which is equal to 1/s squared,
where s is greater than zero. So we have one more entry
in our table, and then we can use this. What we're going to do in the
next video is build up to the Laplace transform of t to
any arbitrary exponent. And we'll do this in
the next video.",Laplace transform of t: L{t} | Laplace transform | Differential Equations | Khan Academy,"Determining the Laplace Transform of t

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/laplace-transform-of-t-n-l-t-n?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/more-laplace-transform-tools?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,qhKJ1DG9kYY
Lineartransformationexamples-Scalingandreflections_LinearAlgebra_KhanAcademy-qkfODKmZ-x4.en.csv,"We've talked a lot about
linear transformations. What I want to do in this video,
and actually the next few videos, is to show you how
to essentially design linear transformations to do things
to vectors that you want them to do. So we already know that
if I have some linear transformation, T, and it's a
mapping from Rn to Rm, then we can represent T-- what T does
to any vector in x, or the mapping of T of x in Rn to Rm--
we could represent it as some matrix times the vector
x, where this would be an m by n matrix. And we know that we can always
construct this matrix, that any linear transformation
can be represented by a matrix this way. And we can represent it by
taking our identity matrix, you've seen that before, with
n rows and n columns, so it literally just looks
like this. So it's a 1, and then it has n
minus 1, 0's all the way down. Then it's a 0, 1, and
everything else is 0's all the way down. And so essentially you just
have 1's down as diagonal. It's an n by n matrix. All of these are 0's,
just like that. You take your identity matrix
and you perform the transformation on each
of its columns. We call each of these columns
the standard basis Rn. So this is column e1,
this is column e2, and it has n columns. en. And each of these columns are
of course members of Rn because this is n rows
and n columns matrix. And we know that A, our matrix
A, can be represented as the transformation being operated
on each of these columns. So the transformation on e1, and
the transformation on e2, so forth and so on,
all the way to the transformation to en. And this is a really useful
thing to know because it's very easy to operate any
transformation on each of these basis vectors that only
have a 1 in its corresponding dimension, or with respect to
the corresponding variable, and everything else is 0. So all of this is review. Let's actually use this
information to construct some interesting transformations. So let's start with some
set in our Rn. And actually everything I'm
going to do is going to be in R2, but you can extend a lot
of this into just general dimensions. But we're dealing with
R2 right here. Obviously, it's only 2
dimensions right here. Let's say we have a triangle
formed by the points, let's say the first point
is right here. Let's say it's the point 3, 2. And then you have the point,
let's say that your next point in your triangle, is the point,
let's just make it the point minus 3, 2. I shouldn't have written
that as a fraction. I don't know why I did that. 3, 2. Then you have the point
minus 3, 2. And that's this point
right here. Minus 3, 2. And then let's say, just for
fun, let's say you have the point, or the vector-- the
position vector, right? 3, minus 2. Which is right here. Now each of these are position
vectors, and I can draw them. I could draw this 3, 2 as in
the standard position by drawing an arrow like that. I could do the minus 3,
2 in its standard position like that. And 3, minus 2 I could
draw like that. But more than the actual
position vectors, I'm more concerned with the positions
that they specify. And we know that if we take
the set of all of the positions or all of the position
vectors that specify the triangle that is essentially
formed by connecting these dots. The transformation of this set--
so we're going to apply some transformation of that--
is essentially, you can take the transformation of each of
these endpoints and then you connect the dots in
the same order. And we saw that several
videos ago. But let's actually design
a transformation here. So let's say we want to-- let's
just write down and words what we want to
do with whatever we start in our domain. Let's say we want to reflect
around the x-axis. Reflect around-- well
actually let's reflect around the y-axis. We essentially want
to flip it over. We want to flip it
over that way. So I'm kind of envisioning
something that'll look something like that when
we flip it over. So we're going to reflect
it around the y-axis. And let's say we want to stretch
in y direction by 2. In y direction times 2. So what I envision, we're
going to flip it over like this. What I just drew here. And then we want to stretch
it, so we're going to first flip it. That's kind of a step 1. And then step 2 is we're
going to stretch it. So instead of looking like this,
it'll be twice as tall, so it'll look like this. Without necessarily
stretching the x. So how can we do that? So the first idea of reflecting around the y axis, right? So what we want is, this point,
that was a minus 3 in the x-coordinate right there, we
want this point to have its same y-coordinate. We want it to still
have a 2 there. And I'm calling the second
coordinate here our y-coordinate. I could call that our x2
coordinate, but we're used to dealing with the y coordinate
when we graph things. So I'll just keep calling
it the y-coordinate. But we want is this negative
3 to turn to a positive 3. Because we want this point
to end up over here. And we want this positive 3
here to end up becoming a negative 3 over here. And we want this positive 3 for
the x-coordinate to end up as a negative 3 over there. So you can imagine all
we're doing is we're flipping the sign. This reflection around y, this
is just equivalent to flipping the sign, flipping the sign
of the x-coordinate. So this statement right here is
equivalent to minus 1 times the x-coordinate. So let's call that times x1. Because this is x1. And then stretching in
the y direction. So what does that mean? That means that whatever height
we have here-- so this next step here is whatever
height we have here-- I want it to be 2 times as much. So right here this coordinate
is 3, 2. If I didn't do this first
step first, I'd want to make it 3, 4. I want to make it 2 times
the y-coordinate. So the next thing I want to do
is I want to 2 times-- well I can either call it, let me just
call it the y-coordinate. It's a little bit different
convention that I've been using, but I'm just calling
these vectors-- instead of calling them x1, and x2, I'm
saying that my vectors in R2-- the first term I'm calling the
x term, or the x entry, and the second term I'm calling
the y entry. But it's the same idea that
we've been doing before. I'm just switching to this
notation because we're used to thinking of this as the y-axis
access as opposed to the x1 and x2 axis. So how do we construct
this transformation? I mean, I can write it down in
kind of transformation words. I could say-- I could define
my transformation as T of some vector x. Let me write it this way. T of some vector x, y is going
to be equal to-- I want to take minus 1 times the x, so
I'm going to minus the x. And I'm going to multiply
2 times the y. So that's how I could just write
it in transformation language, and that's pretty
straight forward. But how would I actually
construct a matrix for this? So what you do is, you
just take your-- we're dealing in R2. So you start off with the
identity matrix in R2, which is just 1, 0, 0, 1. And you apply this
transformation to each of the columns of this identity
matrix. So if you apply the
transformation to this first column, what do you get? So what we're going to do is
to create a new matrix, A. And say that is equal to the
transformation of-- let me write it like this--
Transformation of 1, 0. That is going to be our new
column, we're just going to transform this column. And the second column is going
to be the transformation of that column. So it's a transformation
of 0, 1. Just like that. And so what are these
equal to? The transformation of 1, 0. So let me write it down
here in green. So A is equal to? What's the transformation
of 1, 0 where x is 1? Where we just take the minus
of the x term, so we get minus 1. And then 2 times the y term. So 2 times 0 is just 0. Now do the second term. The minus of the 0 term
is just minus 0. So that just stays 0. Then you multiply 2
times the y term. So 2 times y is going to be
equal to 2 times 1, so it's equal to 2. So now we can describe this
transformation-- so now we could say the transformation
of some vector, x, y. We can describe it as a
matrix-vector product. It is equal to minus 1, 0,
0, 2, times our vector. Times x, y. And let's apply it to verify
that it works. To verify that our
matrix works. So this first point, and I'll
try to do it color coded, let's do this first
point right here. This is minus 3, 2. So that's minus 3, 2. So what is minus 3, 2-- I'll
do it right over here. I could just look at that. So what minus 1, 0, 0,
2, times minus 3, 2? Well this is just a straight
up matrix-vector product. Minus 1 times minus 3 is
positive 3 plus 0 times 2. So plus 0. So this is 3. And then 0 times minus 3 is 0. Plus 2 times 2. This is 3, 4. So that point right there will
now become the point 3, 4. It now becomes that
point right there. Let's look at this point right
here, the point 3, 2. So let's take our transformation
matrix, minus 1, 0, 0, 2, times 3, 2. This is equal to minus 1 times
3 is minus 3 plus 0 times 2. So it's just minus 3. And you have 0 times
3, which is 0. Plus 2 times 2, which is 4. 0 plus-- so you got
that point. So this point, by our
transformation, T, becomes minus 3, 4. So minus 3, 4. And I kind of switch
in my terminology. I said, becomes, or you could
say it's mapped to if you want to use the language that I used
when I introduced the ideas of functions and
transformation. This point is mapped to
this point in R2. And then finally let's look at
this point right here, apply our transformation matrix
that we've engineered. Let's multiply minus 1, 0, 0,
2, times this point right here, which is 3, minus 2. Which is equal to minus
1 times 3 is minus 3. And then 0 times minus
2 is just 0. So this just becomes minus 3. And then 0 times 3 is 0. 2 times minus 2 is minus 4. So minus 3, minus 4. So this point right here becomes
minus 3, minus 4. Becomes that point
right there. And we know that the set in R2
that connects these dots, by the same transformation, will
be mapped to the set in R3 that connects these dots. We've seen that already. I think that was 3 videos ago. So the image of this set that
I've drawn here, this triangle is just a set of points
specified by a set of vectors. The image of that set of
position vectors specifies these points right here. Specifies the points that
I'm drawing right here. Let me see if I'm
doing it right. There you go, just like that. And low and behold, it has done
what we wanted to do. We flipped it over, so that we
got this side onto the other side, like that. And then we stretched it. And we stretched it in
the y direction. And we we see that it has
stretched by a factor of 2. We flipped it first, and
then we stretched it by factor of 2. And, in general, any of these
operations can be performed-- I mean, you can always go
back to the basics. You can always say, look I can
write my transformation in this type of form, then
I can just apply that to my basis vectors. Or the columns in my
identity matrix. But a general theme is any of
these transformations that literally just scale in either
the x or y direction, and when I-- or, well, you could
say, scale. They can either shrink
or expand in the x or y direction. Or flip in the x or y direction,
creating a reflection. These are going to be
diagonal matrices. Diagonal matrices. And why are they diagonal
matrices? Because they only have non-zero terms along their diagonals. This is the 2 by 2 case. If I did a 3 by 3, it would be
0's everywhere, except along the diagonal. And it makes a lot of sense
because this first term is essentially what you're
doing to the x1 term. The second term is what you're
doing to the x2 term. Or the y term in our example. If I had multiple terms, if this
was a 3 by 3, that would be what I would do to
the third dimension. Then the next term would
be what I would do the fourth dimension. So you could expand this idea
to an arbitrary Rn. Anyway, the whole point of this
video is to introduce you to this idea of creating
custom transformations. And I think you're already
starting to realize that this could be very useful if you
want to do-- especially in computer programming-- if
you're going to do some graphics or create some type
of multi-dimensional games.",Linear transformation examples: Scaling and reflections | Linear Algebra | Khan Academy,"Creating scaling and reflection transformation matrices (which are diagonal)

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/lin_trans_examples/v/linear-transformation-examples-rotations-in-r2?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/linear_transformations/v/more-on-matrix-addition-and-scalar-multiplication?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,qkfODKmZ-x4
Nullspace2-Calculatingthenullspaceofamatrix_LinearAlgebra_KhanAcademy-qvyboGryeA8.en.csv,"In the last video, I spoke
somewhat theoretically about what a null space is
and we showed that it is a valid subspace. But in this video let's actually
calculate the null space for a matrix. In this case, we'll calculate
the null space of matrix A. So null space is literally
just the set of all the vectors that, when I multiply A
times any of those vectors, so let me say that the vector
x1, x2, x3, x4 is a member of our null space. So when I multiply this matrix
times this vector I should get the 0 vector. I should get the vector. And just to make a few
points here, this has exactly 4 columns. This is a 3 by 4 matrix, so I've
only legitimately defined multiplication of this times a
four-component vector or a member of Rn. Let me call this X. And this is our vector X. This is a member of R4. It has four components. And then when you multiply
these, we need to produce a 0 vector. The null space is the set of
all the vectors, and when I multiply it times A, I
produce the 0 vector. And what am I going to get? I'm going to have one row times
this and that's going to be the first entry, then this
row times, that's the second entry, and then the third row. So I should have three 0's So my
0 vector is going to be the 0 vector in R3. So how do we figure out the set
of all of these x's that satisfy this? Let me just write our
formal notation. The null space of A is the set
of all vectors that are a member of -- we generally say
Rn, but this is a 3 by 4 matrix, so these are all the
vectors that are going to be members of R4, because I'm using
this particular A, such that my matrix A times any
of these vectors is equal to the 0 vector. In this case it's going
to be 0 vector in R3. So how do we do this? Well, this is just a straight
up linear equation. We can write it that way. If we were to actually perform
the matrix multiplication, we get 1 times x1. Let me write it here. Let me do it in a
different color. 1 times x1, plus 1 times x2,
plus 1 times x3, plus 1 times x4 is equal to this 0 there. So that times that is
equal to that 0. And then this times this should
be equal to that 0. So 1 times x1, so you get x1,
plus 2 times x2, plus 3 times x3, plus 4 times x4 is going
to be equal to that 0. And then finally we have that
times this vector should be equal to that 0. So the dot product of this row
vector with this column vector should be equal to that 0. So you get 4x1. 4x1 plus 3x2 plus 2x1 plus 2x3
plus x4 is equal to 0. 4x1 plus 3x2 plus 2x3 plus
x4 is equal to 0. You just have to find the
solution set to this and we'll essentially have figured
out our null space. Now, we've figured out the
solution set to systems of equations like this. We have three equations
with four unknowns. We can do that. We can represent this by an
augmented matrix and then put that in reduced row
echelon form. Let's do that. I can represent this problem
as the augmented matrix. 1, 1, 4. 1, 2, 3. 1, 3, 2. and then 1, 4, 1. And then I augment that
with the 0 vector. And the immediate thing you
should notice is we took the pain of multiplying this times
this to equal that, and we wrote this as a system of
equations, but now we want to solve the system of equations,
we're going back to the augmented matrix world. What does this augmented
matrix look like? Well, this is just our
matrix A right there. That's just matrix A right
there, that's just the 0 vector right there. And to solve this, and we've
done this before, we're just going to put this augmented
matrix into row echelon form. What you're going to find is
when you put it into row echelon form, this right side's
not going to change at all, because no matter what you
multiply or subtract by, you're just doing it all times
0, so you just keep ending up with 0. So as we put this into reduced
row echelon form, were actually just putting matrix A
into reduced echelon form. So let me do that, instead
of just talking about it. So let me start off by keeping
row 1 the same. Row 1 is 1, 1, 1, 1, 0. And then I want to eliminate
this 1 right here, so let me replace row 2 with row
2 minus row 1. So 1 minus 1 is 0. 2 minus 1 is 1. 3 minus 1 is 2. 4 minus 1 is 3. 0 minus 0 is 0. You can see the 0's aren't
going to change. And then let me replace this
guy with 4 times this guy, minus this guy. So I can only get rid of this. So 4 times 1 minus 4 is 0. 4 times 1 minus 3 is 1. 4 times 1 minus 2 is 2. 4 times 1 minus 1 is 3. 4 times 0 minus 0 is 0. Now I want to get rid of, if I
want to put this in reduced row echelon form, I want
to get rid of that term and that term. So let me keep my middle
row the same. My middle row is 0, 1, 2, 3. So that's 0 on the augmented
side of it, although these 0's are never going to change, it's
really just a little bit of an exercise just to
keep writing them. And my first row, let me replace
it with the first row minus the second row, so I
can get rid of this 1. So 1 minus 0 is 1. 1 minus 1 is 0. 1 minus 2 is minus 1. 1 minus 3 is minus 2. And 0 minus 0 is 0. And let me replace this last
row with the last row minus the middle row. So 0 minus 0 is 0. 1 minus 1 is 0. 2 minus 2 is 0. I think you see where
this is going. 3 minus 3 is 0. And obviously 0 minus 0 is 0. So this system of equations
has been reduced, just by doing reduce row echelon
form, this problem. If I just rewrite this right
here, this can be written as a system equations of x1 minus
x3 minus x4, right? The 0 x2's is equal to 0. And then this second row right
here, there's no x1, you just have an x2, plus 2x3, plus 3x2
is equal to 0, and this obviously gives me no
information whatsoever. And so I can solve this. I can solve this for x1 and
x2, and what do I get? I get x1 is equal
to x3 plus x4. Actually, I made
a mistake here. This is x1 minus x3 minus 2
times x4 is equal to 0. So if I rewrite this, I get x1
is equal to x3 plus 2x4. And then I get x2. Let me do that in green. x2 is equal to minus
2 x3 minus 3x2. So if I wanted to write the
solution set to this equation, if I wanted to write it in terms
of this, I could write x1, x2, x3, x4 is equal to
-- what's x1 equal to? It's equal to x3 times
1 plus x4 times 2. Right? I just got this right here from
this equation right here. x1 is equal to 1 times
x3, plus 2 times x4. That's just that, right there. Now, x2 is equal to x3
times minus 2, plus x4 times minus 3. What am I doing? I'm losing track of things. This x2 right here is x2 plus
2x3 plus 3x4 is equal to 0. So x2 is equal to minus
2x3, minus 3x4. Right. Like that. Sorry, my brain isn't completely
in the problem, I'm making these silly mistakes. But I think you understand
this now. So then what is x3 equal to? Well, it's just equal
to 1 times x3, plus 0 times x4, right? x3 is equal to x3. And what's x4 equal to? It's equal to 0 times
x3 plus 1 times x4. So all of the vectors in R4,
these are a member R4, which satisfy the equation, our
original equation, ax is equal to 0, can be represented as a
linear combination of these two vectors, of those
two vectors, right? These are just random scalars
that are a member of-- We can pick any real number for x3
and we could pick any real number for x4. So our solution set is just a
linear combination of those two vectors. What's another way of
saying a linear combination of two vectors? Let me write this. The null space of A, which is
just a solution set of this equation, it's just all the
x's that satisfy this equation, it equals all of the
linear combinations of this vector and that vector. What do we call all the linear
combinations of two vectors? It's the span of those
two vectors. So it equals the span of that
vector and that vector. Of the vector 1, minus 2,
1, 0, and the vector 2, minus 3, 0, 1. And this is our null space. Before letting you go, let me
just point out one interesting thing right here. We represented our system of
equation like this and we put it into reduced row echelon
form, so this is A and this is 0. This right here is, let me make
sure I have some space, let me put it right here. That right there is the reduced
row echelon form of A. And so where essentially this
equation, this is a linear equation that is trying
to solve this problem. The reduced row echelon form
of A times our vector x is equal to 0. So, all the solutions to this
are also the solutions to our original problem, to our
original ax is equal to 0. So what's the solution
to this? All the x's that satisfy this,
these are the null space of the reduced row echelon
form of A. Right? So here are all of the x's, this
is the null space, this problem, if we find all of the
x's here, this is the null space of the reduced row echelon
form of our matrix A. But we're saying that this
problem is the same problem as this one, right? So we can write that the null
space of A is equal to the null space of the reduced
row echelon form of A. And that might seem a little
bit confusing, hey, why are you even writing this out, but
it's the actually very useful when you're trying to calculate
null spaces. So we didn't even have
to write a big augmented matrix here. We can say, take our matrix A,
put it in reduced row echelon form and then figure out
it's null space. We would have gone straight
to this point right here. This is the reduced row echelon
form of A, and then I could have immediately solved
these equations, right? I would have just taken the dot
product of the reduced row echelon form or, not the dot
product, the matrix vector product of the reduced row
echelon form of A with this vector, and I would've gotten
these equations, and then these equations would
immediately, I can just rewrite them in this
form, and I would have gotten our result. But anyway, hopefully you found
that reasonably useful.",Null space 2: Calculating the null space of a matrix |  Linear Algebra | Khan Academy,"Calculating the null space of a matrix

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/null-space-3-relation-to-linear-independence?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/introduction-to-the-null-space-of-a-matrix?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,qvyboGryeA8
ProofoftheCauchy-Schwarzinequality_Vectorsandspaces_LinearAlgebra_KhanAcademy-r2PogGDl8_U.en.csv,"Let's say that I have
two nonzero vectors. Let's say the first vector is
x, the second vector is y. They're both in the set Rn
and they're nonzero. It turns out that the absolute
value of their-- let me do it in a different color. This color's nice. The absolute value of their
dot product of the two vectors-- and remember, this is
just a scalar quantity-- is less than or equal to the
product of their lengths. And we've defined the dot
product and we've defined lengths already. It's less than or equal to the
product of their lengths and just to push it even further,
the only time that this is equal, so the dot product of the
two vectors is only going to be equal to the lengths of
this-- the equal and the less than or equal apply only in the
situation-- let me write that down-- where one of these
vectors is a scalar multiple of the other. Or they're collinear. You know, one's just kind of the
longer or shorter version of the other one. So only in the situation where
let's just say x is equal to some scalar multiple of y. These inequalities or I guess
the equality of this inequality, this is called the
Cauchy-Schwarz Inequality. So let's prove it because you
can't take something like this just at face value. You shouldn't just
accept that. So let me just construct a
somewhat artificial function. Let me construct some function
of-- that's a function of some variables, some scalar t. Let me define p of t to be equal
to the length of the vector t times the vector-- some
scalar t times the vector y minus the vector x. It's the length of
this vector. This is going to be
a vector now. That squared. Now before I move forward
I want to make one little point here. If I take the length of any
vector, I'll do it here. Let's say I take the length
of some vector v. I want you to accept that this
is going to be a positive number, or it's at least greater
than or equal to 0. Because this is just going to be
each of its terms squared. v2 squared all the way
to vn squared. All of these are real numbers. When you square a real number,
you get something greater than or equal to 0. When you sum them up, you're
going to have something greater than or equal to 0. And you take the square root
of it, the principal square root, the positive square root,
you're going to have something greater than
or equal to 0. So the length of any real vector
is going to be greater than or equal to 0. So this is the length
of a real vector. So this is going to be greater
than or equal to 0. Now, in the previous video, I
think it was two videos ago, I also showed that the magnitude
or the length of a vector squared can also be rewritten
as the dot product of that vector with itself. So let's rewrite this
vector that way. The length of this vector
squared is equal to the dot product of that vector
with itself. So it's ty minus x
dot ty minus x. In the last video, I showed
you that you can treat a multiplication or you can treat
the dot product very similar to regular
multiplication when it comes to the associative, distributive
and commutative properties. So when you multiplied these,
you know, you could kind of view this as multiplying
these two binomials. You can do it the same way as
you would just multiply two regular algebraic binomials. You're essentially just using
the distributive property. But remember, this isn't just
regular multiplication. This is the dot product
we're doing. This is vector multiplication
or one version of vector multiplication. So if we distribute it out, this
will become ty dot ty. So let me write that out. That'll be ty dot ty. And then we'll get a minus--
let me do it this way. Then we get the minus
x times this ty. Instead of saying times,
I should be very careful to say dot. So minus x dot ty. And then you have this ty
times this minus x. So then you have
minus ty dot x. And then finally, you have the
x's dot with each other. And you can view them as
minus 1x dot minus 1x. You could say plus minus 1x. I could just view this as plus
minus 1 or plus minus 1. So this is minus 1x
dot minus 1x. So let's see. So this is what my whole
expression simplified to or expanded to. I can't really call this
a simplification. But we can use the fact that
this is commutative and associative to rewrite this
expression right here. This is equal to y dot
y times t squared. t is just a scalar. Minus-- and actually,
this is 2. These two things
are equivalent. They're just rearrangements of
the same thing and we saw that the dot product is
associative. So this is just equal to 2
times x dot y times t. And I should do that in maybe
a different color. So these two terms result in
that term right there. And then if you just rearrange
these you have a minus 1 times a minus 1. They cancel out, so those will
become plus and you're just left with plus x dot x. And I should do that in a
different color as well. I'll do that in an
orange color. So those terms end up
with that term. Then of course, that term
results in that term. And remember, all I did
is I rewrote this thing and said, look. This has got to be greater
than or equal to 0. So I could rewrite that here. This thing is still just
the same thing. I've just rewritten it. So this is all going to be
greater than or equal to 0. Now let's make a little bit of
a substitution just to clean up our expression
a little bit. And we'll later back substitute
into this. Let's define this as a. Let's define this piece
right here as b. So the whole thing
minus 2x dot y. I'll leave the t there. And let's define this or
let me just define this right here as c. X dot x as c. So then, what does our
expression become? It becomes a times t squared
minus-- I want to be careful with the colors-- b
times t plus c. And of course, we know that it's
going to be greater than or equal to 0. It's the same thing as
this up here, greater than or equal to 0. I could write p of t here. Now this is greater than or
equal to 0 for any t that I put in here. For any real t that
I put in there. Let me evaluate our function
at b over 2a. And I can definitely do this
because what was a? I just have to make sure I'm not
dividing by 0 any place. So a was this vector
dotted with itself. And we said this was
a nonzero vector. So this is the square
of its length. It's a nonzero vector, so some
of these terms up here would end up becoming positively
when you take its length. So this thing right
here is nonzero. This is a nonzero vector. Then 2 times the dot product
with itself is also going to be nonzero. So we can do this. We don't worry about dividing
by 0, whatever else. But what will this
be equal to? This'll be equal to-- and I'll
just stick to the green. It takes too long to keep
switching between colors. This is equal to a times this
expression squared. So it's b squared
over 4a squared. I just squared 2a to
get the 4a squared. Minus b times this. So b times-- this is just
regular multiplication. b times b over 2a. Just write regular
multiplication there. Plus c. And we know all of that is
greater than or equal to 0. Now if we simplify this a little
bit, what do we get? Well this a cancels out with
this exponent there and you end up with a b squared
right there. So we get b squared over 4a
minus b squared over 2a. That's that term over there. Plus c is greater than
or equal to 0. Let me rewrite this. If I multiply the numerator and
denominator of this by 2, what do I get? I get 2b squared over 4a. And the whole reason I did
that is to get a common denominator here. So what do you get? You get b squared over 4a minus
2b squared over 4a. So what do these two
terms simplify to? Well the numerator is b squared
minus 2b squared. So that just becomes minus b
squared over 4a plus c is greater than or equal to 0. These two terms add up to
this one right here. Now if we add this to both sides
of the equation, we get c is greater than or equal
to b squared over 4a. It was a negative on
the left-hand side. If I add it to both sides it's
going to be a positive on the right-hand side. We're approaching something that
looks like an inequality, so let's back substitute our
original substitutions to see what we have now. So where was my original
substitutions that I made? It was right here. And actually, just to simplify
more, let me multiply both sides by 4a. I said a, not only
is it nonzero, it's going to be positive. This is the square
of its length. And I already showed you that
the length of any real vector's going to be positive. And the reason why I'm taking
great pains to show that a is positive is because if I
multiply both sides of it I don't want to change the
inequality sign. So let me multiply both sides
of this by a before I substitute. So we get 4ac is greater than
or equal to b squared. There you go. And remember, I took
great pains. I just said a is definitely a
positive number because it is essentially the square of the
length. y dot y is the square of the length of y, and that's
a positive value. It has to be positive. We're dealing with
real vectors. Now let's back substitute
this. So 4 times a, 4 times y dot y. y dot y is also-- I might as
well just write it there. y dot y is the same thing as
the magnitude of y squared. That's y dot y. This is a. y dot y, I showed you that
in the previous video. Times c. c is x dot x. Well x dot x is the
same thing as the length of vector x squared. So this was c. So 4 times a times c is going
to be greater than or equal to b squared. Now what was b? b was
this thing here. So b squared would be 2
times x dot y squared. So we've gotten to this
result so far. And so what can we
do with this? Oh sorry, and this whole
thing is squared. This whole thing right
here is b. So let's see if we can
simplify this. So we get-- let me switch
to a different color. 4 times the length of y squared
times the length of x squared is greater than or equal
to-- if we squared this quantity right here, we
get 4 times x dot y. 4 times x dot y times x dot y. Actually, even better, let me
just write it like this. Let me just write 4 times
x dot y squared. Now we can divide
both sides by 4. That won't change
our inequality. So that just cancels
out there. And now let's take the
square root of both sides of this equation. So the square roots of both
sides of this equation-- these are positive values, so the
square root of this side is the square root of each
of its terms. That's just an exponent property. So if you take the square root
of both sides you get the length of y times the length of
x is greater than or equal to the square root of this. And we're going to take the
positive square root. We're going to take the positive
square root on both sides of this equation. That keeps us from having to
mess with anything on the inequality or anything
like that. So the positive square root is
going to be the absolute value of x dot y. And I want to be very careful
to say this is the absolute value because it's possible that
this thing right here is a negative value. But when you square it, you want
to be careful that when you take the square root
of it that you stay a positive value. Because otherwise when we take
the principal square root, we might mess with the inquality. We're taking the positive square
root, which will be-- so if you take the absolute
value, you're ensuring that it's going to be positive. But this is our result. The absolute value of the dot
product of our vectors is less than the product of the
two vectors lengths. So we got our Cauchy-Schwarz
inequality. Now the last thing I said is
look, what happens if x is equal to some scalar
multiple of y? Well in that case, what's
the absolute value? The absolute value of x dot y? Well that equals--
that equals what? If we make the substitution that
equals the absolute value of c times y. That's just x dot y, which
is equal to just from the associative property. It's equal to the absolute value
of c times-- we want to make sure our absolute value,
keep everything positive. y dot y. Well this is just equal to c
times the magnitude of y-- the length of y squared. Well that just is equal to the
magnitude of c times-- or the absolute value of our scalar
c times our length of y. Well this right here,
I can rewrite this. I mean you can prove this to
yourself if you don't believe it, but this-- we could put the
c inside of the magnitude and that could be a good
exercise for you to prove. But it's pretty straightforward. You just do the definition
of length. And you multiply it by c. This is equal to the magnitude
of cy times-- let me say the length of cy times
the length of y. I've lost my vector notation
someplace over here. There you go. Now, this is x. So this is equal to the length
of x times the length of y. So I showed you kind of
the second part of the Cauchy-Schwarz Inequality that
this is only equal to each other if one of them is a scalar
multiple of the other. If you're a little uncomfortable
with some of these steps I took, it might
be a good exercise to actually prove it. For example, to prove that the
absolute value of c times the length of the vector y is
the same thing as the length of c times y. Anyway, hopefully you found
this pretty useful. The Cauchy-Schwarz Inequality
we'll use a lot when we prove other results in
linear algebra. And in a future video, I'll
give you a little more intuition about why this makes a
lot of sense relative to the dot product.",Proof of the Cauchy-Schwarz inequality | Vectors and spaces | Linear Algebra | Khan Academy,"Proof of the Cauchy-Schwarz Inequality

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/linear-algebra-vector-triangle-inequality?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/proving-vector-dot-product-properties?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,r2PogGDl8_U
Vectorexamples_Vectorsandspaces_LinearAlgebra_KhanAcademy-r4bH66vYjss.en.csv,"In the last video I was a little
formal in defining what Rn is, and what a vector is,
and what vector addition or scalar multiplication is. In this video I want to kind of
go back to basics and just give you a lot of examples. And give you a more tangible
sense for what vectors are and how we operate with them. So let me define a couple
of vectors here. And I'm going to do, most of my
vectors I'm going to do in this video are going
to be in R2. And that's because they're
easy to draw. Remember R2 is the set
of all 2-tuples. Ordered 2-tuples where each of
the numbers, so you know you could have x1, my 1 looks like a
comma, x1 and x2, where each of these are real numbers. So you each of them, x1 is a
member of the reals, and x2 is a member of the reals. And just to give you a sense
of what that means, if this right here is my coordinate
axes, and I wanted a plot all my x1's, x2's. You know you could view this
as the first coordinate. We always imagine that
as our x-axis. And then our second coordinate
we plotted on the vertical axis. That traditionally is our
y-axis, but we'll just call that the second number
axis, whatever. You could visually represent all
of R2 by literally every single point on this plane if
we were to continue off to infinity in every direction. That's what R2 is. R1 would just be points
just along one of these number lines. That would be R1. So you could immediately
see that R2 is kind of a bigger space. But anyway, I said that I
wouldn't be too abstract, that I would show you examples. So let's get some vectors
going in R2. So let me define my vector a. I'll make it nice and bold. My vector a is equal to,
I'll make some numbers up, negative 1, 2. And my vector b, make it nice
and bold, let me make that, I don't know, 3, 1. Those are my two vectors. Let's just add them up
and see what we get. Just based on my definition
of vector addition. I'll just stay in one color
for now so I don't have to keep switching back and forth. So a, nice deep a, plus bolded
b is equal to, I just add up each of those terms.
Negative 1 plus 3. And then 2 plus 1. That was my definition
of vector addition. So that is going to be
equal to 2 and 3. Fair enough that just
came out of my definition of vector addition. But how can we represent
this vector? So we already know that if we
have coordinates, you know, if I have the coordinate, and this
is just a convention. It's just the way
that we do it. The way we visualize things. If I wanted to plot the
point 1, 1, I go to my coordinate axes. The first point I go along
the horizontal, what we traditionally call our x-axis. And I go 1 in that direction. And then convention is, the
second point I go 1 in the vertical direction. So the point 1, 1. Oh, sorry, let me
be very clear. This is 2 and 2, so one
is right here, and one is right there. So the point 1, 1 would
be right there. That's just the standard
convention. Now our convention for
representing vectors are, you might be tempted to say, oh,
maybe I just represent this vector at the point
minus 1, 2. And on some level
you can do that. I'll show you in a second. But the convention for vectors
is that you can start at any point. Let's say we're dealing with
two dimensional vectors. You can start at any
point in R2. So let's say that you're
starting at the point x1, and x2. This could be any point in R2. To represent the vector, what
we do is we draw a line from that point to the point x1. And let me call this, let's say
that we wanted to draw a. So x1 minus 1. So this is, I'm representing
a. So this is, I want to represent
the vector a. x1 minus 1, and then
x1 plus 2. Now if that seems confusing to
you, when I draw it, it'll be very obvious. So let's say I just want to
start at the point, let's just say for quirky reasons, I just
pick a random point here. I just pick a point. That one right there. That's my starting point. So minus 4, 4. Now if I want to represent my
vector a, what I just said is that I add the first term
in vector a to my first coordinate. So x1 plus minus 1
or x1 minus 1. So my new one is going to be,
so this is my x1 minus 4. So now it's going to be, let's
see, I'm starting at the point minus 4 comma 4. If I want to represent a, what
I do is, I draw an arrow to minus 4 plus this first
term, minus 1. And then 4 plus the
second term. 4 plus 2. And so this is what? This is minus 5 comma 6. So I go to minus 5 comma 6. So I go to that point right
there and I just draw a line. So my vector will
look like this. I draw a line from
there to there. And I draw an arrow
at the end point. So that's one representation
of the vector minus 1, 2. Actually let me do it
a little bit better. Because minus 5 is actually
more, a little closer to right here. Minus 5 comma 6 Is right
there, so I draw my vector like that. But remember this point minus
4 comma 4 was an arbitrary place to draw my vector. I could have started
at this point here. I could have started at the
point 4 comma 6 and done the same thing. I could have gone minus 1 in
the horizontal direction, that's my movement in the
horizontal direction. And then plus 2 in the
vertical direction. So I could have drawn, so minus
1 in the horizontal and plus 2 in the vertical
gets me right there. So I could have just as easily
drawn my vector like that. These are both interpretations
of the same vector a. I should draw them in the
color of vector a. So vector a was this light
blue color right there. So this is vector a. This is vector a. Sometimes there'll
be a little arrow notation over the vector. But either of those vectors. I could draw an infinite
number of vector a's. I could draw vector a here. I could draw it like that. Vector a, it goes
back 1 and up 2. So vector a could
be right there. Similarly vector b. What does vector b do? I could pick some arbitrary
point for vector b. It goes to the right 3, so it
goes to the right 1, 2, 3 and then it goes up 1. So vector b, one representation
of vector b, looks like this. Another represention. I can start it right here. I could go to the right 3,
1, 2, 3, and then up 1. This would be another
representation of my vector b. There's an infinite number of
representations of them. But the convention is to often
put them in what's called the standard position. And that's to start
them off at 0, 0. So your initial point, let
me write this down. Standard position is just to
start the vectors at 0, 0 and then draw them. So vector a in standard
position, I'd start at 0, 0 like that and I would go
back 1 and then up 2. So this is vector a in standard
position right there. And then vector b in
standard position. Let me write that. That's a. And then vector b in standard
position is 3, go to the 3 right and then up 1. These are the vectors in
standard position, but any of these other things we drew
are just as valid. Now let's see if we can get
an interpretation of what happened when we
added a plus b. Well if I draw that vector in
standard position, I just calculated, it's 2, 3. So I go to the right
2 and I go up 3. So if I just draw it in
standard position it looks like this. This vector right there. And at first when you look at
it, this vector right here is the vector a plus b in
standard position. When you draw it like that,
it's not clear what the relationship is when
we added a and b. But to see the relationship what
you do is, you put a and b head to tails. What that means is, you put
the tail end of b to the front end of a. Because remember, all
of these are valid representations of b. All of the representations
of the vector b. They all have, they're all
parallel to each other, but they can start from anywhere. So another equally valid
representation of vector b is to start at this point right
here, kind of the end point of vector a in standard position,
and then draw vector b starting from there. So you go 3 to the right. So you go 1, 2, 3. And then you go up 1. So vector b could also be
drawn just like that. And then you should
see something interesting had happened. And remember, this vector b
representation is not in standard position, but it's just
an equally valid way to represent my vector. Now what do you see? When I add a, which is right
here, to b what do I get if I connect the starting point of
a with the end point of b? I get the addition. I have added the two vectors. And I could have done
that anywhere. I could have started
with a here. And then I could have
done the end point. I could have started b here and
gone 3 to the right, 1, 2, 3 and then up 1. And I could have drawn b
right there like that. And then if I were to add a plus
b, I go to the starting point of a, and then
the end point of b. And that should also
be the visual representation of a plus b. Just to make sure it confirms
with this number, what I did here was I went 2 to
the right, 1, 2 and then I went 3 up. 1, 2, 3 and I got a plus b. Now let's think about
what happens when we scale our vectors. When we multiply it times
some scalar factor. So let me pick new vectors. Those have gotten monotonous. Let me define vector v. v for vector. Let's say that it is
equal to 1, 2. So if I just wanted to draw
vector v in standard position, I would just go 1 to
the horizontal and then 2 to the vertical. That's it. That's the vector in
standard position. If I wanted to do it in a non
standard position, I could do it right here. 1 to the right up 2,
just like that. Equally valid way of
drawing vector v. Equally valid way of doing it. Now what happens if I
multiply vector v. What if I have, I don't know,
what if I have 2 times v? 2 times my vector v is now going
to be equal to 2 times each of these terms. So it's
going to be 2 times 1 which is 2, and then 2 times
2 which is 4. Now what does 2 times
vector v look like? Well let me just start from
an arbitrary position. Let me just start
right over here. So I'm going to go 2
to the right, 1, 2. And I go up 4. 1, 2, 3, 4. So this is what 2 times
vector v looks like. This is 2 times my vector v. And if you look at it, it's
pointing in the exact same direction but now it's
twice as long. And that makes sense because we
scaled it by a factor of 2. When you multiply it by a
scalar, or you're not changing its direction. Its direction is the exact same
thing as it was before. You're just scaling
it by that amount. And I could draw
this anywhere. I could have drawn
it right here. I could have drawn 2v
right on top of v. Then you would have seen it,
I don't want to cover it. You would have seen that it
goes, it's exactly, in this case when I draw it in standard position, it's colinear. It's along the same line,
it's just twice as far. it's just twice as long
but they have the exact same direction. Now what happens if I were
to multiply minus 4 times our vector v? Well then that will be equal
to minus 4 times 1, which is minus 4. And then minus 4 times
2, which is minus 8. So this is on my new vector. Minus 4, minus 8. This is minus 4 times
our vector v. So let's just start at
some arbitrary point. Let's just do it in
standard position. So you go to the right 4. Or you go to the left 4. So so you go to the left
4, 1, 2, 3, 4. And then down 8. Looks like that. So this new vector is going
to look like this. Let me try and draw a relatively
straight line. There you go. So this is minus 4 times
our vector v. I'll draw a little arrow
on it to make sure you know it's a vector. Now what happened? Well we're kind of in
the same direction. Actually we're in the exact
opposite direction. But we're still along the
same line, right? But we're just in the exact
opposite direction. And it's this negative right
there that flipped us around. If we just multiplied negative
1 times this, we would have just flipped around to
right there, right? But we multiplied it
by negative 4. So we scaled it by 4, so you
make it 4 times as long, and then it's negative, so
then it flips around. It flips backwards. So now that we have that notion,
we can kind of start understanding the idea of
subtracting vectors. Let me make up 2 new
vectors right now. Let's say my vector x, nice and
bold x, is equal to, and I'm doing everything in R2, but
in the last part of this video I'll make a few examples
in R3 or R4. Let's say my vector x
is equal to 2, 4. And let's say I have
a vector y. y, make it nice and bold. And then that is equal to
negative 1, minus 2. And I want to think about
the notion of what x minus y is equal to. Well we can say that this is the
same thing as x plus minus 1 times our vector y. Right? So x plus minus 1 times
our vector y. Now we can use our
definitions. We know how to multiply
by a scalar. So we'll say that this
is equal to, let me switch colors. I don't like this color. This is equal to our
x vector is 2, 4. And then what's minus
1 times y? So minus 1 times y is minus
1 times minus 1 is 1. And then minus 1 times
minus 2 is 2. So x minus y is going to be
these two vectors added to each other, right? I'm just adding the
minus of y. This is minus vector y. So this x minus y is going to
be equal to 3 and 3 and 6. So let's see what that looks
like when we visually represent them. Our vector x was 2, 4. So 2, 4 in standard position
it looks like this. That's my vector x. And then vector y in standard
position, let me do it in a different color, I'll
do y in green. Vector y is minus 1, minus 2. It looks just like this. And actually I ended up
inadvertently doing collinear vectors, but, hey, this
is interesting too. So this is vector y. So then what's their
difference? This is 3, 6. So it's the vector 3, 6. So it's this vector. Let me draw it someplace else. If I start here I go 1, 2, 3. And then I go up 6. So then up 6. It's a vector that
looks like this. That's the difference between
the two vectors. So at first you say,
this is x minus y. Hey, how is this the difference
of these two? Well if you overlay this. If you just shift this over
this, you could actually just start here and go straight up. And you'll see that it's really
the difference between the end points. You're kind of connecting
the end points. I actually didn't want to
draw collinear vectors. Let me do another example. Although that one's kind
of interesting. You often don't see that
one in a book. Let me to define vector x
in this case to be 2, 3. And let me define vector y
to be minus 4, minus 2. So what would be x in
standard position? It would be 2, 3. It'd look like that. That is our vector x if we
start at the origin. So this is x. And then what does vector
y look like? I'll do y in orange. Minus 4, minus 2. So vector y looks like this. Now what is x minus y? Well you know, we could
view this, 2 plus minus 1 times this. We could just say
2 minus minus 4. I think you get the idea now. But we just did it the first
way the last time because I wanted to go from my basic
definitions of scalar multiplication. So x minus y is just going to
be equal to 2 plus minus 1 times minus 4, or
2 minus minus 4. That's the same thing as
2 plus 4, so it's 6. And then it's 3 minus
minus 2, so it's 5. Right? So the difference between the
two is the vector 6, 5. So you could draw it
out here again. So you could go, add 6 to 4, go
up there, then to 5, you'd go like that. So the vector would look
something like this. It shouldn't curve like that,
so that's x minus y. But if we drew them between,
like in the last example, I showed that you could draw it
between their two heads. So if you do it here, what
does it look like? Well if you start at this point
right there and you go 6 to the right and then up 5,
you end up right there. So the difference between the
two vectors, let me make sure I get it, the difference
between the two vectors looks like that. It looks just like that. Which kind of should make
sense intuitively. x minus y. That's the difference between
the two vectors. You can view the difference as,
how do you get from one vector to another
vector, right? Like if, you know, let's go
back to our kind of second grade world of just scalars. If I say what 7 minus 5 is, and
you say it's equal to 2, well that just tells you that
5 plus 2 is equal to 7. Or the difference between
5 and 7 is 2. And here you're saying, look the
difference between x and y is this vector right there. It's equal to that vector
right there. Or you could say look, if I
take 5 and add 2 I get 7. Or you could say, look, if I
take vector y, and I add vector x minus y, then
I get vector x. Now let's do something else
that's interesting. Let's do what y minus
x is equal to. y minus x. What is that equal to? Do it in another color
right here. Well we'll take minus 4, minus
2 which is minus 6. And then you have minus
2, minus 3. It's minus 5. So y minus x is going to be,
let's see, if we start here we're going to go down 6. 1, 2, 3, 4, 5, 6. And then back 5. So back 2, 4, 5. So y minus x looks like this. It's really the exact
same vector. Remember, it doesn't matter
where we start. It's just pointing in the
opposite direction. So if we shifted it here. I could draw it right
on top of this. It would be the exact as x
minus y, but just in the opposite direction. Which is just a general
good thing to know. So you can kind of do them as
the negatives of each other. And actually let me make
that point very clear. You know we drew y. Actually let me draw x, x
we could draw as 2, 3. So you go to the right
2 and then up 3. I've done this before. This is x in non standard
position. That's x as well. What is negative x? Negative x is minus 2 minus 3. So if I were to start here,
I'd go to minus 2, then I'd go minus 3. So minus x would look
just like this. Minus x. It looks just like x. It's parallel. It has the same magnitude. It's just pointing in the exact
opposite direction. And this is just a good thing
to kind of really get seared into your brain is to have an
intuition for these things. Now just to kind of finish up
this kind of idea of adding and subtracting vectors. Everything I did so
far was in R2. But I want to show you that
we can generalize them. And we can even generalize them
to vector spaces that aren't normally intuitive for
us to actually visualize. So let me define a couple
of vectors. Let me define vector a to be
equal to 0, minus 1, 2, and 3. Let me define vector b to be
equal to 4, minus 2, 0, 5. We can do the same addition
and subtraction operations with them. It's just it'll be hard
to visualize. We can keep them in
just vector form. So that it's still useful to
think in four dimensions. So if I were to say 4 times a. This is the vector a
minus 2 times b. What is this going
to be equal to? This is a vector. What is this going
to be equal to? Well we could rewrite this as
4 times this whole column vector, 0, minus 1, 2, and 3. Minus 2 times b. Minus 2 times 4,
minus 2, 0, 5. And what is this going
to be equal to? This term right here, 4 times
this, you're going to get, the pen tablet seems to not work
well there, so I'm going to do it right here. 4 times this, you're going to
get 4 times 0, 0, minus 4, 8. 4 times 2 is 8. 4 times 3 is 12. And then minus, I'll do it in
yellow, minus 2 times 4 is 8. 2 times minus 2 is minus 4. 2 times 0 is 0. 2 times 5 is 10. This isn't a good part of my
board, so let me just. It doesn't write well
right over there. I haven't figured out the
problem, but if I were just right it over here,
what do we get? With 0 minus 8? Minus 8. Minus 4, minus 4. Minus negative 4. So that's minus 4 plus
4, so that's 0. 8 minus 0 is 8. 12 minus, what was this? I can't even read it,
what it says. Oh, this is a 10. Now you can see it again. Something is very bizarre. 2 times 5 is 10. So it's 12 minus
10, so it's 2. So when we take this vector
and multiply it by 4, and subtract 2 times this vector,
we just get this vector. And even though you can't
represent this in kind of an easy kind of graph-able format, this is a useful concept. And we're going to see this
later when we apply some of these vectors to
multi-dimensional spaces.",Vector examples | Vectors and spaces | Linear Algebra | Khan Academy,"Visually understanding basic vector operations

Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/e/scaling_vectors?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/intro-unit-vector-notation?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/multiplying-vector-by-scalar?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,r4bH66vYjss
Exampleoffindingmatrixinverse_Matrixtransformations_LinearAlgebra_KhanAcademy-r9aTLTN16V4.en.csv,"In the last video, we stumbled
upon a way to figure out the inverse for an invertible
matrix. So, let's actually use
that method in this video right here. I'm going to use the same matrix
that we started off with in the last video. It seems like a fairly
good matrix. We know that it's reduced row
echelon form is the identity matrix, so we know
it's invertable. So, let's find its inverse. The technique is pretty
straightforward. You literally just apply the
same transformations you would apply to this guy to get you
to the identity matrix, and you would apply those same
transformations to the identity matrix. That's because the collection
of those transformations, if you represent them as matrixes,
are really just the inverse of this guy. Let's just do it. So I'll create an augmented
matrix here. Maybe I'll do it right here. Let me make it a little
bit neater. First, I'll write a. It's 1, minus 1, 1. And then minus 1, 2, 1. Minus 1, 3, 4. And then I'll augment it with
the identity matrix, with 1, 0, 0, 0, 1, 0, 0, 0, 1. Now, if I want to get a into
reduced row echelon form, maybe I'll replace
the second row. I'll keep the first row
the same for now. Let me just draw it like this. The entire first row:
1, minus 1, minus 1. It's going to be augmented
with 1, 0, 0. Keep the whole first
row the same. Let's replace the second
row with the second row plus the first row. Minus 1 plus 1 is 0. 2 plus minus 1 is 1. 3 plus minus 1 is 2. 0 plus 1 is 0. 1 plus-- oh, sorry. That was a tricky one. 0 plus 1 is 1. 1 plus 0 is 1. 0 plus 0 is 0. All I did is I added
these two rows up. Now, this third row. Let me replace-- I want
to get a zero here. Let me replace the third
row with the third row minus the first row. 1 minus 1 is 0. 1 minus minus 1 is 2. 4 minus minus 1 is 5. 0 minus 1 is minus 1. 0 minus 0 is 0. And then 1 minus 0 is 1. Just like that. Now, what do we want to do? Well, we've gotten this far. We want to zero out that
guy and that guy. Let's keep our second
row the same. Let me write it down here. It's 0, 1, 2, and then you
augmented it with 1, 1, 0. Just like that. And let's replace my first row
with the first row plus the second row. 1 plus 0 is 1. Minus 1 plus 1 is 0. That's why I did that,
to get a zero there. Minus 1 plus 2 is 1. 1 plus 1 is 2. 0 plus 1 is 1. 0 plus 0 is 0. And now, I also want to zero
out this guy right here. Let's replace the third row
with the third row minus 2 times the second row. 0 minus 2 times 0 is 0. 2 minus 2 times 1 is 0. 5 minus 2 times 2 is 5
minus 4, that's 1. Minus 1 minus 2 times 1--
that's minus 1 minus 2-- is minus 3. 0 minus 2 times 1,
that's minus 2. And then, 1 minus 2 times
0 is just 1 again. All right, home stretch. Now, I just want to zero out
these guys right here. All right, so just let me keep
my third row the same. Let me switch colors, keep
things colorful. It's 0, 0, 1. We're going to augment it with
minus 3, minus 2, and 1. Now, let's replace our first row
with the first row minus the third row. 1 minus 0 is 1. 0 minus 0 is 0. 1 minus 1 is 0. 2 minus minus 3, that's 5. 1 minus minus 2 is 3. 0 minus 1 is minus 1. Now, let's replace the second
row with the second row minus 2 times the third row. 0 minus 2 times 0 is 0. 1 minus 2 times 0 is 0. 2 minus 2 times 1 is-- I'm
sorry, I just-- oh, whoops. Let me-- we have to be very
careful not to make any careless mistakes. 0 minus 2 times 0 is 0. 1 minus 2 times 0 is 1. It's not 0. 2 minus 2 times 1 is 0. 1 minus 2 times minus
3-- that is 1 plus 2 times 3-- that is 7. 1 minus 2 times minus 2, that's
1 plus 4, which is 5. And then, 0 minus 2 times
1, so that's minus 2. And just like that, we've
gotten the A part of our augmented matrix into reduced
row echelon form. This is the reduced row
echelon form of A. And when you apply those exact
same transformations-- because if you think about it, that
series of matrix products that got you from this to the
identity matrix-- that, by definition, is the
identity matrix. So you apply those same
transformations to the identity matrix, you're going
to get the inverse of A. This right here is A inverse. And we have solved for the
inverse, and it actually wasn't too painful.",Example of finding matrix inverse | Matrix transformations | Linear Algebra | Khan Academy,"Example of calculating the inverse of a matrix

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-formula-for-2x2-inverse?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-deriving-a-method-for-determining-inverses?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HCN-KWUw05w0NILbad1Tzuo,r9aTLTN16V4
Complexrootsofthecharacteristicequations3_Secondorderdifferentialequations_KhanAcademy-rGaM6pwqhB0.en.csv,"Let's do a couple of problems
where the roots of the characteristic equation
are complex. And just as a little bit of a
review, and we'll put this up here in the corner so that
it's useful for us. We learned that if the roots of
our characteristic equation are r is equal to lambda plus
or minus mu i, that the general solution for our
differential equation is y is equal to e to the lambda x times
c1 with some constant cosine of mu x, plus c2
times sine of mu x. And with that said, let's
do some problems. So let's see, this first one
that our differential equation-- I'll do this one
in blue-- our differential equation is the second
derivative, y prime prime plus 4y prime plus 5y
is equal to 0. And they actually give us
some initial conditions. They say y of 0 is equal
to 1, and y prime of 0 is equal to 0. So now we'll actually be able
to figure out a particular solution, or the particular
solution, for this differential equation. So let's write down the
characteristic equation. So it's r squared plus 4r
plus 5 is equal to 0. Let's break out our
quadratic formula. The roots of this are going
to be negative b. So minus 4 plus or minus the
square root of b squared. So that's 16. Minus 4 times a-- well that's
1-- times 1, times c times 5. All of that over 2 times a. a is 1 so all of that over 2. And see this simplifies. This equals minus 4 plus or
minus 16-- this is 20, right? 4 times 1 times 5 is 20. So 16 minus 20 is minus 4. Minus 4 over 2. And that equals minus 4 plus
or minus 2i, right? Square root of minus 4 is 2i. All that over 2. And so our roots to the
characteristic equation are minus 2-- just dividing both by
2-- minus 2 plus or minus, we could say i or 1i, right? So if we wanted to do some
pattern match, if we just wanted to do it really fast,
what's our lambda? Our lambda is just minus 1. Let me write that down. That's our lambda. What's our mu? Well mu is the coefficient
on the i, so mu is 1. mu is equal to 1. And now we're ready to write
down our general solution. So the general solution to this
differential equation is y is equal to e to the lambda
x-- well lambda is minus 2-- minus 2x times c1 cosine of mu
x-- but mu is just 1-- so c1 cosine of x, plus c2 sine
of mu x, when mu is 1, so sine of x. Fair enough. Now let's use our initial
conditions to find the particular solution, or
a particular solution. So, when x is 0, y
is equal to 1. So y is equal to
1 when x is 0. So 1 is equal to-- let's
substitute x is 0 here. So e to the minus 2 times
0, that's just 1. So this whole thing becomes 1,
so we could just ignore it. It's just 1 times this thing. So I'll write that down. e to the 0 is 1 times c1 times
cosine of 0, plus c2 times sine of 0. Now what's sine of 0? Sine of 0 is 0. So this whole term
is going to be 0. Cosine of 0 is 1. So there, we already
solved for c1. We get this, this is 1. So 1 times c1 times
1 is equal to 1. So we get our first
coefficient. c1 is equal to 1. Now let's take the derivative
of our general solution. And we could even substitute
c1 in here, just so that we have to stop writing
c1 all the time. And we can solve for c2. So right now we know that our
general solution is y-- we could call this our
pseudo-general solution, because we already solved for
c1-- y is equal to e to the minus 2x times c1, but we know
that c1 is 1, so I'll write times cosine of x, plus
c2 times sine of x. Now let's take the derivative
of this, so that we can use the second initial condition. So y prime is equal to-- we're
going to have to do a little bit of product rule here. So what's the derivative of
the first expression? It is minus 2e to
the minus 2x. And we multiply that times
the second expression. Cosine of x plus c2 sine of x. And then we add that to just the
regular first expression. So plus e to the minus 2x times
the derivative of the second expression. So what's the derivative
of cosine of x? It's minus sine of x. And then what's the derivative
of c2 sine of x? Well , it's plus
c2 cosine of x. And let's see if we can do any
kind of simplification here. Well actually, the easiest
way, instead of trying to simplify it algebraically and
everything, let's just use our initial condition. Our initial condition is y
prime of 0 is equal to 0. Let me write that down. Second initial condition was
y prime of 0 is equal to 0. So y prime, when x is equal
to 0, is equal to 0. And let's substitute x is equal
to 0 into this thing. We could have simplified this
more, but let's not worry about that right now. So if x is 0, this is going
to be 1, right? E to the 0. e to the 0 is 1, so we're left
with just minus 2, right? Minus 2 times e to the 0, times
cosine of 0, that's 1, plus c2 times sine of 0. Sine of 0 is 0. So that's just 1 plus 0, plus
e to the minus 2 times 0. That's just 1. Times minus sine of 0. Sine of 0 is just 0. Plus c2 times cosine of 0. Cosine of 0 is 1. So plus c2. That simplified things,
didn't it? So let's see, we get 0 is equal
to-- this is just 1-- minus 2 plus c2. Or we get c2 is equal to 2. Add 2 to both sides.
c2 is equal to 2. And then we have our particular
solution. I know it's c2 is equal to
2, c1 is equal to 1. Actually, let me erase some of
this, just so that we can go from our general solution to
our particular solution. So we had figured out, you can
remember, c1 is 1 and c2 is 2. That's easy to memorize. So I'll just delete
all of this. I'll write it nice and big. So our particular solution,
given these initial conditions, were, or are, or is
y of x is equal to-- this was a general solution-- e to
the minus 2x times-- we solved for c1, it's equal to 1. So we can just write
cosine of x. And then we solved for c2. We figured out that
that was 2. Plus 2 sine of x. And there you go. We have our particular solution
to this-- sorry where did I write it-- to this
differential equation with these initial conditions. And what's neat is, when we
originally kind of proved this formula-- when we originally
showed this formula-- we had all of these i's and
we simplified. We said c2, it was a combination
of some other constants times some i's. And we said, oh we don't know
whether they're imaginary or not, so let's just merge them
into some constant. But what's interesting is this
particular solution has no i's anywhere in it. And so, that tells us a
couple of neat things. One that, if we had kept this
c2 in terms of some multiple of i's, and our constants
actually would have had i's and they would have canceled
out, et cetera. And it also tells us that this
formula is useful beyond formulas that just involve
imaginary numbers. For example, this differential
equation, I don't see an i anywhere here. I don't see an i
anywhere here. And I don't see an
i anywhere here. But given this differential
equation, to get to the solution, we had to use
imaginary numbers in between. And I think this is the first
time-- if I'm remembering all my playlists correctly-- this is
the first time that we used imaginary numbers for
something useful. We used it as an intermediary
tool where we got a real, a non-imaginary solution,
to a real problem, a non-imaginary problem. But we used imaginary numbers
as a tool to solve it. So, hopefully, you found that
slightly interesting. And I'll see you in
the next video.",Complex roots of the characteristic equations 3 | Second order differential equations | Khan Academy,"Lets do an example with initial conditions!

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/complex-roots-characteristic-equation/v/repeated-roots-of-the-characteristic-equation?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/complex-roots-characteristic-equation/v/complex-roots-of-the-characteristic-equations-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,rGaM6pwqhB0
Provingvectordotproductproperties_Vectorsandspaces_LinearAlgebra_KhanAcademy-rVQ3G9epCjw.en.csv,"In this video, I want to prove
some of the basic properties of the dot product, and you
might find what I'm doing in this video somewhat mundane. You know, to be frank, it
is somewhat mundane. But I'm doing it for
two reasons. One is, this is the type of
thing that's often asked of you when you take a linear
algebra class. But more importantly, it gives
you the appreciation that we really are kind of building up
a mathematics of vectors from the ground up, and you really
can't assume anything. You ready to prove everything
for yourself. So the first thing I want to
prove is that the dot product, when you take the vector dot
product, so if I take v dot w that it's commutative. That the order that I take the
dot product doesn't matter. I want to prove to myself that
that is equal to w dot v. And so, how do we do that? Well, and this is the general
pattern for a lot of these vector proofs. Let's just write out
the vectors. So v will look like v1, v2,
all the way down to vn. Let's say that this
is equal to v. And let's say that w is
equal to w1, w2, all the way down to wn. So what does v dot w equal? v dot to w is equal to--
I'll switch colors here-- v1 times w1. Plus v2 w2 plus all
the way to vn wn. Fair enough. Now what does w dot v equal? Well w dot v-- you know, when I
had made the definition, you just multiply the products. But I'll just do it in the order
that they gave it to us. So it equals w1 v1 plus w2 v2. Plus all the way to wn vn. Now, these are clearly equal to
each other because if you just match up the first term
with the first term, those are clearly equal to each other.
v1 w1 is equal to w1 v1. And I can say this now because
now we're just dealing with regular numbers. Here we were dealing with
vectors and we were taking this weird type of
multiplication called the dot product. But now I can definitely say
that these are equal because this is just regular
multiplication. And this is just a commutative
property. Let me see if I'm spelling
commutative. We learned this in-- I don't
know when you learned this, in second or third grade. So you know that those are equal
and by the same argument you know that these
two are equal. You could just rewrite each of
these terms just by switching that around. That's just from basic
multiplication of scalar numbers, of just regular
real numbers. So that's what tells us that
these two things are equal or these two things are equal. So we've proven to ourselves
that order doesn't matter when you take the dot product. Now the next thing we could take
a look at is whether the dot product exhibits the
distributive property. So let me just define another
vector x here. Another vector x and you
can imagine how I'm going to define it. x1, x2, all the way
down to xn. Now, what I want to see if the
dot product deals with the distributive property the way I
would expect it to, then if I were to add v plus w and
then multiply that by x. And first of all, it shouldn't
matter what order I do that with. I just showed it here. I could do x dot this thing. It shouldn't matter because
I just showed you it's commutative. But if the distribution works,
then this should be the same thing as v dot x plus w dot x. If these were just numbers
and this was just regular multiplication, you would
multiply by it by each of the terms, and that's what
I'm showing here. So let's see if this is true
for the dot product. So what is v plus w? v plus w is equal to-- we just
add up each of their corresponding terms. v1 plus
w1, v2 plus w2, all the way down to vn plus wn. That's that right there. And then when we dot that with
x1, x2, all the way down to xn, what do we get? Well we get v1 plus w1 times
x1 plus v2 plus w2 times x2 plus all the way to vn
plus wn times xn. I just took the dot product
of these two. I just multiplied corresponding
components and then added them all up. That was the dot product. This is v plus w dot x. Let me write that down. This is v plus w dot x. Now, let's work on these
things up here. Let me write it over here. What is v dot x? v dot x, we've seen
this before. This is just v1 x1. No vectors now. These are just actual
components. Plus v2 x2, all the
way to vn xn. What is w dot x? w dot x is equal to w1 x1 plus
w2 x2, all the way to wn xn. Now what do you get when you
add these two things? And notice, here I'm adding
two scalar quantities. That's a scalar. That's a scalar. We're not doing vector
addition anymore. So this is a scalar quantity and
this is a scalar quantity. So what do I get when
I add them? So v dot x plus w dot x is equal
to v1 x1 plus w1 x1 plus v2 x2 plus w2 x2, all the
way to vn xn plus wn xn. I know, it's very monotonous. But you could immediately see
we're just dealing with regular numbers here. So we can take the x's out
and what do you get? Let me write it here. This is equal to-- we could
just take the x out, factor the x out. v1 plus w1, x1 plus v2 plus
w2 x2, all the way to vn plus wn xn. Which we see this is
the same thing as this thing right here. So we just showed that this
expression right here, is the same thing as that expression
or the distribution-- the distributive property seems to
or does apply the way we would expect to the dot product. I know this is so mundane. Why are we doing this? But I'm doing this to show you
that we're building things up. We couldn't just assume this. But the proof is pretty
straightforward. And in general, I didn't do
these proofs when I did it for vector addition and scalar
multiplication, and I really should have. But you can prove
the commutativity of it. Or for the scalar multiplication
you could prove that distribution works for it
doing a proof exactly the same way as this. A lot of math books or linear
algebra books just leave these as exercises to the student
because it's mundane, so they didn't think it was
worth their paper. But let me just show you, I
guess, the last property, associativity, the associative
property. So let me show you. If I take some scalar and
I multiply it times v, some vector v. And then I take the dot product
of that with w, if this is associative the way
multiplication in our everyday world normally works, this
should be equal to-- and it's still a question mark because
I haven't proven it to you. It should be equal to
c times v dot w. So let's figure it out. What's c times the vector v? c times the vector v is c times
v1, c times v2, all the way down to c times vn. And then the vector w, we
already know what that is. So dot w is equal to what? It's equal to this times
the first term of w. So c v1 w1 plus this times the
second term of w, c v2 w2, all the way to c vn wn. Fair enough. That's what this side
is equal to. Now let's do this side. What is v dot w? I'll write it here. We've done this multiple
times. This is just v1 w1 plus v2
w2, all the way to vn wn. I'm getting tired of doing this
and you're probably tired of watching it, but it's good
to go through the exercises. You know, if someone asked you
to do this now, you'll be able to do this. Now what is c times this? So if I multiply some scalar
times this, that's the same thing as multiplying some
scalar times that. So I'm just multiplying a scalar
times a big-- this is just the regular distributive
property of just numbers, of just regular real numbers. So this is going to be equal to
c v1 w1 plus c v2 w2 plus all the way to c vn wn. And we see that this is
equal to this because this is equal to this. Now the hardest part of this--
I remember when I first took linear algebra, I found when
the professor would assign, you know, prove this. I would have trouble doing it
because it almost seems so ridiculously obvious. That hey, well, obviously
if you just look at the components of them, it just
turns into multiplying of each individual component and adding
them up and those are associative, so that's
obviously-- what's there to prove? And it only took me a little
while that they just wanted me to write that down. They didn't want something
earth shattering. They just wanted me to show
when you go component by component and all you have to
do is assume kind of the distributive or the associative
or the commutative property of regular numbers,
that you could prove the same properties also apply in a very
similar way, to vectors and the dot product. So hopefully you found this
reasonably useful and I'll see you in the next video where we
could use some of these tools to actually prove some
more interesting properties of vectors.",Proving vector dot product properties | Vectors and spaces | Linear Algebra | Khan Academy,"Proving the ""associative"", ""distributive"" and ""commutative"" properties for vector dot products.

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/proof-of-the-cauchy-schwarz-inequality?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/vector-dot-product-and-vector-length?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,rVQ3G9epCjw
Usingtheconvolutiontheoremtosolveaninitialvalueprob_Laplacetransform_KhanAcademy-rfyq32mHcYs.en.csv,"Now that we know a little bit
about the convolution integral and how it applies to the
Laplace transform, let's actually try to solve an actual
differential equation using what we know. So I have this equation here,
this initial value problem, where it says that the second
derivative of y plus 2 times the first derivative of y, plus
2 times y, is equal to sine of alpha t. And they give us some
initial conditions. They tell us that y of 0 is
equal to 0, and that y prime of 0 is equal to 0. And that's nice and convenient
that those initial conditions tend to make the problem
pretty clean. But let's get to the problem. So the first thing we do is we
take the Laplace transform of both sides of this equation. The Laplace transform of
the second derivative of y is just s squared. This should be a bit of second
nature to you by now. It's s squared times the Laplace
transform of Y, which I'll just write as capital Y
of s, minus s-- so we start with the same degree as the
number of derivatives we're taking, and then we decrement
that every time-- minus s times y of 0-- you kind of think
of this as the integral, and you take the derivative 1,
so this isn't exactly the derivative of that-- minus, you
decrement that 1, you just have a 1 there, y prime of o. And that's the Laplace transform
of the second derivative. Now, we have to do the Laplace
transform of 2 times the first derivative. That's just going to be equal
to plus 2, times sY of s-- s times the Laplace transform
of Y; that's that there-- minus y of 0. And we just have one left. The Laplace transform of 2Y. That's just equal to plus
2 times the Laplace transform of Y. And then that's going to be
equal to the Laplace transform of sine of alpha t. We've done that multiple
times so far. That's just alpha over s squared
plus alpha squared. Now, the next thing we want to
do is we want to separate out the Laplace transform of Y
terms, or the Y of s terms. Actually, even better, let's
get rid of these initial conditions. y of 0, and y prime of 0 is
0, so this term is 0. That term is 0, and
that term is 0. So our whole expression-- I
can get rid of the colors now-- it just becomes-- let me
pick a nice color here-- becomes s squared times Y of
s, plus 2s, Y of s-- that's that term right there-- plus
2Y of s, is equal to the right-hand side, is equal to
alpha over s squared plus alpha squared. Now let's factor out the
Y of s, or the Laplace transform of Y. And so we get s squared plus 2s,
plus 2, all of that times Y of s, is equal to this
right-hand side, is equal to alpha over s squared,
plus alpha squared. Now we can divide both sides of
this equation by this thing right here, by that
right there. And we get Y of s, the Laplace
transform of Y is equal to this thing, alpha over s
squared, plus alpha squared, times-- or, you know, I could
just say times-- 1 over s squared, plus 2s, plus 2. I could just say divided by
this, but it works out the same either way. Now, what can we do here? Remember, I was doing this in
the context of convolution, so I want to look for a Laplace
transform that looks like the product of two Laplace
transforms. I know what the inverse Laplace transform
of this is. In fact, I just took it. It's sine of alpha t. So if I can figure out the
inverse Laplace transform of this, I could at least express
our function y of t at least as a convolution integral, even
if I don't necessarily solve the integral. From there, it's just calculus,
or if it's an unsolvable integral, we could
just use a computer or something, although you could
actually use a computer to solve this so, you might
skip some steps even going through this. But anyway, let's just try
to get this in terms of a convolution integral. So what can I do with this? This is, let's see, this
isn't a perfect square. So if this isn't a perfect
square, the next best thing is to try to complete
the square here. So let's try to write this as
a, so let's see, if I write this as s squared plus 2s,
plus something, plus 2. I just rewrote it like this. And if I wrote this as s squared
plus 2s, plus 1, that becomes s plus 1 squared. But if I add a 1, I have
to also subtract a 1. I can't just add 1's arbitrarily
to things. So if I add 1 I have to subtract
a 1 to cancel out with that 1. So I really haven't changed
this at all, I just rewrote it like this. But this now, I can rewrite
this term right here as s plus 1 squared. And then this becomes plus 1. That's this term right here. This is the plus 1. So I could rewrite my whole Y
of s is now equal to alpha over s squared, plus alpha
squared, times 1 over this thing, s plus 1 squared,
plus 1. Now, I already said, I know
what the inverse Laplace transform of this thing is. Now I just have to figure out
what the inverse Laplace transform of this thing is. Of this-- let me pick a nice
color-- of this blue thing in the blue box, and then
I can express it as a convolution integral. And how do I do that? I could just do it right now. I could just immediately say
that y of t-- let me write this down-- y of t, so the
inverse is equal to the inverse Laplace transform
of, obviously of Y of s. Let me write that
down, Y of s. Which is equal to the inverse
Laplace transform of these two things. The inverse Laplace transform of
alpha over s squared, plus alpha squared, times 1 over
s plus 1 squared, plus 1. And now the convolution theorem
tells us that this is going to be equal to the inverse
Laplace transform of this first term in
the product. So the inverse Laplace transform
of that first term, alpha over s squared, plus
alpha squared, convoluted with-- I'll do a little
convolution sign there. I was about to say convulsion. They're not too different. Convoluted with the inverse
Laplace transform of this term, the inverse Laplace
transform of 1 over s plus 1 squared, plus 1. If I have the product of two
Laplace transforms, and I can take each of them independently
and I can invert them, the inverse Laplace
transform of their product is going to be the convolution of
the inverse Laplace transforms of each of them, each
of the terms. And what I just said confused
me a bit, so I don't want to confuse you. But I think you get the idea. I have these two things. I recognize these
independently. I can independently take the
inverse of each of these things, so the inverse Laplace
transform of their products is going to be the convolution
of each of their inverse transforms. Now what's
this over here? Well I had this in the beginning
of the problem? The inverse Laplace transform
of this, right here, is sine of alpha t. And then we're going to
convolute that with the inverse Laplace transform
of this right here. Let's do a little bit of work on
the side, just to make sure we get this right. So the Laplace transform of sine
of t is equal to 1 over s squared, plus 1. That looks like this, but I
was shifted by minus 1. You might remember that the
Laplace transform of e to the at sine of t, when you multiply
e to the at times anything, you're shifting
its Laplace transform. So that will be equal
to 1 over s minus a squared, plus 1. We essentially shifted
it by a. So now we have something that
looks very similar to this. If we just set our a to be equal
to negative 1, here our a is equal to negative 1, then
it fits this pattern. This is s minus negative 1. So the inverse Laplace transform
of this thing right here is just e to the a, which
is minus 1, so minus 1t, times sine of t. So this is the solution to our
differential equation, even though it's not in a pleasant
form to look at. And we can, if we want, express
it as an integral. I'm not going to actually solve
the integral in this problem, because it gets hairy,
and it's not even clear that-- well, I won't even
attempt to do it. But I just want to get into a
form, and from there it's just integral calculus. or maybe a computer. What's the convolution
of these two things? It's the integral from 0 to t,
of sine of the first function of t minus tau. Well, I could actually switch,
and I haven't shown you this, but we can switch the order
either way, but actually let me just do it this way. I could write this as
sine of [? out ?] t minus tau, times alpha-- I'm
taking the sine of all of those things-- times e to the
minus tau, sine of tau, dtau. That's one way, that if I wanted
to express the solution of this differential equation's
integral, I could write it like that. And it actually should be kind
of obvious to you that this could go either way. Because when it was a product up
here, obviously order does not matter. I could write this term first,
or I could write that term first. So regardless of which
term is written first, the same principle would apply. And I'll formally prove
it in a future video. So we could have also done
it the other way. We could have written this
expression as e to the minus t, sine of t, convoluted
with sine of alpha t. And that would be equal to the
integral from 0 to t, of e to the minus t minus tau, sine of
t, minus tau, times sine of alpha tau, dtau. So these are equivalent. Either of these would be
an acceptable answer. And normally on a test like
this, the teacher won't expect you to actually evaluate
these integrals. The teacher will just say, get
it into an integral just to kind of see whether you know
how to convolute things and get your solution to the
differential equation at least into this form, because from
here it really is just, I won't say basic calculus,
but it's non-differential equations. So hopefully, this second
example with the convolution to solve an inverse transform
clarified things up a little bit.",Using the convolution theorem to solve an initial value prob | Laplace transform | Khan Academy,"Using the Convolution Theorem to solve an initial value problem

This is the last video in our differential equations subject! Now move on to our first video in linear algebra: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/vector-introduction-linear-algebra?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/convolution-integral/v/the-convolution-and-the-laplace-transform?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,rfyq32mHcYs
Datastructures-Arrayimplementationofstacks-sFVxsglODoo.en.csv,"In our previous lesson we introduced
you to stack data structure. We talked about stack as abstract data type or ADT has been often we define 
data structure as abstract data type. We define it as a mathematical or
logical model. We define only the features or
operations available with the data structure and do not bother about implementation.
Now in this lesson we will see how we can implement stack data structure. We will
first discuss possible implementations of
stack and then we will go ahead and write some code.
Okay so let's get started as we had seen a stack is a list or collection with this restriction, with
this constraint that insertion and deletion that we call push and pop operations in a stack must
be performed one element at a time and only from
one end, that we call the top of stack.So if
you see if we can add only this one extra
property only this one extra constraint to any implementation
of a list that insertion and deletion must be
performed only from one end then we can get
a stack. There are two popular ways of creating
lists we have talked about them alot in our
previous lessons we can use any of them to create a stack.We can implement stacks using a) arrays and b) linked lists both these
implementations are pretty intuitive. Let's first discuss array based
implementation. Let's say I want to create a stack of
integers, so what I can do is I can first create
an array of integers. I am creating an array of 10 integers here,
i'm naming this array 'A'. Now I'm going to use this array to
store a stack, what I'm going to say is
that at any point some part of this array starting index 'zero' till an index marked as 'top' will be my stack. We can create a variable named 'top' to store the index
of top of stack. For an empty stack top is set as -1, right now in this figure top is pointing to an imaginary -1
index in the array. An insertion or push operation will be something like this. I will write
a function named 'Push' that will take an integer 'x' as
argument. In 'Push' function we will first
increment top and then we can fill in integer 'x' at top index. Here we are assuming that 'A' and 'top' will be accessible to 'Push'
function even when they're not passed as
arguments. In 'C' we can declare them as global variables or in an object-oriented implementation
all these entities can be members of a class. I'm only
writing pseudo code to explain the implementation logic. Okay, so for this example array that I'm
showing here, right now top is set as -1 so my stack is empty. Let's insert
something onto the stack. I will have to make call to 'Push'
function. Let's say I want to insert number 'two' onto the stack, in a call to 'Push' first 'top' will be
incremented and then the integer passed as argument
will be written at top index, so two will be written at index
'zero'. Let's push one more number, let's say i want to push number 'ten' this time. Once
again 'top' will be incremented 'ten' will now go at index 'one', with each
push the stack will expand towards higher indices in the array. To
pop an element from the stack, i am writing a function here for pop
operation. All I need to do is decrement 'top' by 'one' with a call to 'pop'. Let's say i am making a call to
'pop' function here, top will simply be decremented. Whatever cells are in yellow in this
figure are part of my stack. We do not need to reset this value
before popping, if a cell is not part of stack
anymore we do not care what garbage lies there. Next time when we will push we will
modify it anyway. So let's say after this pop operation I want
to perform a push, i want to insert number seven
onto the stack. So top once again will be incremented
and value at index 'two' will be overwritten, the new value will be 7. These two functions 'push' and 'pop' that
i have written here will take constant time. we have simple
operation in these two functions and execution time will not depend upon
size of stack. While defining stack ADT we had said that
all the operations must take constant time or in other words
the time complexity should be O(1) . In our implementation here both push
and pop operations are O(1). One important thing here we can push onto the stack only till array is not exhausted, only till some
space is left in the array. We can have a situation where stack
would consume the whole array so top will be equal to highest index in the array.A further push will not be
possible because it will result in an overflow. This is
one limitation with array based implementation. To avoid an overflow we can always
create a large enough array, for that we will have to be reasonably sure
that stack will not grow beyond a certain limit. In most practical
cases large enough array works but irrespective
of that we must handle overflow in our
implementation. There are couple of things that we can do in
case of an overflow, 'push' function can check whether array is
exhausted or not and it can throw an error in case of an
overflow. So push operation will not succeed, this
will not be a really good behavior. We can do another thing, we can use the
concept of dynamic array. We have talked about
dynamic array in initial lessons in this series. What we can do is in case of an
overflow we can create a new larger array. We can copy the content of stack from
older filled up array into new array if possible we can delete this
smaller array. The cost of copy will be O(n) or in simple words time taken to copy
elements from smaller array to larger array will be
proportional to number of elements in stack or
the size of the smaller array because anyway stack will occupy the
whole array. There must be some strategy to decide
the size of larger array. Optimal strategy is that we should
create an array twice the size of smaller
array. There can be two scenarios in a push
operation. In a normal push we will take
constant time, in case of an overflow we will first create
a larger array twice the size of smaller array. Copy all elements in time proportional
to size of the smaller array and then we will take constant time to insert
the new element. The time complexity of push with this
strategy will be O(1) in best-case and O(n) in worst case, in case of an
overflow time complexity will be O(n) but we will still be O(1)
in average case. If we will calculate the
time taken for n pushes then it will be proportional to
n, remember n is the number of elements in
stack. O(n) is basically saying that time taken will be very close to some constant times n, in simple words
time taken will be proportional to n. If we are taking c into n time for
n pushes, to find out average we will divide by n.
Average time taken for each push will be a constant hence O(1) in average case. I will not go in to all the
mathematics of why it's O(n) for n pushes, to know about it you
can check the description of this video for some resources. Okay so this pretty
much is core of our implementation. We have talked about two more operations
in definition of stack ADT, top operation simply returns the element at top of stack so 'top'
function will look something like this. We will simply return the element
at top index. To verify whether stack is empty or not
this is another operation that we have defined. We can simply check the value of top if
it is equal to -1, we can say the stack is empty we can
return true else we can return false. Sometimes pop and top operations are combined together
in that case pop will not just remove an element from top of stack it
will also return that element. Language libraries in a lot of programming
languages give us implementation of stack. Signature of
functions in these implementations can vary slightly. Okay now I will quickly show
you a basic implementation of stack in C. In my C code here I'm going to write
a simple array based implementation to create a
stack of integers. The first thing that I'm going
to do is I'm going to create an array of integers as global variable and the size of this
array is 'MAX_SIZE' where 'MAX_SIZE' is defined by this macro as 101. I will declare another global
variable named top and set it as -1 initially, remember top equals -1 means an empty
stack. When a variable is not declared inside
any function it's a global variable, it can be accessed anywhere so you do not have to pass it as
argument to functions and now I will write all
the operations. This is my 'push' function, I'm first
incrementing top and then setting the value at top as x. x is the integer to be inserted passed
as argument. Instead of writing these two statements i can write one statement like this and I will be good. I am using pre
increment operators so increment will happen before assignment. I
also want to handle overflow. We will have an overflow when top
index will be equal to MAX_SIZE-1, highest index available in the array. In case of an overflow I simply want to print an
error message something like this and return. So in this implementation I'm not using
a dynamic array, in case of overflow push will not
succeed. Okay now this is my 'Pop' function i am simply decrementing top. Here also we
must handle one error condition if stack is already
empty we cannot pop, so I'm writing these
statements here if top is equal to -1 we cannot pop. I will print this error message that
there is no element to pop and simply return. Now let's write top operation, top operation will simply return the integer at top index. So now
my basic operations are all written here. I have already written
Push pop and top. In main function i will make
some calls to 'push' and 'pop' and I want to write one more function
named print and this is something that I'm going to write only
to verify that 'push' and 'pop' are happening properly. I will simply print all the elements in
the stack in my main function after each push
or pop operation i will make a call to print. I am writing
multiple function calls, two function calls on same line here because I'm short of
space. Remember print function is not a typical
operation available with stack, i am writing it only to test my
implementation. So this pretty much is my code, let's now
run this program and see what happens. This is what I'm getting as output we are
pushing three integers 2,5 and 10 and then we are
performing a pop so 10 gets removed from the
stack and then we are pushing 12. So this is a basic implementation of stack in C. This is not an ideal implementation, an
ideal implementation should be something like we should have a datatype called
stack and we should be able to create instances
of it. We can easily do it in an
object-oriented implementation, we can do it in 'C' also using
structures. Check the description of this video
for link to source code of this implementation as
well as of an object-oriented implementation. In
our next lesson we will discuss linked list implementation of stack this
is it for this lesson. Thanks for watching.",Data structures: Array implementation of stacks,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have discussed array based implementation of stack data structure.

Source Code:
C code: https://gist.github.com/mycodeschool/6878252 

C++ code (Object oriented implementation) :  https://gist.github.com/mycodeschool/6878628

Time complexity of push for dynamic array implementation:

If we start with an array of size 1 and keep doubling the size with each overflow, for n pushes.. cost of copy will be

 (1 + 2 + 4 + 8 + ... + n/2 + n) 
 = n *( 1+ 1/2 + 1/4 + 1/8 + ... 1/n)  -  taking out n 
= n*2   - the expression in bracket above will evaluate to 2. 

So, cost of copy in n pushes = O(n)
Cost of n normal pushes = O(n)  - each push takes constant time
Total cost of n pushes = O(n)
Average cost of 1 push = O(1). 


For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,sFVxsglODoo
Differentialequationfromslopefield_Firstorderdifferentialequations_KhanAcademy-sU5MCM3npXU.en.csv,"- [Voiceover] We've already seen scenarios where we start with a
differential equation and then we generate a slope field that describes the solutions
to the differential equation and then we use that to
visualize those solutions. What I want to do in this
video is do an exercise that takes us the other way,
start with a slope field and figure out which differential equation is the slope field
describing the solutions for. And so I encourage you to
look at each of these options and think about which of
these differential equations is being described by this slope field. I encourage you to pause
the video right now and try it on your own. So I'm assuming you have had a go at it. So let's work through each of them. And the way I'm going to do
it is I'm just going to find some points that seem to be
easy to do arithmetic with, and we'll see if the slope
described by the differential equation at that point is
consistent with the slope depicted in the slope field. And, I don't know, just for simplicity, maybe I'll do x equals one and y equals one for all of these. So, when x equals one
and y is equal to one. So, this first differential
equation right over here, if x is one and y is
one, then dy/dx would be negative one over one or negative one. Dy/dx would be negative one. Now, is that depicted here? When x is equal to one
and y is equal to one, our slope isn't negative one. Our slope here looks positive. So we can rule this one out. Now, let's try the next one. So, if x is equal to one
and y is equal to one, well then dy/dx would be equal
to one minus one or zero. And, once again, I just
picked x equals one and y equals one for convenience. I could have picked any other. I could have picked negative
five and negative seven. This just makes the
arithmetic a little easier. Once again, when you look at that point that we've already looked at, our slope is clearly not zero. We have a positive slope
here, so we can rule that out. Once again, for this magenta
differential equation, if x and y are both equal to one, then one minus one is once
again going to be equal to zero. And we've already seen this
slope is not zero here, so rule that one out. And now here we have x plus y, so when x is one and y is one, our derivate of y with
respect to x is going to be one plus one, which is equal to two. Now, this looks interesting. It looks like this slope
right over here could be two. This looks like one. This looks like two. I would want to validate
some other points, but this looks like a really,
really good candidate. And you can also see
what is happening here. When dy/dx is equal to x plus y, you would expect that as
x increases for a given y your slope would increase and as y increases for a
given x your slope increases. And we see that. If we were to just hold y constant at one but increase x along this line, we see that the slope is increasing. It is getting steeper. And if we were to keep x constant and increase y across this line, we see that the slope increases. And, in general, we see
that the slope increases as we go to the top right. And we see that it decreases
as we go to the bottom left and both x and y become
much, much more negative. So, I'm feeling pretty good about this, especially if we can
knock this one out here, if we can knock that one out. So, dy/dx is equal to x over y. Well, then when x equals
one and y equals one, dy/dx would be equal to one, and this slope looks larger than one. It looks like two, but since we are really just eyeballing it, let's see if we can find something where this more clearly falls apart. So, let's look at the situation when they both equal negative one. So, x equals negative one and
y is equal to negative one. Well, in that case, dy/dx
should still be equal to one because you have negative one over one. Do we see that over here? So, when x is equal to negative one, y is equal to negative one. Our derivative here looks negative. It looks like negative two, which is consistent with this
yellow differential equation. The slope here is definitely
not a positive one, so we could rule this one out as well. And so we should feel pretty confident that this is the differential
equation being described. And now that we've done it,
we can actually think about well, okay, what are the solutions for this differential
equation going to look like. Well, it depends where they start or what points they contain. If you have a solution
that contains that point, it looks like it might
do something like this. If you had a solution
that contained this point, it might do something like that. And, of course, it keeps going. It looks like it would asymptote towards y is equal to negative
x, this downward sloping. This essentially is the line
y is equal to negative x. Actually, no that is not the
line y equals negative x. This is the line y is equal
to negative x minus one, so that's this line right over here. And it looks like if
the solution contained, say, this point right over here, that would actually be a solution to the differential equation y is
equal to negative x minus one and you can verify that. If y is equal to negative x minus one, then the x and negative x cancel out and you are just left with
dy/dx is equal to negative one, which is exactly what is being described by this slope field. Anyway, hopefully you
found that interesting.",Differential equation from slope field | First order differential equations | Khan Academy,"Practice this lesson yourself on KhanAcademy.org right now: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/differential-equations-intro/e/slope-fields?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/separable-equations/v/separable-differential-equations-introduction?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/differential-equations-intro/v/slope-field-to-visualize-solutions?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,sU5MCM3npXU
Reversealinkedlist-Iterativemethod-sYcOK51hl-A.en.csv,"In our lessons on linked list so far, we
have implemented some of the basic scenarios like uh... inserting a node in linked list and deleting a node from linked list In this lesson we will write code to reverse a linked list This is one of the most favorite interview questions and this is a really interesting problem so let me first define the problem. Let's say we  have been given a link to this list of integers like this so this is our input. We have four nodes in
this linked list at addresses hundred, two hundred
one fifty and two fifty respectively. I always write these addresses in the logical view because it's really important we visualize how things are in the memory and uh... what is what? Like this first node, that we also call the head node is being pointed by this particular variable named head so this variable is basically storing
the address of the head node Now, this variable is only the pointer, this is
not the head node itself. And we do not have any other identity
of the linked list except the address of the head node. So, given a linked list like this if we have to reverse it and by reversing we do not mean
moving around data we cannot move 5 at address 100 2 at address 250 and do something like this we actually have to adjust the links so our output should be something like this, the head pointer should point to this
address two fifty and we should go like  250 to 150, 150 to 200 and this node at address 100 should have address 0, or null. In each of these nodes this first field in red is the data part and the second field is the address part. So, this is what we will get when we'll reverse the list. there are two approaches to solve this
problem one is an iterative approach where we'll be using a loop We'll traverse through the list and at each step we will revert one of the links. Another solution is using recursion. In this lesson, we will try to understand the iterative solution. So, coming back to our input list the iterative solution is relatively easier to understand what we can do is we can traverse the whole list and uh... as we go to each node we can adjust the link part of that node to make it point to the previous node instead of the next node. So, we will start at the first node At each step we want to reverse the link, so we want  to make the node point to the previous note instead of the next node. For the first node there is no previous node, so lets say the previous node is NULL, and now we want to cut this particular
link and we want to build this
particular link. So, we will simply change the address field to 0 and we have reversed the link part of
this particular node. And now, we will go to the next node in the list. We will come to this node. Of course, the question would be how
would we go to the next node if we have broken this link here! We will come back to that in the
implementation details. Let's say we are able to traverse the list and go to each of the nodes at each step. Let's say we store all the relevant information to do that in some temporary variables. Now, this node again we will reverse the links,  it was the link so the address part will be set as hundred here. Now, we will go to the next node at address hundred and fifty,once again to reverse the link, we will set the address as 200 here. So, we will break this link and basically we are building this link, and now we will go to address two fifty, the next node and we will set the address one fifty here so we will cur this link and build this link! And finally, when we have reached the last node, we will adjust the address in the head variable to two fifty. So,this particular variable, this particular pointer will point to this node at address 250. And, our linked list is reversed now! So, let us implement this particular logic
in the real C program. I will redraw the original input list, in my C code, i would define node as a structure like this! This is how we have defined a node in our
previous lessons. So, there will be two fields, uh... one to store the data which will be of
type integer and another to store the address of the next node We will name this field 'next' of type pointer to node, and let's say, head is a global variable,so, head is a pointer to node, head is a variable which is a pointer to node/ And, it is a global variable. So, it is accessible to all the functions. We do not need to pass it around to
functions, and now, all I want to do in my code is that,I
want to write a reverse function that will reverse the linked list which is pointed to by
this particular pointer. As we said, we'll traverse the
whole list and at each step we will modify the link field of the
node to make it point to the previous node instead of the next node. So, how do we traverse the list? We would traverse the list in our C code, something like this, we will first take a variable which will be pointer to node Let's say we will name it temp uh... then first we will set temp to head By saying this, we will mean temp points to the first node. And then, we will run a loop like this. 
We will say that while temp is not equal to NULL, take temp to the next address with a
statement like temp=temp.next uh... in our problem here, we don't just
have to look at what's the list as we traverse the list we have to uh... reverse the links so we have to
set the address field of a particular node as address of the previous node instead of the next node. Now in a linked list, we would always know the address of the next node but we would never know the address of the
previous node, so as we traverse the list, we will have to keep track of the previous node in another
variable. So, what i'll be doing, is something
like this. Now, I will also declare a variable named previous and initially set it to NULL, because for the first node or the
head node, the previous node is NULL. And now, in my loop, we will have to
update both these variables, and the variable temp that will store the current node and the variable prev that will store the address of the previous node and now in my loop i can do something
like this At each step, if temp is our current node, we are traversing the list then we will say that temp.next is equal to previous So, we will set the link part of the
current node as the address of the previous node. In our example here, at the first step we will say that, temp.next will be 0. NULL is nothing but address 0. So, we will cut this link and we will build this link. Now, we should be able to move temp to two hundred and we should
be able to move previous to hundred. Now, in the next step but there is a problem as soon as we adjusted the link of
this particular node at address hundred to make it point to NULL, we lost the address of the next node.
So how do we move temp to this particular node at address two hundered.  We cannot say that temp = temp.next. And now, if we say temp=temp.next, now we will go to NULL. So, this is a problem so at each step in our iteration before we set the link field of  the the current node to make it point to the previous node we should store the address of the next node in a temporary variable,  in another
temporary variable, So, what I will do here is something like
this first of all i want to name this particular variable temp as current to mean that this is the current node at each stage
in my iteration so we initially set current to head and
then we are running the loop as while current is not
equal to NULL, and then i have also declared one more temporary pointer variable named next what i will do at each step in my iteration inside the while
loop is that first I will say that next=current.next So first I will store the address of the next node in this particular variable next. So in our example here, for the first node initially, things will look, something like this. Now we can set
uh... link part of the current node as the address of the previous node
 with a statement like this So, when we will write the address 0 here, initially we will break this link, and create this link Now, we will not loose the information
about the next node, now we can redefine our previous and
current so we will first move previous to current and then we will move current to next Please note that this particular variable next is a local variable in the Reverse function and when we say something like current.next we mean the link field in the node, well when we simply say next, we mean this particular local pointer variable, so they're different this is not current.next, actually
this is current -&gt; next which is an alternate syntax for *(current).next so we use *
operator to de- reference that address and then we access the next field for
the sake of saying we say,  current.next or temp.next uh... so with these two lines in our loop we are resetting out current and previous pointers. This is how we are traversing the list. Now,  if you see in the next iteration current is 200, not equal to NULL NULL is zero so we will go to this particular
statement next is equal to current.next. So, next will now store the address hundred
and fifty, and not we will say current.next is equal to previous. So, we will cut this link, uh...previous is hundred right now so we will set hundred here. So basically,  we will build this particular
link and then we will move then we will first move previous to current and then move current to next. And, we will go on like this. So finally, we will reach a stage like this when current will be equal to NULL, we will come out of the loop, and when we will come out of the loop this particular variable previous, this particular pointer
previous will store the address of the last node. And, there is one more thing remaining
here.We need to adjust this particular variable head uh... this link at this stage does not
exist and in my code I will say head should now be equal to the address in variable previous! So, head is now 250 this is our new head, and now our list is reversed uh... there are a couple of things that
i want to point out here one thing is that we must see that our
implementation is working for all test cases and so we must also verify it for special or corner test cases.  In this
case corner test case will be when the list is empty. In that case head will be NULL. or, when the list is having only one node if you see this particular
implementation will work for these two scenarios and give it some time and you should be able to figure it out let's not run this code with complete implementation of all the
functions to insert and print nodes. In my code here,  uh... i have written Reverse function to accep the address of the head node as
argument and then return the address of the head 
node after modification of the list after reversal of the list and then I have written the the main method in
which head as a local variable and then i'm using couple of insert functions and making couple of
calls to insert function insert function also takes two arguments the address of the head node and the data
 to be inserted and it returns back the address of  the head node it will either be modified or not modified uh...lets say we are inserting this at the end of the list 2 4 6 8 and then we are making call to the print function which we have written to print the elements in the list and then i'm making a call to reverse
and finally printing again my logic of the reverse function remains the same except that i've changed the method signature and in the end I am returning head, which will return the address of the
head node let's say we have written all the insert and print functions correctly these are the two functions insert and print
so let's now run this code and see what happens before the list is reversed the list is two four six eight and after the list is reversed the output is eight six
four two uh... let us try for the case the list has only one element in the list so i will remove, i will comment out these three insert
insert statements and this also seems to be working.So, this was reversal of the linked list through iteration. In the next lesson, we will write code to reverse linked list using recursion. So, thanks for watching!",Reverse a linked list - Iterative method,"See complete series on linked list here:
http://www.youtube.com/watch?v=NobHlGUjV3g&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=3

See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have written C program to reverse a singly linked list. This is a very famous interview question. We have solved the problem using iteration. 

Feel free to post your questions and suggestions in comments section. 
You may like us on facebook:
http://www.facebook.com/MyCodeSchool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,sYcOK51hl-A
Columnspaceofamatrix_Vectorsandspaces_LinearAlgebra_KhanAcademy-st6D5OdFV9M.en.csv,"We spent a good deal of time on
the idea of a null space. What I'm going to do in this
video is introduce you to a new type of space that can be
defined around a matrix, it's called a column space. And you could probably guess
what it means just based on what it's called. But let's say I have
some matrix A. Let's say it's an
m by n matrix. So I can write my matrix A and
we've seen this multiple times, I can write it as a
collection of columns vectors. So this first one, second one,
and I'll have n of them. How do I know that
I have n of them? Because I have n columns. And each of these column
vectors, we're going to have how many components? So v1, v2, all the way to vn. This matrix has m rows. So each of these guys are going
to have m components. So they're all members of Rm. So the column space is defined
as all of the possible linear combinations of these
columns vectors. So the column space of A, this
is my matrix A, the column space of that is all the linear
combinations of these column vectors. What's all of the linear combinations of a set of vectors? It's the span of
those vectors. So it's the span of vector
1, vector 2, all the way to vector n. And we've done it before
when we first talked about span and subspaces. But it's pretty easy to show
that the span of any set of vectors is a legitimate
subspace. It definitely contains
the 0 vector. If you multiply all of these
guys by 0, which is a valid linear combination added up,
you'll see that it contains the 0 vector. If, let's say that I have some
vector a that is a member of the column space of a. That means it can be represented
as some linear combination. So a is equal to c1 times vector
1, plus c2 times vector 2, all the way to Cn
times vector n. Now, the question is, is this
closed under multiplication? If I multiply a times some new--
let me say I multiply it times some scale or s, I'm just
picking a random letter-- so s times a, is this
in my span? Well s times a would be equal
to s c1 v1 plus s c2 v2, all the way to s Cn Vn Which is
once again just a linear combination of these
column vectors. So this Sa, would clearly
be a member of the column space of a. And then finally, to make sure
it's a valid subspace-- and this actually doesn't apply just
to column space, so this applies to any span. This is actually a review of
what we've done the past. We just have to make sure it's
closed under addition. So let's say a is a member
of our column space. Let's say b is also a member
of our column space, or our span of all these
column vectors. Then b could be written as b1
times v1, plus b2 times v2, all the way to Bn times Vn. And my question is, is a plus b
a member of our span, of our column space, the span
of these vectors? Well sure, what's a plus b? a
plus b is equal to c1 plus b1 times v1, plus c2 plus
v2 times v2. I'm just literally adding
this term to that term, to get that term. This term to this term
to get this term. And then it goes all the way
to Bn and plus Cn times Vn. Which is clearly just
another linear combination of these guys. So this guy is definitely
within the span. It doesn't have to be
unique to a matrix. A matrix is just really just
a way of writing a set of column vectors. So this applies to any span. So this is clearly
a valid subspace. So the column space of a is
clearly a valid subspace. Let's think about other ways we
can interpret this notion of a column space. Let's think about it in terms of
the expression-- let me get a good color-- if I were to
multiply my-- let's think about this. Let's think about the set of all
the values of if I take my m by n matrix a and I multiply
it by any vector x, where x is a member of-- remember x has
to be a member of Rn. It has to have n components in
order for this multiplication to be well defined. So x has to be a member of Rn. Let's think about
what this means. This says, look, I can take any
member, any n component vector and multiply it by a,
and I care about all of the possible products that this
could equal, all the possible values of Ax, when I can
pick and choose any possible x from Rn. Let's think about
what that means. If I write a like that, and if
I write x like this-- let me write it a little bit better,
let me write x like this-- x1, x2, all the way to Xn. What is Ax? Well Ax could be rewritten as
x1-- and we've seen this before-- Ax is equal to x1 times
v1 plus x2 times v2, all the way to plus Xn times Vn. We've seen this multiple
times. This comes out of our
definition of matrix vector products. Now if Ax is equal to this,
and I'm essentially saying that I can pick any vector x in
Rn, I'm saying that I can pick all possible values of the
entries here, all possible real values and all possible
combinations of them. So what is this equal to? What is the set of
all possible? So I could rewrite this
statement here as the set of all possible x1 v1 plus x2 v2
all the way to Xn Vn, where x1, x2, all the way to Xn, are
a member of the real numbers. That's all I'm saying here. This statement is the
equivalent of this. When I say that the vector x can
be any member of Rn, I'm saying that its components
can be any members of the real numbers. So if I just take the set of all
of the, essentially, the combinations of these column
vectors where their real numbers, where their
coefficients, are members of the real numbers. What am I doing? This is all the possible linear
combinations of the column vectors of a. So this is equal to the span
v1 v2, all the way to Vn, which is the exact same thing
as the column space of A. So the column space of A, you
could say what are all of the possible vectors, or the set of
all vectors I can create by taking linear combinations of
these guys, or the span of these guys. Or you can view it as, what are
all of the possible values that Ax can take on if
x is a member of Rn? So let's think about
it this way. Let's say that I were to tell
you that I need to solve the equation Ax is equal to-- well
the convention is to write a b there-- but let me
put a special b there, let me put b1. Let's say that I need to
solve this equation Ax is equal to b1. And then I were to tell you--
let's say that I were to figure out the column space of
A-- and I say b1 is not a member of the column space of
A So what does that tell me? That tells me that this right
here can never take on the value b1 because all of the
values that this can take on is the column space of A. So if b1 is not in this, it
means that this cannot take on the value of b1. So this would imply that this
equation we're trying to set up, Ax is equal to b1,
has no solution. If it had a solution, so let's
say that Ax equals b2 has at least one solution. What does this mean? Well, that means that this, for
a particular x or maybe for many different x's,
you can definitely achieve this value. For there are some x's that when
you multiply it by a, you definitely are able
to get this value. So this implies that b2 is
definitely a member of the column space of A. Some of this stuff on some level
it's almost obvious. This comes out of
the definition of the column space. The column space is all of the
linear combinations of the column vectors, which another
interpretation is all of the values that Ax can take on. So if I try to set Ax to some
value that it can't take on, clearly I'm not going to
have some solution. If I am able to find a solution,
I am able to find some x value where Ax is equal
to b2, then b2 definitely is one of the values that
Ax can take on. Anyway, I think I'll
leave you there. Now that you have at least a
kind of abstract understanding of what a column space is. In the next couple of videos
I'm going to try to bring everything together of what we
know about column spaces, and null spaces, and whatever else
to kind of understand a matrix and a matrix vector product from
every possible direction.",Column space of a matrix | Vectors and spaces | Linear Algebra | Khan Academy,"Introduction to the column space of a matrix

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/null-space-and-column-space-basis?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/null-space-3-relation-to-linear-independence?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,st6D5OdFV9M
Dotandcrossproductcomparison_intuition_Vectorsandspaces_LinearAlgebra_KhanAcademy-tdwFdzVqito.en.csv,"We've known for several videos
now that the dot product of two nonzero vectors, a and b,
is equal to the length of vector a times the length of
vector b times the cosine of the angle between them. Let me draw a and b just
to make it clear. If that's my vector a and
that's my vector b right there, the angle between
them is this angle. And we defined it in this way. And actually, if you ever want
to solve-- if you have two vectors and you want to solve
for that angle, and I've never done this before explicitly. And I thought, well, I might
as well do it right now. You could just solve
for your theta. So it would be a dot b divided
by the lengths of your two vectors multiplied by each
other is equal to the cosine of theta. And then to solve for theta
you would have to take the inverse cosine of both sides,
or the arc cosine of both sides, and you would get theta
is equal to arc cosine of a dot b over the magnitudes or
the lengths of the products of, or the lengths of each of
those vectors, multiplied by each other. So if I give you two arbitrary
vectors-- and the neat thing about it is, this might be
pretty straightforward. If I just drew something in two
dimensions right here, you could just take your protractor
out and measure this angle. But if a and b each have a
hundred components, it becomes hard to visualize the
idea of an angle between the two vectors. But you don't need to visualize
them anymore because you just have to calculate
this thing right here. You just have to calculate
this value right there. And then go to your calculator
and then type in arc cosine, or the inverse cosine that are
the equivalent functions, and it'll give you an angle. And that, by definition, is the
angle between those two vectors, which is a
very neat concept. And then you can start
addressing issues of perpendicularity and
whatever else. This was a bit of a tangent. But the other outcome that I
painstakingly proved to you in the previous video was that
the length of the cross product of two vectors is equal
to-- it's a very similar expression. It's equal to the product of the
two vectors' lengths, so the length of a times the length
of b times the sine of the angle between them. Times the sign of the
angle between them. So it's the same angle. So what I want to do is take
these two ideas and this was a bit of a diversion there just
to kind of show you how to solve for theta because I
realized I've never done that for you before. But what I want to do is I want
to take this expression up here and this expression up
here and see if we can develop an intuition, at least in R3
because right now we've only defined our cross product. Or the cross product of two
vectors is only defined in R3. Let's take these two ideas in
R3 and see if we can develop an intuition. And I've done a very similar
video in the physics playlist where I compare the dot product
to the cross product. Now, if I'm talking about--
let me redraw my vectors. So the length of a--
so let me draw a. b, I want to do it
bigger than that. So let me do it like that. So that is my vector b. So this is b. That is a. What is the length of a times
the length of b times the cosine of the angle? So let me do that right there. So this is the angle. So the length of a if I were to
draw these vectors is this length right here. This is the length of a. It's this distance right
here, the way I've drawn this vector. So this is, literally, the
length of vector a. And I'm doing it in R3 or maybe
a version of it that I can fit onto my little
blackboard right here. So it'll just be the length
of this line right there. And then the length of
b is the length of that line right there. So that is the length of b. Let me rewrite this
thing up here. Let me write it as b, the length
of b times the length-- and I want to be careful. I don't want to do the dot there
because you'll think it's a dot product. Times a cosine of theta. All I did is I rearranged
this thing here. It's the same thing
as a dot b. Well what is a times the
cosine of theta? Let's get out our basic
trigonometry tools-- SOH CAH TOA. Cosine of theta is equal to
adjacent over hypotenuse. So if I drop, if I create a
right triangle here, and let me introduce some new colors
just to ease the monotony. If I drop a right triangle
right here and I create a right triangle right there, and
this is theta, than what is the cosine of theta? It's equal to this. Let me do it another color. It's equal to this,
the adjacent side. It's equal to this little
magenta thing. Not all of b, just this
part that goes up to my right angle. That's my adjacent. I want to do it a little
bit bigger. It's equal to the adjacent
side over the hypotenuse. So let me write this down. So cosine of theta is equal to
this little adjacent side. I'm just going to write
it like that. Is equal to this adjacent side
over the hypotenuse. But what is the hypotenuse? It is the length of vector a. It's this. That's my hypotenuse
right there. So my hypotenuse is the
length of vector a. And so if I multiply both sides
by the length of vector a I get the length of vector a
times the cosine of theta is equal to the adjacent side. I'll do that in magenta. So this expression right here,
which was just a dot b can be rewritten as-- I just told you
that the length of vector a times cosine of theta is equal
to this little magenta adjacent side. So this is equal to
the adjacent side. So you can view a dot b as being
equal to the length of vector b-- that length-- times
that adjacent side. And you're saying, Sal, what
does that do for me? Well what it tells you
is you're multiplying essentially, the length of
vector b times the amount of vector a that's going in the
same direction as vector b. You can kind of view this as
the shadow of vector a. And I'll talk about projections
in the future. And I'll more formally define
them, but if the word projection helps you, just
think of that word. If you have a light that shines
down from above, this adjacent side is kind of like
the shadow of a onto vector b. And you can imagine, if these
two vectors-- if our two vectors looked more like this,
if they were really going in the same direction. Let's say that's vector a and
that's vector b, then the adjacent side that I care about
is going to-- they're going to have a lot
more in common. The part of a that is going in
the same direction of b will be a lot larger. So this will have a larger
dot product. Because the dot product is
essentially saying, how much of those vectors are going
in the same direction? But it's just a number, so it
will just be this adjacent side times the length of b. And what if I had vectors that
are pretty perpendicular to each other? So what if I had two vectors
that were like this? What if my vector a looked
like that and my vector b looked like that? Well now the adjacent, the way
I define it here, if I had to make a right triangle
like that, the adjacent side's very small. So you're dot product, even
though a is still a reasonably large vector, is now much
smaller because a and b have very little commonality
in the same direction. And you can do it
the other way. You could draw this down like
that and you could do the adjacent the other way, but it
doesn't matter because these a's and b's are arbitrary. So the take away is the fact
that a dot b is equal to the lengths of each of those times
the cosine of theta. To me it says that the dot
product tells me how much are my vectors moving together? Or the product of the
part of the vectors that are moving together. Product of the lengths of the
vectors that are moving together or in the
same direction. You could view this adjacent
side here as the part of a that's going in the
direction of b. That's the part of a that's
going in the direction of b. So you're multiplying
that times b itself. So that's what the
dot product is. How much are two things going
in the same direction. And notice, when two things are
orthogonal or when they're perpendicular-- when a dot b is
equal to 0, we say they're perpendicular. And that makes complete sense
based on this kind of intuition of what the dot
product is doing. Because that means that
they're perfectly perpendicular. So that's b and that's a. And so the adjacent part of a,
if I had to draw a right trianlge, it would come
straight down. And if I were to say the
projection of a and I haven't draw that. Or if I put a light shining down
from above and I'd say what's the shadow of a onto b? You'd get nothing. You'd get 0. This arrow has no width, even
though I've drawn it to have some width. It has no width. So you would have
a 0 down here. The part of a that goes in
the same direction as b. No part of this vector
goes in the same direction as this vector. So you're going to have this 0
kind of adjacent side times b, so you're going to get
something that's 0. So hopefully that makes
a little sense. Now let's think about
the cross product. The cross product tells us well,
the length of a cross b, I painstakingly showed, you is
equal to the length of a times the length of b times the sin
of the angle between them. So let me do the same example. Let me draw my two vectors. That's my vector a and
this is my vector b. And now sin-- SOH CAH TOA. So sin of theta, let
me write that. Sin of theta-- SOH CAH TOA-- is
equal to opposite over the hypotenuse. So if I were to draw a little
right triangle here, so if I were to draw a perpendicular
right there, this is theta. What is the sin of theta equal
to in this context? The sin of theta is
equal to what? It's equal to this
side over here. Let me call that just
the opposite. It's equal to the opposite
side over the hypotenuse. So the hypotenuse is
the length of this vector a right there. It's the length of
this vector a. So the hypotenuse is the length
over my vector a. So if I multiply both sides of
this by my length of vector a, I get the length of vector a
times the sin of theta is equal to the opposite side. So if we rearrange this a little
bit, I can rewrite this as equal to-- I'm just
going to swap them. I have to do the dot
product as well. This is equal to b, the length
of vector b, times the length of vector a sin of theta. Well this thing is just the
opposite side as I've defined it right here. So this right here is just
the opposite side, this side right there. So when we're taking the cross
product, we're essentially multiplying the length of vector
b times the part of a that's going perpendicular
to b. This opposite side is the
part of a that's going perpendicular to b. So they're kind of
opposite ideas. The dot product, you're
multiplying the part of a that's going in the same
direction as b with b. While when you're taking the
cross product, you're multiplying the part of
a that's going in the perpendicular direction to
b with the length of b. It's a measure, especially when
you take the length of this, it's a measure of
how perpendicular these two guys are. And this is, it's a measure of
how much do they move in the same direction? And let's just look at
a couple of examples. So if you take two
right triangles. So if that's a and that's-- or
if you take two vectors that are perpendicular to each other,
the length of a cross b is going to be equal to-- if we
just use this formula right there-- the length of a
times the length of b. And what's the sin
of 90 degrees? It's 1. So in this case you kind of have
maximized the length of your cross product. This is as high as it can go. Because sin of theta, it's
a maximum value. Sin of theta is always less
than or equal to 1. So this is as good as you're
ever going to get. This is the highest possible
value when you have perfectly perpendicular vectors. Now, when is-- actually, just to
kind of go back to make the same point here. When do you get the maximum
value for your cosine of-- for your dot product? Well, it's when your two
vectors are collinear. If my vector a looks like that
and my vector b is essentially another vector that's going
in the same direction, then theta is 0. There's no angle between them. And then you have a dot b is
equal to the magnitude or the length of vector a times the
length of vector b times the cosine of the angle
between them. The cosine of the angle between
them, the cosine of that angle is 0. Or the angle is 0, so the
cosine of that is 1. So when you have two vectors
that go exactly in the same direction or they're collinear,
you kind of maximize your dot product. You maximize your cross product
when they're perfectly perpendicular to each other. And just to make the analogy
clear, when they're perpendicular to each other
you've minimized-- or at least the magnitude of your
dot product. You can get negative dot
products, but the absolute size of your dot product, the
absolute value of your dot product is minimized
when they're perpendicular to each other. Similarly, if you were to take
two vectors that are collinear and they're moving in the same
direction, so if that's vector a, and then I have vector b that
just is another vector that I want to draw them
on top of each other. But I think you get the idea. Let's say vector
b is like that. Then theta is 0. You can't even see it. It's been squeezed out. I've just brought these two
things on top of each other. And then the cross product in
this situation, a cross b is equal to-- well, the length of
both of these things times the sin of theta. Sin of 0 is 0. So it's just 0. So two collinear vectors, the
magnitude of their cross product is 0. But the magnitude of their dot
product, the a dot b, is going to be maximized. It's going to be as high
as you can get. It's going to be the length of
a times the length of b. Now the opposite scenario
is right here. When they're perpendicular to
each other, the cross product is maximized because it's
measuring on how much of the vectors-- how much of the
perpendicular part of a is-- multiplying that times
the length of b. And then when you have two
orthogonal vectors, your dot product is minimized,
or the absolute value of your dot product. So a dot b in this case,
is equal to 0. Anyway, I wanted to make all
of this clear because sometimes you kind of get into
the formulas and the definitions and you lose the
intuition about what are all of these ideas really for? And actually, before I move on,
let me just make another kind of idea about what the
cross product can be interpreted as. Because a cross product tends
to give people more trouble. That's my a and that's my b. What if I wanted to figure
out the area of this parallelogram? If I were to shift a and have
that there and if I were to shift b and draw a line parallel
to b, and if I wanted to figure out the area of this
parallelogram right there, how would I do it just using
regular geometry? Well I would drop a
perpendicular right there. This is perpendicular and this
length is h for height. Then the area of this, the area
of the parallelogram is just equal to the length of my
base, which is just the length of vector b times my height. But what is my height? Let me just draw a little
theta there. Let me do a green theta,
it's more visible. So theta. So we know already that the sin
of this theta is equal to the opposite over
the hypotenuse. So it's equal to the height
over the hypotenuse. The hypotenuse is just the
length of vector a. So it's just the length
of vector a. Or we could just solve for
height and we'd get the height is equal to the length
of vector a times the sin of theta. So I can rewrite this here. I can replace it with that and
I get the area of this parallelogram is equal to the
length of vector b times the length of vector a sin theta. Well this is just the length
of the cross product of the two vectors, a cross b. This is the same thing. I mean you can rearrange
the a and the b. So we now have another way of
thinking about what the cross product is. The cross product of two
vectors, or at least the magnitude or the length of the
cross product of two vectors-- obviously, the cross product
you're going to get a third vector. But the length of that third
vector is equal to the area of the parallelogram that's defined
or that's kind of-- that you can create from
those two vectors. Anyway, hopefully you found this
a little bit intuitive and it'll give you a little bit
more of kind of a sense of what the dot product and cross
product are all about.",Dot and cross product comparison/intuition | Vectors and spaces | Linear Algebra | Khan Academy,"Dot and Cross Product Comparison/Intuition

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/vector-triple-product-expansion-very-optional?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/proof-relationship-between-cross-product-and-sin-of-angle?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,tdwFdzVqito
Exactequationsexample2_Firstorderdifferentialequations_KhanAcademy-utQi1ZhF__Q.en.csv,"Let's do some more examples
with exact differential equations. And I'm getting these problems
from page 80 of my old college differential equations books. This is the fifth edition of
Elementary Differential Equations by William Boyce
and Richard DiPrima. I want to make sure they get
credit, that I'm not making up these problems. I'm getting
it from their book. Anyway, so I'm just going to
give a bunch of equations. We have to figure out if they're
exact, and if they are exact, we'll use what we know
about exact differential equations to figure out
their solutions. So the first one they have is,
2x plus 3, plus 2y minus 2, times y prime is equal to 0. So this is our M of x and y--
although, this is only a function of x-- and then
this is our N, right? You could say that's
M, or that's N. You could also say that, if this
is exact-- well, first let's [? test ?] this exact, before we start
talking about psi. So what's the partial of this,
with respect to y? The partial of M, with
respect to y. Well, there's no y
here, so it's 0. The rate of change that
this changes with respect to y is 0. And what's the rate of
change this changes, with respect to x? The partial of N, with respect
to x is equal to-- well, there's no x here, right? So these are just constants from
an x point of view, so this is all going to be 0. But we do see that
they're both 0. So M sub y, or the partial with
respect to y, is equal to the partial with respect to x. So this is exact. And actually, we don't have to
use exact equations here. We'll do it, just so that
we get used to it. But if you look here, you
actually could have figured out that this is actually
a separable equation. But anyway, this is exact. So knowing that it's exact, it
tells us that there's some function psi, where psi is
a function of x and y. Where psi sub x is equal to this
function, is equal to 2x plus 3, and psi-- I shouldn't
say sub x. I say the partial of psi,
with respect to x. And the partial of psi, with
respect to y, is equal to this, 2y minus 2. And if we can find our psi, we
know that this is just the derivative of psi. Because we know that the
derivative, with respect to x of psi, is equal to the partial
of psi, with respect to x, plus the partial
of psi, with respect to y, times y prime. So this is this just the
same form as that. So if we can figure out y,
then we can rewrite this equation as dx, the derivative
of psi, with respect to x, is equal to 0. Let me switch colors, or it's
going to get monotonous. This right here, if we can find
a psi, where the partial with respect to x, is this, the
partial with respect to y, is this, then this can
be rewritten as this. And how do we know that? Because the derivative of psi,
with respect to x, using the partial derivative chain
rules, is this. This partial with respect
to x, that's this. This partial with respect to
y, is this, times y prime. So this is the whole point
of exact equations. But anyway, so let's figure
out what our psi is. Actually, before we figure out,
if the derivative of psi, with respect to x, is 0, then
if you integrate both sides, you just-- the solution
of this equation is psi is equal to c. So using this information, if we
can solve for psi, then we know that the solution of this
differential equation is psi is equal to c. And then if we have some initial
conditions, we could solve for c. So let's solve for psi. So let's integrate both sides
of this equation, with respect to x. And then we get psi is equal
to x squared plus 3x, plus some function of y. Let's call it h of y. And remember, normally when you
take an antiderivative, you have just a plus
c here, right? But you can kind of say we
took an anti-partial derivative. So when you took a partial
derivative, with respect to x, not only do you lose constants--
that's why we have a plus c, normally-- but you
also lose anything that's a function of just y, and not x. So for example, take the partial
derivative of this with respect to x, you're going
to get this, right? Because the partial derivative
of a function, purely of y, with respect to x,
is going to be 0. So it will disappear. So anyway, we take the
antiderivative of this, we get this. Now, we use this information. Well, we use this information. We take the partial of this
expression, and we say, well, the partial of this expression,
with respect to y, has to equal this, and then we
can solve for h of y, then we'll be done. So let's do that. So the partial of psi, with
respect to y, is equal to-- well, that's going
to be 0, 0, 0. This part is a function of x. If you take the partial with
respect to y, it's 0, because these are constants, from
a y point of view. So you're left with
h prime of y. So we know that h prime of y,
which is the partial of psi, with respect to y,
is equal to this. So h prime of y is equal
to 2y minus 2. And then if we wanted to figure
out what h of y is, we get h of y-- just integrate both
sides, with respect to y-- is equal to y squared
plus-- sorry-- y squared minus 2y. Now, you could have a plus c
there, but if you watched the previous example, you'll see
that that c kind of merges with the other c, so you
don't have to worry about it right now. So what is our psi function,
as we know it now, not worrying about the plus c? It is psi of x and y is equal
to x squared plus 3x, plus h of y-- which we figured
out is this-- plus y squared, minus 2y. And we know a solution of our
original differential equation is psi is equal to c. So the solution of our
differential equation is this is equal to c. x squared plus 3x, plus
y squared, minus 2y is equal to c. If you had some additional
conditions, you could test it. And I encourage you to test
this out on this original equation, or I encourage you to
take the derivative of psi, and prove to yourself that if
you took the derivative of psi, with respect to x, here,
implicitly, that you would get this differential equation. Anyway, let's do another one. Let's clear image. So the more examples you
see, the better. So let's see, this one says 2x
plus 4y, plus 2x minus 2y, y prime is equal to 0. So what's the partial of
this with respect to y? So M, the partial of M, with
respect to y-- this is 0-- so it's equal to 4. What's the partial of this, with
respect to x, just this part right here? The partial of N, with
respect to x, is 2. This is 0. So the partial of this, with
respect to y, is different than the partial of N,
with respect to x. So this is not exact. So we can't solve this using
our exact methodology. So that was a fairly
straightforward problem. Let's do another one. Let's see. I'm running out of time, so I
want to do one that's not too complicated. Let's see, 3x squared minus
2xy-- actually, let me do this in the next problem. I don't want to rush
these things. I will continue this
in the next video. See you soon.",Exact equations example 2 | First order differential equations | Khan Academy,"Some more exact equation examples.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/exact-equations-example-3?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/first-order-differential-equations/exact-equations/v/exact-equations-example-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBdTlkyCh7g-DRr53z1IKDl,utQi1ZhF__Q
Distancebetweenplanes_Vectorsandspaces_LinearAlgebra_KhanAcademy-v8plb6V8BQo.en.csv,"If the distance between the plane Ax-2y+z = d and the plane containing the lines, and they give us two lines here in three-dimensions, if that distance is square-root of 6, then the absolute value of d is... So let's think about it for a little bit. They're talking about the distance between this plane and some plane that contains these two line. So in order to talk realistically about the distance between the planes, those planes will have to be parallel, because if they're not parallel - if they intersect with each other, the distance is clearly zero, and they're telling us here that the distance is square-root of 6. So we have a situation so that the planes can't intersect they must be parallel. So you have this plane up here, you have this plane up here, you could call this the equation here is ax - 2y + z = d, and then you're going to have another plane, that's going to be parallel to it, maybe it looks something like this. You have the other plane that is parallel, and it's going to contain both of these lines. So maybe it has this line - so this line is in green, maybe this line looks something like this, it's on that blue plane. And then this line, maybe in magenta, is also going to be on the blue plane. So how can we figure out the distances? Well a good starting point would be to try to figure out the equation for this blue plane here. And since these planes are parallel, this equation should look very much like this orange equation - at least on the left-hand-side, it might just have a different d-value, and that's because it has the exact same inclination. And then once we figure out the equation for this plane over here, then we could actually probably figure out what 'a' is, then we could find some point on the blue plane and then use our knowledge of finding the distance points and planes to figure out the actual distance from any point to this orange plane. So let's figure out the equation of this blue plane first, and a good place to start is just to try to figure out two vectors on this blue plane, then we can take the cross-product of those two vectors to find out a normal to this blue plane, and then use that information to actually figure out the equation for the blue plane. So let's figure out some points that sit on the blue plane. So on this green line right over here you have, see if I want all of these to be equal to zero, you'd have the point x is equal to 1, y is equal to 2, z is equal to 3, so you have the point (1,2,3) - that definitely sits on the blue plane. Let's come up with another point. let's see if I want all of these to be equal to one, I could make this, if I want this to evaluate to two, I'd have the point three, I would have the point, if I want this to evaluate to one, I would want five minus two over three, so 3, 5, and then I would want this to be seven. Seven minus three over four is also 1, so that's another point, actually both of these points sit on this line right over here. 1,2,3 and then 3,5,7. And then let's do the same thing for this - let's find two points on this plane, and actually we just need to find one point on this plane, because if you have three points that's enough to figure out two different vectors -vectors that aren't scalar multiples of each other, which would be enough to figure out the normal to this plane. So let's just figure out one more point over here and one more point would be, if we want all of these three to be equal to zero, would be the point (2,3,4). Because this would be zero, zero, zero. So that's also sitting the plane and that sits on the magenta line right over there. So let's use these three points to figure out two vectors on the plane that aren't multiples of each other, then we can take their cross-product to actually figure out a normal vector to the blue plane. So let's say the first vector, 'a', that sits on this plane, let's say it's the difference in the position vectors that specify these two points, and then we know that will be on the plane. And so that will be three minus one is 2i plus five minus two is 3j, plus seven minus three is 4k. So vector 'a' is actually going to sit on this green line, because both of these points are on this line, so it's going to sit on that line. If we put it on the plane or if we were to start it at one of those points it will sit on that line. And then we can do another vector, and it's essentially going between a point on the green line and a point on the purple line, but that's definitely going to be a vector on our blue plane. Let's go between these two points - that looks pretty straight-forward, so let's call vector b, so let's call vector b, let's call that, let's see, two minus one is 'i', three minus two is 'j', and then four minus three, that's just 1k. So this vector here is also sitting on the plane. So if I take the cross-product of 'a' and 'b' I am going to get a vector that is perpendicular to the plane, or a normal vector to the plane. So let's do that. So let's find what 'a' cross 'b' is. 'a' cross 'b' is equal to - and this is how I find it easiest - I just write 'i', 'j', 'k', this is really the definition of the cross product, or I guess one of them. And we write our first vector, we have 2, 3, 4, and then we have our second vector, which is just 1,1,1, and then this is going to be equal to, first we'll look at the 'i' component, so cross that row, that column out. three times one minus one times four, so that's just three minus four, so it's negative 'i', and then minus, we're going to have the 'j', so let we write up minus here, minus , let me just swap signs, we have positive, negative, positive, so 'j' , get rid of that column, that row, two times one which is two, minus one times four, so that's minus four, is negative 2, so we could have written negative 2 here, but the negatives cancel out, so it becomes plus 2j, and finally for the 'k', get rid of that row that column, two times one is two, minus one times three, is two minus three, which is negative one, so it's negative k. So this right here is a normal vector to the plane. So if we want to find the equation for that plane, we've done it multiple times, we'd just have to take the dot product of that normal vector and any arbitrary vector on that that specified that we can specify with with an arbitrary x y and z, and we've done this multiple times in multiple videos. If this is any point, x, y, z, that sits on the plane, then the vector - let me draw the vector, let's say we go to this point right over here, so this vector right over here is going to be - let me draw it the other way actually, so this vector right over here, let's say we're going between this point and x,y,z, this vector right here is going to be x minus three i, plus y minus five j, plus z minus 7 k. That's what this vector is, it sits on the plane, assuming x,y and z sit on the plane. So if we take the dot product of this and the normal vector that has got to be equal to zero, because it sits on the plane, and then we'll have our equation. So let's take 'n' dot that over there, so n dot x minus three i, plus y minus five j, plus z minus seven k. If any of this is confusing to you, I've gone into a little bit more depth in previous videos, especially in the linear algebra playlist where I talk about constructing the equation of a plane given a point on the plane and a normal vector, and even how you find that normal vector, so you might want to watch those if you want some review there. But these are going to be equal to zero, so when you take the dot product, n, our normal vector is this, so we just take the x term, which is negative one, times this x term right over here, so negative one times this is just three minus x, and then plus this y component times this y component, so it's two times this, so it's plus two y minus ten, and then finally the z component - negative one times this. So this is plus seven minus z is equal to zero, and what do we get? So we have our negative x, plus two y, minus z, and then is equal to, let's subtract three from both sides So if we take it out there it will be minus three. If we add ten to both sides, so then you have a plus ten over here, and then we subtract seven from both sides, this becomes a minus seven So then on the right-hand-side, negative three plus ten minus seven, well that's just going to be zero! And just like that we have the equation for this blue plane over here - the plane that contains these two lines. Now remember what we said at the beginning of the video - these two planes are parallel, so the ratio of the coefficients on the 'x' terms, the 'y' term and the 'z' term has got to be the same. So this one has a positive 2, that has a negative 2, this is just to simplify it, so it looks very similar to each other. Let's multiple this equation right here, both sides, by negative one. And then we're going to get x minus two y plus z is equal to zero; so this is a completely valid, another alternate way of expressing the same plane. And what like about this about this is that it looks very similar to this - at least the ratio of the x, y's and z's, negative two y, negative two y; one z, one z, and remember the ratios have to be the same. So here we have a one-to-one ratio between the z-coefficient and the z-coefficient, the y-coefficient and the y-coefficient, so it's also going to be for the x coefficient. So here we know if this is going to be parallel to the blue plane we know that 'a' has got to be equal to one. So this is x minus two y plus z is equal to d. So now let's figure out the actual distance between these two planes. So what we can do is we can take a point on this blue plane - and we have several examples of points on the blue plane, and find the distance between that point and this plane over here. And actually I just finished doing some videos on how to find the distance between a point and a plane, so I'm just going to use that formula (if you want it to be proved go watch that video - it's actually pretty interesting proof I think) but the distance between let's say this point, (1,2,3), and this plane over here, so this distance right here is going to be in the direction of the normal, the distance is going to be, you literally just evaluate this, let me do it this way: you literally just put in this point for the x, y and z, and then you subtract the d in the numerator, and we saw that as the formula for finding the distance. So it's literally going to be one, one, (I'm actually using this point right over here) So it's going to be one, one, because we just have one x so it's just going to be one minus two times two, one minus four (that's two times two), plus three, minus d, over here the d is just d, so we're just going to write minus d, just like that, all of that over what is essentially the magnitude of the normal vector, and we saw in several videos that's just the square of the coefficients on each of these terms right here, and taking the sum of those, taking the square root, so it's going to be equal to: 1 squared, plus negative 2 squared which is four, plus one squared which is one. So this is going to simplify to the distance is equal to one minus four plus three is zero. So in the numerator we have negative d, all of that over the square root of one plus four plus one, so all over the square root of six. So they say the distance between this plane and this plane over here is square root of six. So they're saying the distance is equal to the square root of six, that's what this information right over here is, maybe I should do that in another colour. The distance between the two planes is going to be the square root of six, and so then if we solve for d, multiple both sides of this equation times the square root of six, you get six is equal to negative d, or d is equal to negative six. Now, what they care about is the absolute value of d, or the absolute distance, so this would be kinda the signed distance - it specifies whether we're above or below the plane. Since we're below the plane we got a negative number - I just happened to draw it right, if we above the plane we would get a positive number. So this distance is negative six, the absolute value of it, the absolute value of d which is the same as the absolute value of negative six, is equal to six. So take any point on this blue plane and you look for the closest point on the orange plane, and they will be exactly six apart. Anyway, hopefully you found that interesting.",Distance between planes | Vectors and spaces | Linear Algebra | Khan Academy,"2010 IIT JEE Paper 1 Problem 51 Distance Between Planes

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/matrices_elimination/v/matrices-reduced-row-echelon-form-1?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/point-distance-to-plane?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,v8plb6V8BQo
Undeterminedcoefficients4_Secondorderdifferentialequations_KhanAcademy-vAepSNDLZRM.en.csv,"Before we move on past the
method of undetermined coefficients, I want to make and
interesting and actually a useful point. Let's say that I had the
following nonhomogeneous differential equation: the
second derivative of y minus 3 times the first derivative minus
4y is equal to-- now this is where gets interesting--
3e to the 2x plus 2 sine of x plus-- let me
make sure that I'm doing the same problems that I've
already worked on-- plus 4x squared. So you might say,
wow, this is a tremendously complicated problem. I have the 3 types of functions
I've been exposed to, I would have so many
undetermined coefficients, it would get really unwieldy. And this is where you need
to make a simplifying realization. We know the three particular
solutions to the following differential equations. We know the solution to the
second derivative minus 3 times the first derivative
minus 4y. Well, this is this the
homogeneous, right? And we know that the solution to
the homogeneous equation-- we did this a bunch of times--
is C1e to the 4x plus C2e to the minus x. We know the solution to-- and
I'll switch colors, just for a variety-- y prime prime minus 3y
prime minus 4y is equal to just this alone: 3e to the 2x. And we saw that that particular
solution there, y particular, was minus
1/2 e to the 2x. And we did this using
undetermined coefficients. We did that a couple
of videos ago. And then let me just write this
out a couple of times. We know the solution to
this one, as well. This was another particular
solution we found. I think it was two videos ago. And we found that the particular
solution in this case-- and this was a fairly
hairy problem-- was minus 5/17 x plus 3/17. Sorry. The particular solution was
minus 5/17 sine of x plus 3/17 cosine of x. And then finally this last
polynomial, we could call it. We know the solution when that
was just the right-hand side. That was this equation. And there we figured out-- and
this was in the last video. We figured out that the
particular solution in this case was minus x squared
plus 3/2 x minus 13/8. So we know the particular
solution when 0's on the right-hand side. We know it when just 3e to the
2x is on the right-hand side. We know it just when 2 sine of
x is on the right-hand side. And we know it just when
4x squared is on the right-hand side. First of all, the particular
solution to this nonhomogeneous equation, we
could just take the sum of the three particular solutions. And that makes sense, right? Because one of the particular
solutions, like this one when you put it on the left-hand
side, it will just equal this term. This particular solution, when
you put it in the left-hand side, will equal this term. And finally, this particular
solution, when you put it on the left-hand side, will
equal the 4x squared. And then you could add the
homogeneous solution to that. You put it in this side
and you'll get 0. So it won't change the
right-hand side. And then you will have the most
general solution because you have these two constants
that you can solve for depending on your initial
condition. So the solution to this
seemingly hairy differential equation is really just the sum
of these four solutions. Let me clean up some space
because I want everything to be on the board at
the same time. So the solution is going
to be-- well, I want that to be deleted. I'll do it in baby blue. Is going to be the solution to
the homogeneous C1e to the 4x plus C2e to the minus x
minus 1/2 e the to 2x. And I'll continue this line. Minus 5/17 sine of x plus 3/17
cosine of x minus x squared plus 3/2 x minus 13/8. And it seems daunting. When you saw this, it probably
looked daunting. This solution, if I told you
this was a solution and you didn't know how to do
undetermined coefficients, you're like, oh, I would never
be able to figure out something like that. But the important realization is
that you just have to find the particular solutions for
each of these terms and then sum them up. And then add them to the general
solution for the homogeneous equation,
if this was a 0 on the right-hand side. And then you get the general
solution for this fairly intimidating-looking second
order linear nonhomogeneous differential equation with
constant coefficients. See you in the next video, where
we'll start learning another method for solving
nonhomogeneous equations.",Undetermined coefficients 4 | Second order differential equations | Khan Academy,"Putting it all together!

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-tutorial/v/laplace-transform-1?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/undetermined-coefficients/v/undetermined-coefficients-3?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,vAepSNDLZRM
Nullspace3-Relationtolinearindependence_Vectorsandspaces_LinearAlgebra_KhanAcademy-vFctYRhK2M0.en.csv,"The neat thing about linear
algebra in general is some very seemingly simple concepts
can be interpreted in a bunch of different ways, and can be
shown to represent different ideas or different problems. And
that's what I'm going to do in this video. I'm going to explore the
nullspace, or even better, I'm going to explore the
relationship-- if I have some matrix A times some vector
x, and that that is equal to the 0 vector. And we, of course, saw on the
last few videos that the nullspace of A, is equal to all
of the vectors x in Rn. So this will have
n components. This would have to be
an m by n matrix. If this was an m by a matrix,
I'd say all of the vectors in Ra. So this number right here has to
be the same as that number in order for the matrix vector
multiplication to be valid. But the nullspace of A is all
of the vectors in Rn that satisfy this equation. Where if I take A and I multiply
it times any one of the vectors in the nullspace,
I should get the 0 vector. And this is going to have m
components, and we've seen that in previous-- this is going
to have the 0 vectors. I'll put it this way, the
0 vector's going to be a member of Rm. So that's what our
nullspace is. Let's explore it a little bit. We know already that our vector,
our matrix, can be rewritten like this. We could just write it as
a set of column vectors. I could say this right here,
that's v1, then I'm going to have v2, and I have n columns. So this last column right here
is going to be v sub n. So if I define my vectors this
way, that's the first vector, that's the second vector, than
I can rewrite my matrix A. I could say A is equal to just
a bunch of column vectors. v1, v2, all the way to vn. And multiplying this matrix
times a vector x, so times x, so times x1, x2, all
the way to xn. We've seen in the past on the
matrix vector product definition video that this can
be interpreted as, this has actually just coming straight
out of the definition. This is the same thing as x1
times vector 1, times the first column, plus x2 times the
second column, times that column, all the way to, and you
just keep adding them up, all the way to xn. Times the nth column. This just comes straight out
of our definition of matrix vector products. Now, if we're saying that Ax is
equal to 0, we're looking for the solution set to that. If we're looking for the
solution set to Ax is equal to 0, then that means-- is equal
to the 0 vector, that that means that this sum, we're
trying to find a solution set of this sum is equaling 0. We want to figure out the x1's,
x2's, x3's, all the way to xn's, that make this
equal the 0 vector. What are we doing? We're taking linear
combinations of our column vectors. We're taking linear combinations
of our column vectors, and seeing if we can
take some linear combination and get it to the 0 vector. Now, this should start ringing
bells in your head. This little equation, or this
little expression right here, should start ringing bells. This was part of how we
defined what linear independence was. We said that if this was the
definition of linear independence, or we proved
this fell out of the definition of linear
independence, and if I have a bunch of vectors, v1, v2, all
the way to vn, we say that they are linearly independent. There's kind of the
non-mathematical way of describing it, I guess this is
mathematical as well, is that look, none of those vectors
can be represented as a combination of the other ones. And then we show that that means
that the only solution to this equation would be
that x1, x2, all of the coefficients on this, has
to be equal to 0. That this is the
only solution. Linear independence means that
this is the only solution to this equation right now. If the only way that you get
the 0 vector, by taking combination of all of these
common vectors, the only way to do that is to have all
of these guys equal 0. Then you are linearly
independent. Likewise, if v1, v2, all the
way to vn are linearly independent, then the only
solution to this is for these coefficients to be 0. And we saw that in our video
on linear independence. Now, if all of these
coefficients are 0, what does that mean? That means that our vector
x is the 0 vector, and only the 0 vector. That's the only solution. So we have something
interesting here. If our column vectors are
linearly independent, if v1, v2, all the way to vn, are
linearly independent, then that means that the only
solution to Ax equals 0, is that x has to be equal
to 0 vector. Or put another way, the solution
set of this equation, which is really just a
nullspace, the nullspace is all of the x's that satisfy
this equation. So that the nullspace of A has
to only contain the 0 vector. So that's an interesting
result. If we're linearly independent,
then the nullspace of A only contains the 0 vector. Which is another way of saying
that-- let me write this-- well, I already wrote it down,
that x1, x2, all of them, have to be equal to 0. Now if I were to multiply this
equation out and get it into reduced row echelon form,
what does that mean? We saw in a previous video that
the nullspace of A is equal to the nullspace of the
reduced row echelon form of A. And that's-- the nullspace of
A is 0, because its column vectors are each linearly
independent, and that means that the nullspace of the
reduced row echelon form of A must also equal the 0 vector. And that means that if I take
the reduced row echelon form of A, times-- maybe I'm being
a little redundant-- the reduced row echelon form of A,
and I multiply that times x, or I want to solve this
equation, the only solution right here is x is equal
to the 0 vector. And if you think about what
that means, if this is the only solution, that means that
this reduced row echelon form has no free variables. It literally would just have
to look like this. So this is x, x1, x2, all the
way to xn, the reduced row echelon form of A, in order
for this to have a unique solution, and that unique
solution being 0, the reduced echelon form is going to
have to look like this. 1 times x1 plus 0 times all
the other ones, so you're going to have just a bunch of
n0's, and you're going to have 1 times x2, plus 0's times
everything else. And those 1's are going to go
all the way down the diagonal, so it's going to look like that,
and then that is going to be equal to the 0 vector. And this is going to be a square
matrix, where this has to be n, and this has to be n. How do I know that? Because I said that x1, x2, and
all of these have to be equal to 0. So they have to be equal to 0. If I just write them as a system
of equations, if I write x1 is equal to 0, x2 is
equal to 0, x3 is equal to 0, all the way to xn
is equal to 0. This system of equations, if
I wrote it as an augmented matrix, remember this is
x1 plus 0, x2 plus 0. This as in augmented matrix, and
we've done this multiple times, it would look
like this. 1, you just have a bunch of 0's,
n0's, and then the 1's would just go down the diagonal,
and then you'd have n0's right there. So that's where I'm
getting it from. If we are linearly independent,
the nullspace of A is going to be just a 0
vector, and if the nullspace of A is just a 0 vector, then
the nullspace of the reduced row echelon form is
only the 0 vector. The only solution is all
of the x's equal to 0. Which means a reduced row
echelon form of A has to essentially just be 1's down
the diaganol, with 0's everywhere else. So anyway, I just want to make
this-- this is kind of a neat by-product of an interpretation of the nullspace. Let me write that. Let me summarize our results. The nullspace of A, if it just
equals 0, then that means, you can go both ways, that's true
if and only if the column vectors of A are linearly
independent. And all of that's only true--
this is true, I was going to do a triangle, it might turn
into a square-- if x1, x2, all of these have to be equal 0. This is the only solution. And then that implies that the
reduced row echelon, and I didn't do it as precisely as
I would have liked, but the reduced row echelon form of A
is essentially going to be a square n by n matrix. And, by the way, this can only
be true if we're dealing with an n by n matrix
to begin with. And maybe I'll do that a little
bit more precisely in a future video. But then the reduced row echelon
form of A is going to have to look like this, just
a bunch of 1's down the diagonal, with 0's
everywhere else. And these all imply
each other. Now, what if the nullspace of A
contains some other vectors? Well, then we would have to say
that the column vectors of A are linearly dependent. And if they're linearly
dependent, then we wouldn't have a reduced row echelon form
of A that looked like this, you would have something
that would have some free variables that allows you to
create more solutions there. But anyway, I just wanted to
give you this angle on how you can interpret the nullspace and
how it relates to linear Independence.",Null space 3: Relation to linear independence | Vectors and spaces | Linear Algebra | Khan Academy,"Understanding how the null space of a matrix relates to the linear independence of its column vectors

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/column-space-of-a-matrix?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/null_column_space/v/null-space-2-calculating-the-null-space-of-a-matrix?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,vFctYRhK2M0
LinkedList-ImplementationinC_C++-vcQIFT79_50.en.csv,"In our previous lessons, 
we described linked list, we saw the cost of various operations in linked
list and we also compared Linked List with arrays. Now, let us implement Linked List,
 the implementation will be pretty similar in c and c++. there will be slight differences that we will
discuss. the prerequisite for this lesson is that you
should have a working knowledge of pointers in C/C++
and you should also know the concept of dynamic memory allocation. If you want to refresh any of these concepts
check the description of this video for additional resources. Ok so let's get started. As we know in a 
linked list, data is stored in multiple non-contiguous blocks of
memory and we call each block of memory a node in
the linked list. So Let me first draw a linked list here, so
we have a linked list of integers here with three nodes as
we know each node has two fields or two parts one
to store the data and another to store the address of the next node
what we can also call link to the next node. So Let's say the address of the first node
is 200 and address of the second node is 100 and the address of
the third node is 300 for this linked list.
This is only a logical view of the linked list.So the address
part of the first node will be 100 and the address of the
second node will be 200 and we will have 300 here. The address part of the last node will be
null which is only a synonym or macro for address 0. 0 is an invalid address a pointer variable
equal to 0 or null with address 0 or null means
that the pointer variable does not point to a valid memory
location. The memory block the address of the memory
block allocated to each of the node is totally random, there
is no relation. Its not a guarantee that the addresses will
be in increasing order or decreasing order or adjacent to each
other. So that's why we need to keep these links.Now
the identity of the linked list that we always keep with us
is the address of the first node what we also
call the head node. So we keep another variable that will be of
type pointer to node and this guy will store the address of
the first node. And we can name this pointer variable whatever
lets say this pointer variable is named A.
The name of this particular pointer variable that points to the
head node or the first node can also be interpreted as the name
for the linked list also because this is the only identity of the linked
list that we keep with us all the time.
So let us now see how this logical view can be mapped to a real
program in C or C++. In our program node will be a data type that
will have two fields.one to store the data and another to
store the address. In C we can define such a datatype as structure,
so lets say we define a structure named node with two fields.
First field to store the data, the type of the data here is
integer so this will be node for a linked list of integers. If we wanted a Linked List of say Double,
this data type would be double.
The second field will be pointer to node struct node*. We can
name this Link or we can name this next or whatever This is C style of declaring node* or pointer
to node.If this was C++ we could simply write Node*.
I would write it this way the C++ way it looks better to me. In our Logical view here this variable A is
of type Node* or pointer to node.
Each of these three rectangles with two fields are of type node
and this field in the node, the first field is of type integer
and second field is of type pointer to node or Node*. It is important to note which one is what
in the logical view. We should have this visualization before we
go on to implement Linked List. OK so Let us now create this particular Linked
List of Integer that we are showing here through our code.To
be able to do so we will have to implement two
operations one to insert a node into the Linked List. One operation to insert a node in to Linked
List and another operation to traverse the Linked List.
But before that the first thing that we want to do is that we
want to declare a pointer to the head node, a variable that will store the address of
the head node. For the sake of clarity i will write head
node here.So I have declared a pointer to node named A.
Initially When the list is empty, when there is no element in
the list. This pointer should point no where. So we write a statement something like A is
equal to Null to say this same.With these two statements what
we have done is we have created a pointer to node named A
and this pointer points No-where so the list is empty. Now Lets say we want to insert a node in this
list so what we do is we first create a node.Creating a node
is nothing but creating a memory block to store a node. In C we use the function malloc to create
a memory block as argument we pass the number of bytes that
we want in the block. So we say that give me a memory block that
will be equal to the size of a node. So this call to malloc will create a memory
block.This is dynamically allocated memory,memory allocated
during runtime and
the only way to work with this kind of memory is through
reference to this memory location through pointers. Let us assume that this memory block assigned
here is at address 200. Now malloc returns a void pointer that gives
us the address of assigned memory block so we need to collect
it in some variable.
Lets say we create a variable named temp which is pointer to
node so we can collect the return of malloc the address in this
particular variable. We will need a type casting here because malloc
returns void pointer and we are having temp as pointer
to node So now we have created one node in the memory. Now what we need to do is fill in the data
in this particular node and adjust the links which will mean
writing the correct address in the variable A and the
link field of this newly created node. To do so we will have to de-reference this
particular pointer variable that we just created. As we know if we put a * sign in front of
the pointer variable.We mean de-referencing it to modify
the value at that particular address.
Now in this case we have a node which has two fields,so once we
de-reference if we want to access each of the fields
we need to put something like a dot data here to access the
data and a dot link to write to the link field. So we will write a statement like this to
fill in value 2 here and we have this temp variable pointing to
this right now and link part of this newly created
node should be null because this is the first and the last
node. And the final thing that we need to do is
write the address of this newly created node in A. So we will write something like A is equal
to temp. Ok temp was to temporarily store the address of the node
till the time we have
not fixed all the links properly. We can now use temp for some
other purpose.Our linked list is intact now it has one node. These two lines that we have written here
for de-referencing and writing the value into the new node.There
is alternate syntax for this
Instead of writing something like *temp bracketed dot data we
could also write temp followed by this arrow and data.we will have two characters to make
this arrow one hyphen and one this right angular brace. So we can write something like this.And same
thing below we can write something like this.To create a memory
block in C++ we can use malloc as well
as we can use the new operator. So in C++ it gets very simple.We could simply
write Node* temp = new Node like this and we would mean
the same thing. this is a lot cleaner and new operator is
always preferred over malloc. So if you are using C++ new is
recommended. So far through our program we created an empty
list by creating this pointer to the head node and assigning
the value null to it initially then
we created a node and we added first node in this linked
list.When the list is empty and we want to insert a node the
logic is pretty straight forward. When the list is not empty we may want to
insert a node at the beginning of the list or we may want to insert
a node at the end of the list or we may even want to
insert a node somewhere in the middle of the list at a particular
position. we will write separate functions and routines
for these different kind of insertions and we will see
running code in a compiler in our coming lessons.
Lets just talk about the logic here in this whatever
unstructured code i have right now here. So i want to write a code to insert two more
nodes each time at the end of the list.we actually want to create
the linked list with three nodes having values
2,4 and 6 that was our initial example in the beginning. Ok So let us add two more nodes with values
4 and 6 in to this linked list.At this stage in our code we already
have a variable temp which is
pointing to this particular node We will create a new node and
use the same variable name to collect the address of this new
node. So we will write a statement like this.So
a new node is created and temp now stores the address of this new
node which is located at
address 100 here.Once again you can set the data.And then
because this is going to be the last node we need to set the
link as null. Now all we need to do is to build the link
of this particular node,Write the address of this newly created
node in to the address field of
this last node.To do so we will have to traverse the list and
we will have to go to the end of the list, to do so we will
write something like this. We can create a new variable temp1 which will
be pointer to node and initially we can point this variable
to the head node by a statement like this.
we can write a loop like this. Now this is generic logic to
reach the end of the list. It will be not so clear if we see this logic
with only one node as we have in this example. Lets draw a list
with multiple nodes.
So we are pointing temp1 to the first node here and if the link
part of this node is null then we are at last node else we can
move to the next node. So temp1 equal to temp1-&gt; link will get us
to the next node.And we will go on till we reach the last node.
For the last node this particular condition temp1-&gt;link not
equal to null will be false because the link part will be null
and we will exit this while loop. So this is our code logic for traversal of
the list all the way till end.If we want to print the element in
the list we will write something like this, we will write
print temp-&gt;data inside the while loop.But right now we want to
insert at the end of the list and we are only traversing the
list to reach the last node. There is one more thing that i want to point
out, we are using this variable temp1 and initially storing
the address in A we are not doing something like A equal A.link
and using the variable A itself to traverse the list because
if we modify A we will loose the address of the head node. So A is never modified, the address of the
head node whatever variable stores the address of the head node
is never modified.Only this temporary variables are
modified to traverse the list.So finally after all this we will
write a statement like this temp1 dot link
is equal to temp. temp1 is now pointing here so this address
part is updated and this link is built. So we have two nodes in the list Once again
if we want to insert node with number 6 in this list we
will have to create a new node by this
logic and then we will have to traverse the list by this
logic.So We will point temp1 here first.Then the loop will move
the temp1 to the end. Lets say this new block is at address 300.So
this Last line finally will adjust the link of the node at
address 100.To insert the node at the end
there is one logic in these four line if this list is empty and
another logic in these remaining lines if list is not empty. Ideally, we will be writing all this logic
in a function. we will do that in our coming lessons. We will implement
a separate methods to print all
the element in the list or insert a node at the end or we will
implement a separate method to insert a node at beginning of
the list and at a particular position in the list.
This is all for this lesson. Thanks for watching.",Linked List - Implementation in C/C++,"See complete series on linked list here:
http://www.youtube.com/watch?v=NobHlGUjV3g&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=3
In this lesson, we will see implementation of basic insertion and traversal of a linked list. 

Lesson on Dynamic memory allocation  (malloc, new etc) -
http://www.youtube.com/watch?v=_8-ht2AKyH4

Series on pointers in C/C++:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_

Drop your questions/queries in comments section.

mycodeschool on facebook :  http://www.facebook.com/MyCodeSchool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,vcQIFT79_50
Laplacetransformofthediracdeltafunction_Laplacetransform_KhanAcademy-vhfjEpQWWeE.en.csv,"In the last video, I introduced
you to what is probably the most bizarro
function that you've encountered so far. And that was the Dirac
delta function. And I defined it to be--
and I'll do the shifted version of it. You're already hopefully
reasonably familiar with it. So Dirac delta of t minus c. We can say that it equals 0,
when t does not equal c, so it equals 0 everywhere, but it essentially pops up to infinity. And we have to be careful
with this infinity. I'm going to write
it in quotes. It pops up to infinity. And we even saw in the previous
video, it's kind of different degrees of infinity,
because you can still multiply this by other numbers to get
larger Dirac delta functions when t is equal to c. But more important than this,
and this is kind of a pseudodefinition here, is the
idea that when we take the integral, when we take the area
under the curve over the entire x- or the entire t-axis,
I guess we could say, when we take the area under this
curve, and obviously, it equals zero everywhere except
at t is equal to c, when we take this area, this is the
important point, that the area is equal to 1. And so this is what I meant by
pseudoinfinity, because if I have 2 times the Dirac delta
function, and if I'm taking the area under the curve of
that, of 2 times the Dirac delta function t minus c dt,
this should be equal to 2 times-- the area of just under
the Dirac delta function 2 times from minus infinity to
infinity of the delta function shifted by c dt, which is just
2 times-- we already showed you, I just said, by definition,
this is 1, so this will be equal to 2. So if I put a 2 out here, this
infinity will have to be twice as high, so that the
area is now 2. That's why I put that infinity
in parentheses. But it's an interesting
function. I talked about it at the end of
the last video that it can help model things that kind of
jar things all of a sudden, but they impart a fixed amount
of impulse on something and a fixed amount of change
in momentum. And we'll understand that a
little bit more in the future. But let's kind of get the
mathematical tools completely understood. And let's try to figure out what
the Dirac delta function does when we multiply it, what
it does to the Laplace transform when we multiply
it times some function. So let's say I have my Dirac
delta function and I'm going to shift it. That's a little bit
more interesting. And if you want to unshift
it, you just say, OK, well, c equals 0. What happens when c equals 0? And I'm going to shift it and
multiply it times some arbitrary function f of t. If I wanted to figure out the
Laplace transform of just the delta function by itself,
I could say f of t is equal to 1. So let's take our Laplace
transform of this. And we can just use the
definition of the Laplace transform, so this is equal to
the area from 0 to infinity, or we could call it the integral
from 0 to infinity of e to the minus -- that's just
part of the Laplace transform definition-- times this thing--
and I'll just write it in this order-- times
f of t times our Dirac delta function. Delta t minus c and times dt. Now, here I'm going to
make a little bit of an intuitive argument. A lot of the math we do is kind
of-- especially if you want to be very rigorous and
formal, the Dirac delta function starts to break down a
lot of tools that you might have not realized it would
break down, but I think intuitively, we can still
work with it. So I'm going to solve this
integral for you intuitively, and I think it'll
make some sense. So let's draw this. Let me draw this, what
we're trying to do. So let me draw what we're
trying to take the integral of. And we only care from zero to
infinity, so I'll only do it from zero to infinity. And I'll assume that c is
greater than zero, that the delta function pops
up someplace in the positive t-axis. So what is this first part
going to look like? What is that going to look
like? e to the minus st times f of t? I don't know. It's going to be some function.
e to the minus st starts at 1 and drops down, but
we're multiplying it times some arbitrary function, so I'll
just draw it like this. Maybe it looks something
like this. This right here is e to the
minus st times f of t. And the f of t is what kind of
gives it its arbitrary shape. Fair enough. Now, let's graph our Dirac
delta function. With zero everywhere except
right at c, right at c right there, it pops up infinitely
high, but we only draw an arrow that is of height 1 to
show that its area is 1. I mean, normally when you graph
things you don't draw arrows, but this arrow shows
that the area under this infinitely high thing is 1. So we do a 1 there. So if we multiply this, we care
about the area under this whole thing. When we multiply these two
functions, when we multiply this times this times the delta
function, this is-- let me write this. This is the delta function
shifted to c. If I multiply that times
that, what do I get? This is kind of the key
intuition here. Let me redraw my axes. Let me see if I can do it
a little bit straighter. Don't judge me by the
straightness of my axes. So that's t. So what happens when I
multiply these two? Everywhere, when t equals
anything other than c, the Dirac delta function is zero. So it's zero times anything. I don't care what this function
is going to do, it's going to be zero. So it's going to be zero
everywhere, except something interesting happens at
t is equal to c. At t equals c, what's the
value of the function? Well, it's going to
be the value of the Dirac delta function. It's going to be the Dirac delta
function times whatever height this is. This is going to be this point
right here or this right there, that point. This is going to be this
function evaluated at c. I'll mark it right here on the
y-axis, or on the f of t, whatever you want to call it. This is going to be e to the
minus sc times f of c. All I'm doing is I'm just
evaluating this function at c, so that's the point
right there. So if you take this point, which
is just some number, it could be 5, 5 times this, you're
just getting 5 times the Dirac delta function. Or in this case, it's not 5. It's this little more
abstract thing. I could just draw
it like this. When I multiply this thing times
my little delta function there, I get this. The height, it's a delta
function, but it's scaled now. It's scaled, so now my
new thing is going to look like this. If I just multiply that times
that, I essentially get e to the minus sc times f of c. This might look like some fancy
function, but it's just a number when we consider
it in terms of t. s, it becomes something when we
go into the Laplace world, but from t's point of view,
it's just a constant. All of these are just constants,
so this might as well just be 5. So it's this constant times my
Dirac delta function, times delta of t minus c. When I multiply that thing times
that thing, all I'm left with is this thing. And this height is still going
to be infinitely high, but it's infinitely high scaled in
such a way that its area is going to be not 1. And I'll show it to you. So what's the integral
of this thing? Taking the integral of this
thing from minus infinity to infinity, since this thing is
this thing, it should be the same thing as taking the
integral of this thing from minus infinity to infinity. So let's do that. Actually, we don't have to do
it from minus infinity. I said from zero to infinity. So if we take from zero to
infinity, what I'm saying is taking this integral
is equivalent to taking this integral. So e to the minus sc f of c
times my delta function t minus c dt. Now, this thing right here, let
me make this very clear, I'm claiming that this is
equivalent to this. Because everywhere else, the
delta function zeroes out this function, so we only care about
this function, or e to the minus st f of t when
t is equal to c. And so that's why we were able
to turn it into a constant. But since this is a constant,
we can bring it out of the integral, and so this is equal
to-- I'm going to go backwards here just to kind of save space
and still give you these things to look at. If we take out the constants
from inside of the integral, we get e to the minus sc times f
of c times the integral from 0 to infinity of f
of t minus c dt. Oh sorry, not f of t minus c. This is not an f. I have to be very careful. This is a delta. Let me do that in a
different color. I took out the constant terms
there, and it's going to be a delta of t minus c dt. Let me get the right color. Now, what is this thing
by definition? This thing is 1. I mean, we could put it from
minus infinity to infinity, it doesn't matter. The only time where it has any
area is right under c. So this thing is equal to 1. So this whole integral right
there has been reduced to this right there, because this
is just equal to 1. So the Laplace transform of
our shifted delta function times some other function is
equal to e to the minus sc times f of c. Let me write that
again down here. Let me write it all at once. So the Laplace transform of our
shifted delta function t minus c times some function
f of t, it equals e to the minus c. Essentially, we're just
evaluating e to the minus st evaluated at c. So e to the minus
cs times f of c. We're essentially just
evaluating these things at c. This is what it equals. So from this we can get a lot
of interesting things. What is the Laplace transform--
actually, what is the Laplace transform
of just the plain vanilla delta function? Well, in this case, we have c
is equal to 0, and f of t is equal to 1. It's just a constant term. So if we do that, then the
Laplace transform of this thing is just going to be e to
the minus 0 times s times 1, which is just equal to 1. So the Laplace transform of our
delta function is 1, which is a nice clean thing
to find out. And then if we wanted to just
figure out the Laplace transform of our shifted
function, the Laplace transform of our shifted delta
function, this is just a special case where f
of t is equal to 1. We could write it times 1, where
f of t is equal to 1. So this is going to be equal to
e to the minus cs times f of c, but f is just a constant,
f is just 1 here. So it's times 1, or it's
just e to the mine cs. So just like that, using a kind
of visual evaluation of the integral, we were able
to figure out the Laplace transforms for a bunch of
different situations involving the Dirac delta function. Anyway, hopefully, you found
that reasonably useful.",Laplace transform of the dirac delta function | Laplace transform | Khan Academy,"Figuring out the Laplace Transform of the Dirac Delta Function

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/laplace-transform/laplace-transform-to-solve-differential-equation/v/laplace-transform-to-solve-an-equation?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/laplace-transform/properties-of-laplace-transform/v/dirac-delta-function?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBtgpgKiL63j-n2-KlAejCN,vhfjEpQWWeE
InfixtoPostfixusingstack-vq-nUF0G4fI.en.csv,"In our previous lesson, we saw how we can
evaluate prefix and postfix expressions, now in this lesson we will see an efficient
algorithm to convert infix to postfix. We already know of one way of doing this. We
have seen how we can do this manually. To convert an infix expression to postfix, we
apply operator precedence, and associativity rules. Let's do the conversion for this expression
we have written here. The precedence of multiplication operator is higher. So, we will first convert
this part B*C. B*C will become BC*. The operator will come in front of the operands. Now, we
can do the conversion for this addition. For addition, the operands are A and this postfix
expression. In the final step we can get rid of all the parentheses. So, finally this is
my post fix expression. We can use this logic in a program also. But,
it will not be very efficient. And the implementation will also be somewhat complex. I am going
to talk about one algorithm which is really simple and efficient and in this algorithm
we need to parse the infix expression only once from left to right. And, we can create
the postfix expression. If you can see in infix to postfix conversion, the positions
of operands and operators, may change but the order in which operands occur from left
to right will not change. The order of operators may change. This is an important observation.
In both infix and postfix forms here, the order of operands as we go from left to right
is first we have A, then we have B and then we have C. But, the order of operators is
different. In infix, first we have + and then we have multiplication. In postfix, first
we have multiplication and then we have addition. In postfix form we will always have the operators
in the same order, in which they should be executed. I am going to perform this conversion
once again but this time I am going to use a different logic. What I will do is, I will
parse the infix expression from left to right. So, I will go from left to right, looking
at each token that will either be an operand or an operator. In this expression we will
start at A, A is an operand. If it's an operand we can simply append it in the postfix string
or expression that we are trying to create. At least for A it should be very clear that
this is nothing that can come before A. Okay, so the first rule is that if it's in operand,
we can simply put it in the postfix expression. Moving on, next we have an operator. We cannot
put the operator in the postfix expression, because we have not seen it's right operand
yet. While parsing we have seen only it's left operand. We can place it only after it's
right operand is also placed. So, what I am going to do is I am going to keep this operator
in a separate list or collection and place it later in the postfix expression when it
can be placed and the structure that I am going to use for storage is stack. A stack
is only a special kind of list in which whatever comes in last goes out first. Insertion and
deletion happen from the same end. I have pushed + operator onto the stack here. Moving
on, next we have B which is an operand. As we had said operand can simply be appended.
There is nothing that can come before this operand. The operator on the stack is anyway
waiting for the operand to come. Now at this stage, can we place the addition operator,
to the postfix string. Actually, what's after B also matters. In this case, we have this
multiplication operator after B, which has higher precedence and so the actual operand
for addition is this whole expression B*C. We cannot perform the addition until multiplication
is finished. So while parsing, when I am at B and I have not seen what's ahead of B, I
cannot decide the fate of the operator in the stack. So, let's just move on. Now, we
have this multiplication operator. I want to make this expression further complex to
explain things better. So, I am adding something at tail here in this expression. Now, I want
to convert this expression to postfix form. I am not having any parentheses here. We will
see how we can deal with parentheses later, let's look at an expression where parentheses
does not override operator precedence. Okay, so right now in this expression while parsing
from left to right, we are at this multiplication operator. The multiplication operator itself
cannot go into the postfix expression because we have not seen it's right operand yet. And,
until it's right operand is placed in the postfix expression, we cannot place it. The
operator that we would be looking at while parsing. That operator itself cannot be placed
right away. But, looking at that operator, we can decide whether something from the collection,
something from the stack can be placed into the postfix expression that we are constructing
or not. Any operator in the stack having higher precedence than the operator that we are looking
at, can be popped and placed into the postfix expression. Let's just follow this as rule
for now and I will explain it later. There is only one operator in the stack and It is
not having higher precedence than multiplication so we will not pop it and place it in the
postfix expression. Multiplication itself, will be pushed. If an element in the stack
has something on top of it, that something will always be of higher precedence. So, let's
move on in this expression now. Now, we are at C, which is an operand, so, it can simply
go. Next, we have an operator subtraction. Subtraction itself cannot go but as we had
said if there is anything on the stack having higher precedence than the operator that we
are looking at, it should be popped out and it should go and the question is why? We are
putting these operators on the stack, we are not placing them on the postfix expression
because we are not sure whether we are done with their right operand or not. But after
that operator, as soon as I am getting an operator of lower precedence, that marks the
boundary of the right operand. For this multiplication operator, C is my right operand. It's this
simple variable. For addition, B*C is my right operand because subtraction has lower precedence.
Anything on or after that cannot be part of my right operand. Subtraction, I should say
has lower priority because of the associativity rule. If you remember the order of operation,
addition and subtraction have same precedence but the one that would occur in left would
be given preference. So, the idea is anytime for an operator, if I am getting an operator
of lower priority, we can pop it from the stack and place it in the expression. Here,
we will first pop multiplication and place it and then we can pop addition and now we
will push subtraction onto the stack. Let's move on now. D is an operand. So, it will
simply go. Next we have, multiplication. There is nothing in the stack having higher precedence
than multiplication. So, we will pop nothing. Multiplication will go on to the stack. Next,
we have an operand. It will simply go. Now, there are two ways in which we can find the
end of the right operand for an operator. a is if we get an operator of lesser precedence,
b if we reach the end of the expression. Now, that we have reached end of the expression,
we can simply pop and place these operators. So, first multiplication will go and then
subtraction will go. Let's quickly write pseudo code for whatever I have said so far and then
you can sit with some examples and analyse the logic. I am going to write a function
named infix to postfix that will take a string exp for expression as argument. For the sake
of simplicity, lets assume that each operand or operator will be of one character only.
In an actual implementation you can assume them to be tokens of multiple characters.
So, in my pseudo code here, the first thing I will do is, to create a stack of characters
named S. Now, I will run a loop starting 0 till length of expression -1. So, I am looking
at each character that can either be an operand or operator. If the character is an operand
we can append it to the postfix expression. Well, actually I should have declared and
initialized a string before this loop. This is the result string in which I shall be appending
else if exp[i] is operator, we need to look for operators in the stack having higher precedence.
So, I will say while stack is not empty, and top of stack has higher precedence. And let's
say this function HasHigherPrecedence will take two arguments, two operators. So, if
the top of Stack has higher precedence than the operator that we are looking at. We can
append the top of stack to the result which is the variable that will store the postfix
string. And, then we can pop that operator. I am assuming that this S is some class that
has these functions top and pop and empty to check whether it's empty or not. Finally,
once I am done with the popping, Outside this while loop I need to push the current operator.
S is an object of some class that will have these functions top, pop and empty. Okay,
so this is the end of my for loop. At the end of it, I may have some operators left
in the stack. I will pop these operators and append them to the postfix string. I will
use this while loop. I will say that while the stack is not empty, append the operator
at top and pop it. And, finally after this while loop I can return the result string
that will contain the postfix expression. So, this is my pseudo code for whatever logic
I have explained so far. In the logic, I have not taken care of parentheses. What if my
infix expression would have parentheses like this? Their will be slight change from what
we were doing previously. With, parentheses any part of the expression within parentheses
should be treated as independent complete expression in itself. And, no element outside
the parentheses will influence its execution. In this expression, this part A + B is within
one parentheses. It's execution will not be influenced by this multiplication or this
subtraction which is outside it. Similarly, this whole thing is within the outer parentheses.
So, this multiplication operator outside, will not have any influence on execution of
this part as a whole. If parentheses are nested, inner parentheses is sorted out or resolved
first,and then only outer parentheses can be resolved. With parentheses, we will have
some extra rules: we will still go from left to right and we will still use stack. And,
let's say I am going to write the postfix part in write here as I create it. Now, while
parsing, a token can be an operand or operator or an opening or closing of parentheses. I
will use some extra rules. I will first tell them and then I will explain. If it's an opening
parentheses, we can push it onto the stack. The first token here, is an opening parentheses.
So, it will be pushed onto the stack. And, then we will move on. We have an opening parentheses
once again, so once again we will push it. Now, we have an operand. There is no change
in rule for operand. It will simply be appended to the postfix part. Next, we have an operator.
Remember, what we were doing for operator earlier. We were looking at top of stack and
popping as long as we were getting operator of higher precedence. Earlier when we were
not using parentheses, we could go on popping and empty the stack. But, now we need to look
at top of stack and pop only till we get an opening parentheses. Because, if we are getting
an opening parentheses, then it's the boundary of the last opened parentheses and this operator
does not have any influence after that, outside that. So, this + operator does not have any
influence outside this opening parentheses. I will explain this scenario, with some more
examples later. Let's first understand the rules. So, the rule is, if I am seeing an
operator, I need to look at the top of stack. If it's an operator of higher precedence,
I can pop and then I should look at the next top. If it's once again an operator of higher
precedence, I should pop again. But, I should stop when I see an opening parentheses. At,
this stage we have an opening parentheses at top, so we do not need to look below it.
Nothing will be popped anyway. Addition however, will go on to the stack. Remember, after the
whole popping game, we push the operator itself. Next, we have an operand. It will go on, we
will move on. Next, we have a closing of parentheses. When I am getting a closing of parentheses,
I am getting a logical end of the last opened parentheses. For part of the expression, within
that parentheses, it's coming to the end. And, remember what we were doing earlier,
when we were reaching the end of infix expression, we were popping all the operators out and
placing them. So, this time also we need to pop the operators out, but only those operators
that are part of this parentheses that we are closing. So, we need to pop all the operators
until we get an opening parentheses. I am popping this + and appending it. Next, we
have an opening of parentheses, so I will stop. But, as last step I will pop this opening
also. Because, we are done for this parentheses. Okay, so the rule for closing a parentheses,
is pop until you are getting an opening parentheses and then finally pop that particular opening
parentheses also. Let's move on now. Next, we have an operator. We need to look at top
of stack. It's an opening of parentheses. This operator will simply be pushed. Next,
we have an operand. Next, we have an operator. Once again, we will look at the top. We have
multiplication, which is of higher precedence. So, this should be popped and appended. We
will look at the top again. Again, it's an opening of parentheses, so we should stop
looking now. '-' will be pushed now. Next, we have an operand. Next we have a closing
of parentheses. So, we need to pop until we get an opening. '-' will be appended. Finally,
the opening will also be popped. Next, we have an operator and this will simply go.
Next, we have an operand. And, now we have reached the end of expression. So, everything
in the stack will be popped and appended. So, this final is my postfix expression.
I will take one more example and convert it to make things further clear. I want to convert
this expression. I will start at the beginning. First, we have an operand. Then this multiplication
operator, which will simply go onto the stack. The stack right now, is empty. There is nothing
on the top to compare it with. Next, we have an opening parentheses which will simply go.
Next, we have an operand it will be appended and now we move on to this addition operator.
If this opening parentheses was not there, the top of stack would have been the multiplication
operator which has higher precedence. So, it would have been popped. But, now we will
look at the top and it's an opening parentheses. So, we cannot look below. And we will simply
have to move on. Next, we have C. I missed pushing the addition operator last time. Okay,
after C, I have this closure. So, we need to pop until we get an opening. And, then
we need to pop one opening also. Finally we have reached the end of expression. So, everything
in the stack will be popped and appended. So, this finally is my postfix part, postfix
form. In my pseudo code, that I had written earlier, only the part within this for loop
will change to take care of parentheses. In case we have an operator, we need to look
at top of the stack and pop but only till we are an getting opening parentheses. So,
I have put this extra condition in the while loop, this condition will ensure that we stop
once we get an opening parentheses. Right now, in the for loop we are dealing with operand
and operators, we will have two more conditions: If its an opening of parentheses, we should
push. Else, if it's a closure, we can go on popping and appending. Let's say this function
IsOpeningParentheses will check whether a character is opening of parentheses or not.
In fact we should use this function here also when I am checking whether current token is
opening or not. Because, it could be an opening curly brace or opening bracket also, this
function will then take care. Let's say this function will take care. And, similarly for
this last else if, we should use this function IsClosingParentheses. Okay, things are consistent
now. After this while loop in the last else if, we should do one extra pop. And, this
extra pop will pop the opening parentheses. And, now we are done with this else if. And,
this is closure of my for loop. Rest of the stuff will remain same. After the for loop,
we can pop the left overs and append to the string. And, finally we can return. So, this
is my final pseudo code. You can check the description of this video for a link to the
real implementation, actual source code. Okay, So, I will stop here now. This is it for this
lesson. Thanks, for watching.",Infix to Postfix using stack,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we will see an efficient algorithm to convert Infix to Postfix using stack data structure. 

See source code here:
https://gist.github.com/mycodeschool/7867739

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,vq-nUF0G4fI
Checkifabinarytreeisbinarysearchtreeornot-yEwSGhSsT0U.en.csv,"In this lesson, we're going to solve a
simple problem on binary tree which is also a famous programming
interview question, and the problem is given a binary tree we need to check if the binary tree is a
binary search tree are not. As we know a binary tree is a
tree in which each node can have atmost two
children. All these trees that I have drawn here are
binary trees, but not all of them are binary search
trees. Binary search tree, as we know is a binary tree in which for
each node value of all the nodes in left subtree
is lesser and if you want to allow duplicates we
can say lesser or equal and value of all the nodes in
right subtree is greater. We can define binary search
tree as a recursive structure like this. Elements in
left subtree must be lesser or equal and elements in right subtree must be
greater and this should be true for all nodes and not just a root node, so left and right subtrees should
themselves also be binary search trees. Of these binary trees that I'm showing
here, A and C are binary search trees but B and D are not. In B for the root node
with value 10, we have 11 in its left subtree which
is greater than 10 and in a binary tree for any node all
values in its left subtree must be lesser. In D we are good
for the root node. The value in root node is 5 and we
have 1 in left subtree which is lesser and
we have 8, 9 and 12 in right subtree which are greater. So we are
good for the root node but for this node with value 8, we have
9 in its left. So this tree is not a
binary search tree. So how should we go about solving this
problem. Basically, I want to write a function that should
take pointer or reference to root node of a binary tree as argument and
function should return true if the binary tree is BST, false otherwise. This is how my method signature look
like in C++. In C, we do not have boolean types so return type here can be int. We can return 1 for true and 0 of false. I'll also write the definition of node here. For a binary tree node would be
structure with 3 fields, 1 to store data and 2 to store addresses of left and right
children. In my definition of node here, data type is integer and we have 2 pointers to node to store
addresses of left and right children. Okay coming back
to the problem there are multiple approaches and we're
going to talk about all of them. The first approach that I'm
going to talk about is easy to think of but it's not so
efficient but let's discuss it anyway. We are saying
that for a binary tree to be called binary search tree, it should have recursive  structure like
this. For the root node all the elements in left subtree must be
lesser or equal and all the elements in right subtree
must be greater, and left and right subtrees should themselves also be binary search
trees. So let's just check for all of this. I'm going to write a function named
IsSubtreeLesser that will take address of root node
of a binary tree or subtree and and integer value as argument and this function will return
true if all the elements in the subtree are lesser
so than this value and similarly I'll write another function
named IsSubtreeGreater that will return true if all the
elements in a subtree are greater than the given value. I had just declared this functions. I'll write body of
these functions later. Let's come back to this function 
IsBinarySearchTree. In this function, I am going to say that if
all elements in left subtree are lesser and I'll verify this by making
a call to IsSubtreeLesser function passing it address of left child of my current
root. Left child would be the root of current
subtree and the data in root. This function will return true
if all the elements in left subtree would be lesser than the data in root.
Now the next thing that I want to check for is if elements in right subtree are greater
than the data in root or not. These two conditions are not sufficient.
We also need to check if left and right subtrees are binary search
trees are not. So I'll add two more conditions here
have made a recursive call to IsBinarySearchTree function passing it address
of left child and I have made another call passing
address of right child and if all these four function call
IsSubtreeLesser, IsSubtreeGreater and IsBinarySearchTree for left and
right subtrees return true if all these four checks
pass then our tree is a binary search tree. We can 
return true else we need to return false. There is
only one thing that the a missing in this function now. We are missing the base case. If the route is null
that is if the tree or subtree is empty, we can
return true. This is the base case for our recursion
where we should stop. With this much of code IsBinarySearchTree 
function is complete but let's also write IsSubtreeLesser and
ItsSubtreeGreater functions because they are also part
of our logic. This function has to be a generic function
that should check if all the elements in a given tree are
lesser than a given value or not. We will have
to traverse the complete tree or subtree and see value in all
nodes and compare these values against this given integer.
I'll first handle the base case in this function. If the tree is empty, we can return true
else we need to check if the data in root is less than or equal to the given value
and we also need to recursively check if left and right subtrees of the current
root have lesser value or not. So I'm adding two
more conditions here. I'm making two recursive calls one for the
left subtree and another for the right subtree. If all these
three conditions are true then we are good else we can return
false. IsSubtreeGreater function will be very similar. Instead of writing these two functions
IsSubtreeLesser and IsSubtreeGreater, we could
also do something like this. We could find the maximum left subtree and compared it with the data in root,
if maximum of a subtree is lesser then all the elements a lesser and
similarly if the minimum of a subtree is greater all the elements had
greater. For the right subtree, we could find a
minimum. So instead of writing these two functions IsSubtreeLesser and IsSubtreeGreater, we could write
something like find max and find min and this would also fit. So this is a solution using one of the
approaches. Let's quickly run this code on an example
binary tree and see how it will execute. I have drawn a very simple binary tree
here which actually is a binary search tree. let's assume some addresses for these
nodes the tree. Let's say the root node is that address
200 and I'll assume some random addresses for
other nodes as well. To check if this binary tree is a binary
search tree or not, we will make a call to 
IsBinarySearchTree function. I'm writing IBST here as Shortcut for
IsBinarySearchTree because I'm short of space here. So I'll
make a call to this function maybe from the main function passing
addressed 200, address of the root node. For
this function call address in this local variable address
collected in this local variable root will be 200. Root is not null. Null is only a macro for address 0. For this call root is not null, so we
will not return true at this line. We will go to the next if. Now here, we
will make a call to IsSubtreeLesser function. Arguments
passed will be address of left child which is 150 and 7 the data in node at 200. Execution of the calling function will pause
and will resume only after the called
function returns. Now in this call to IsSubtreeLesser,
root is not null so we will not return true at first line.
We will go to the next if. Now here the first condition is if data in root this time is 150 because on this call is for this
left subtree and for this left subtree address of
root is 150. Data in root is 4 which is lesser than 7, so the first condition is true and we
can go to the second condition which is a recursive call. This call will pause and we will go
to the next call. Here once again the data in node at 180, 1 is lesser than 7 so first condition is true and we will
make recursive call. Left subtree for node at
180 is null. There is no left child so we will return at first line. Root is null
this time. This particular call will simply to return
true. Now in this previous call when root is 180, second condition for if is also true.
So we will make another call for right
subtree. Once again address passed will be 0 and we will simply return
true and now for this call IsSubtreeLesser 187, all three conditions
are true. So this guy can also return true and now
ISL 150,7 will resume. Now this guy will make a recursive
call for the right subtree and this guy after everything will also
return true. Now for this call because all 3
conditions in the if statement are true, this guy will also return true and now
IsBinarySearchTree function will resume. For this call we have evaluated the
first condition we have got true now this guy will make
another call to IsSubtreeGreater, passing address of
right child and value 7. This guy after everything will return
true and now we will have 2 recursive calls, to check if left and right subtree are
binary search trees on not. We will first have a call for the left
subtree. The execution will go on like this but I
want you to see something. Each call to binary search tree
function, we are comparing the data in root with
all the elements in left subtree and then all the elements in right subtree. This example tree could be really large
then in that case in the first call IsBinarySearchTree
for this complete tree, we would recursively traverse this
whole left subtree to see whether all the values in this
subtree are less than 7 or not and then we
will traverse all nodes in this right subtree to see if values have greater than 7
or not and then in next call IsBinarySearchTree,
when we would be validating with this particular subtree is BST or not. We would recursively traverse this
subtree if values are lesser than 4 or not and this subtree to see if value so greater
than 4 or not. So all in all during this whole process
there will be a lot of traversal. Data in nodes will be read and
compared multiple times. If you can see all nodes in this
particular subtree will be traversed once in call to
IsBinarySearchTree for 200. When we will compare value in these
nodes with 7 and then these nodes will once again be
traversed in call to IsBinarySearchTree for
150 when they will be compared with 4. They will
be traversed in call to IsSubtreeLesser. All in all these two functions
IsSubtreeLesser and IsSubtreeGreater very expensive.
For each node, we are looking at all nodes in its subtrees. There is an efficient solution in which
we do not need to compare data in a node with data in all nodes 
in its subtrees and let's see what the solution
is. What we can do is we can define a
permissible range for each node and data in that node
must be in that range we can start at the root node with a
range -infinity to infinity, because for
the root node there is no upper and lower limit and
now as we are traversing we can set a range for other nodes. When we are going left, we need to reset
the upper bound so for this node at 150, data has to
be between -infinity and seven. Data in left
child cannot be greater than data in root. If we're going right, we need to set the
lower bound for this node at 300 range would be 7 to
infinity. 7 is not included in the range. Data has
to be strictly greater than 7. For this node at 180, the range will
be -infinity to 4. For this node with value 6 lower bond will
be 4 and upperbound would be 7. Now my code will go like this. My
function IsBinarySearchTree will take two more arguements, an integer to mark lower bound or
min value and another integer to mark the upper
bound or max value and now instead of checking whether all
the elements in left subtree are lesser than the data in root and all the elements in right subtree
are greater than the date in root or not. We will simply check whetheer data in root
is in this range or not. So I'll get rid of
these two function call  IsSubtreeGreater and IsSubtreeGreater which are really  
expensive and I'll add these two conditions. Data in root
must be greater than min value and data in root must be less than max
value. These two checks will take constant time. IsSubtreeLesser and IsSubtreeGreater
functions were not taking constant time. Running time for them was proportional
to number of nodes in the subtree. Okay now these two recursive calls
should also have two more arguements. For the left child lower bound will not
change, upper bound will be to data in current
node and for the right child, upper bound will not change and lower bond will be data in current
node. This recursion looks good to me. We already have to base case written. The only thing is that the Caller of this
IsBinarySearchTree function may only want to pass the address of root
node so what we can do is instead of naming this function IsBinarySearchTree.
We can name this function as a utility function like 
IsBstUtil and we can have another function name
IsBinarySearchTree in which we can take only to address of
root node and this function can call IsBstUtil to function passing address
of root. Minimum possible value in integer
variable for -infinity and maximum possible value in integer
valuable for +infinity INT_MIN and INT_MAX
here are macros for a minimum and maximum possible
values in Int. So this is a solution using second
approach which is quite efficient. In this recursion will go to each node
once and at each node we will take constant time to see whether the data at node is in a
defined range or not and time complexity would be O(N)
where N is number of nodes in the binary tree. For the previous algorithm, time
complexity was O(N^2). One more thing, in this code I have not
handled the case that Binary search tree can
have duplicates. I am saying that elements in left subtree
must be strictly lesser and elements in right subtree must be strictly greater. I leave it for
you to see how you will allow duplicates. There is another
solution to this problem. You can perform in order traversal of
binary tree and if the tree is binary search tree
you would read the data in sorted order. In-order traversal of a binary search tree gives a sorted list. You can
do some hack while performing in order traversal and
check if you're getting the elements in sorted order or not. During the whole traversal you only need
to keep track of previously read node and at any time
data in a node that you're reading must be greater than the data in previously read
node. Try implementing this solution, it will be
interesting. Okay I'll stop here now. In cominng lessons, We will discuss some
more problems on Binary tree.  Thanks for watching.",Check if a binary tree is binary search tree or not,"See complete series on data structures here:
http://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P

In this lesson, we have written a program in C/C++ to verify whether a given binary tree is binary search tree or not. 

For practice problems and more, visit: http://www.mycodeschool.com 

Like us on Facebook: https://www.facebook.com/MyCodeSchool

Follow us on twitter: https://twitter.com/mycodeschool",mycodeschool,PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P,yEwSGhSsT0U
Undeterminedcoefficients1_Secondorderdifferentialequations_KhanAcademy-znE4Nq9NJCQ.en.csv,"We're now ready to solve
non-homogeneous second-order linear differential equations
with constant coefficients. So what does all that mean? Well, it means an equation
that looks like this. A times the second derivative
plus B times the first derivative plus C times the
function is equal to g of x. Before I show you an actual
example, I want to show you something interesting. That the general solution of
this non-homogeneous equation is actually the general solution
of the homogeneous equation plus a particular
solution. I'll explain what that
means in a second. So let's say that h
is a solution of the homogeneous equation. And that worked out well,
because, h for homogeneous. h is solution for homogeneous. There should be some shorthand
notation for homogeneous. So what does that mean? That means that A times the
second derivative of h plus B times h prime plus C times
h is equal to 0. That's what I mean when I say
that h is a solution-- and actually, let's just say that h
is the general solution for this homogeneous equation. And we know how to solve that. Take the characteristic equation
depending on how many roots it has and whether they're
real or complex. You can figure out a
general solution. And then if you have initial
conditions, you can substitute them and get the values
of the constants. Fair enough. Now let's say that I were to
say that g is a solution. Well no, I already
used g up here. Well, I don't like
using vowels. Let's say j. Let's say j is a particular
solution to this differential equation. So what does that mean? That means that A times j prime
prime plus B times j prime plus C times j
is equal to g of x. Right? So we're just defining j of x
to be a particular solution. Now what I want to show you is
that j of x plus h of x is also going to be a solution
to this original equation. And that it's the general
solution for this non-homogeneous equation. And before I just do it mathematically, what's the intuition? Well, when you substitute
h here, you get 0. When you substitute j here,
you get g of x. So when you add them together,
you're going to get 0 plus g of x here. So you're going to
get g of x here. And I'll show you
that right now. So let's say I wanted to
substitute h plus j here. And I'll do it in a
different color. A-- so the second derivative
of the sum of those two functions is going to be the
second derivative of both of them summed up-- plus B times
the first derivative of the sum plus C times the sum
of the functions. And my goal is to show that
this is equal to g of x. So what is this simplified to? Well if we take all the h terms,
we get Ah prime prime plus Bh prime plus Ch plus,
let's do all the j terms. Aj prime prime plus Bj
prime plus Cj. Well by definition of how
we defined h and j, what is this equal to? We said that h is a solution for
the homogeneous equation, or that this expression
is equal to 0. So that equals 0. And by our definition for
j, what does this equal? We said j is a particular
solution for the non-homogeneous equation, or
that this expression is equal to g of x. So when you substitute h plus
j into this differential equation on the left-hand
side. On the right-hand side, true
enough, you get g of x. So we've just shown that if you
define h and j this way, that the function, we'll call
it k of x is equal to h of x plus j of x. I'm running out of space. That is the general solution. I haven't proven that is the
most general solution, but I think you have the
intuition, right? Because the general solution
on the homogeneous one that was the most general solution,
and now we're adding a particular solution that gets
you the g of x on the right-hand side. That might be very confusing to
you, so let's actually try to do it with some
real numbers. And I think it'll make
a lot more sense. Let's say we have the
differential equations-- and I'm going to teach you a
technique now for figuring out that j in that last example. So how do you figure out that
particular solution? Let's say I have the
differential equation the second derivative of y minus 3
times the first derivative minus 4 times y is equal
to 3e to the 2x. So, the first step is we want
the general solution of the homogeneous equation. And in that example I just
did, that would have been our h of x. So we want the solution of y
prime prime minus 3y prime minus 4y is equal to 0. Take the characteristic
equation. This 4 is equal to 0. r minus 4 times r plus
1 is equal to 0. 2 roots, r could be
4 or negative 1. And so our general solution--
I'll call that h. Well, let's call
that y general. y sub g. So our general solution is equal
to-- and we've done this many times-- C1 e to the 4x
plus C2 e to the minus 1x, or minus x. Fair enough. So we solved the homogeneous
equation. So how do we get, in that last
example, a j of x that will give us a particular
solution, so on the right-hand side we get this. Well here we just have to
think a little bit. And this method is called The
Method of Undetermined Coefficients. And you have to say, well, if
I want some function where I take a second derivative and
add that or subtracted some multiple of its first derivative
minus some multiple of the function, I
get e to the 2x. That function and its
derivatives and its second derivatives must be something
of the form, something times e to the 2x. So essentially we
take a guess. We say well what does it look
like when we take the various derivatives and the functions
and we multiply multiples of it plus each other? And all of that. We would get e the to 2x or some
multiple of e to the 2x. Well, a good guess could just be
that j-- well I'll call it y particular. Our particular solution here
could be that-- and particular solution I'm using a little
different than the particular solution when we had
initial conditions. Here we can view this as
a particular solution. A solution that gives us this
on the right-hand side. So let's say that the one I pick
is some constant A times e to the 2x. If that's my guess, then the
derivative of that is equal to 2Ae the to 2x. And the second derivative of
that, of my particular solution, is equal
to 4Ae to the 2x. And now I can substitute in
here, and let's see if I can solve for A, and then I'll have
my particular solution. So the second derivitive,
that's this. So I get 4Ae to the 2x minus 3
times the first derivitive. So minus 3 times this. So that's minus 6Ae to the 2x
minus 4 times the function. So minus 4Ae to the 2x, and
all of that is going to be equal to 3e to the 2x. Well we know e to the 2x equal
0, so we can divide both sides by that. Just factor it out, really. Get rid of all of the
e's to the 2x. On the left-hand side, we
have 4A and a minus 4A. Well, those cancel out. And then lo and behold, we have
minus 6A is equal to 3. Divide both sides by 6 and get
A is equal to minus 1/2. So there. We have our particular
solution. It is equal to minus
1/2 e to the 2x. And now, like I just showed
you before I cleared the screen, our general solution
of this non-homogeneous equation is going to be our
particular solution plus the general solution to the
homogeneous equation. So we can call this
the most general solution-- I don't know. I'll just call it y. It is our general solution C1e
to the 4x plus C2e to the minus x plus our particular
solution we found. So that's minus 1/2e
to the 2x. Pretty neat. Anyway, I'll do a couple
more examples of this. And I think you'll get
the hang of it. In the next examples, we'll do
something other than an e to the 2x or an e function here. We'll try to do stuff with
polynomials and trig functions as well. I'll see you in the
next video.",Undetermined coefficients 1 | Second order differential equations | Khan Academy,"Using the method of undetermined coefficients to solve nonhomogeneous linear differential equations.

Watch the next lesson: https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/undetermined-coefficients/v/undetermined-coefficients-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Missed the previous lesson? 
https://www.khanacademy.org/math/differential-equations/second-order-differential-equations/complex-roots-characteristic-equation/v/repeated-roots-of-the-characterisitic-equations-part-2?utm_source=YT&utm_medium=Desc&utm_campaign=DifferentialEquations

Differential Equations on Khan Academy: Differential equations, separable equations, exact equations, integrating factors, homogeneous equations.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Differential Equations channel:: https://www.youtube.com/channel/UCxSQHGkaDv8UKXE0TUbsOIg?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HBkFM7Ip54d-NO6QPb3RwMI,znE4Nq9NJCQ
Basisofasubspace_Vectorsandspaces_LinearAlgebra_KhanAcademy-zntNi3-ybfQ.en.csv,"  Let's say I have
the subspace v. And this is a subspace and we
learned all about subspaces in the last video. And it's equal to the span
of some set of vectors. And I showed in that video that
the span of any set of vectors is a valid subspace.   It's going to be the span of v1,
v2, all the way, so it's going to be n vectors. So each of these are vectors. Now let me also say that all of
these vectors are linearly independent. So v1, v2, all the way to vn,
this set of vectors are linearly independent.   Now before I kind of give you
the punchline, let's review what exactly span meant. Span meant that this set, this
subspace, represents all of the possible linear
combinations of all of these vectors. So you know, I could have all of
the combinations for all of the different c's. So c1 times v1 plus c2 times v2,
all the way to cn times vn for all of the possible c's
and the real numbers. If you take all of the
possibilities of these and you put all of those vectors into
a set, that is the span and that's what we're defining
the subspace v as. Now, the definition of linear
independence meant that the only solution to c1, v1, plus
c2, v2 plus all the way to cn, vn, that the only solution to
this equally the 0 vector-- maybe I should put a little
vector sign up there-- is when all of these terms
are equal to 0. c1 is equal to c2, is equal
to all of these. All of them are equal to 0. Or kind of a more common sense
way to think of it is that you can't represent any one of these
vectors as a combination of the other vectors. Now, if both of these conditions
are true that the span of this set of vectors is
equal to this subspace or creates this subspace or it
spans this subspace, and that all of these vectors are
linearly independent, then we can say that the set of
vectors-- maybe we call this, we could call this
set of vectors s. Where we say s is equal to v1,
v2, all the way to vn. It's equal to that
set of vectors. We can then say and this
is the punchline. We can then say that S, the
set S is a basis for v. And this is the definition
I wanted to make. If something is a basis for a
set, that means that those vectors, if you take the span
of those vectors, you can construct-- you can get to any
of the vectors in that subspace and that those
vectors are linearly independent. So there's a couple of ways
to think about it. One is there's a lot of things
that might span for something. For example, if this spans for
v, then so would-- let me add another vector. Let me define another set. Let me define set T to be
all of set S: v1, v2, all the way to vn. But it also contains
this other vector. I'm going to call it the
v special vector. So it's going to be essentially,
the set S plus one more vector. Where this vector I'm just
saying is equal to v1 plus v2. So clearly, this is not a
linearly independent set. But if I had asked you what the
span of T is, the span of T is still going to be
this subspace, v. But I have this extra vector
in here that made it non-linearly independent. This set is not linearly
independent. So T is linearly dependent. So in this case, T is
not a basis for v. And I had showed you this
example because the way my head thinks about basis is,
the basis is really the minimum set of vectors that I
need, the minimum set-- and I'll write this down. This isn't a formal definition,
but I view a basis-- let me switch colors--
as really the-- let me get a good color here. As a basis is the minimum-- I'll
put it in quotes because I haven't defined that. The minimum set of vectors that
spans the space that it's a basis of, spans
the subspace.   So in this case, this is the
minimum set of vectors. And I'm not going to prove it
just yet, but you can see that, look. This set of vectors right
here, it does span the subspace, but it's clearly not
the minimum set of vectors. Because the span of this thing,
I could still remove this last vector here. I could still remove that guy
and still-- and then the span of what's left over is still
going to span my subspace v. So this guy right here
was redundant. In a basis, you have
a no redundancy. Each one of these guys is needed
to be able to construct any of the vectors in
the subspace v. Let me do some examples.   So let's just take some
vectors here. Let's say I had to find
my set of vectors, and I'll deal in r2. So let's say I have
the vector 2, 3.   Let's say I have the
other vector 7, 0. So first of all, let's just
think about the span, the span of this set of vectors. This is a set of vectors. So what's the span of S? What's all of the linear
combinations of this? Well, let's see if
it's all of r2. So if it's all of r2 that means
the linear combination of this could be-- we could
always construct anything in r2 with the linear combination
of this. So if we have c1 times 2,
3 plus c2 times 7, 0. If it is true that this spans
all of r2, then we should be able to construct-- we should
always be able find a c1 and a c2 to construct any
point in r2. And let's see if we
can show that. So we get 2c1 plus 7c2
is equal to x1. And then we get 3c1 plus 0c2. Plus 0 is equal to x2. And if we take this second
equation and divide both sides by 3 we get c1 is equal
to x2 over 3. And then if we substitute that
back into this first equation, we get 2/3-- I'm just
substituting c1 in there. So 2/3 x2. 2 times x2 over 3 is 2/3 x2.
plus 7c2 is equal to x1. And then, what can we do? We can subtract the 2/3
x2 from both sides. Let me do it right here. So we get 7c2 is equal
to x1 minus 2/3 x2. Divide both sides of this
by 7 and you get c2. Let me do it in yellow. You get c2 is equal to x1 over
7 minus 2 over 21 x2. So if you've given me any x1 and
any x2 where either x1 or x2 are a member of the real
numbers, we're talking about-- well, everything we're going to
be dealing with right now is real numbers. You give me any two
real numbers. I take my x2 divided by 3 and
I'll give you your c1. And I'll take the x1 divided
by 7 and subtract 2/21 times your x2. And I'll get you your c2. This will never break. There's no division
by any of these. You don't have to worry about
these equaling a 0. These two formulas
will always work. So you give me any x1 and any
x2, I can always find you a c1 or a c2. Which is essentially finding a
linear combination that will equal your vector. So the span of S is r2.   Now the second question is, is
are these two vectors linearly independent? And linear independence means
that the only solution to the equation c-- let me
switch colors. The only solution to the
equation c1 times the first vector plus c2 times the second
vector equaling the 0 vector, that the only solution
to this is when both of these equal 0. So let's see if that's true. We've already solved for it, so
if x1-- in this case, x1 is equal to 0 and x2
is equal to 0. This is just a special
case where I'm making them equal to 0 vector. If I want to get the 0 vector,
c1 is equal to 0/3. So c1 must be equal to 0. And c2 is equal to 0/7
minus 2/21 times 0. So c2 must also be equal to 0. So the only solution to this
was settings both of these guys equal to 0. So S is also a linearly
independent set.   So it spans r2, it's linearly
independent. So we can say definitively, that
S-- that the set S, the set of vectors S is
a basis for r2. Now, is this the only
basis for r2? Well I could draw a trivially
simple vector, set of vectors. I could do this one. Let me call it T. If I define T to be the set 1, 0
and 0, 1, does this span r2? Let's say I want to generate
the-- I want to get to x1 and x2. How can I construct that out
of these two vectors? Well, if I always just do x1
times 0, 1 plus x2 times 0, 1, that'll always give me x1, x2. So this definitely
does span r2.   Is it linearly independent? I could show it to you. If you wanted to make this
equal to the 0 vector.   If this is a 0 and this is 0,
then this has to be a 0 and this has to be a 0. And that's kind of obvious. There's no way that you could
get one of the other vectors by some multiple of
the other one. There's no way you could get a
1 here by multiplying this by anything and vice versa. So it's also linearly
independent.   And the whole reason why I
showed you this is because I wanted to show you that look,
this set T spans r2. It's also linearly independent,
so T is also a basis for r2. And I wanted to show you this
to show that if I look at a vector subspace and r2 is a
valid subspace of itself. You can verify that. But if I have a subspace, it
doesn't have just one basis. It could have multiple bases. In fact, it normally
has infinite bases. So in this case, S is a valid
basis and T is also a valid basis for r2. And actually, just so you know
what T is, the situation here, this is called a
standard basis. This is the standard basis. And this is what you're used
to dealing with in just regular calculus or
physics class. And if you remember from physics
class, this is the unit vector i and then this
is the unit vector j. And it's the standard basis for
two-dimensional Cartesian coordinates. What's useful about a basis is
that you can always-- and it's not just true of the standard
basis, is that you can represent any vector
in your subspace. You can represent any vector
in your subspace by some unique combination of the
vectors in your basis. So let me show you that. So let's say that the set v1,
v2, all the way to vn, let's say that this is a basis for--
I don't know-- just some subspace U. So this is a subspace.   So that means that these guys
are linearly independent. And also means that the span of
these guys, or all of the linear combinations of these
vectors, will get you all of the vectors, all of the possible
components, all of the difference members of U. Now what I want to show you is
each member of U can only be uniquely defined by a unique set
of-- a unique combination of these guys. Let me be clear about that. Let's say my vector a is a
member of our subspace U. That means that a can be
represented by some linear combination of these guys. These guys span U. So that means that we can
represent our vector a as being c1 times v1 plus
c2 times v2. These are vectors. All the way to cn times vn. Now I want to show you that this
is a unique combination. And to show that I'm going to
prove by contradiction. Let's say that there's
another combination. Let's say I could also represent
a by some other combination, d1 times v2 plus
d2 times v2 plus all the way to dn times vn. Now, what happens if I
subtract a from a? I'm going to get the 0 vector. Let me subtract these
two things. If I subtract a from
a, a minus a is clearly the 0 vector. It's clearly the 0 vector and
if I subtract this side from that side, what do we get? I'll do it in a different
color. We get c1 minus d1 times v1 plus
c2 minus d2 times v2, all the way to-- I'm at the point on
my board where it starts to malfunction. All the way to c-- you can't
see it. cn minus vn. It's showing up somehow.   cn minus-- no, it's
messing me up. Let me rewrite it on the left
right here where it's less likely to mess up. The 0 vector, I'll write
it like that. Is equal to c1 minus d1 times
v1 plus all the way up to cn minus dn times vn. I just subtracted the
vector by itself. Now, I told you that
these are a basis. There's two things that-- when
you say a basis, it says that the span of these guys
makes the subspace. Or the span of these guys
is the subspace. And it also tells you that
these guys are linearly independent. So if they're linearly
independent, the only solution to this equation-- this is just
a constant times v1 plus another constant times
v2, all the way to a constant times vn. The only solution to this
equation is if each of these constants equal 0. So all of those constants
have to be equal to 0. Over here before it messed up,
this has to equal 0, this has to equal 0. That was a definition of
linear independence. And we know that this is a
linearly independent set. So if all of those constants are
equal to 0, then we know that c1-- if this is equal to 0,
then c1 is equal to d1, c2 is equal to d2, all the way
to cn is equal to dn. So by the fact that it's
linearly independent, all of these-- each of these constants
have to be equal to each other. And that's our contradiction. I assume they're different, but
the linear independence forced them to be the same. So if you have a basis for some
subspace, any member of that subspace can be uniquely
determined by a unique combination of those vectors. And just to hit the point home,
I told you that this was a basis for r2. And my next question is,
and I just want to kind of backtrack a bit. If I just added another vector
here, if I just added the vector 1, 0, is S now
a basis for r2? Well no, it clearly will
continue to span r2, but this guy is redundant. This guy is in r2. And I already told you that
these two guys alone span r2. That anything in r2 can be
represented by a linear combination of these two guys. This guy is clearly in r2, so
he can be represented by a linear combination of
these two guys. So therefore, this is not a
linearly independent set. This is linearly dependent.   And because it's literally
dependent, I have redundant information here. And then this would no
longer be a basis. So in order for these to be a
basis I kind of have to create the minimum set of vectors that
can span, or the most efficient set of vectors that
can span, in this case, r2.  ",Basis of a subspace | Vectors and spaces | Linear Algebra | Khan Academy,"Understanding the definition of a basis of a subspace

Watch the next lesson: https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/dot_cross_products/v/vector-dot-product-and-vector-length?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Missed the previous lesson? 
https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/subspace_basis/v/linear-subspaces?utm_source=YT&utm_medium=Desc&utm_campaign=LinearAlgebra

Linear Algebra on Khan Academy: Have you ever wondered what the difference is between speed and velocity? Ever try to visualize in four dimensions or six or seven? Linear algebra describes things in two dimensions, but many of the concepts can be extended into three, four or more. Linear algebra implies two dimensional reasoning, however, the concepts covered in linear algebra provide the basis for multi-dimensional representations of mathematical reasoning. Matrices, vectors, vector spaces, transformations, eigenvectors/values all help us to visualize and understand multi dimensional concepts. This is an advanced course normally taken by science or engineering majors after taking at least two semesters of calculus (although calculus really isn't a prereq) so don't confuse this with regular high school algebra.

About Khan Academy: Khan Academy offers practice exercises, instructional videos, and a personalized learning dashboard that empower learners to study at their own pace in and outside of the classroom. We tackle math, science, computer programming, history, art history, economics, and more. Our math missions guide learners from kindergarten to calculus using state-of-the-art, adaptive technology that identifies strengths and learning gaps. We've also partnered with institutions like NASA, The Museum of Modern Art, The California Academy of Sciences, and MIT to offer specialized content.

For free. For everyone. Forever. #YouCanLearnAnything

Subscribe to KhanAcademyâ€™s Linear Algebra channel:: https://www.youtube.com/channel/UCGYSKl6e3HM0PP7QR35Crug?sub_confirmation=1
Subscribe to KhanAcademy: https://www.youtube.com/subscription_center?add_user=khanacademy",Khan Academy,PLSQl0a2vh4HADlSsNw81b5iS-3mmGYK7F,zntNi3-ybfQ
